<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-05-20" filename="worker_exception.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9130435" lines-covered="21" lines-valid="23" package="/exceptions" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'package:meta/meta.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '_well_known_exceptions.dart';</code>
        </line>
        <line>
            <code>import 'squadron_exception.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Exception to keep track of errors encountered in a worker.</code>
        </line>
        <line>
            <code>class WorkerException extends SquadronException {</code>
        </line>
        <line>
            <code>  /// Creates a new [WorkerException] to capture error context.</code>
        </line>
        <line hits="8">
            <code>  WorkerException(this.message, {StackTrace? stackTrace, int? command})</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      : _stackTrace = stackTrace,</code>
        </line>
        <line>
            <code>        _command = command {</code>
        </line>
        <line hits="8">
            <code>    if (_stackTrace == null) {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      try {</code>
        </line>
        <line hits="6">
            <code>        _stackTrace = StackTrace.current;</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } catch (_) {</code>
        </line>
        <line>
            <code>        // ignore...</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="4">
            <code>  }</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static const _$type = 0;</code>
        </line>
        <line>
            <code>  static const _$message = 1;</code>
        </line>
        <line>
            <code>  static const _$stackTrace = 2;</code>
        </line>
        <line>
            <code>  static const _$command = 3;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="4">
            <code>  @override</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>  List serialize() =&gt; List.unmodifiable([</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        $workerExceptionType,</code>
        </line>
        <line hits="6">
            <code>        message,</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>        _stackTrace?.toString(),</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>        _command,</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      ]);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="8">
            <code>  static WorkerException? deserialize(List data) =&gt;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>      (data[_$type] == $workerExceptionType)</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>          ? WorkerException(data[_$message],</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>              stackTrace: SquadronException.loadStackTrace(data[_$stackTrace]),</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>              command: data[_$command])</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>          : null;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Message.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  final String message;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Stack trace associated to the original exception.</code>
        </line>
        <line hits="4">
            <code>  @override</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>  StackTrace? get stackTrace =&gt; _stackTrace;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  StackTrace? _stackTrace;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Command.</code>
        </line>
        <line hits="3">
            <code>  int? get command =&gt; _command;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int? _command;</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>@internal</code>
        </line>
        <line>
            <code>extension WorkerExceptionExt on WorkerException {</code>
        </line>
        <line hits="3">
            <code>  void withCommand(int? command) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>    _command ??= command;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  void withStackTrace(StackTrace? stackTrace) {</code>
        </line>
        <line hits="0">
            <code>    _stackTrace ??= stackTrace;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
