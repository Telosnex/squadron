<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-03-02" filename="_squadron_cancelation_token.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9268293" lines-covered="38" lines-valid="41" package="/tokens" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'package:cancelation_token/cancelation_token.dart';</code>
        </line>
        <line>
            <code>import 'package:meta/meta.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../_impl/xplat/_token_id.dart';</code>
        </line>
        <line>
            <code>import '../channel.dart';</code>
        </line>
        <line>
            <code>import '../exceptions/squadron_canceled_exception.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class SquadronCancelationToken extends CancelationToken {</code>
        </line>
        <line hits="4">
            <code>  SquadronCancelationToken._(this.token, this.id) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>    token?.onCanceled.then((_) =&gt; _checkToken());</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static const _$id = 0;</code>
        </line>
        <line>
            <code>  static const _$ex = 1;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  List serialize() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    _checkToken();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>    return List.unmodifiable([</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      id,</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>      exception?.serialize(),</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    ]);</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="8">
            <code>  static SquadronCancelationToken? deserialize(List? props) {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (props == null) return null;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final id = props[_$id];</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    final ex = SquadronCanceledException.deserialize(props[_$ex]);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final token = SquadronCancelationToken._(null, id);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>    if (ex != null) {</code>
        </line>
        <line hits="2">
            <code>      token._exception = ex;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      token._completer.complete(ex);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    return token;</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  // cancelation token ID</code>
        </line>
        <line>
            <code>  final String id;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  // reference to the real cancelation token (only set on the caller side, will</code>
        </line>
        <line>
            <code>  // be `null` in worker threads)</code>
        </line>
        <line>
            <code>  final CancelationToken? token;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>  SquadronCanceledException? get exception =&gt; _exception;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  SquadronCanceledException? _exception;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void ensureStarted() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>    token?.ensureStarted();</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>  Future&lt;CanceledException&gt; get onCanceled =&gt; _completer.future;</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  final _completer = Completer&lt;CanceledException&gt;();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="4">
            <code>  void _checkToken() {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>    final ex = token?.exception;</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (ex != null) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>      _exception ??= SquadronCanceledException.from(id, ex);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>      if (!_completer.isCompleted) {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>        _completer.complete(ex);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>@internal</code>
        </line>
        <line>
            <code>extension SquadronCancelationTokenExt on Channel {</code>
        </line>
        <line hits="14">
            <code>  SquadronCancelationToken? wrap(CancelationToken? token) {</code>
            <hit count="14" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>    if (token == null) return null;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    if (token is SquadronCancelationToken) return token;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    final tok =</code>
        </line>
        <line hits="10">
            <code>        SquadronCancelationToken._(token, '${TokenId.next()}@$hashCode');</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    tok._checkToken();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    return tok;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>  }</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
