<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-09-08" filename="cast_converter.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.85897434" lines-covered="67" lines-valid="78" package="/converters" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:typed_data';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'converter.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class CastConverter implements Converter {</code>
        </line>
        <line hits="22">
            <code>  const CastConverter();</code>
            <hit count="22" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static const instance = CastConverter();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="8">
            <code>  @override</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>  Cast&lt;T&gt; v&lt;T&gt;() =&gt; Converter.identity&lt;T&gt;;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>  Cast&lt;T?&gt; nv&lt;T&gt;() =&gt; Converter.identity&lt;T?&gt;;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  static ByteBuffer? _buffer&lt;T&gt;(dynamic x) =&gt; (x == null)</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      ? null</code>
        </line>
        <line hits="2">
            <code>      : (x is ByteBuffer)</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          ? x</code>
        </line>
        <line hits="1">
            <code>          : ((x as T) as TypedData).buffer;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  static Cast&lt;T&gt; _td&lt;T&gt;(T Function(ByteBuffer) b) =&gt;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      (x) =&gt; Converter.tryCast&lt;T&gt;(x) ?? b(_buffer&lt;T&gt;(x)!);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="3">
            <code>  static Cast&lt;T?&gt; _ntd&lt;T&gt;(T Function(ByteBuffer) b) =&gt; (x) =&gt;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      (x == null) ? null : (Converter.tryCast&lt;T&gt;(x) ?? b(_buffer&lt;T&gt;(x)!));</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="4">
            <code>  static final Map&lt;Type, Cast&gt; _typeDataCastors = {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    ByteData: _td&lt;ByteData&gt;(ByteData.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Uint8ClampedList: _td&lt;Uint8ClampedList&gt;(Uint8ClampedList.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Uint8List: _td&lt;Uint8List&gt;(Uint8List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Int8List: _td&lt;Int8List&gt;(Int8List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Uint16List: _td&lt;Uint16List&gt;(Uint16List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Int16List: _td&lt;Int16List&gt;(Int16List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Uint32List: _td&lt;Uint32List&gt;(Uint32List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Int32List: _td&lt;Int32List&gt;(Int32List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Int32x4List: _td&lt;Int32x4List&gt;(Int32x4List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Uint64List: _td&lt;Uint64List&gt;(Uint64List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Int64List: _td&lt;Int64List&gt;(Int64List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Float32List: _td&lt;Float32List&gt;(Float32List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Float32x4List: _td&lt;Float32x4List&gt;(Float32x4List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Float64List: _td&lt;Float64List&gt;(Float64List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Float64x2List: _td&lt;Float64x2List&gt;(Float64x2List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  };</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="4">
            <code>  static final Map&lt;Type, Cast&gt; _nullableTypeDataCastors = {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    ByteData: _ntd&lt;ByteData&gt;(ByteData.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Uint8ClampedList: _ntd&lt;Uint8ClampedList&gt;(Uint8ClampedList.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Uint8List: _ntd&lt;Uint8List&gt;(Uint8List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Int8List: _ntd&lt;Int8List&gt;(Int8List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Uint16List: _ntd&lt;Uint16List&gt;(Uint16List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Int16List: _ntd&lt;Int16List&gt;(Int16List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Uint32List: _ntd&lt;Uint32List&gt;(Uint32List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Int32List: _ntd&lt;Int32List&gt;(Int32List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Int32x4List: _ntd&lt;Int32x4List&gt;(Int32x4List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Uint64List: _ntd&lt;Uint64List&gt;(Uint64List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Int64List: _ntd&lt;Int64List&gt;(Int64List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Float32List: _ntd&lt;Float32List&gt;(Float32List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Float32x4List: _ntd&lt;Float32x4List&gt;(Float32x4List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Float64List: _ntd&lt;Float64List&gt;(Float64List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Float64x2List: _ntd&lt;Float64x2List&gt;(Float64x2List.view),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  };</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  Cast&lt;T&gt; td&lt;T&gt;() =&gt; _typeDataCastors[T] as Cast&lt;T&gt;;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  Cast&lt;T?&gt; ntd&lt;T&gt;() =&gt; _nullableTypeDataCastors[T] as Cast&lt;T?&gt;;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Cast&lt;Iterable&lt;T&gt;&gt; i&lt;T&gt;([Cast&lt;T&gt;? cast]) =&gt; Converter.isIdentity&lt;T&gt;(cast)</code>
        </line>
        <line hits="0">
            <code>      ? ((x) =&gt; (x as Iterable).cast&lt;T&gt;())</code>
        </line>
        <line hits="0">
            <code>      : ((x) =&gt; (x as Iterable).map&lt;T&gt;(cast!));</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Cast&lt;Iterable&lt;T?&gt;&gt; ni&lt;T&gt;([Cast&lt;T?&gt;? cast]) =&gt; Converter.isIdentity&lt;T?&gt;(cast)</code>
        </line>
        <line hits="0">
            <code>      ? ((x) =&gt; (x as Iterable).cast&lt;T?&gt;())</code>
        </line>
        <line hits="0">
            <code>      : ((x) =&gt; (x as Iterable).map&lt;T?&gt;(cast!));</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  Cast&lt;List&lt;T&gt;&gt; l&lt;T&gt;([Cast&lt;T&gt;? cast]) =&gt; Converter.isIdentity&lt;T&gt;(cast)</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      ? ((x) =&gt; (x as List).cast&lt;T&gt;())</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      : ((x) =&gt; (x as List).map&lt;T&gt;(cast!).toList());</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  Cast&lt;List&lt;T?&gt;&gt; nl&lt;T&gt;([Cast&lt;T?&gt;? cast]) =&gt; Converter.isIdentity&lt;T?&gt;(cast)</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      ? ((x) =&gt; (x as List).cast&lt;T?&gt;())</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      : ((x) =&gt; (x as List).map&lt;T?&gt;(cast!).toList());</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="3">
            <code>  @override</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  Cast&lt;Map&lt;K, V&gt;&gt; m&lt;K, V&gt;({Cast&lt;K&gt;? kcast, Cast&lt;V&gt;? vcast}) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    if (Converter.isIdentity&lt;K&gt;(kcast) &amp;&amp; Converter.isIdentity&lt;V&gt;(vcast)) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      return ((x) =&gt; (x as Map).cast&lt;K, V&gt;());</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="2">
            <code>      final key = kcast ?? v&lt;K&gt;(), value = vcast ?? v&lt;V&gt;();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>      return ((x) =&gt; (x as Map).map((k, v) =&gt; MapEntry(key(k), value(v))));</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="3">
            <code>  }</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  Cast&lt;Map&lt;K, V?&gt;&gt; nm&lt;K, V&gt;({Cast&lt;K&gt;? kcast, Cast&lt;V?&gt;? vcast}) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (Converter.isIdentity&lt;K&gt;(kcast) &amp;&amp; Converter.isIdentity&lt;V?&gt;(vcast)) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      return ((x) =&gt; (x as Map).cast&lt;K, V?&gt;());</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="0">
            <code>      final key = kcast ?? v&lt;K&gt;(), value = vcast ?? v&lt;V&gt;();</code>
        </line>
        <line hits="0">
            <code>      return ((x) =&gt; (x as Map).map((k, v) =&gt; MapEntry(key(k), value(v))));</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
