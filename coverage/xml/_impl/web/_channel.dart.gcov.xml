<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-08-28" filename="_channel.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.84705883" lines-covered="72" lines-valid="85" package="/_impl/web" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code>import 'dart:js_interop';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'package:logger/logger.dart';</code>
        </line>
        <line>
            <code>import 'package:web/web.dart' as web;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../../channel.dart';</code>
        </line>
        <line>
            <code>import '../../exceptions/exception_manager.dart';</code>
        </line>
        <line>
            <code>import '../../exceptions/squadron_error.dart';</code>
        </line>
        <line>
            <code>import '../../exceptions/squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../../tokens/_squadron_cancelation_token.dart';</code>
        </line>
        <line>
            <code>import '../../typedefs.dart';</code>
        </line>
        <line>
            <code>import '../../worker/worker_channel.dart';</code>
        </line>
        <line>
            <code>import '../../worker/worker_request.dart';</code>
        </line>
        <line>
            <code>import '../../worker/worker_response.dart';</code>
        </line>
        <line>
            <code>import '../xplat/_disconnected_channel.dart';</code>
        </line>
        <line>
            <code>import '../xplat/_result_stream.dart';</code>
        </line>
        <line>
            <code>import '../xplat/_transferables.dart';</code>
        </line>
        <line>
            <code>import '_event_buffer.dart';</code>
        </line>
        <line>
            <code>import '_patch.dart';</code>
        </line>
        <line>
            <code>import '_uri_checker.dart';</code>
        </line>
        <line>
            <code>import 'entry_point_uri.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>part '_channel_impl.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Stub implementations</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Starts a [web.Worker] using the [entryPoint] and sends a start</code>
        </line>
        <line>
            <code>/// [WorkerRequest] with [startArguments]. The future completes after the</code>
        </line>
        <line>
            <code>/// [web.Worker]'s main program has provided the [web.MessagePort] via</code>
        </line>
        <line>
            <code>/// [WorkerChannel.connect].</code>
        </line>
        <line hits="10">
            <code>Future&lt;Channel&gt; openChannel(</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  EntryPoint entryPoint,</code>
        </line>
        <line>
            <code>  ExceptionManager exceptionManager,</code>
        </line>
        <line>
            <code>  Logger? logger,</code>
        </line>
        <line>
            <code>  List startArguments, [</code>
        </line>
        <line>
            <code>  PlatformThreadHook? hook,</code>
        </line>
        <line>
            <code>]) async {</code>
        </line>
        <line hits="10">
            <code>  final completer = Completer&lt;Channel&gt;();</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  final ready = Completer&lt;bool&gt;();</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final com = web.MessageChannel();</code>
        </line>
        <line hits="10">
            <code>  final webEntryPoint = EntryPointUri.from(entryPoint);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>  late web.Worker worker;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void fail(SquadronException ex) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (!ready.isCompleted) ready.completeError(ex);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (!completer.isCompleted) completer.completeError(ex);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>  void success(Channel channel) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    if (!ready.isCompleted) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create('Invalid state: worker is not ready');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="9">
            <code>    if (!completer.isCompleted) completer.complete(channel);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>  }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  try {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    worker = web.Worker(webEntryPoint.uri.toJS);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    setDbgId(worker, '${webEntryPoint.uri}#');</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>    worker.onerror = (web.ErrorEvent? e) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      dynamic err = getErrorEventError(e);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      SquadronException? error;</code>
        </line>
        <line hits="1">
            <code>      if (err is List) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>        error = exceptionManager.deserialize(err);</code>
        </line>
        <line hits="1">
            <code>      } else if (err != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>        error = SquadronException.from(err);</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="1">
            <code>      error ??= SquadronErrorExt.create('Unexpected error');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      logger?.e(() =&gt; 'Connection to Web Worker failed: $error');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      fail(error);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>      UriChecker.exists(entryPoint).then((found) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        try {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          String msg;</code>
        </line>
        <line hits="1">
            <code>          if (err != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>            msg =</code>
        </line>
        <line hits="1">
            <code>                '$entryPoint =&gt; ${err.runtimeType} $err [${err.filename}(${err.lineno})]';</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          } else {</code>
        </line>
        <line hits="1">
            <code>            msg = '$entryPoint: ${err.runtimeType} $err';</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          }</code>
        </line>
        <line hits="1">
            <code>          if (!found) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>            msg = '!! WARNING: it seems no Web Worker lives at $msg';</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          }</code>
        </line>
        <line hits="1">
            <code>          logger?.e(() =&gt; 'Unhandled error from Web Worker: $msg.');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          if (!found) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>            logger?.e(() =&gt; 'It seems no Web Worker lives at $entryPoint.');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          }</code>
        </line>
        <line>
            <code>        } catch (_) {</code>
        </line>
        <line hits="2">
            <code>          logger?.e(() =&gt; 'Unhandled error from Web Worker: $error.');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="1">
            <code>      });</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    }.toJS;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    worker.onmessageerror = worker.onerror;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>    final disconnected = DisconnectedChannel(exceptionManager, logger);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>    worker.onmessage = (web.MessageEvent? e) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      try {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        final response = WorkerResponseExt.from(getMessageEventData(e) as List);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        if (!response.unwrapInPlace(disconnected)) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>          return;</code>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>        final error = response.error;</code>
        </line>
        <line hits="9">
            <code>        if (error != null) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          logger?.e(() =&gt; 'Connection to Web Worker failed: $error');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>          fail(error);</code>
        </line>
        <line hits="9">
            <code>        } else if (!ready.isCompleted) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          logger?.t('Web Worker is ready');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>          ready.complete(response.result);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="0">
            <code>      } catch (ex, st) {</code>
        </line>
        <line hits="0">
            <code>        return fail(SquadronException.from(ex, st));</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="10">
            <code>    }.toJS;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="10">
            <code>    final res = await ready.future;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    if (!res) {</code>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create('Web Worker is not ready');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>    final startRequest = WorkerRequest.start(com.port2, startArguments);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>    com.port1.onmessage = (web.MessageEvent e) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      final response = WorkerResponseExt.from(getMessageEventData(e) as List);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      if (!response.unwrapInPlace(disconnected)) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>        return;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>      final error = response.error;</code>
        </line>
        <line hits="9">
            <code>      if (error != null) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        logger?.e(() =&gt; 'Connection to Web Worker failed: $error');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        fail(error);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      } else if (!completer.isCompleted) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        logger?.t('Connected to Web Worker');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        success(_WebChannel._(response.result, logger, exceptionManager));</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="2">
            <code>        logger?.d(() =&gt; 'Unexpected response: $response');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="9">
            <code>    }.toJS;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>    try {</code>
        </line>
        <line hits="9">
            <code>      final data = startRequest.wrapInPlace();</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      final msg = data.jsify();</code>
        </line>
        <line hits="9">
            <code>      final transfer = Transferables.get(data);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      if (transfer == null || transfer.isEmpty) {</code>
        </line>
        <line>
            <code>        worker.postMessage(msg);</code>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="9">
            <code>        final jsTransfer = transfer.jsify() as JSArray;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        worker.postMessage(msg, jsTransfer);</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="0">
            <code>    } catch (ex, st) {</code>
        </line>
        <line hits="2">
            <code>      logger?.e(() =&gt; 'Failed to post connection request $startRequest: $ex');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create(</code>
        </line>
        <line hits="0">
            <code>          'Failed to post connection request: $ex', st);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>    final channel = await completer.future;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    await hook?.call(worker);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>    logger?.t('Created Web Worker for $entryPoint');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    return channel;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  } catch (ex, st) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    ready.future.ignore();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    completer.future.ignore();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    logger?.t('Failed to create Web Worker for $entryPoint');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    com.port1.close();</code>
        </line>
        <line>
            <code>    com.port2.close();</code>
        </line>
        <line>
            <code>    worker.terminate();</code>
        </line>
        <line hits="2">
            <code>    throw SquadronException.from(ex, st);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  } finally {</code>
        </line>
        <line>
            <code>    webEntryPoint.release();</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line hits="10">
            <code>}</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Creates a [_WebChannel] from a [web.MessagePort].</code>
        </line>
        <line>
            <code>Channel? deserialize(PlatformChannel? channelInfo, Logger? logger,</code>
        </line>
        <line>
            <code>        ExceptionManager exceptionManager) =&gt;</code>
        </line>
        <line>
            <code>    (channelInfo == null)</code>
        </line>
        <line>
            <code>        ? null</code>
        </line>
        <line>
            <code>        : _WebChannel._(channelInfo, logger, exceptionManager);</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
