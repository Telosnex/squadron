<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-08-31" filename="_channel_impl.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.81294966" lines-covered="113" lines-valid="139" package="/_impl/web" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>part of '_channel.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [Channel] implementation for the JavaScript world.</code>
        </line>
        <line>
            <code>class _WebChannel implements Channel {</code>
        </line>
        <line hits="9">
            <code>  _WebChannel._(this._sendPort, this.logger, this.exceptionManager);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [web.MessagePort] to communicate with the [web.Worker] if the channel is owned by the worker owner. Otherwise,</code>
        </line>
        <line>
            <code>  /// [web.MessagePort] to return values to the client.</code>
        </line>
        <line>
            <code>  final web.MessagePort _sendPort;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  final ExceptionManager exceptionManager;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  final Logger? logger;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  bool _closed = false;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] serialization in JavaScript world returns the [web.MessagePort].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  PlatformChannel serialize() =&gt; _sendPort;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] sharing in JavaScript world returns a [_WebForwardChannel].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="3">
            <code>  Channel share() =&gt; _WebForwardChannel._(</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _sendPort, web.MessageChannel(), logger, exceptionManager);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>  void _postRequest(WorkerRequest req) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    if (_closed) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create('Channel is closed');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>    try {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      req.cancelToken?.ensureStarted();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      final data = req.wrapInPlace();</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      final msg = data.jsify();</code>
        </line>
        <line hits="9">
            <code>      final transfer = Transferables.get([req.channelInfo]);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      if (transfer == null || transfer.isEmpty) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        _sendPort.postMessage(msg);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="8">
            <code>        final jsTransfer = transfer.jsify() as JSArray;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        _sendPort.postMessage(msg, jsTransfer);</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="1">
            <code>    } catch (ex, st) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      logger?.e(() =&gt; 'Failed to post request $req: $ex');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      throw SquadronErrorExt.create('Failed to post request: $ex', st);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="9">
            <code>  }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void _inspectAndPostRequest(WorkerRequest req) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (_closed) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create('Channel is closed');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    req.cancelToken?.ensureStarted();</code>
        </line>
        <line>
            <code>    req.cancelToken?.throwIfCanceled();</code>
        </line>
        <line hits="1">
            <code>    try {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      final data = req.wrapInPlace();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      final msg = data.jsify();</code>
        </line>
        <line hits="1">
            <code>      final transfer = Transferables.get(data);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (transfer == null || transfer.isEmpty) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        _sendPort.postMessage(msg);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="1">
            <code>        final jsTransfer = transfer.jsify() as JSArray;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        _sendPort.postMessage(msg, jsTransfer);</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="1">
            <code>    } catch (ex, st) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      logger?.e(() =&gt; 'Failed to post request $req: $ex');</code>
        </line>
        <line hits="1">
            <code>      throw SquadronErrorExt.create('Failed to post request: $ex', st);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a termination [WorkerRequest] to the [web.Worker].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="9">
            <code>  FutureOr close() {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    if (!_closed) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      _postRequest(WorkerRequest.stop());</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      _closed = true;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="9">
            <code>  }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a close stream [WorkerRequest] to the [web.Worker].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  FutureOr cancelStream(int streamId) {</code>
        </line>
        <line hits="3">
            <code>    if (!_closed) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _postRequest(WorkerRequest.cancelStream(streamId));</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a cancel token [WorkerRequest] to the [web.Worker].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="2">
            <code>  FutureOr cancelToken(SquadronCancelationToken? token) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (token != null &amp;&amp; !_closed) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _postRequest(WorkerRequest.cancel(token));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>  Stream _getResponseStream(</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    web.MessageChannel com,</code>
        </line>
        <line>
            <code>    WorkerRequest req,</code>
        </line>
        <line>
            <code>    void Function(WorkerRequest) post, {</code>
        </line>
        <line>
            <code>    required bool streaming,</code>
        </line>
        <line>
            <code>  }) {</code>
        </line>
        <line hits="9">
            <code>    final command = req.command;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>    // return a stream of responses</code>
        </line>
        <line hits="9">
            <code>    Stream&lt;WorkerResponse&gt; $sendRequest() {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      late final StreamController&lt;WorkerResponse&gt; controller;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>      void $forwardMessage(WorkerResponse msg) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        if (!controller.isClosed) controller.add(msg);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>      void $forwardError(Object error, StackTrace? st) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        if (!controller.isClosed) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          controller.addError(SquadronException.from(error, st, command));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="2">
            <code>      }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>      void $processBufferedItem(BufferedItem&lt;WorkerResponse&gt; item) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        if (item.item != null) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          $forwardMessage(item.item!);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        } else {</code>
        </line>
        <line hits="0">
            <code>          $forwardError(item.err!, item.st);</code>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="2">
            <code>      }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>      final buffer = EventBuffer($processBufferedItem);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>      Future&lt;void&gt; $close() async {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        com.port1.close();</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        com.port2.close();</code>
        </line>
        <line hits="9">
            <code>        if (!controller.isClosed) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>          controller.close();</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="9">
            <code>      }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>      controller = StreamController(</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        onListen: () {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          // do nothing if the controller is closed already</code>
        </line>
        <line hits="9">
            <code>          if (controller.isClosed) return;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>          // bind the controller</code>
        </line>
        <line hits="9">
            <code>          com.port1.onmessageerror = (web.ErrorEvent e) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>            final ex = SquadronException.from(</code>
        </line>
        <line hits="0">
            <code>              getErrorEventError(e) ??</code>
        </line>
        <line hits="0">
            <code>                  getErrorEventMessage(e) ??</code>
        </line>
        <line hits="0">
            <code>                  'Unknown error',</code>
        </line>
        <line>
            <code>              null,</code>
        </line>
        <line hits="0">
            <code>              command,</code>
        </line>
        <line>
            <code>            );</code>
        </line>
        <line hits="0">
            <code>            if (buffer.isActive) {</code>
        </line>
        <line hits="0">
            <code>              buffer.addError(ex, null);</code>
        </line>
        <line>
            <code>            } else {</code>
        </line>
        <line hits="0">
            <code>              $forwardError(ex, null);</code>
        </line>
        <line>
            <code>            }</code>
        </line>
        <line hits="9">
            <code>          }.toJS;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>          com.port1.onmessage = (web.MessageEvent e) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>            final res = WorkerResponseExt.from(getMessageEventData(e) as List);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>            if (buffer.isActive) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>              buffer.add(res);</code>
        </line>
        <line>
            <code>            } else {</code>
        </line>
        <line hits="9">
            <code>              $forwardMessage(res);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>            }</code>
        </line>
        <line hits="9">
            <code>          }.toJS;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>          // send the request</code>
        </line>
        <line hits="2">
            <code>          try {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>            post(req);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          } catch (ex, st) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>            if (buffer.isActive) {</code>
        </line>
        <line hits="0">
            <code>              buffer.addError(ex, st);</code>
        </line>
        <line>
            <code>              // TODO: since this instance is paused, the controller should probably</code>
        </line>
        <line>
            <code>              // not be closed straight away</code>
        </line>
        <line hits="2">
            <code>              $close();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>            } else {</code>
        </line>
        <line hits="2">
            <code>              $forwardError(ex, st);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>              $close();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>            }</code>
        </line>
        <line>
            <code>          }</code>
        </line>
        <line hits="9">
            <code>        },</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        onPause: buffer.pause,</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        onResume: buffer.resume,</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        onCancel: $close,</code>
        </line>
        <line>
            <code>      );</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>      return controller.stream;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>    // return a stream of decoded responses</code>
        </line>
        <line hits="9">
            <code>    return ResultStream(this, req, $sendRequest, streaming).stream;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>  }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a [web.MessageChannel] and a [WorkerRequest] and sends it to the [web.Worker]. This method expects a</code>
        </line>
        <line>
            <code>  /// single value from the [web.Worker].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="8">
            <code>  Future&lt;T&gt; sendRequest&lt;T&gt;(</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    int command,</code>
        </line>
        <line>
            <code>    List args, {</code>
        </line>
        <line>
            <code>    SquadronCancelationToken? token,</code>
        </line>
        <line>
            <code>    bool inspectRequest = false,</code>
        </line>
        <line>
            <code>    bool inspectResponse = false,</code>
        </line>
        <line>
            <code>  }) {</code>
        </line>
        <line>
            <code>    final completer = Completer&lt;T&gt;();</code>
        </line>
        <line hits="8">
            <code>    late final StreamSubscription&lt;T&gt; sub;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="8">
            <code>    void $success(T data) async {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>      await sub.cancel();</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>      if (!completer.isCompleted) completer.complete(data);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>    }</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="8">
            <code>    void $fail(Object ex, [StackTrace? st]) async {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      await sub.cancel();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      if (!completer.isCompleted) completer.completeError(ex, st);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    }</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="8">
            <code>    void $done() async {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      await sub.cancel();</code>
        </line>
        <line hits="0">
            <code>      if (!completer.isCompleted) {</code>
        </line>
        <line hits="0">
            <code>        $fail(WorkerException('No response from worker', null, command));</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="0">
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>    final com = web.MessageChannel();</code>
        </line>
        <line>
            <code>    final req = WorkerRequest.userCommand(</code>
        </line>
        <line>
            <code>        com.port2, command, args, token, inspectResponse);</code>
        </line>
        <line hits="8">
            <code>    final post = inspectRequest ? _inspectAndPostRequest : _postRequest;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>    sub = _getResponseStream(com, req, post, streaming: false)</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        .cast&lt;</code>
        </line>
        <line>
            <code>            T&gt;() // TODO channel operations should return dynamic because T maybe a user-type (not transferable), or too complex (eg List&lt;List&gt;, Map&lt;K, List&gt;...)</code>
        </line>
        <line hits="8">
            <code>        .listen($success, onError: $fail, onDone: $done);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>    return completer.future;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>  }</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a [web.MessageChannel] and a [WorkerRequest] and sends it to the [web.Worker]. This method expects a</code>
        </line>
        <line>
            <code>  /// stream of values from the [web.Worker]. The [web.Worker] must send a [WorkerResponse.endOfStream] to close</code>
        </line>
        <line>
            <code>  /// the [Stream].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="5">
            <code>  Stream&lt;T&gt; sendStreamingRequest&lt;T&gt;(</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    int command,</code>
        </line>
        <line>
            <code>    List args, {</code>
        </line>
        <line>
            <code>    SquadronCancelationToken? token,</code>
        </line>
        <line>
            <code>    bool inspectRequest = false,</code>
        </line>
        <line>
            <code>    bool inspectResponse = false,</code>
        </line>
        <line>
            <code>  }) {</code>
        </line>
        <line>
            <code>    final com = web.MessageChannel();</code>
        </line>
        <line>
            <code>    final req = WorkerRequest.userCommand(</code>
        </line>
        <line>
            <code>        com.port2, command, args, token, inspectResponse);</code>
        </line>
        <line hits="5">
            <code>    final post = inspectRequest ? _inspectAndPostRequest : _postRequest;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    return _getResponseStream(com, req, post, streaming: true).cast&lt;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        T&gt;(); // TODO channel operations should return dynamic because T maybe a user-type (not transferable), or too complex (eg List&lt;List&gt;, Map&lt;K, List&gt;...)</code>
        </line>
        <line hits="5">
            <code>  }</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [Channel] used to communicate between [web.Worker]s. Creates a</code>
        </line>
        <line>
            <code>/// [web.MessageChannel] to receive commands on</code>
        </line>
        <line>
            <code>/// [web.MessageChannel.port2] and forwards them to the worker's [web.MessagePort] via [web.MessageChannel.port1].</code>
        </line>
        <line>
            <code>class _WebForwardChannel extends _WebChannel {</code>
        </line>
        <line>
            <code>  /// [_remote] is the worker's [web.MessagePort], [_com] is the intermediate</code>
        </line>
        <line>
            <code>  /// message channel</code>
        </line>
        <line hits="3">
            <code>  _WebForwardChannel._(this._remote, this._com, Logger? logger,</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      ExceptionManager exceptionManager)</code>
        </line>
        <line>
            <code>      : super._(_com.port2, logger, exceptionManager) {</code>
        </line>
        <line hits="3">
            <code>    _com.port1.onmessage = _forward.toJS;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [web.MessagePort] to the worker.</code>
        </line>
        <line>
            <code>  final web.MessagePort _remote;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [web.MessageChannel] used for forwarding messages.</code>
        </line>
        <line>
            <code>  final web.MessageChannel _com;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Forwards [web.MessageEvent.data] to the worker.</code>
        </line>
        <line hits="3">
            <code>  void _forward(web.MessageEvent e) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (_closed) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create('Channel is closed');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    try {</code>
        </line>
        <line hits="3">
            <code>      final data = getMessageEventData(e) as List;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      final transfer = Transferables.get(data);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      if (transfer == null || transfer.isEmpty) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        _remote.postMessage(e.data);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="3">
            <code>        final jsTransfer = transfer.jsify() as JSArray;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        _remote.postMessage(e.data, jsTransfer);</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="0">
            <code>    } catch (ex, st) {</code>
        </line>
        <line hits="1">
            <code>      logger?.e(() =&gt; 'Failed to post request $e: $ex');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create('Failed to post request: $ex', st);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="3">
            <code>  }</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Closes this [Channel], effectively stopping message forwarding.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void close() {</code>
        </line>
        <line hits="0">
            <code>    if (!_closed) {</code>
        </line>
        <line hits="0">
            <code>      _com.port1.close();</code>
        </line>
        <line hits="0">
            <code>      _closed = true;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
