<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-03-02" filename="_transferables.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.83870965" lines-covered="26" lines-valid="31" package="/_impl/browser" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import '../../exceptions/squadron_error.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class Transferables {</code>
        </line>
        <line>
            <code>  const Transferables._();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="7">
            <code>  static Iterable&lt;Object&gt; get(List args) =&gt; _get(args, &lt;Object&gt;{});</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="7">
            <code>  static bool _isBaseType(Object? data) =&gt;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>      (data == null || data is String || data is num || data is bool);</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static bool _isListOfBaseType(Object? data) =&gt;</code>
        </line>
        <line hits="7">
            <code>      (data is List&lt;String&gt; || data is List&lt;num&gt; || data is List&lt;bool&gt;);</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="7">
            <code>  static bool _isSafeForTransfer(Object? data) {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>    if (_isBaseType(data)) return true;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>    if (_isListOfBaseType(data)) return true;</code>
        </line>
        <line hits="7">
            <code>    if (data is List &amp;&amp; data.every(_isSafeForTransfer)) return true;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>    return false;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>  }</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="7">
            <code>  static bool _isNotSafeForTransfer(Object? data) =&gt; !_isSafeForTransfer(data);</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Excludes base type values from [list].</code>
        </line>
        <line hits="7">
            <code>  static Iterable&lt;Object&gt; _getObjects(Iterable list, Set&lt;Object&gt; seen) sync* {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>    for (var o in list.where(_isNotSafeForTransfer)) {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>      if (!seen.contains(o)) {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>        seen.add(o);</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>        yield o as Object;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="7">
            <code>  }</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static void _checkKeys(Map data) {</code>
        </line>
        <line hits="0">
            <code>    if (!data.keys.every(_isBaseType)) {</code>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create(</code>
        </line>
        <line hits="0">
            <code>          'Map keys must be strings, numbers or booleans.', StackTrace.current);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Yields objects contained in [message]. Used to identify non-base type objects and provide</code>
        </line>
        <line>
            <code>  /// them to [Worker.postMessage]. [Worker.postMessage] will clone these objects. The code makes</code>
        </line>
        <line>
            <code>  /// no effort to ensure these objects really are transferable.</code>
        </line>
        <line hits="7">
            <code>  static Iterable&lt;Object&gt; _get(List message, Set&lt;Object&gt; seen) sync* {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>    if (_isSafeForTransfer(message)) return;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>    final toBeInspected = _getObjects(message, seen).toList();</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    var i = 0;</code>
        </line>
        <line hits="7">
            <code>    while (i &lt; toBeInspected.length) {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>      final arg = toBeInspected[i++];</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>      if (arg is Map) {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        _checkKeys(arg);</code>
        </line>
        <line hits="0">
            <code>        toBeInspected.addAll(_getObjects(arg.values, seen));</code>
        </line>
        <line hits="7">
            <code>      } else if (arg is Iterable) {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>        toBeInspected.addAll(_getObjects(arg, seen));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="7">
            <code>        yield arg;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="7">
            <code>  }</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
