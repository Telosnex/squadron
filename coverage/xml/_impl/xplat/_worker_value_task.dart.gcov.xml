<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-05-25" filename="_worker_value_task.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="30" lines-valid="30" package="/_impl/xplat" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../../exceptions/squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../../pool/value_task.dart';</code>
        </line>
        <line>
            <code>import '../../stats/perf_counter.dart';</code>
        </line>
        <line>
            <code>import '../../worker/worker.dart';</code>
        </line>
        <line>
            <code>import '_worker_task.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class WorkerValueTask&lt;T, W extends Worker&gt; extends WorkerTask&lt;T, W&gt;</code>
        </line>
        <line>
            <code>    implements ValueTask&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// Creates a new [ValueTask].</code>
        </line>
        <line hits="9">
            <code>  WorkerValueTask(this._computer, PerfCounter? counter) : super(counter);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final Future&lt;T&gt; Function(W worker) _computer;</code>
        </line>
        <line>
            <code>  final _completer = Completer&lt;T&gt;();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="3">
            <code>  @override</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>  Future&lt;T&gt; get value =&gt; _completer.future;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="4">
            <code>  void _completeWithError(Object exception, StackTrace stackTrace) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    final ex = (exception is SquadronException)</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        ? exception</code>
        </line>
        <line hits="2">
            <code>        : SquadronException.from(exception, stackTrace);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>    wrapUp(() {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>      if (!_completer.isCompleted) {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>        _completer.completeError(ex, ex.stackTrace);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="2">
            <code>    }, false);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="6">
            <code>  void _completeWithResult(dynamic data) {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    wrapUp(() {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      if (!_completer.isCompleted) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        _completer.complete(data);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="3">
            <code>    }, true);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  }</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void cancel([String? message]) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    super.cancel(message);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>    if (!isRunning &amp;&amp; !isFinished) {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      _completeWithError(</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>        canceledException!,</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>        canceledException?.stackTrace ?? StackTrace.current,</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      );</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="3">
            <code>  @override</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  Future&lt;void&gt; run(W worker) =&gt; super</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>      .run(worker)</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="21">
            <code>      .then((_) =&gt; _computer(worker).then(_completeWithResult))</code>
            <hit count="21" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      .catchError(_completeWithError);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
