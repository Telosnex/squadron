<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-02-27" filename="_value_wrapper.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.6923077" lines-covered="18" lines-valid="26" package="/_impl/xplat" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'package:logger/logger.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../../exceptions/exception_manager.dart';</code>
        </line>
        <line>
            <code>import '../../exceptions/squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../../tokens/_squadron_cancelation_token.dart';</code>
        </line>
        <line>
            <code>import '../../worker/worker_channel.dart';</code>
        </line>
        <line>
            <code>import '../../worker/worker_request.dart';</code>
        </line>
        <line>
            <code>import '../../worker/worker_response.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Wraps a stream of messages coming in from a worker in response to a worker request.</code>
        </line>
        <line>
            <code>class ValueWrapper&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// Constructs a new value wrapper on top of [messages] (stream of messages received from the worker). The</code>
        </line>
        <line>
            <code>  /// compute operation will be initiated by calling [compute], which will send the [request] to the worker</code>
        </line>
        <line>
            <code>  /// using [postMethod].</code>
        </line>
        <line hits="10">
            <code>  ValueWrapper(</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      WorkerRequest request, ExceptionManager exceptionManager, Logger? logger,</code>
        </line>
        <line>
            <code>      {required PostRequest postMethod,</code>
        </line>
        <line>
            <code>      required Stream messages,</code>
        </line>
        <line>
            <code>      SquadronCancelationToken? token})</code>
        </line>
        <line>
            <code>      : _request = request,</code>
        </line>
        <line>
            <code>        _postRequest = postMethod {</code>
        </line>
        <line hits="5">
            <code>    if (token != null) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      token.onCanceled.then((_) {</code>
        </line>
        <line hits="0">
            <code>        _postRequest(WorkerRequestImpl.cancel(token));</code>
        </line>
        <line hits="0">
            <code>      });</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="15">
            <code>    _sub = messages.listen(</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>      (message) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>        final res = message as List;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="15">
            <code>        if (!_completer.isCompleted) {</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>          if (!res.unwrapResponseInPlace(exceptionManager, logger)) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>            return;</code>
        </line>
        <line>
            <code>          }</code>
        </line>
        <line hits="5">
            <code>          final error = res.error;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>          if (error != null) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="13">
            <code>            _completer.completeError(error, error.stackTrace);</code>
            <hit count="13" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          } else {</code>
        </line>
        <line hits="20">
            <code>            _completer.complete(res.result);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          }</code>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line>
            <code>        // }</code>
        </line>
        <line hits="5">
            <code>      },</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      onError: (e, st) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>        if (!_completer.isCompleted) {</code>
        </line>
        <line hits="0">
            <code>          final error = SquadronException.from(e, st);</code>
        </line>
        <line hits="0">
            <code>          _completer.completeError(error, error.stackTrace);</code>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="0">
            <code>      },</code>
        </line>
        <line>
            <code>      cancelOnError: false,</code>
        </line>
        <line>
            <code>    );</code>
        </line>
        <line hits="5">
            <code>  }</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final WorkerRequest _request;</code>
        </line>
        <line>
            <code>  final PostRequest _postRequest;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final _completer = Completer&lt;T&gt;();</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  // ignore: cancel_subscriptions</code>
        </line>
        <line hits="5">
            <code>  late final StreamSubscription _sub;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="5">
            <code>  Future&lt;T&gt; compute() {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    // initiate operation now!</code>
        </line>
        <line hits="20">
            <code>    _postRequest(_request);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="30">
            <code>    return _completer.future.whenComplete(_sub.cancel);</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
