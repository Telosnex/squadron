<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-05-20" filename="_stream_wrapper.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9710145" lines-covered="67" lines-valid="69" package="/_impl/xplat" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../../../squadron.dart';</code>
        </line>
        <line>
            <code>import '../../tokens/_squadron_cancelation_token.dart';</code>
        </line>
        <line>
            <code>import '../../worker/worker_response.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Wraps a stream of messages coming in from a worker in response to a streaming worker request.</code>
        </line>
        <line>
            <code>class StreamWrapper&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// Constructs a new stream wrapper on top of [messages] (stream of messages received from the worker). Streaming</code>
        </line>
        <line>
            <code>  /// operations will be initiated by sending the [streamRequest] to the worker using [postMethod]. This will not be</code>
        </line>
        <line>
            <code>  /// done before a listener is attached to this instance's [stream] property.</code>
        </line>
        <line hits="10">
            <code>  StreamWrapper(WorkerRequest streamRequest, ExceptionManager exceptionManager,</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      Logger? logger,</code>
        </line>
        <line>
            <code>      {required PostRequest postMethod,</code>
        </line>
        <line>
            <code>      required Stream messages,</code>
        </line>
        <line>
            <code>      required SquadronCallback onDone,</code>
        </line>
        <line>
            <code>      SquadronCancelationToken? token})</code>
        </line>
        <line>
            <code>      : _exceptionManager = exceptionManager,</code>
        </line>
        <line>
            <code>        _logger = logger,</code>
        </line>
        <line>
            <code>        _streamRequest = streamRequest,</code>
        </line>
        <line>
            <code>        _postRequest = postMethod,</code>
        </line>
        <line>
            <code>        _messages = messages,</code>
        </line>
        <line>
            <code>        _token = token {</code>
        </line>
        <line hits="15">
            <code>    _handle = _process;</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="15">
            <code>    _controller = StreamController&lt;T&gt;(</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>      onListen: _onListen,</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>      onPause: _onPause,</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>      onResume: _onResume,</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>      onCancel: _onCancel,</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    );</code>
        </line>
        <line hits="18">
            <code>    _token?.onCanceled.then((ex) =&gt; _canceler());</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="30">
            <code>    _controller.done.then((_) =&gt; onDone());</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>  }</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The actual data stream from the worker.</code>
        </line>
        <line hits="15">
            <code>  Stream&lt;T&gt; get stream =&gt; _controller.stream;</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final ExceptionManager _exceptionManager;</code>
        </line>
        <line>
            <code>  final Logger? _logger;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final Stream&lt;dynamic&gt; _messages;</code>
        </line>
        <line>
            <code>  final WorkerRequest _streamRequest;</code>
        </line>
        <line>
            <code>  final PostRequest _postRequest;</code>
        </line>
        <line>
            <code>  final SquadronCancelationToken? _token;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="5">
            <code>  late final StreamController&lt;T&gt; _controller;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  int _paused = 0;</code>
        </line>
        <line hits="5">
            <code>  late void Function(WorkerResponse) _handle;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="12">
            <code>  void _canceler() =&gt; _postRequest(WorkerRequestImpl.cancel(_token!));</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  List&lt;WorkerResponse&gt;? _buffer;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Bufferize worker responses (paused stream).</code>
        </line>
        <line hits="4">
            <code>  void _bufferize(WorkerResponse res) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>    final buffer = (_buffer ??= &lt;WorkerResponse&gt;[]);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    buffer.add(res);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Forward worker responses (non-paused stream).</code>
        </line>
        <line hits="10">
            <code>  void _process(WorkerResponse res) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    final error = res.error;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    if (error != null) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="13">
            <code>      _controller.addError(error, error.stackTrace);</code>
            <hit count="13" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="20">
            <code>      _controller.add(res.result);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="5">
            <code>  }</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Will eventually store the stream ID received from the worker. If the stream is canceled on the</code>
        </line>
        <line>
            <code>  /// client side, the stream ID will be sent to the worker so it has a chance to stop streaming from</code>
        </line>
        <line>
            <code>  /// the worker service.</code>
        </line>
        <line>
            <code>  final _streamId = Completer&lt;int&gt;();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="10">
            <code>  void _onListen() {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="15">
            <code>    _messages.listen(</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>      (message) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>        final res = message as List;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20">
            <code>        if (!res.unwrapResponseInPlace(_exceptionManager, _logger) ||</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>            _controller.isClosed) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>          return;</code>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="12">
            <code>        final cancelException = _token?.exception;</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>        if (cancelException != null) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>          if (!_streamId.isCompleted) {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>            _streamId.complete(-1);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          }</code>
        </line>
        <line hits="8">
            <code>          _controller.addError(cancelException, cancelException.stackTrace);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>          _buffer?.clear();</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>          _controller.close();</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>        } else if (res.endOfStream) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>          _controller.close();</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="15">
            <code>        } else if (!_streamId.isCompleted) {</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          // The first message received from the worker contains the stream ID. If the stream</code>
        </line>
        <line>
            <code>          // is canceled on the client side, the stream from the worker context should also</code>
        </line>
        <line>
            <code>          // be canceled by sending a WorkerRequest.cancelStream with this stream id.</code>
        </line>
        <line hits="20">
            <code>          _streamId.complete(res.result);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        } else {</code>
        </line>
        <line hits="15">
            <code>          _handle(res);</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="5">
            <code>      },</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      cancelOnError: false,</code>
        </line>
        <line>
            <code>    );</code>
        </line>
        <line>
            <code>    // initiate streaming operations now!</code>
        </line>
        <line hits="20">
            <code>    _postRequest(_streamRequest);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>  }</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="10">
            <code>  Future _onCancel() async {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="15">
            <code>    final streamId = await _streamId.future;</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    // notify the worker that the streaming operation has been canceled</code>
        </line>
        <line hits="20">
            <code>    _postRequest(WorkerRequestImpl.cancelStream(streamId));</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>    _buffer?.clear();</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="15">
            <code>    _controller.close();</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>  }</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="5">
            <code>  void _onPause() {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    // per Dart documentation: https://api.dart.dev/dart-async/StreamSubscription/pause.html</code>
        </line>
        <line>
            <code>    // If the subscription is paused more than once, an equal number of resumes must be performed to resume the</code>
        </line>
        <line>
            <code>    // stream.</code>
        </line>
        <line hits="8">
            <code>    if (_paused == 0) {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>      _handle = _bufferize;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="6">
            <code>    _paused++;</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="5">
            <code>  void _onResume() {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>    if (_paused == 0) {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      // per Dart documentation: https://api.dart.dev/dart-async/StreamSubscription/resume.html</code>
        </line>
        <line>
            <code>      // It is safe to resume even when the subscription is not paused, and the resume will have no effect.</code>
        </line>
        <line hits="0">
            <code>      return;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="8">
            <code>    _paused--;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>    if (_paused == 0) {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      // per Dart documentation: https://api.dart.dev/dart-async/StreamSubscription/resume.html</code>
        </line>
        <line>
            <code>      // When all previously calls to pause have been matched by a calls to resume, [...] the stream subscription</code>
        </line>
        <line>
            <code>      // may emit events again.</code>
        </line>
        <line hits="8">
            <code>      _handle = _process;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      final buffer = _buffer;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      if (buffer != null) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>        buffer.forEach(_process);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>        buffer.clear();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
