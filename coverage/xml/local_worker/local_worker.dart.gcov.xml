<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-08-28" filename="local_worker.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.7692308" lines-covered="10" lines-valid="13" package="/local_worker" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'package:logger/logger.dart';</code>
        </line>
        <line>
            <code>import 'package:using/using.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../_impl/xplat/_local_worker.dart'</code>
        </line>
        <line>
            <code>    if (dart.library.io) '../_impl/native/_local_worker.dart'</code>
        </line>
        <line>
            <code>    if (dart.library.html) '../_impl/web/_local_worker.dart'</code>
        </line>
        <line>
            <code>    if (dart.library.js_interop) '../_impl/web/_local_worker.dart' as impl;</code>
        </line>
        <line>
            <code>import '../channel.dart';</code>
        </line>
        <line>
            <code>import '../exceptions/exception_manager.dart';</code>
        </line>
        <line>
            <code>import '../iworker.dart';</code>
        </line>
        <line>
            <code>import '../worker/worker_request.dart';</code>
        </line>
        <line>
            <code>import '../worker_service.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Base local worker class.</code>
        </line>
        <line>
            <code>///</code>
        </line>
        <line>
            <code>/// Local workers are similar to other Workers except that they run in the</code>
        </line>
        <line>
            <code>/// context of the current thread. They do not create any platform thread</code>
        </line>
        <line>
            <code>/// (such as Isolate or Web Worker) but they provide a [channel] that can be</code>
        </line>
        <line>
            <code>/// shared with other workers to support communication between threads. One</code>
        </line>
        <line>
            <code>/// interesting use-case is accessing UI components or platform plugins in</code>
        </line>
        <line>
            <code>/// Flutter, where only code running in the main thread is allowed access to</code>
        </line>
        <line>
            <code>/// such features. Creating a [LocalWorker] in the main application and sharing</code>
        </line>
        <line>
            <code>/// its [channel] with other workers enables providing access to Flutter</code>
        </line>
        <line>
            <code>/// features.</code>
        </line>
        <line>
            <code>///</code>
        </line>
        <line>
            <code>/// Local workers wrap around a [WorkerService]. Messages sent to the local</code>
        </line>
        <line>
            <code>/// worker are deserialized as [WorkerRequest]s and dispatched to a handler</code>
        </line>
        <line>
            <code>/// defined in the [service]'s [WorkerService.operations] map according to the</code>
        </line>
        <line>
            <code>/// [WorkerRequest.command].</code>
        </line>
        <line>
            <code>abstract class LocalWorker&lt;W extends WorkerService&gt;</code>
        </line>
        <line>
            <code>    with Releasable</code>
        </line>
        <line>
            <code>    implements WorkerService, IWorker {</code>
        </line>
        <line hits="1">
            <code>  LocalWorker(this.service);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  factory LocalWorker.create(W service, [ExceptionManager? exceptionManager]) =&gt;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      impl.createLocalWorker&lt;W&gt;(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          service, exceptionManager ?? ExceptionManager());</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final W service;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  void release() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    stop();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    super.release();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  Logger? channelLogger;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  ExceptionManager get exceptionManager =&gt;</code>
        </line>
        <line hits="0">
            <code>      (_exceptionManager ??= ExceptionManager());</code>
        </line>
        <line>
            <code>  ExceptionManager? _exceptionManager;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The local worker's [Channel].</code>
        </line>
        <line>
            <code>  Channel? get channel;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// A [Channel] to communicate with this local worker. This channel should be</code>
        </line>
        <line>
            <code>  /// provided to clients so they can invoke services from the local worker.</code>
        </line>
        <line hits="0">
            <code>  Channel? get sharedChannel =&gt; channel?.share();</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Starts the local worker.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  FutureOr start();</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Stops the local worker.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  void stop();</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Local Workers do not need an [operations] map.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  final Map&lt;int, CommandHandler&gt; operations = WorkerService.noOperations;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
