<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../../../../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-09-10" filename="squadron.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.943662" lines-covered="67" lines-valid="71" package="/home/runner/work/squadron/squadron/lib/src" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'package:meta/meta.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'logging/squadron_log_level.dart';</code>
        </line>
        <line>
            <code>import 'logging/squadron_logger.dart';</code>
        </line>
        <line>
            <code>import 'worker/worker_channel.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Squadron singleton. The main application thread and each worker thread will have their own private</code>
        </line>
        <line>
            <code>/// [Squadron] singleton.</code>
        </line>
        <line>
            <code>class Squadron {</code>
        </line>
        <line hits="2">
            <code>  Squadron._();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static Squadron? _instance;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  static Squadron _getOrInitialize() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    var sq = _instance;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (sq == null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      sq = Squadron._();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      sq._debugMode = __debugMode;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      _instance = sq;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>    return sq;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Whether the Squadron singleton is initialized or not. This property will be `true` if any of these</code>
        </line>
        <line>
            <code>  /// has been called: [pushLogLevel], [setLogger], [setId], [setParent], or if [logLevel] has been set.</code>
        </line>
        <line>
            <code>  /// The Squadron singleton may be reset by calling [shutdown].</code>
        </line>
        <line hits="2">
            <code>  static bool get isInitialized =&gt; _instance != null;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Resets the Squadron singleton. [isInitialized] will return `false` after this call, and a new</code>
        </line>
        <line>
            <code>  /// Squadron singleton may be reinitialized.</code>
        </line>
        <line hits="1">
            <code>  static void shutdown() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    __debugMode = false;</code>
        </line>
        <line>
            <code>    _instance = null;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  int _logLevel = SquadronLogLevel.off;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Gets the [logLevel]. Propagates to workers with the value that was set at the time the worker</code>
        </line>
        <line>
            <code>  /// was created. Changes to this property do not propagate to workers after they have started.</code>
        </line>
        <line hits="2">
            <code>  static int get logLevel =&gt;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _instance?._logger?.logLevel ??</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _instance?._logLevel ??</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      SquadronLogLevel.off;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sets the [logLevel]. Changes to this property do not propagate to workers after they have started.</code>
        </line>
        <line hits="2">
            <code>  static set logLevel(int value) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final sq = _getOrInitialize();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    sq._logger?.logLevel = value;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    sq._logLevel = value;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  final _logLevels = &lt;int&gt;[];</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Remembers the current [logLevel], then setting it to [value] if not null. See [popLogLevel].</code>
        </line>
        <line hits="2">
            <code>  static void pushLogLevel([int? value]) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final sq = _getOrInitialize();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    sq._logLevels.add(Squadron.logLevel);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    if (value != null) {</code>
        </line>
        <line hits="2">
            <code>      Squadron.logLevel = value;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Restores the [logLevel] to the value it had before the last call to [pushLogLevel]. If [pushLogLevel]</code>
        </line>
        <line>
            <code>  /// was never called, this method has no effect and return `null`. Otherwise, it returns the value of</code>
        </line>
        <line>
            <code>  /// [logLevel] after it has been restored.</code>
        </line>
        <line hits="2">
            <code>  static int? popLogLevel() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final sq = _getOrInitialize();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (sq._logLevels.isNotEmpty) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      Squadron.logLevel = sq._logLevels.removeLast();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="2">
            <code>    return Squadron.logLevel;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  SquadronLogger? _logger;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sets the current [logger] and sets the logger's [SquadronLogger.logLevel] to [Squadron.logLevel].</code>
        </line>
        <line hits="2">
            <code>  static void setLogger(SquadronLogger? logger) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final sq = _getOrInitialize();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final level = logLevel;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    sq._logger = logger;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    sq._logger?.logLevel = level;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Flag indicating whether Squadron runs in debug mode. When running in debug mode, messages logged at</code>
        </line>
        <line>
            <code>  /// [SquadronLogLevel.debug] level will be logged regardless of the current [logLevel].</code>
        </line>
        <line hits="3">
            <code>  static bool get debugMode =&gt; _instance?._debugMode ?? __debugMode;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  static set debugMode(bool value) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    __debugMode = value;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    _instance?._debugMode = value;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static bool __debugMode = false;</code>
        </line>
        <line>
            <code>  bool _debugMode = false;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  String? _id;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Squadron instance id to track identity of threads/workers. Returns an empty String if the Squadron singleton</code>
        </line>
        <line>
            <code>  /// has not been initialized yet, or if its `id` has not been set yet.</code>
        </line>
        <line hits="3">
            <code>  static String? get id =&gt; _instance?._id;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sets the Squadron instance `id`. Once set, the [id] cannot be modified. The only way to assign a new `id`</code>
        </line>
        <line>
            <code>  /// is to first call [shutdown], then initialize a new Squadron instance.</code>
        </line>
        <line hits="2">
            <code>  static void setId(String value) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final sq = _getOrInitialize();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (sq._id == null) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      value = value.trim();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (value.isNotEmpty) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        sq._id ??= value;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// `WorkerChannel` to communicate with the parent. In the main thread, this will be `null`.</code>
        </line>
        <line hits="0">
            <code>  static WorkerChannel? get parentChannel =&gt; _instance?._parentChannel;</code>
        </line>
        <line>
            <code>  WorkerChannel? _parentChannel;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sets the `WorkerChannel` to communicate with the parent. Once set, the `parentChannel` cannot be modified.</code>
        </line>
        <line>
            <code>  /// When setting the parent channel, this method also installs a logger to forward log messages to the parent.</code>
        </line>
        <line hits="1">
            <code>  static void setParent(WorkerChannel parentChannel) =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _getOrInitialize()._parentChannel ??= parentChannel;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.debug] level. If [Squadron.debugMode] is `true`, the message will be</code>
        </line>
        <line>
            <code>  /// displayed regardless of [Squadron.logLevel]. If `false`, the message will be logged if [Squadron.logLevel]</code>
        </line>
        <line>
            <code>  /// is set to [SquadronLogLevel.all].</code>
        </line>
        <line hits="2">
            <code>  static void debug(dynamic message) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final logger = _instance?._logger;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (logger != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      logger.debug(message);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    } else if (debugMode) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      if (message is Function) {</code>
        </line>
        <line hits="0">
            <code>        message = message();</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="0">
            <code>      print('[DEBUG] $message');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.finest] level</code>
        </line>
        <line hits="4">
            <code>  static void finest(dynamic message) =&gt; _instance?._logger?.finest(message);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.finer] level</code>
        </line>
        <line hits="4">
            <code>  static void finer(dynamic message) =&gt; _instance?._logger?.finer(message);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.fine] level</code>
        </line>
        <line hits="4">
            <code>  static void fine(dynamic message) =&gt; _instance?._logger?.fine(message);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.config] level</code>
        </line>
        <line hits="4">
            <code>  static void config(dynamic message) =&gt; _instance?._logger?.config(message);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.info] level</code>
        </line>
        <line hits="4">
            <code>  static void info(dynamic message) =&gt; _instance?._logger?.info(message);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.warning] level</code>
        </line>
        <line hits="4">
            <code>  static void warning(dynamic message) =&gt; _instance?._logger?.warning(message);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.severe] level</code>
        </line>
        <line hits="4">
            <code>  static void severe(dynamic message) =&gt; _instance?._logger?.severe(message);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.shout] level</code>
        </line>
        <line hits="4">
            <code>  static void shout(dynamic message) =&gt; _instance?._logger?.shout(message);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>@internal</code>
        </line>
        <line>
            <code>extension LoggerExt on Squadron {</code>
        </line>
        <line hits="3">
            <code>  static SquadronLogger? get logger =&gt; Squadron._instance?._logger;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../../../../../../"/>
    <base href="../../../../../../../"/>
</coverage>
