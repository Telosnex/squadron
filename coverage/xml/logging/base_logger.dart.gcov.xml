<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-09-09" filename="base_logger.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9" lines-covered="27" lines-valid="30" package="/logging" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import '../squadron.dart';</code>
        </line>
        <line>
            <code>import 'squadron_log_level.dart';</code>
        </line>
        <line>
            <code>import 'squadron_logger.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Base class for simple loggers</code>
        </line>
        <line>
            <code>abstract class BaseSquadronLogger implements SquadronLogger {</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  int logLevel = Squadron.logLevel;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Formats the log [message] by calling its `toString()` method.</code>
        </line>
        <line hits="0">
            <code>  Iterable&lt;String&gt; format(int level, dynamic message) sync* {</code>
        </line>
        <line hits="0">
            <code>    yield message.toString();</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _log(int level, dynamic message) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (level &gt;= logLevel ||</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        (level == SquadronLogLevel.debug &amp;&amp; Squadron.debugMode)) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      if (message is Function) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        message = message();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="3">
            <code>      for (var line in format(level, message)) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        log(line);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void debug(dynamic message) =&gt; _log(SquadronLogLevel.debug, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void finest(dynamic message) =&gt; _log(SquadronLogLevel.finest, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void finer(dynamic message) =&gt; _log(SquadronLogLevel.finer, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void fine(dynamic message) =&gt; _log(SquadronLogLevel.fine, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void config(dynamic message) =&gt; _log(SquadronLogLevel.config, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void info(dynamic message) =&gt; _log(SquadronLogLevel.info, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void warning(dynamic message) =&gt; _log(SquadronLogLevel.warning, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void severe(dynamic message) =&gt; _log(SquadronLogLevel.severe, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void shout(dynamic message) =&gt; _log(SquadronLogLevel.shout, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
