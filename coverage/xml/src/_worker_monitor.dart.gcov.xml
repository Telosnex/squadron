<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-04-19" filename="_worker_monitor.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9705882" lines-covered="33" lines-valid="34" package="/src" testname="lcov.info" version="1.5">
<lines>
<line>
<code>import '_cancellation_token_ref.dart';</code>
</line>
<line>
<code>import 'cancellation_token.dart';</code>
</line>
<line>
<code>import 'worker_pool.dart';</code>
</line>
<line>
<code>import 'worker_request.dart';</code>
</line>
<line>
<code>import 'worker_service.dart';</code>
</line>
<line>
<code>import 'worker_task.dart';</code>
</line>
<line>
<code/>
</line>
<line>
<code>/// Each platform worker will instantiate a [WorkerMonitor] responsible for handling cancellation requests. Worker</code>
</line>
<line>
<code>/// tasks in Squadron may be cancelled in two ways: with a [CancellationToken], giving worker services the chance to</code>
</line>
<line>
<code>/// handle cancellation requests gracefully, or without a [CancellationToken] via [WorkerPool.cancel] or</code>
</line>
<line>
<code>/// [WorkerTask.cancel].</code>
</line>
<line>
<code>class WorkerMonitor {</code>
</line>
<line hits="2">
<code>  WorkerMonitor(this._terminate);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line>
<code>  final SquadronCallback _terminate;</code>
</line>
<line>
<code>  bool _terminationRequested = false;</code>
</line>
<line>
<code>  int _executing = 0;</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  final _cancelTokens = &lt;int, CancellationTokenReference&gt;{};</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="2">
<code>  CancellationTokenReference _getTokenRef(CancellationToken? token) =&gt;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      (token == null)</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          ? CancellationTokenReference.noToken</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>          : _cancelTokens.putIfAbsent(</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="5">
<code>              token.id, () =&gt; CancellationTokenReference(token.id));</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  CancellationTokenReference begin(WorkerRequest request) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    _executing++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    final tokenRef = _getTokenRef(request.cancelToken);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (tokenRef.hasRef) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      tokenRef.refCount++;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>      request.overrideCancelToken(tokenRef);</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line>
<code>    return tokenRef;</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  Map&lt;int, SquadronCallback&gt;? _streamCancellers;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>  int _streamId = 0;</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  int registerStreamCanceller(SquadronCallback canceller) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    final cancellers = (_streamCancellers ??= &lt;int, SquadronCallback&gt;{});</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    final streamId = (++_streamId);</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    cancellers[streamId] = canceller;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    return streamId;</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  void unregisterStreamCanceller(int streamId) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>    _streamCancellers?.remove(streamId);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line hits="3">
<code>  void cancel(CancellationToken token) =&gt; _getTokenRef(token).cancel();</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="5">
<code>  void cancelStream(int streamId) =&gt; _streamCancellers?[streamId]?.call();</code>
<hit count="5" name="&lt;unnamed&gt;"/>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  void done(CancellationTokenReference tokenRef) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    if (tokenRef.hasRef) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      tokenRef.refCount--;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="3">
<code>      if (tokenRef.refCount == 0 &amp;&amp; !tokenRef.cancelled) {</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>        // track only cancelled tokens</code>
</line>
<line hits="3">
<code>        _cancelTokens.remove(tokenRef.id);</code>
<hit count="3" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>      }</code>
</line>
<line>
<code>    }</code>
</line>
<line hits="2">
<code>    _executing--;</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="1">
<code>    if (_terminationRequested &amp;&amp; _executing == 0) {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="0">
<code>      _terminate();</code>
</line>
<line>
<code>    }</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code/>
</line>
<line hits="1">
<code>  void terminate() {</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>    if (_executing == 0) {</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line hits="2">
<code>      _terminate();</code>
<hit count="2" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    } else {</code>
</line>
<line hits="1">
<code>      _terminationRequested = true;</code>
<hit count="1" name="&lt;unnamed&gt;"/>
</line>
<line>
<code>    }</code>
</line>
<line>
<code>  }</code>
</line>
<line>
<code>}</code>
</line>
</lines>
<config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
<base href="../"/>
<base href="../"/>
</coverage>
