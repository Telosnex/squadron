<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-04-09" filename="worker_task.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.90804595" lines-covered="79" lines-valid="87" package="/src" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'perf_counter.dart';</code>
        </line>
        <line>
            <code>import 'cancellation_token.dart';</code>
        </line>
        <line>
            <code>import 'squadron_error.dart';</code>
        </line>
        <line>
            <code>import 'squadron_exception.dart';</code>
        </line>
        <line>
            <code>import 'worker.dart';</code>
        </line>
        <line>
            <code>import 'worker_exception.dart';</code>
        </line>
        <line>
            <code>import 'worker_pool.dart';</code>
        </line>
        <line>
            <code>import 'worker_service.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Base worker task class</code>
        </line>
        <line>
            <code>abstract class Task&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// Flag indicating whether the task is actually being executed.</code>
        </line>
        <line>
            <code>  bool get isRunning;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Flag indicating whether the task has completed.</code>
        </line>
        <line>
            <code>  bool get isFinished;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Flag indicating whether the task has been cancelled.</code>
        </line>
        <line>
            <code>  bool get isCancelled;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Duration between the moment the task was posted, and the moment it was assigned to a [Worker].</code>
        </line>
        <line>
            <code>  Duration get waitTime;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Duration between the moment the task was assigned to a [Worker], and the moment it finished executing.</code>
        </line>
        <line>
            <code>  Duration get runningTime;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Cancels the task. If the task is still pending, cancellation is effective immediately with a</code>
        </line>
        <line>
            <code>  /// [CancelledException]. For a running [ValueTask], cancellation is ignored and the task's [ValueTask.value]</code>
        </line>
        <line>
            <code>  /// will eventually complete. For a running [StreamTask], cancellation will be effective after receiving the</code>
        </line>
        <line>
            <code>  /// next value and the task's [StreamTask.stream] will be closed. It should be noted that cancellation of</code>
        </line>
        <line>
            <code>  /// running tasks will not be notified to platform workers. To give running tasks a chance to get notified</code>
        </line>
        <line>
            <code>  /// of cancellation, a [CancellationToken] should be passed to the tasks at the time they are created.</code>
        </line>
        <line>
            <code>  void cancel([String? message]);</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Class representing a [Task] returning a single value.</code>
        </line>
        <line>
            <code>abstract class ValueTask&lt;T&gt; extends Task&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// The task's value provided as a [Future].</code>
        </line>
        <line>
            <code>  Future&lt;T&gt; get value;</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Class representing a [Task] returning a stream of values.</code>
        </line>
        <line>
            <code>abstract class StreamTask&lt;T&gt; extends Task&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// The task's stream.</code>
        </line>
        <line>
            <code>  Stream&lt;T&gt; get stream;</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [WorkerTask] registered in the [WorkerPool].</code>
        </line>
        <line>
            <code>class WorkerTask&lt;T, W extends Worker&gt; implements ValueTask&lt;T&gt;, StreamTask&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// Creates a new [ValueTask].</code>
        </line>
        <line hits="2">
            <code>  WorkerTask.value(this._computer, this._counter)</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      : assert(_computer != null),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        _completer = Completer&lt;T&gt;(),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        _producer = null,</code>
        </line>
        <line>
            <code>        _streamer = null {</code>
        </line>
        <line hits="2">
            <code>    _submitted = _timeStamp();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new [StreamTask].</code>
        </line>
        <line hits="2">
            <code>  WorkerTask.stream(this._producer, this._counter)</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      : assert(_producer != null),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        _streamer = StreamController&lt;T&gt;(),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        _computer = null,</code>
        </line>
        <line>
            <code>        _completer = null {</code>
        </line>
        <line hits="2">
            <code>    _submitted = _timeStamp();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="3">
            <code>  static int _timeStamp() =&gt; DateTime.now().microsecondsSinceEpoch;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  late final int _submitted;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  bool get isRunning =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _executed != null &amp;&amp; _finished == null &amp;&amp; _cancelled == null;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int? _executed;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  bool get isFinished =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      _executed != null &amp;&amp; _finished != null &amp;&amp; _cancelled == null;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int? _finished;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  bool get isCancelled =&gt; _cancelled != null;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int? _cancelled;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Duration get waitTime =&gt; Duration(</code>
        </line>
        <line hits="0">
            <code>      microseconds: (_executed ?? _cancelled ?? _timeStamp()) - _submitted);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Duration get runningTime =&gt; _executed == null</code>
        </line>
        <line>
            <code>      ? Duration.zero</code>
        </line>
        <line hits="0">
            <code>      : Duration(</code>
        </line>
        <line hits="0">
            <code>          microseconds: (_cancelled ?? _finished ?? _timeStamp()) - _executed!);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _completeWithError(Exception exception) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (!_completer!.isCompleted) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _completer!.completeError(exception);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void _completeWithResult(dynamic data) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (!_completer!.isCompleted) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _completer!.complete(data);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _close([Exception? exception]) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (!_streamer!.isClosed) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (exception != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        _streamer!.addError(exception);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="3">
            <code>      _streamer!.close();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  void cancel([String? message]) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (_cancelled == null) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _cancelled = _timeStamp();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      if (_completer != null &amp;&amp; _executed == null) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>        _wrapUp(() =&gt; _completeWithError(CancelledException(message: message)),</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>            false);</code>
        </line>
        <line hits="2">
            <code>      } else if (_streamer != null) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>        _wrapUp(() =&gt; _close(CancelledException(message: message)), false);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _wrapUp(SquadronCallback wrapper, bool success) async {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (_finished == null) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _finished = _timeStamp();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      _counter?.update(_finished! - _executed!, success);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      wrapper();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  Future _runFuture(W worker, Future&lt;T&gt; Function(W worker) computer,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      Completer completer) async {</code>
        </line>
        <line hits="2">
            <code>    if (completer.isCompleted) return;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>    try {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (isCancelled) throw CancelledException();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      final value = await computer(worker);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      _wrapUp(() =&gt; _completeWithResult(value), true);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    } catch (ex, st) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      final wex = SquadronException.from(error: ex, stackTrace: st);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      _wrapUp(() =&gt; _completeWithError(wex), false);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  Future _runStream(W worker, Stream&lt;T&gt; Function(W worker) producer,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      StreamController streamer) async {</code>
        </line>
        <line hits="2">
            <code>    if (streamer.isClosed) return;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>    try {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (isCancelled) throw CancelledException();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      await for (var value in producer(worker)) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        streamer.add(value);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        if (isCancelled) throw CancelledException();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="4">
            <code>      _wrapUp(() =&gt; _close(), true);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    } catch (ex, st) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      final wex = SquadronException.from(error: ex, stackTrace: st);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      _wrapUp(() =&gt; _close(wex), false);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  Future run(W worker) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    _executed = _timeStamp();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (_computer != null &amp;&amp; _completer != null) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      return _runFuture(worker, _computer!, _completer!);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    } else if (_producer != null &amp;&amp; _streamer != null) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      return _runStream(worker, _producer!, _streamer!);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="0">
            <code>      throw newSquadronError('invalid worker task state');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final PerfCounter? _counter;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final Future&lt;T&gt; Function(W worker)? _computer;</code>
        </line>
        <line>
            <code>  final Completer&lt;T&gt;? _completer;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  Future&lt;T&gt; get value =&gt; _completer!.future;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final Stream&lt;T&gt; Function(W worker)? _producer;</code>
        </line>
        <line>
            <code>  final StreamController&lt;T&gt;? _streamer;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  Stream&lt;T&gt; get stream =&gt; _streamer!.stream;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
