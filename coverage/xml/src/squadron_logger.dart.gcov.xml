<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-05-04" filename="squadron_logger.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.875" lines-covered="49" lines-valid="56" package="/src" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:developer' as dev show log;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'channel.dart';</code>
        </line>
        <line>
            <code>import 'squadron.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Basic interface for logging</code>
        </line>
        <line>
            <code>abstract class SquadronLogger {</code>
        </line>
        <line>
            <code>  /// Gets the log level</code>
        </line>
        <line>
            <code>  int get logLevel;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sets the log level</code>
        </line>
        <line>
            <code>  set logLevel(int value);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Base logging method. Implement this method to display the [message].</code>
        </line>
        <line>
            <code>  /// The method is called if the log level is enabled and is provided with a formatted message such as</code>
        </line>
        <line>
            <code>  /// `[timestamp] [log-level] [Squadron.id] text of the message`</code>
        </line>
        <line>
            <code>  void log(String message);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.debug] level</code>
        </line>
        <line>
            <code>  void debug(dynamic message);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.finest] level</code>
        </line>
        <line>
            <code>  void finest(dynamic message);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.finer] level</code>
        </line>
        <line>
            <code>  void finer(dynamic message);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.fine] level</code>
        </line>
        <line>
            <code>  void fine(dynamic message);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.config] level</code>
        </line>
        <line>
            <code>  void config(dynamic message);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.info] level</code>
        </line>
        <line>
            <code>  void info(dynamic message);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.warning] level</code>
        </line>
        <line>
            <code>  void warning(dynamic message);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.severe] level</code>
        </line>
        <line>
            <code>  void severe(dynamic message);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.shout] level</code>
        </line>
        <line>
            <code>  void shout(dynamic message);</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Base class for simple loggers</code>
        </line>
        <line>
            <code>abstract class BaseSquadronLogger implements SquadronLogger {</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  int logLevel = Squadron.logLevel;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _log(int level, dynamic message) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (level &gt;= logLevel ||</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        (level == SquadronLogLevel.debug &amp;&amp; Squadron.debugMode)) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      if (message is Function) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        message = message();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>      final header =</code>
        </line>
        <line hits="7">
            <code>          '[${DateTime.now().toUtc().toIso8601String()}] [${SquadronLogLevel.getName(level)}] [${Squadron.id}]';</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      Iterable&lt;String&gt; lines;</code>
        </line>
        <line hits="2">
            <code>      if (message is Iterable) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        lines = message</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>            .map((m) =&gt; m?.toString() ?? '')</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>            .expand((m) =&gt; m.toString().split('\n'))</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>            .where((m) =&gt; m.isNotEmpty);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="6">
            <code>        lines = message?.toString().split('\n').where((m) =&gt; m.isNotEmpty) ??</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>            const [];</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="3">
            <code>      for (var line in lines) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        log('$header $line');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void debug(dynamic message) =&gt; _log(SquadronLogLevel.debug, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void finest(dynamic message) =&gt; _log(SquadronLogLevel.finest, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void finer(dynamic message) =&gt; _log(SquadronLogLevel.finer, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void fine(dynamic message) =&gt; _log(SquadronLogLevel.fine, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void config(dynamic message) =&gt; _log(SquadronLogLevel.config, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void info(dynamic message) =&gt; _log(SquadronLogLevel.info, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void warning(dynamic message) =&gt; _log(SquadronLogLevel.warning, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void severe(dynamic message) =&gt; _log(SquadronLogLevel.severe, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void shout(dynamic message) =&gt; _log(SquadronLogLevel.shout, message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Simple logger based on `dart:dev` `log` function</code>
        </line>
        <line>
            <code>class DevSquadronLogger extends BaseSquadronLogger {</code>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Log based on `dart:developer`</code>
        </line>
        <line hits="0">
            <code>  void log(dynamic message) =&gt; dev.log(message?.toString() ?? '');</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Simple console logger (`print` function)</code>
        </line>
        <line>
            <code>class ConsoleSquadronLogger extends BaseSquadronLogger {</code>
        </line>
        <line>
            <code>  /// Log to console</code>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void log(dynamic message) =&gt; print(message);</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Logger for workers, forwarding log messages to parent</code>
        </line>
        <line>
            <code>class ParentSquadronLogger extends BaseSquadronLogger {</code>
        </line>
        <line hits="1">
            <code>  ParentSquadronLogger(this._parent);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final WorkerChannel _parent;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Log to parent</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  void log(dynamic message) =&gt; _parent.log(message?.toString() ?? '');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Log level constants, compatible with `package:logging`</code>
        </line>
        <line>
            <code>class SquadronLogLevel {</code>
        </line>
        <line hits="0">
            <code>  SquadronLogLevel._();</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Lowest log level</code>
        </line>
        <line>
            <code>  static const all = 0;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Debug log level</code>
        </line>
        <line>
            <code>  static const debug = 1;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Finest log level</code>
        </line>
        <line>
            <code>  static const finest = 300;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Finer log level</code>
        </line>
        <line>
            <code>  static const finer = 400;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Fine log level</code>
        </line>
        <line>
            <code>  static const fine = 500;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Config log level</code>
        </line>
        <line>
            <code>  static const config = 700;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Information log level</code>
        </line>
        <line>
            <code>  static const info = 800;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Warning log level</code>
        </line>
        <line>
            <code>  static const warning = 900;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Severe log level</code>
        </line>
        <line>
            <code>  static const severe = 1000;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Shout log level</code>
        </line>
        <line>
            <code>  static const shout = 1200;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// No logging</code>
        </line>
        <line>
            <code>  static const off = 2000;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Gets the log level name</code>
        </line>
        <line hits="2">
            <code>  static String getName(int logLevel) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (logLevel &lt; debug) return 'ALL';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (logLevel &lt; finest) return 'DEBUG';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (logLevel &lt; finer) return 'FINEST';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (logLevel &lt; fine) return 'FINER';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (logLevel &lt; config) return 'FINE';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (logLevel &lt; info) return 'CONFIG';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (logLevel &lt; warning) return 'INFO';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (logLevel &lt; severe) return 'WARNING';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (logLevel &lt; shout) return 'SEVERE';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (logLevel &lt; off) return 'SHOUT';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>    return 'OFF';</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
