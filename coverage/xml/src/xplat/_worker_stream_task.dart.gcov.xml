<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-08-02" filename="_worker_stream_task.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.8873239" lines-covered="63" lines-valid="71" package="/src/xplat" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../perf_counter.dart';</code>
        </line>
        <line>
            <code>import '../squadron_error.dart';</code>
        </line>
        <line>
            <code>import '../squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker.dart';</code>
        </line>
        <line>
            <code>import '../worker_task.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '_worker_task.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class WorkerStreamTask&lt;T, W extends Worker&gt; extends WorkerTask&lt;T, W&gt;</code>
        </line>
        <line>
            <code>    implements StreamTask&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// Creates a new [StreamTask].</code>
        </line>
        <line hits="3">
            <code>  WorkerStreamTask(this._producer, PerfCounter? counter) : super(counter) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    _controller = StreamController&lt;T&gt;(</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        onListen: _onListen,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        onPause: _onPause,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        onResume: _onResume,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        onCancel: _onCancel);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final Stream&lt;T&gt; Function(W worker) _producer;</code>
        </line>
        <line>
            <code>  final _streamer = Completer&lt;Stream&lt;T&gt;?&gt;();</code>
        </line>
        <line hits="1">
            <code>  late final StreamController&lt;T&gt; _controller;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  Stream&lt;T&gt; get stream =&gt; _controller.stream;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  int _paused = 0;</code>
        </line>
        <line>
            <code>  bool _isPaused = false;</code>
        </line>
        <line hits="1">
            <code>  StreamSubscription&lt;T&gt;? _subscription;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _onPause() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (_paused == 0) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      if (_subscription != null &amp;&amp; !_isPaused) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        _subscription!.pause();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        _isPaused = true;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="2">
            <code>    _paused++;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _onResume() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (_paused == 0) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      // per Dart documentation: https://api.dart.dev/dart-async/StreamSubscription/resume.html</code>
        </line>
        <line>
            <code>      // It is safe to resume even when the subscription is not paused, and the resume will have no effect.</code>
        </line>
        <line hits="0">
            <code>      return;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="3">
            <code>    _paused--;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (_paused == 0) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      if (_subscription != null &amp;&amp; _isPaused) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        _subscription!.resume();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        _isPaused = false;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="4">
            <code>  FutureOr _onCancel() =&gt; _subscription?.cancel(); /*_subscription?.cancel();*/</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void _close([SquadronException? exception]) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    _subscription?.cancel();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (!_controller.isClosed) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (exception != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>        _controller.addError(exception, exception.stackTrace);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="3">
            <code>      _controller.close();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _done([SquadronException? exception]) =&gt;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      wrapUp(() =&gt; _close(exception), (exception == null));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  void cancel([String? message]) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    super.cancel(message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    _done(cancelledException);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _onError(ex, st) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    _controller.addError(SquadronException.from(ex, st), st);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _onData(T data) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (isCancelled) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      _done(cancelledException);</code>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="3">
            <code>      _controller.add(data);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _onListen() async {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (_controller.isClosed) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      return _done();</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>    if (isCancelled) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      return _done(cancelledException);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    try {</code>
        </line>
        <line hits="4">
            <code>      final stream = await _streamer.future;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      if (stream == null) {</code>
        </line>
        <line hits="0">
            <code>        _done(newSquadronError('null stream'));</code>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="3">
            <code>        _subscription = stream.listen(</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          _onData,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          onError: _onError,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          onDone: _done,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        );</code>
        </line>
        <line hits="3">
            <code>        if (_paused &gt; 0 &amp;&amp; !_isPaused) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>          _subscription!.pause();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          _isPaused = true;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="0">
            <code>    } catch (ex, st) {</code>
        </line>
        <line hits="0">
            <code>      _done(SquadronException.from(ex, st));</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>  Future run(W worker) =&gt; super.run(worker).then((_) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>        _streamer.complete(_producer(worker));</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        return _controller.done;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      });</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
