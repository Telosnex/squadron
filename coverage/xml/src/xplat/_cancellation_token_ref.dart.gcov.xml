<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-09-14" filename="_cancellation_token_ref.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.7741935" lines-covered="24" lines-valid="31" package="/src/xplat" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import '../cancellation_token.dart';</code>
        </line>
        <line>
            <code>import '../squadron_error.dart';</code>
        </line>
        <line>
            <code>import '../worker_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker_request.dart';</code>
        </line>
        <line>
            <code>import '../worker_service.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '_worker_monitor.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Cancellation token reference. This special cancellation token is managed by the [WorkerMonitor] and is used to</code>
        </line>
        <line>
            <code>/// mirror' cancellation tokens presented to Squadron by callers of a worker service. When a [WorkerRequest] is</code>
        </line>
        <line>
            <code>/// handled by the platform worker and that request is associated with a cancellation request, the [WorkerMonitor]</code>
        </line>
        <line>
            <code>/// will override the request's cancellation token with a [CancellationTokenReference]. The same cancellation may</code>
        </line>
        <line>
            <code>/// be used for several service calls, so the [WorkerMonitor] keeps a map of [CancellationTokenReference] and a</code>
        </line>
        <line>
            <code>/// reference count that is incremented for each [WorkerRequest] having the same cancellation token and decremented</code>
        </line>
        <line>
            <code>/// when processing is finished. When the reference count drops to 0 and the cancellation token was not cancelled,</code>
        </line>
        <line>
            <code>/// the [CancellationTokenReference] is removed from the map.</code>
        </line>
        <line>
            <code>///</code>
        </line>
        <line>
            <code>/// When a caller cancels a token, a cancellation notification is sent to all workers in the pool and the</code>
        </line>
        <line>
            <code>/// corresponding [CancellationTokenReference] will be cancelled. Services executing in the context of a platform</code>
        </line>
        <line>
            <code>/// worker will be able to inspect the token's status to interrupt processing gracefully. If the token's status is</code>
        </line>
        <line>
            <code>/// not inspected, processing will continue in platform workers, but will be interrupted on caller-side with a</code>
        </line>
        <line>
            <code>/// [CancelledException].</code>
        </line>
        <line>
            <code>class CancellationTokenReference extends CancellationToken {</code>
        </line>
        <line hits="2">
            <code>  CancellationTokenReference._noToken() : _hasRef = false {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    _refCount = 1;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    withId(0);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Singleton token reference instance for requests containing no token.</code>
        </line>
        <line hits="4">
            <code>  static final noToken = CancellationTokenReference._noToken();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new token reference for [tokenId].</code>
        </line>
        <line hits="1">
            <code>  CancellationTokenReference(int tokenId) : _hasRef = true {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    withId(tokenId);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Whether this token reference instance has a reference. A token ref without a reference does nothing.</code>
        </line>
        <line>
            <code>  final bool _hasRef;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Reference counter.</code>
        </line>
        <line hits="2">
            <code>  int get refCount =&gt; _refCount;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int _refCount = 0;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Use this token reference for [request]. Increments the internal reference counter and overrides the</code>
        </line>
        <line>
            <code>  /// [WorkerRequest.cancelToken] with this reference.</code>
        </line>
        <line hits="1">
            <code>  void usedBy(WorkerRequest request) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (_hasRef) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _refCount++;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      request.overrideCancelToken(this);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    } else if (request.cancelToken != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw newSquadronError('Token reference mismatch');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Release this token reference. Decrements the internal reference counter.</code>
        </line>
        <line hits="1">
            <code>  void release() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (_hasRef) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _refCount--;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void cancel([CancelledException? exception]) {</code>
        </line>
        <line hits="0">
            <code>    throw WorkerException('CancellationToken cannot be cancelled by worker');</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void notifyCancellation() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (_hasRef) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      super.cancel();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>  void addListener(SquadronCallback listener) {</code>
        </line>
        <line hits="1">
            <code>    if (_hasRef) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      super.addListener(listener);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>  void removeListener(SquadronCallback listener) {</code>
        </line>
        <line hits="2">
            <code>    if (_hasRef) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      super.removeListener(listener);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
