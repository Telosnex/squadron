<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-08-02" filename="_pool_worker.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="20" lines-valid="20" package="/src/xplat" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import '../worker.dart';</code>
        </line>
        <line>
            <code>import '../worker_pool.dart';</code>
        </line>
        <line>
            <code>import '../worker_stat.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '_worker_task.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Class representing a [Worker] from a [WorkerPool].</code>
        </line>
        <line>
            <code>class PoolWorker&lt;W extends Worker&gt; {</code>
        </line>
        <line>
            <code>  /// Constructs a new [PoolWorker].</code>
        </line>
        <line hits="2">
            <code>  PoolWorker(this.worker, this._maxWorkload) : _capacity = _maxWorkload;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The [Worker] associated to this [PoolWorker].</code>
        </line>
        <line>
            <code>  final W worker;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final int _maxWorkload;</code>
        </line>
        <line>
            <code>  int? _lastStart;</code>
        </line>
        <line>
            <code>  int _capacity;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The current capacity of this [PoolWorker].</code>
        </line>
        <line hits="3">
            <code>  int get capacity =&gt; _capacity;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Whether this [PoolWorker] is stopped or doing nothing.</code>
        </line>
        <line hits="7">
            <code>  bool get isIdle =&gt; worker.isStopped || _capacity == _maxWorkload;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Run the specified [task] in the [worker].</code>
        </line>
        <line hits="2">
            <code>  Future run(WorkerTask task) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    _lastStart = DateTime.now().millisecondsSinceEpoch;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    _capacity--;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    return task.run(worker).whenComplete(() {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _capacity++;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      if (_capacity == _maxWorkload) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        _lastStart = null;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="1">
            <code>    });</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Compares [PoolWorker] instances by capacity (descending) and last execution (ascending).</code>
        </line>
        <line hits="2">
            <code>  static int compareCapacityDesc(PoolWorker a, PoolWorker b) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>    if (a.capacity != b.capacity) return b.capacity.compareTo(a.capacity);</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (a._lastStart == null) return 1;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (b._lastStart == null) return -1;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    return a._lastStart!.compareTo(b._lastStart!);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="4">
            <code>  static bool isStopped(PoolWorker w) =&gt; w.worker.isStopped;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>  static WorkerStat getStats(PoolWorker w) =&gt; w.worker.stats;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
