<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-08-10" filename="_worker_value_task.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.96153843" lines-covered="25" lines-valid="26" package="/src/xplat" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../perf_counter.dart';</code>
        </line>
        <line>
            <code>import '../squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker.dart';</code>
        </line>
        <line>
            <code>import '../worker_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker_task.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '_worker_task.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class WorkerValueTask&lt;T, W extends Worker&gt; extends WorkerTask&lt;T, W&gt;</code>
        </line>
        <line>
            <code>    implements ValueTask&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// Creates a new [ValueTask].</code>
        </line>
        <line hits="3">
            <code>  WorkerValueTask(this._computer, PerfCounter? counter) : super(counter);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final Future&lt;T&gt; Function(W worker) _computer;</code>
        </line>
        <line>
            <code>  final _completer = Completer&lt;T&gt;();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  Future&lt;T&gt; get value =&gt; _completer.future;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _completeWithError(SquadronException exception) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    wrapUp(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>        () =&gt; _completer.completeError(exception, exception.stackTrace), false);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _completeWithResult(dynamic data) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    wrapUp(() =&gt; _completer.complete(data), true);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  void cancel([String? message]) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    super.cancel(message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (!isRunning &amp;&amp; !isFinished) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _completeWithError(cancelledException!);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="2">
            <code>  Future run(W worker) async {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    await super.run(worker);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    try {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (isCancelled) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>        throw CancelledException();</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="4">
            <code>      final value = await _computer(worker);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _completeWithResult(value);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    } catch (ex, st) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _completeWithError(SquadronException.from(ex, st));</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
