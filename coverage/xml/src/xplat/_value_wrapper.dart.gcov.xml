<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-08-03" filename="_value_wrapper.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.82758623" lines-covered="24" lines-valid="29" package="/src/xplat" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../cancellation_token.dart';</code>
        </line>
        <line>
            <code>import '../channel.dart';</code>
        </line>
        <line>
            <code>import '../squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker_request.dart';</code>
        </line>
        <line>
            <code>import '../worker_response.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Wraps a stream of messages coming in from a worker in response to a worker request.</code>
        </line>
        <line>
            <code>class ValueWrapper&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// Constructs a new value wrapper on top of [messages] (stream of messages received from the worker). The</code>
        </line>
        <line>
            <code>  /// compute operation will be initiated by calling [compute], which will send the [request] to the worker</code>
        </line>
        <line>
            <code>  /// using [postMethod].</code>
        </line>
        <line hits="2">
            <code>  ValueWrapper(WorkerRequest request,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      {required PostMethod postMethod,</code>
        </line>
        <line>
            <code>      required Stream messages,</code>
        </line>
        <line>
            <code>      CancellationToken? token,</code>
        </line>
        <line>
            <code>      required bool inspectRequest})</code>
        </line>
        <line>
            <code>      : _request = request,</code>
        </line>
        <line>
            <code>        _postMethod = postMethod,</code>
        </line>
        <line>
            <code>        _token = token,</code>
        </line>
        <line>
            <code>        _inspectRequest = inspectRequest,</code>
        </line>
        <line hits="1">
            <code>        _completer = Completer&lt;T&gt;() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    _token?.addListener(_canceller);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    _sub = messages.listen(</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      (message) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        final cancelException = _token?.exception;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        if (cancelException != null) {</code>
        </line>
        <line hits="0">
            <code>          _completer.completeError(cancelException, cancelException.stackTrace);</code>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="2">
            <code>        final res = WorkerResponse.deserialize(message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        if (res == null) return;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>        final error = res.error;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        if (error != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>          _completer.completeError(error, error.stackTrace);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        } else {</code>
        </line>
        <line hits="4">
            <code>          _completer.complete(res.result);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="1">
            <code>      },</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      onError: (e, st) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>        final error = SquadronException.from(e, st);</code>
        </line>
        <line hits="0">
            <code>        _completer.completeError(error, error.stackTrace);</code>
        </line>
        <line hits="0">
            <code>      },</code>
        </line>
        <line>
            <code>      cancelOnError: false,</code>
        </line>
        <line>
            <code>    );</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final WorkerRequest _request;</code>
        </line>
        <line>
            <code>  final PostMethod _postMethod;</code>
        </line>
        <line>
            <code>  final CancellationToken? _token;</code>
        </line>
        <line>
            <code>  final bool _inspectRequest;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  late final Completer&lt;T&gt; _completer;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  late final StreamSubscription _sub;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  void _canceller() =&gt; _postMethod(WorkerRequest.cancel(_token!), false);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  Future&lt;T&gt; compute() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    // initiate operation now!</code>
        </line>
        <line hits="5">
            <code>    _postMethod(_request, _inspectRequest);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    return _completer.future.whenComplete(() {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _sub.cancel();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      _token?.removeListener(_canceller);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    });</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
