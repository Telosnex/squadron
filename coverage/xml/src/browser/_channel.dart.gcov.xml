<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-03-02" filename="_channel.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.7642276" lines-covered="94" lines-valid="123" package="/src/browser" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code>import 'dart:html' as web;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../xplat/_stream_wrapper.dart';</code>
        </line>
        <line>
            <code>import '../cancellation_token.dart';</code>
        </line>
        <line>
            <code>import '../channel.dart' show Channel, WorkerChannel;</code>
        </line>
        <line>
            <code>import '../squadron.dart';</code>
        </line>
        <line>
            <code>import '../squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker_request.dart';</code>
        </line>
        <line>
            <code>import '../worker_response.dart';</code>
        </line>
        <line>
            <code>import '../worker_service.dart';</code>
        </line>
        <line>
            <code>import '../xplat/_value_wrapper.dart';</code>
        </line>
        <line>
            <code>import '_transferables.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class _BaseJsChannel {</code>
        </line>
        <line>
            <code>  /// [web.MessagePort] to communicate with the [web.Worker] if the channel is owned by the worker owner. Otherwise,</code>
        </line>
        <line>
            <code>  /// [web.MessagePort] to return values to the client.</code>
        </line>
        <line>
            <code>  web.MessagePort? _sendPort;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The ID of the worker attached to this [Channel].</code>
        </line>
        <line>
            <code>  String get workerId =&gt; _workerId ?? '';</code>
        </line>
        <line>
            <code>  String? _workerId;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] serialization in JavaScript world returns the [web.MessagePort].</code>
        </line>
        <line hits="1">
            <code>  dynamic serialize() =&gt; _sendPort;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void _postRequest(WorkerRequest req, bool inspectRequest) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    req.cancelToken?.ensureStarted();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final message = req.serialize();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    try {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      final transfer = &lt;Object&gt;[];</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (inspectRequest) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>        transfer.addAll(Transferables.get(message));</code>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="1">
            <code>        if (req.client != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          transfer.add(req.client!.serialize());</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="1">
            <code>      _sendPort!.postMessage(message, transfer);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } catch (ex) {</code>
        </line>
        <line hits="1">
            <code>      Squadron.severe('failed to post request $message: error $ex');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      rethrow;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void _postResponse(WorkerResponse res, bool inspectResponse) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final message = res.serialize();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>    try {</code>
        </line>
        <line hits="1">
            <code>      if (inspectResponse) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        final transfer = Transferables.get(message).toList();</code>
        </line>
        <line hits="0">
            <code>        _sendPort!.postMessage(message, transfer);</code>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="1">
            <code>        _sendPort!.postMessage(message);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    } catch (ex) {</code>
        </line>
        <line hits="0">
            <code>      Squadron.severe('failed to post response $message: error $ex');</code>
        </line>
        <line hits="0">
            <code>      rethrow;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [Channel] implementation for the JavaScript world.</code>
        </line>
        <line>
            <code>class _JsChannel extends _BaseJsChannel implements Channel {</code>
        </line>
        <line hits="1">
            <code>  _JsChannel._();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] sharing in JavaScript world returns a [_JsForwardChannel].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  Channel share() =&gt; _JsForwardChannel._(_sendPort!);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a termination [WorkerRequest] to the [web.Worker] and clears the [web.MessagePort].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  FutureOr close() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (_sendPort != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      _postRequest(WorkerRequest.stop(), false);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      _sendPort = null;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a [web.MessageChannel] and a [WorkerRequest] and sends it to the [web.Worker]. This method expects a</code>
        </line>
        <line>
            <code>  /// single value from the [web.Worker].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  Future&lt;T&gt; sendRequest&lt;T&gt;(int command, List args,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      {CancellationToken? token,</code>
        </line>
        <line>
            <code>      bool inspectRequest = false,</code>
        </line>
        <line>
            <code>      bool inspectResponse = false}) {</code>
        </line>
        <line>
            <code>    final com = web.MessageChannel();</code>
        </line>
        <line hits="1">
            <code>    final wrapper = ValueWrapper&lt;T&gt;(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      WorkerRequest(com.port2, command, args, token, inspectResponse),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      postMethod: _postRequest,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      messages: com.port1.onMessage.map((event) =&gt; event.data),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      token: token,</code>
        </line>
        <line>
            <code>      inspectRequest: inspectRequest,</code>
        </line>
        <line>
            <code>    );</code>
        </line>
        <line hits="1">
            <code>    return wrapper.compute().whenComplete(() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      com.port1.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      com.port2.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    });</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a [web.MessageChannel] and a [WorkerRequest] and sends it to the [web.Worker]. This method expects a</code>
        </line>
        <line>
            <code>  /// stream of values from the [web.Worker]. The [web.Worker] must send a [WorkerResponse.endOfStream] to close</code>
        </line>
        <line>
            <code>  /// the [Stream].</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  Stream&lt;T&gt; sendStreamingRequest&lt;T&gt;(int command, List args,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      {SquadronCallback onDone = Channel.noop,</code>
        </line>
        <line>
            <code>      CancellationToken? token,</code>
        </line>
        <line>
            <code>      bool inspectRequest = false,</code>
        </line>
        <line>
            <code>      bool inspectResponse = false}) {</code>
        </line>
        <line hits="1">
            <code>    final com = web.MessageChannel();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final wrapper = StreamWrapper&lt;T&gt;(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      WorkerRequest(com.port2, command, args, token, inspectResponse),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      postMethod: _postRequest,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      messages: com.port1.onMessage.map((event) =&gt; event.data),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      onDone: () {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        com.port1.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        onDone();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      },</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      token: token,</code>
        </line>
        <line>
            <code>      inspectRequest: inspectRequest,</code>
        </line>
        <line>
            <code>    );</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>    return wrapper.stream;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [WorkerChannel] implementation for the JavaScript world.</code>
        </line>
        <line>
            <code>class _JsWorkerChannel extends _BaseJsChannel implements WorkerChannel {</code>
        </line>
        <line hits="1">
            <code>  _JsWorkerChannel._();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends the [web.MessagePort] to communicate with the [web.Worker]. This method must be called by the</code>
        </line>
        <line>
            <code>  /// [web.Worker] upon startup.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  void connect(Object channelInfo) {</code>
        </line>
        <line>
            <code>    if (channelInfo is web.MessagePort) {</code>
        </line>
        <line>
            <code>      reply(channelInfo, true);</code>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line>
            <code>      throw WorkerException(</code>
        </line>
        <line>
            <code>          'invalid channelInfo ${channelInfo.runtimeType}: MessagePort expected');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends the [streamId] to the client. If the client cancels the streaming operation, it should inform the</code>
        </line>
        <line>
            <code>  /// [Worker] that the stream has been cancelled on the client-side.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  void connectStream(int streamId) {</code>
        </line>
        <line hits="1">
            <code>    reply(streamId, false);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse] with the specified data to the worker client. This method must be called from the</code>
        </line>
        <line>
            <code>  /// [web.Worker] only.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  void reply(dynamic data, bool inspectResponse) =&gt;</code>
        </line>
        <line hits="1">
            <code>      _postResponse(WorkerResponse(data), inspectResponse);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  void log(String message) =&gt; _postResponse(WorkerResponse.log(message), false);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Checks if [stream] can be streamed back to the worker client. Returns `true` for browser platforms.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  bool canStream(Stream stream) =&gt; true;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse.closeStream] to the worker client. This method must be called from the [web.Worker]</code>
        </line>
        <line>
            <code>  /// only.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  void closeStream() =&gt; _postResponse(WorkerResponse.closeStream, false);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends the [WorkerResponse] to the worker client. This method must be called from the [web.Worker] only.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  void error(SquadronException error) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    Squadron.debug(() =&gt; 'replying with error: $error');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    _postResponse(WorkerResponse.withError(error), false);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [Channel] used to communicate between [web.Worker]s. Creates a [web.MessageChannel] to receive commands on</code>
        </line>
        <line>
            <code>/// [web.MessageChannel.port2] and forwards them to the worker's [web.MessagePort] via [web.MessageChannel.port1].</code>
        </line>
        <line>
            <code>class _JsForwardChannel extends _JsChannel {</code>
        </line>
        <line>
            <code>  /// [remote] is the worker's [web.MessagePort]</code>
        </line>
        <line hits="1">
            <code>  _JsForwardChannel._(web.MessagePort remote) : super._() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    _remote = remote;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    _com.port1.onMessage.listen(_forward);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    _sendPort = _com.port2;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [web.MessagePort] to the worker.</code>
        </line>
        <line>
            <code>  web.MessagePort? _remote;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [web.MessageChannel] used for forwarding messages.</code>
        </line>
        <line>
            <code>  final _com = web.MessageChannel();</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Forwards [web.MessageEvent.data] to the worker.</code>
        </line>
        <line hits="1">
            <code>  void _forward(web.MessageEvent e) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final message = e.data;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>    try {</code>
        </line>
        <line hits="1">
            <code>      final transfer = Transferables.get(message).toList();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      _remote!.postMessage(message, transfer);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } catch (ex) {</code>
        </line>
        <line hits="0">
            <code>      Squadron.severe('failed to forward $message: error $ex');</code>
        </line>
        <line hits="0">
            <code>      rethrow;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Closes this [Channel], effectively stopping message forwarding.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void close() {</code>
        </line>
        <line hits="0">
            <code>    _remote = null;</code>
        </line>
        <line hits="0">
            <code>    _com.port1.close();</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Stub implementations</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Starts a [web.Worker] using the [entryPoint] and sends a start [WorkerRequest] with [startArguments]. The future</code>
        </line>
        <line>
            <code>/// completes after the [web.Worker]'s main program has provided the [web.MessagePort] via [_JsWorkerChannel.connect].</code>
        </line>
        <line hits="1">
            <code>Future&lt;Channel&gt; openChannel(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    dynamic entryPoint, String workerId, List startArguments) {</code>
        </line>
        <line>
            <code>  final completer = Completer&lt;Channel&gt;();</code>
        </line>
        <line>
            <code>  final channel = _JsChannel._();</code>
        </line>
        <line>
            <code>  final com = web.MessageChannel();</code>
        </line>
        <line hits="1">
            <code>  final worker = web.Worker(entryPoint);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  final startRequest = WorkerRequest.start(com.port2, workerId, startArguments);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  Squadron.config('created Web Worker #$workerId');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  worker.onError.listen(</code>
        </line>
        <line hits="1">
            <code>    (event) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      String msg;</code>
        </line>
        <line hits="0">
            <code>      if (event is web.ErrorEvent) {</code>
        </line>
        <line>
            <code>        final error = event;</code>
        </line>
        <line>
            <code>        msg =</code>
        </line>
        <line hits="0">
            <code>            '$entryPoint =&gt; ${error.message} [${error.filename}(${error.lineno})]';</code>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="0">
            <code>        msg = '$entryPoint: ${event.type} / $event';</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="0">
            <code>      final error = WorkerException(msg);</code>
        </line>
        <line hits="0">
            <code>      Squadron.warning(</code>
        </line>
        <line hits="0">
            <code>          'Unhandled error from Web worker #$workerId: ${error.message}.');</code>
        </line>
        <line hits="0">
            <code>      if (!completer.isCompleted) {</code>
        </line>
        <line hits="0">
            <code>        completer.completeError(error, error.stackTrace);</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="0">
            <code>    },</code>
        </line>
        <line>
            <code>  );</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  com.port1.onMessage.listen(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    (event) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      final response = WorkerResponse.deserialize(event.data);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (response == null) return;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>      if (!completer.isCompleted) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        final error = response.error;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        if (error != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          worker.terminate();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          Squadron.severe(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>              'connection to Web Worker #$workerId failed: ${response.error}');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          completer.completeError(error, error.stackTrace);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        } else {</code>
        </line>
        <line hits="1">
            <code>          channel._sendPort = response.result;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          channel._workerId = startRequest.id;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          Squadron.config('connected to Web Worker #$workerId');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          completer.complete(channel);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="0">
            <code>        Squadron.config('unexpected response: ${response.serialize()}');</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="1">
            <code>    },</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  );</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  final message = startRequest.serialize();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>  try {</code>
        </line>
        <line>
            <code>    final transfer = Transferables.get(message).toList();</code>
        </line>
        <line hits="1">
            <code>    worker.postMessage(message, transfer);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>  } catch (ex, st) {</code>
        </line>
        <line hits="0">
            <code>    com.port1.close();</code>
        </line>
        <line hits="0">
            <code>    com.port2.close();</code>
        </line>
        <line hits="0">
            <code>    worker.terminate();</code>
        </line>
        <line hits="0">
            <code>    Squadron.severe('failed to post connection request $message: error $ex');</code>
        </line>
        <line hits="0">
            <code>    completer.completeError(SquadronException.from(ex, st), st);</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line hits="1">
            <code>  return completer.future;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>}</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Creates a [_JsChannel] from a [web.MessagePort].</code>
        </line>
        <line>
            <code>Channel? deserializeChannel(dynamic channelInfo) =&gt;</code>
        </line>
        <line hits="1">
            <code>    (channelInfo == null) ? null : (_JsChannel._().._sendPort = channelInfo);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Creates a [_JsWorkerChannel] from a [web.MessagePort].</code>
        </line>
        <line hits="1">
            <code>WorkerChannel? deserializeWorkerChannel(dynamic channelInfo) =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    (channelInfo == null)</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        ? null</code>
        </line>
        <line hits="1">
            <code>        : (_JsWorkerChannel._().._sendPort = channelInfo);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
