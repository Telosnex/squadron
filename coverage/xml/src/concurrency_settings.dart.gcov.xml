<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-05-08" filename="concurrency_settings.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="6" lines-valid="6" package="/src" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>/// Concurrency settings governing parallelization of workers in a [WorkerPool].</code>
        </line>
        <line>
            <code>class ConcurrencySettings {</code>
        </line>
        <line hits="5">
            <code>  const ConcurrencySettings(</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      {this.minWorkers = 0, this.maxWorkers = 0, this.maxParallel = 1})</code>
        </line>
        <line hits="2">
            <code>      : assert(minWorkers &gt;= 0),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        assert(maxWorkers &gt;= 0),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        assert(minWorkers &lt;= maxWorkers),</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        assert(maxParallel &gt;= 1);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Minimum number of workers in the pool.</code>
        </line>
        <line>
            <code>  final int minWorkers;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Maximum number of workers in the pool.</code>
        </line>
        <line>
            <code>  /// If this is set to 0, the number of workers is unbounded (as a result, any task posted to the pool will be assigned a worker asap).</code>
        </line>
        <line>
            <code>  final int maxWorkers;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Maximum number of tasks that can be posted to a worker.</code>
        </line>
        <line>
            <code>  final int maxParallel;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Maximum number of running tasks.</code>
        </line>
        <line hits="4">
            <code>  int get maxConcurrency =&gt; maxWorkers * maxParallel;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// 50 tasks per worker with at most 1 worker.</code>
        </line>
        <line>
            <code>  static const oneIoThread =</code>
        </line>
        <line>
            <code>      ConcurrencySettings(minWorkers: 0, maxWorkers: 1, maxParallel: 50);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// 50 tasks per worker with at most 2 workers.</code>
        </line>
        <line>
            <code>  static const twoIoThreads =</code>
        </line>
        <line>
            <code>      ConcurrencySettings(minWorkers: 0, maxWorkers: 2, maxParallel: 50);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// 50 tasks per worker, 1 to 4 workers.</code>
        </line>
        <line>
            <code>  static const fourIoThreads =</code>
        </line>
        <line>
            <code>      ConcurrencySettings(minWorkers: 1, maxWorkers: 4, maxParallel: 50);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// 50 tasks per worker, 1 to 8 workers.</code>
        </line>
        <line>
            <code>  static const eightIoThreads =</code>
        </line>
        <line>
            <code>      ConcurrencySettings(minWorkers: 1, maxWorkers: 8, maxParallel: 50);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// 1 task per worker, 1 workers.</code>
        </line>
        <line>
            <code>  static const oneCpuThread =</code>
        </line>
        <line>
            <code>      ConcurrencySettings(minWorkers: 1, maxWorkers: 1, maxParallel: 1);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// 1 task per worker, 1 to 3 workers.</code>
        </line>
        <line>
            <code>  static const threeCpuThreads =</code>
        </line>
        <line>
            <code>      ConcurrencySettings(minWorkers: 1, maxWorkers: 3, maxParallel: 1);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// 1 tasks per worker, 1 to 7 workers.</code>
        </line>
        <line>
            <code>  static const sevenCpuThreads =</code>
        </line>
        <line>
            <code>      ConcurrencySettings(minWorkers: 1, maxWorkers: 7, maxParallel: 1);</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
