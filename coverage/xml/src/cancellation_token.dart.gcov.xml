<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-06-19" filename="cancellation_token.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9259259" lines-covered="25" lines-valid="27" package="/src" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'package:meta/meta.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'worker_exception.dart';</code>
        </line>
        <line>
            <code>import 'worker_request.dart';</code>
        </line>
        <line>
            <code>import 'worker_service.dart' show SquadronCallback;</code>
        </line>
        <line>
            <code>import 'xplat/_helpers.dart';</code>
        </line>
        <line>
            <code>import 'xplat/_token_id.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Base cancellation token.</code>
        </line>
        <line>
            <code>class CancellationToken {</code>
        </line>
        <line hits="1">
            <code>  CancellationToken._(this.message, this._id);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="4">
            <code>  CancellationToken([String? message]) : this._(message, TokenId.next());</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static const _$id = 0;</code>
        </line>
        <line>
            <code>  static const _$message = 1;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Message associated with the token.</code>
        </line>
        <line>
            <code>  final String? message;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The token's id</code>
        </line>
        <line hits="2">
            <code>  String get id =&gt; _id;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  String _id;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Exception to be thrown upon cancellation</code>
        </line>
        <line hits="3">
            <code>  CancelledException? get exception =&gt; _exception;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  CancelledException? _exception;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Flag indicating whether the token was cancelled or not.</code>
        </line>
        <line hits="2">
            <code>  bool get cancelled =&gt; exception != null;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  List&lt;SquadronCallback&gt;? _listeners;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Registers a [listener] that will be notified when the token is cancelled. If the token is already cancelled,</code>
        </line>
        <line>
            <code>  /// the [listener] will be called immediately.</code>
        </line>
        <line hits="2">
            <code>  void addListener(SquadronCallback listener) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (cancelled) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      safeInvoke(listener);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="4">
            <code>      (_listeners ??= &lt;SquadronCallback&gt;[]).add(listener);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Cancels the token and notifies listeners.</code>
        </line>
        <line hits="2">
            <code>  void cancel([CancelledException? exception]) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    _exception ??= (exception ?? CancelledException(message: message));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    for (var listener in _listeners ?? const []) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      safeInvoke(listener);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Called just before processing a [WorkerRequest], but should only be implemented by cancellation</code>
        </line>
        <line>
            <code>  /// tokens that need to cancel automatically (eg. a timeout token).</code>
        </line>
        <line hits="2">
            <code>  void ensureStarted() {}</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Await this method in Worker code to give cancellation requests a chance</code>
        </line>
        <line>
            <code>  /// to come through.</code>
        </line>
        <line hits="0">
            <code>  Future&lt;bool&gt; isCancelled({bool throwIfCancelled = false}) =&gt; Future(() {</code>
        </line>
        <line>
            <code>        // throw if the token has been cancelled</code>
        </line>
        <line hits="0">
            <code>        final ex = exception;</code>
        </line>
        <line>
            <code>        return (ex == null)</code>
        </line>
        <line>
            <code>            ? false</code>
        </line>
        <line>
            <code>            : throwIfCancelled</code>
        </line>
        <line>
            <code>                ? throw ex</code>
        </line>
        <line>
            <code>                : true;</code>
        </line>
        <line>
            <code>      });</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Unregisters a listener that has been installed with [addListener].</code>
        </line>
        <line hits="2">
            <code>  void removeListener(SquadronCallback listener) =&gt;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      _listeners?.remove(listener);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Seralization of a [CancellationToken]</code>
        </line>
        <line hits="6">
            <code>  List serialize() =&gt; List.unmodifiable([_id, message]);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Deseralization of a [CancellationToken]</code>
        </line>
        <line hits="2">
            <code>  static CancellationToken? deserialize(List? token) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (token == null) return null;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    return CancellationToken._(token[_$message], token[_$id]);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>@internal</code>
        </line>
        <line>
            <code>extension TokenIdExt on CancellationToken {</code>
        </line>
        <line hits="3">
            <code>  void withId(String id) =&gt; _id = id;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
