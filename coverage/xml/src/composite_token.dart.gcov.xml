<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-06-22" filename="composite_token.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9354839" lines-covered="29" lines-valid="31" package="/src" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'cancellation_token.dart';</code>
        </line>
        <line>
            <code>import 'squadron_error.dart';</code>
        </line>
        <line>
            <code>import 'worker_exception.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Composite token cancellation mode</code>
        </line>
        <line hits="0">
            <code>enum CompositeMode {</code>
        </line>
        <line>
            <code>  /// the [CompositeToken] is cancelled iif all tokens get cancelled</code>
        </line>
        <line>
            <code>  all,</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// the [CompositeToken] is cancelled as soon as one of the tokens gets cancelled</code>
        </line>
        <line>
            <code>  any</code>
        </line>
        <line hits="0">
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Composite cancellation token. The token is cancelled automatically depending on [mode]: with [CompositeMode.any],</code>
        </line>
        <line>
            <code>/// the composite token is cancelled as soon as when one of the tokens is cancelled. With [CompositeMode.any], the</code>
        </line>
        <line>
            <code>/// composite token is cancelled when all tokens are cancelled.</code>
        </line>
        <line>
            <code>class CompositeToken extends CancellationToken {</code>
        </line>
        <line hits="2">
            <code>  CompositeToken(Iterable&lt;CancellationToken&gt; tokens, this.mode,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      [String message = 'The token was cancelled'])</code>
        </line>
        <line hits="3">
            <code>      : assert(tokens.isNotEmpty),</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        _tokens = List.unmodifiable(tokens),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        _signaled = 0,</code>
        </line>
        <line hits="1">
            <code>        super(message) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    for (var token in _tokens) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (token.cancelled) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        _signaled++;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="3">
            <code>        token.addListener(() {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>          _signaled++;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          _check();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        });</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="2">
            <code>    _check();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final CompositeMode mode;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final List&lt;CancellationToken&gt; _tokens;</code>
        </line>
        <line>
            <code>  int _signaled;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Throws an exception, composite tokens may not be cancelled programmatically.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void cancel([CancelledException? exception]) =&gt; throw newSquadronError(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      'CompositeToken cannot be cancelled programmatically',</code>
        </line>
        <line hits="2">
            <code>      StackTrace.current);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Called just before processing a [WorkerRequest]. This method calls the [ensureStarted] method</code>
        </line>
        <line>
            <code>  /// for all tokens registered with this [CompositeToken].</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  void ensureStarted() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    for (var token in _tokens) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      token.ensureStarted();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  void _check() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (!cancelled) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      if (mode == CompositeMode.any &amp;&amp; _signaled &gt;= 1) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        final exception =</code>
        </line>
        <line hits="7">
            <code>            _tokens.map((t) =&gt; t.exception).firstWhere((e) =&gt; e != null);</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        super.cancel(exception);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>      } else if (mode == CompositeMode.all &amp;&amp; _signaled &gt;= _tokens.length) {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        super.cancel();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
