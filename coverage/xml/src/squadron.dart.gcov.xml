<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-05-08" filename="squadron.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.94871795" lines-covered="37" lines-valid="39" package="/src" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'channel.dart';</code>
        </line>
        <line>
            <code>import 'squadron_logger.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Squadron "Singleton". The main application thread and each worker thread will have their own private</code>
        </line>
        <line>
            <code>/// [Squadron] singleton.</code>
        </line>
        <line>
            <code>class Squadron {</code>
        </line>
        <line hits="0">
            <code>  Squadron._();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  static int _logLevel = SquadronLogLevel.off;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Gets the [logLevel]. Propagates to workers with the value that was set at the time the worker</code>
        </line>
        <line>
            <code>  /// was created. Changes to this property do not propagate to workers after they have started.</code>
        </line>
        <line hits="4">
            <code>  static int get logLevel =&gt; _logger?.logLevel ?? _logLevel;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sets the [logLevel]. Changes to this property do not propagate to workers after they have started.</code>
        </line>
        <line hits="2">
            <code>  static set logLevel(int value) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    _logger?.logLevel = value;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    _logLevel = value;</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="3">
            <code>  static final List&lt;int&gt; _logLevels = [];</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Remembers the current [logLevel], then setting it to [value] if not null. See [popLogLevel].</code>
        </line>
        <line hits="2">
            <code>  static void pushLogLevel([int? value]) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    _logLevels.add(Squadron.logLevel);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (value != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      Squadron.logLevel = value;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Restores the [logLevel] to the value it had before the last call to [pushLogLevel]. If [pushLogLevel]</code>
        </line>
        <line>
            <code>  /// was never called, this method has no effect.</code>
        </line>
        <line hits="1">
            <code>  static void popLogLevel() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    if (_logLevels.isNotEmpty) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      Squadron.logLevel = _logLevels.removeAt(0);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static SquadronLogger? _logger;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sets the current [logger] and sets the logger's [SquadronLogger.logLevel] to [Squadron.logLevel].</code>
        </line>
        <line hits="2">
            <code>  static void setLogger(SquadronLogger? logger) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final level = logLevel;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    _logger = logger;</code>
        </line>
        <line hits="2">
            <code>    _logger?.logLevel = level;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Flag indicating whether Squadron runs in debug mode. When running in debug mode.</code>
        </line>
        <line>
            <code>  static bool debugMode = false;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static String? _id;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Squadron instance id to track identity of threads/workers. Returns `&lt;undefined&gt;` if it has not been set</code>
        </line>
        <line>
            <code>  /// yet.</code>
        </line>
        <line hits="2">
            <code>  static String get id =&gt; _id ?? '&lt;undefined&gt;';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sets the Squadron instance id. Once set, the `id` cannot be modified.</code>
        </line>
        <line hits="2">
            <code>  static setId(String value) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (_id == null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      value = value.trim();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (value.isNotEmpty) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        _id ??= value;</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// `WorkerChannel` to communicate with the parent. In the main thread, this will be `null`.</code>
        </line>
        <line hits="0">
            <code>  static WorkerChannel? get parentChannel =&gt; _parentChannel;</code>
        </line>
        <line>
            <code>  static WorkerChannel? _parentChannel;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sets the `WorkerChannel` to communicate with the parent. Once set, the `parentChannel` cannot be modified.</code>
        </line>
        <line>
            <code>  /// When setting the parent channel, this method also installs a logger to forward log messages to the parent.</code>
        </line>
        <line hits="1">
            <code>  static setParent(WorkerChannel parentChannel) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    if (_parentChannel == null) {</code>
        </line>
        <line>
            <code>      _parentChannel ??= parentChannel;</code>
        </line>
        <line hits="1">
            <code>      _logger = ParentSquadronLogger(parentChannel);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.debug] level. If [Squadron.debugMode] is `true`, the message will be</code>
        </line>
        <line>
            <code>  /// displayed regardless of [Squadron.logLevel]. If `false`, [Squadron.logLevel] must be set to</code>
        </line>
        <line>
            <code>  /// [SquadronLogLevel.all].</code>
        </line>
        <line hits="3">
            <code>  static void debug(dynamic message) =&gt; _logger?.debug(message);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.finest] level</code>
        </line>
        <line hits="3">
            <code>  static void finest(dynamic message) =&gt; _logger?.finest(message);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.finer] level</code>
        </line>
        <line hits="3">
            <code>  static void finer(dynamic message) =&gt; _logger?.finer(message);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.fine] level</code>
        </line>
        <line hits="3">
            <code>  static void fine(dynamic message) =&gt; _logger?.fine(message);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.config] level</code>
        </line>
        <line hits="3">
            <code>  static void config(dynamic message) =&gt; _logger?.config(message);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.info] level</code>
        </line>
        <line hits="3">
            <code>  static void info(dynamic message) =&gt; _logger?.info(message);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.warning] level</code>
        </line>
        <line hits="3">
            <code>  static void warning(dynamic message) =&gt; _logger?.warning(message);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.severe] level</code>
        </line>
        <line hits="3">
            <code>  static void severe(dynamic message) =&gt; _logger?.severe(message);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Logs a message at [SquadronLogLevel.shout] level</code>
        </line>
        <line hits="3">
            <code>  static void shout(dynamic message) =&gt; _logger?.shout(message);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>// for internal use</code>
        </line>
        <line hits="2">
            <code>SquadronLogger? getSquadronLogger() =&gt; Squadron._logger;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Logs a message</code>
        </line>
        <line hits="2">
            <code>void squadronLog(String message) =&gt; Squadron._logger?.log(message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
