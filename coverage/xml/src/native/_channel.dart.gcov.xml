<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-04-05" filename="_channel.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9292929" lines-covered="92" lines-valid="99" package="/src/native" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code>import 'dart:isolate';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../cancellation_token.dart';</code>
        </line>
        <line>
            <code>import '../channel.dart' show Channel, WorkerChannel;</code>
        </line>
        <line>
            <code>import '../squadron.dart';</code>
        </line>
        <line>
            <code>import '../squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker_request.dart';</code>
        </line>
        <line>
            <code>import '../worker_response.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class _SendPort {</code>
        </line>
        <line>
            <code>  /// [SendPort] to communicate with the [Isolate] if the channel is owned by the worker owner.</code>
        </line>
        <line>
            <code>  /// Otherwise, [SendPort] to return values to the client.</code>
        </line>
        <line>
            <code>  SendPort? _sendPort;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] serialization in Native world returns the [SendPort].</code>
        </line>
        <line hits="2">
            <code>  dynamic serialize() =&gt; _sendPort;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void _postRequest(WorkerRequest req) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final message = req.serialize();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    try {</code>
        </line>
        <line hits="2">
            <code>      _sendPort!.send(message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } catch (ex) {</code>
        </line>
        <line hits="2">
            <code>      Squadron.severe('failed to post request $message: error $ex');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      rethrow;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void _postResponse(WorkerResponse res) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final message = res.serialize();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    try {</code>
        </line>
        <line hits="2">
            <code>      _sendPort!.send(message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } catch (ex) {</code>
        </line>
        <line hits="2">
            <code>      Squadron.severe('failed to post response $message: error $ex');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      rethrow;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [Channel] implementation for the Native world.</code>
        </line>
        <line>
            <code>class _VmChannel extends _SendPort implements Channel {</code>
        </line>
        <line hits="1">
            <code>  _VmChannel._();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] sharing in Native world returns the same instance.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  Channel share() =&gt; this;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a termination [WorkerRequest] to the [Isolate] and clears the [SendPort].</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  FutureOr close() {</code>
        </line>
        <line hits="1">
            <code>    if (_sendPort != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _postRequest(WorkerRequest.stop());</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      _sendPort = null;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a [web.MessageChannel] and a [WorkerRequest] and sends it to the [web.Worker].</code>
        </line>
        <line>
            <code>  /// This method expects a single value from the [web.Worker].</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  void notifyCancellation(CancellationToken token) {</code>
        </line>
        <line hits="1">
            <code>    if (token.cancelled) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _postRequest(WorkerRequest.cancel(token));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// creates a [ReceivePort] and a [WorkerRequest] and sends it to the [Isolate]</code>
        </line>
        <line>
            <code>  /// this method expects a single value from the [Isolate]</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  Future&lt;T&gt; sendRequest&lt;T&gt;(int command, List args,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      {CancellationToken? token}) async {</code>
        </line>
        <line hits="1">
            <code>    final receiver = ReceivePort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    _postRequest(WorkerRequest(receiver.sendPort, command, args, token));</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    final res = WorkerResponse.deserialize(await receiver.first);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    return res.result as T;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a [ReceivePort] and a [WorkerRequest] and sends it to the [Isolate].</code>
        </line>
        <line>
            <code>  /// This method expects a stream of values from the [Isolate].</code>
        </line>
        <line>
            <code>  /// The [Isolate] must send a [WorkerResponse.endOfStream] to close the [Stream].</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  Stream&lt;T&gt; sendStreamingRequest&lt;T&gt;(int command, List args,</code>
        </line>
        <line>
            <code>      {CancellationToken? token}) {</code>
        </line>
        <line hits="1">
            <code>    final controller = StreamController&lt;T&gt;();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final receiver = ReceivePort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    receiver.listen((message) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      final res = WorkerResponse.deserialize(message);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (res.endOfStream) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        controller.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        receiver.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      } else if (res.hasError) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>        controller.addError(res.error!, res.error!.stackTrace);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        controller.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        receiver.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="2">
            <code>        controller.add(res.result);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    });</code>
        </line>
        <line hits="3">
            <code>    _postRequest(WorkerRequest(receiver.sendPort, command, args, token));</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    return controller.stream;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [WorkerChannel] implementation for the native world.</code>
        </line>
        <line>
            <code>class _VmWorkerChannel extends _SendPort implements WorkerChannel {</code>
        </line>
        <line hits="1">
            <code>  _VmWorkerChannel._();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends the [SendPort] to communicate with the [Isolate].</code>
        </line>
        <line>
            <code>  /// This method must be called by the [Isolate] upon startup.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  void connect(Object channelInfo) {</code>
        </line>
        <line hits="1">
            <code>    if (channelInfo is ReceivePort) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      reply(channelInfo.sendPort);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="0">
            <code>      throw WorkerException(</code>
        </line>
        <line hits="0">
            <code>          'invalid channelInfo ${channelInfo.runtimeType}: ReceivePort expected');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse] with the specified data to the worker client.</code>
        </line>
        <line>
            <code>  /// This method must be called from the [Isolate] only.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void reply(dynamic data) =&gt; _postResponse(WorkerResponse(data));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse.closeStream] to the worker client.</code>
        </line>
        <line>
            <code>  /// This method must be called from the [Isolate] only.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  void closeStream() =&gt; _postResponse(WorkerResponse.closeStream);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends the [WorkerException] to the worker client.</code>
        </line>
        <line>
            <code>  /// This method must be called from the [Isolate] only.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  void error(SquadronException error) {</code>
        </line>
        <line hits="2">
            <code>    Squadron.finer('replying with error: $error');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    _postResponse(WorkerResponse.withError(error));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Stub implementations.</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>int _counter = 0;</code>
        </line>
        <line hits="1">
            <code>String _getId() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  _counter++;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  return '${Squadron.id}.$_counter';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Starts an [Isolate] using the [entryPoint] and sends a start [WorkerRequest] with [startArguments].</code>
        </line>
        <line>
            <code>/// The future completes after the [Isolate]'s main program has provided the [SendPort] via [_VmWorkerChannel.connect].</code>
        </line>
        <line hits="1">
            <code>Future&lt;Channel&gt; openChannel(dynamic entryPoint, List startArguments) async {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  final completer = Completer&lt;Channel&gt;();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  final channel = _VmChannel._();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  final receiver = ReceivePort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  Isolate.spawn(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          entryPoint,</code>
        </line>
        <line hits="3">
            <code>          WorkerRequest.start(receiver.sendPort, _getId(), startArguments)</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>              .serialize(),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          paused: true)</code>
        </line>
        <line hits="2">
            <code>      .then((isolate) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final exitPort = ReceivePort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    exitPort.listen((message) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      channel.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    });</code>
        </line>
        <line hits="2">
            <code>    isolate.addOnExitListener(exitPort.sendPort);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final errorPort = ReceivePort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    errorPort.listen((message) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      dynamic error = message[0];</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (error is String) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        error = SquadronException.fromString(error);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="1">
            <code>      if (error is! SquadronException) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>        error = SquadronException.from(</code>
        </line>
        <line hits="0">
            <code>            error: message[0] ?? 'unspecified error',</code>
        </line>
        <line hits="0">
            <code>            stackTrace: SquadronException.loadStackTrace(message[1]));</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="1">
            <code>      if (!completer.isCompleted) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        completer.completeError(error);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="0">
            <code>        Squadron.warning('unhandled error $error');</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    });</code>
        </line>
        <line hits="2">
            <code>    isolate.addErrorListener(errorPort.sendPort);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    isolate.resume(isolate.pauseCapability!);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    Squadron.config('created Isolate #${isolate.hashCode}');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    receiver.first.then((message) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      final response = WorkerResponse.deserialize(message);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      if (!completer.isCompleted) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        if (response.hasError) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          isolate.kill(priority: Isolate.immediate);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          Squadron.severe(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>              'connection to Isolate #${isolate.hashCode} failed: ${response.error}');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>          completer.completeError(response.error!, response.error!.stackTrace);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        } else {</code>
        </line>
        <line hits="2">
            <code>          channel._sendPort = response.result;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>          Squadron.config('connected to Isolate #${isolate.hashCode}');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          completer.complete(channel);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    });</code>
        </line>
        <line hits="1">
            <code>  }).catchError((error, stackTrace) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>    completer.completeError(error, stackTrace);</code>
        </line>
        <line>
            <code>  });</code>
        </line>
        <line hits="1">
            <code>  return completer.future;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Creates a [_VmChannel] from a [SendPort].</code>
        </line>
        <line hits="1">
            <code>Channel? deserializeChannel(dynamic channelInfo) =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    (channelInfo == null) ? null : (_VmChannel._().._sendPort = channelInfo);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Creates a [_VmWorkerChannel] from a [SendPort].</code>
        </line>
        <line hits="1">
            <code>WorkerChannel? deserializeWorkerChannel(dynamic channelInfo) =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    (channelInfo == null)</code>
        </line>
        <line>
            <code>        ? null</code>
        </line>
        <line hits="2">
            <code>        : (_VmWorkerChannel._().._sendPort = channelInfo);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
