<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-10-18" filename="_channel.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9484536" lines-covered="92" lines-valid="97" package="/src/native" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code>import 'dart:isolate';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../xplat/_stream_wrapper.dart';</code>
        </line>
        <line>
            <code>import '../cancellation_token.dart';</code>
        </line>
        <line>
            <code>import '../channel.dart' show Channel, WorkerChannel;</code>
        </line>
        <line>
            <code>import '../squadron.dart';</code>
        </line>
        <line>
            <code>import '../squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker_exception.dart';</code>
        </line>
        <line>
            <code>import '../worker_request.dart';</code>
        </line>
        <line>
            <code>import '../worker_response.dart';</code>
        </line>
        <line>
            <code>import '../worker_service.dart';</code>
        </line>
        <line>
            <code>import '../xplat/_value_wrapper.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class _BaseVmChannel {</code>
        </line>
        <line>
            <code>  /// [SendPort] to communicate with the [Isolate] if the channel is owned by the worker owner. Otherwise, [SendPort]</code>
        </line>
        <line>
            <code>  /// to return values to the client.</code>
        </line>
        <line>
            <code>  SendPort? _sendPort;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The ID of the worker attached to this [Channel].</code>
        </line>
        <line hits="2">
            <code>  String get workerId =&gt; _workerId ?? '';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  String? _workerId;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] serialization in Native world returns the [SendPort].</code>
        </line>
        <line hits="2">
            <code>  dynamic serialize() =&gt; _sendPort;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void _postRequest(WorkerRequest req, bool inspectRequest) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    req.cancelToken?.ensureStarted();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final message = req.serialize();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    try {</code>
        </line>
        <line hits="2">
            <code>      _sendPort!.send(message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } catch (ex) {</code>
        </line>
        <line hits="2">
            <code>      Squadron.severe('failed to post request $message: error $ex');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      rethrow;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void _postResponse(WorkerResponse res, bool inspectResponse) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final message = res.serialize();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    try {</code>
        </line>
        <line hits="2">
            <code>      _sendPort!.send(message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } catch (ex) {</code>
        </line>
        <line hits="2">
            <code>      Squadron.severe('failed to post response $message: error $ex');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      rethrow;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [Channel] implementation for the Native world.</code>
        </line>
        <line>
            <code>class _VmChannel extends _BaseVmChannel implements Channel {</code>
        </line>
        <line hits="1">
            <code>  _VmChannel._();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] sharing in Native world returns the same instance.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  Channel share() =&gt; this;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a termination [WorkerRequest] to the [Isolate] and clears the [SendPort].</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  FutureOr close() {</code>
        </line>
        <line hits="1">
            <code>    if (_sendPort != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _postRequest(WorkerRequest.stop(), false);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      _sendPort = null;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// creates a [ReceivePort] and a [WorkerRequest] and sends it to the [Isolate]. This method expects a single</code>
        </line>
        <line>
            <code>  /// value from the [Isolate]</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  Future&lt;T&gt; sendRequest&lt;T&gt;(int command, List args,</code>
        </line>
        <line>
            <code>      {CancellationToken? token,</code>
        </line>
        <line>
            <code>      bool inspectRequest = false,</code>
        </line>
        <line>
            <code>      bool inspectResponse = false}) {</code>
        </line>
        <line hits="1">
            <code>    final receiver = ReceivePort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final wrapper = ValueWrapper&lt;T&gt;(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      WorkerRequest(receiver.sendPort, command, args, token, inspectResponse),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      postMethod: _postRequest,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      messages: receiver,</code>
        </line>
        <line>
            <code>      token: token,</code>
        </line>
        <line>
            <code>      inspectRequest: inspectRequest,</code>
        </line>
        <line>
            <code>    );</code>
        </line>
        <line hits="4">
            <code>    return wrapper.compute().whenComplete(() =&gt; receiver.close());</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a [ReceivePort] and a [WorkerRequest] and sends it to the [Isolate]. This method expects a stream of</code>
        </line>
        <line>
            <code>  /// values from the [Isolate]. The [Isolate] must send a [WorkerResponse.endOfStream] to close the [Stream].</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  Stream&lt;T&gt; sendStreamingRequest&lt;T&gt;(int command, List args,</code>
        </line>
        <line>
            <code>      {SquadronCallback onDone = Channel.noop,</code>
        </line>
        <line>
            <code>      CancellationToken? token,</code>
        </line>
        <line>
            <code>      bool inspectRequest = false,</code>
        </line>
        <line>
            <code>      bool inspectResponse = false}) {</code>
        </line>
        <line hits="1">
            <code>    final receiver = ReceivePort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final wrapper = StreamWrapper&lt;T&gt;(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      WorkerRequest(receiver.sendPort, command, args, token, inspectResponse),</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      postMethod: _postRequest,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      messages: receiver,</code>
        </line>
        <line hits="1">
            <code>      onDone: () {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        receiver.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        onDone();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      },</code>
        </line>
        <line>
            <code>      token: token,</code>
        </line>
        <line>
            <code>      inspectRequest: inspectRequest,</code>
        </line>
        <line>
            <code>    );</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>    return wrapper.stream;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [WorkerChannel] implementation for the native world.</code>
        </line>
        <line>
            <code>class _VmWorkerChannel extends _BaseVmChannel implements WorkerChannel {</code>
        </line>
        <line hits="1">
            <code>  _VmWorkerChannel._();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends the [SendPort] to communicate with the [Isolate]. This method must be called by the [Isolate] upon</code>
        </line>
        <line>
            <code>  /// startup.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  void connect(Object channelInfo) {</code>
        </line>
        <line hits="1">
            <code>    if (channelInfo is ReceivePort) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      reply(channelInfo.sendPort, true);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="0">
            <code>      throw WorkerException(</code>
        </line>
        <line hits="0">
            <code>          'invalid channelInfo ${channelInfo.runtimeType}: ReceivePort expected');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends the [streamId] to the client. If the client cancels the streaming operation, it should inform the</code>
        </line>
        <line>
            <code>  /// [Worker] that the stream has been cancelled on the client-side.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  void connectStream(int streamId) {</code>
        </line>
        <line hits="1">
            <code>    reply(streamId, false);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse] with the specified data to the worker client. This method must be called from the</code>
        </line>
        <line>
            <code>  /// [Isolate] only.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  void reply(dynamic data, bool inspectResponse) =&gt;</code>
        </line>
        <line hits="2">
            <code>      _postResponse(WorkerResponse(data), inspectResponse);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void log(String message) =&gt; _postResponse(WorkerResponse.log(message), false);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Checks if [stream] can be streamed back to the worker client. Returns `true` unless [stream] is a</code>
        </line>
        <line>
            <code>  /// [ReceivePort].</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  bool canStream(Stream stream) =&gt; stream is! ReceivePort;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse.closeStream] to the worker client. This method must be called from the [Isolate] only.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void closeStream() =&gt; _postResponse(WorkerResponse.closeStream, false);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends the [WorkerException] to the worker client. This method must be called from the [Isolate] only.</code>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  void error(SquadronException error) {</code>
        </line>
        <line hits="2">
            <code>    Squadron.debug('replying with error: $error');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    _postResponse(WorkerResponse.withError(error), false);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Stub implementations.</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Starts an [Isolate] using the [entryPoint] and sends a start [WorkerRequest] with [startArguments]. The future</code>
        </line>
        <line>
            <code>/// completes after the [Isolate]'s main program has provided the [SendPort] via [_VmWorkerChannel.connect].</code>
        </line>
        <line hits="1">
            <code>Future&lt;Channel&gt; openChannel(dynamic entryPoint, List startArguments) async {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  final completer = Completer&lt;Channel&gt;();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  final channel = _VmChannel._();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  final receiver = ReceivePort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  final startRequest = WorkerRequest.start(receiver.sendPort, startArguments);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  final workerId = startRequest.id;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  final isolate = await Isolate.spawn(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    entryPoint,</code>
        </line>
        <line hits="1">
            <code>    startRequest.serialize(),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    errorsAreFatal: false,</code>
        </line>
        <line>
            <code>    paused: true,</code>
        </line>
        <line>
            <code>  );</code>
        </line>
        <line hits="2">
            <code>  Squadron.config('created Isolate #$workerId');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  final exitPort = ReceivePort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  final errorPort = ReceivePort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  exitPort.listen((message) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    Squadron.config('Isolate #$workerId terminated.');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    channel.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    receiver.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    exitPort.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    errorPort.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  });</code>
        </line>
        <line hits="2">
            <code>  isolate.addOnExitListener(exitPort.sendPort);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  errorPort.listen((message) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final error = SquadronException.fromString(message[0]) ??</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>        WorkerException(message[0],</code>
        </line>
        <line hits="0">
            <code>            stackTrace: SquadronException.loadStackTrace(message[1]));</code>
        </line>
        <line hits="1">
            <code>    Squadron.warning(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        'Unhandled error from Isolate #$workerId: ${error.message}.');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    if (!completer.isCompleted) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      completer.completeError(error, error.stackTrace);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  });</code>
        </line>
        <line hits="2">
            <code>  isolate.addErrorListener(errorPort.sendPort);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  receiver.listen((message) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    final response = WorkerResponse.deserialize(message);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    if (response == null) return;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>    if (!completer.isCompleted) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      final error = response.error;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      if (error != null) {</code>
        </line>
        <line hits="1">
            <code>        isolate.kill(priority: Isolate.immediate);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        Squadron.severe(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>            'connection to Isolate #$workerId failed: ${response.error}');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        completer.completeError(error, error.stackTrace);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="2">
            <code>        channel._sendPort = response.result;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        channel._workerId = workerId;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        Squadron.config('connected to Isolate #$workerId');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        completer.complete(channel);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="0">
            <code>      Squadron.config('unexpected response: ${response.serialize()}');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  });</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  isolate.resume(isolate.pauseCapability!);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  return completer.future;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Creates a [_VmChannel] from a [SendPort].</code>
        </line>
        <line hits="1">
            <code>Channel? deserializeChannel(dynamic channelInfo) =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    (channelInfo == null) ? null : (_VmChannel._().._sendPort = channelInfo);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Creates a [_VmWorkerChannel] from a [SendPort].</code>
        </line>
        <line hits="1">
            <code>WorkerChannel? deserializeWorkerChannel(dynamic channelInfo) =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    (channelInfo == null)</code>
        </line>
        <line>
            <code>        ? null</code>
        </line>
        <line hits="2">
            <code>        : (_VmWorkerChannel._().._sendPort = channelInfo);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
