<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2022-09-14" filename="local_worker_client.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="5" lines-valid="5" package="/src" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'cancellation_token.dart';</code>
        </line>
        <line>
            <code>import 'channel.dart';</code>
        </line>
        <line>
            <code>import 'local_worker.dart';</code>
        </line>
        <line>
            <code>import 'worker_request.dart';</code>
        </line>
        <line>
            <code>import 'worker_service.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Base class used to communicate with a [LocalWorker].</code>
        </line>
        <line>
            <code>///</code>
        </line>
        <line>
            <code>/// Typically, derived classes should add proxy methods sending [WorkerRequest]s to the worker.</code>
        </line>
        <line>
            <code>class LocalWorkerClient implements WorkerService {</code>
        </line>
        <line>
            <code>  /// Create a client for a [LocalWorker]. The [channel] passed to this client must have been obtained by</code>
        </line>
        <line>
            <code>  /// calling [Channel.share] on the [LocalWorker.channel].</code>
        </line>
        <line hits="1">
            <code>  LocalWorkerClient(this.channel);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The [Channel] to communicate with the [LocalWorker].</code>
        </line>
        <line>
            <code>  final Channel channel;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a command to the [LocalWorker].</code>
        </line>
        <line hits="1">
            <code>  Future&lt;T&gt; send&lt;T&gt;(int command,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          {List args = const [],</code>
        </line>
        <line>
            <code>          CancellationToken? token,</code>
        </line>
        <line>
            <code>          bool inspectRequest = false,</code>
        </line>
        <line>
            <code>          bool inspectResponse = false}) =&gt;</code>
        </line>
        <line hits="2">
            <code>      channel.sendRequest&lt;T&gt;(command, args,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          token: token,</code>
        </line>
        <line>
            <code>          inspectRequest: inspectRequest,</code>
        </line>
        <line>
            <code>          inspectResponse: inspectResponse);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a streaming command to the [LocalWorker].</code>
        </line>
        <line hits="1">
            <code>  Stream&lt;T&gt; stream&lt;T&gt;(int command,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          {List args = const [],</code>
        </line>
        <line>
            <code>          CancellationToken? token,</code>
        </line>
        <line>
            <code>          bool inspectRequest = false,</code>
        </line>
        <line>
            <code>          bool inspectResponse = false}) =&gt;</code>
        </line>
        <line hits="2">
            <code>      channel.sendStreamingRequest&lt;T&gt;(command, args,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          onDone: Channel.noop,</code>
        </line>
        <line>
            <code>          token: token,</code>
        </line>
        <line>
            <code>          inspectRequest: inspectRequest,</code>
        </line>
        <line>
            <code>          inspectResponse: inspectResponse);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Local worker clients do not need an [operations] map.</code>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  final Map&lt;int, CommandHandler&gt; operations = WorkerService.noOperations;</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
