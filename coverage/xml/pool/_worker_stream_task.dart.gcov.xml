<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-08-10" filename="_worker_stream_task.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.85" lines-covered="34" lines-valid="40" package="/pool" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../_impl/xplat/_forward_stream_controller.dart';</code>
        </line>
        <line>
            <code>import '../exceptions/squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../stats/perf_counter.dart';</code>
        </line>
        <line>
            <code>import '../worker/worker.dart';</code>
        </line>
        <line>
            <code>import '_worker_task.dart';</code>
        </line>
        <line>
            <code>import 'stream_task.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class WorkerStreamTask&lt;T, W extends Worker&gt; extends WorkerTask&lt;T, W&gt;</code>
        </line>
        <line>
            <code>    implements StreamTask&lt;T&gt; {</code>
        </line>
        <line>
            <code>  /// Creates a new [StreamTask].</code>
        </line>
        <line hits="12">
            <code>  WorkerStreamTask(this._producer, PerfCounter? counter) : super(counter) {</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="16">
            <code>    _controller = ForwardStreamController&lt;T&gt;(onListen: () async {</code>
            <hit count="16" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      try {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>        throwIfCanceled();</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>        if (_controller.isClosed) return;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>        final stream = await _streamer.future;</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>        if (_controller.isClosed) {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          // we might have a problem here: the controller is closed but the worker</code>
        </line>
        <line>
            <code>          // has started streaming; cancel the operation</code>
        </line>
        <line hits="0">
            <code>          stream.listen((_) {}).cancel();</code>
        </line>
        <line>
            <code>        } else {</code>
        </line>
        <line hits="16">
            <code>          _controller.attachSubscription(stream.listen(</code>
            <hit count="16" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>            _onData,</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>            onError: _onError,</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>            onDone: _controller.close,</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>            cancelOnError: false,</code>
        </line>
        <line>
            <code>          ));</code>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="0">
            <code>      } catch (ex, st) {</code>
        </line>
        <line hits="0">
            <code>        _closeWithError(SquadronException.from(ex, st));</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="4">
            <code>    });</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>  }</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final Stream&lt;T&gt; Function(W worker) _producer;</code>
        </line>
        <line>
            <code>  final _streamer = Completer&lt;Stream&lt;T&gt;&gt;();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="5">
            <code>  late final ForwardStreamController&lt;T&gt; _controller;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="4">
            <code>  @override</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>  Stream&lt;T&gt; get stream =&gt; _controller.stream;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void _closeWithError(SquadronException ex) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    _controller.addError(ex);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    _controller.close();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="17">
            <code>  void _onData(T data) =&gt; _controller.add(data);</code>
            <hit count="17" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="16">
            <code>  void _onError(ex, st) =&gt; _controller.addError(SquadronException.from(ex, st));</code>
            <hit count="16" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  void cancel([String? message]) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    super.cancel(message);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    _closeWithError(canceledException!);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="4">
            <code>  @override</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>  Future&lt;bool&gt; execute(W worker) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    try {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      throwIfCanceled();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>      final stream = _producer(worker);</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>      _streamer.complete(stream);</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20">
            <code>      return _controller.done.then((_) =&gt; true);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>    } catch (ex, st) {</code>
        </line>
        <line hits="0">
            <code>      _closeWithError(SquadronException.from(ex, st));</code>
        </line>
        <line hits="0">
            <code>      return Future.value(false);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="4">
            <code>  }</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
