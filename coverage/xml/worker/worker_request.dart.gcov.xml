<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-09-10" filename="worker_request.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9459459" lines-covered="35" lines-valid="37" package="/worker" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'package:meta/meta.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../channel.dart';</code>
        </line>
        <line>
            <code>import '../exceptions/squadron_error.dart';</code>
        </line>
        <line>
            <code>import '../squadron.dart';</code>
        </line>
        <line>
            <code>import '../tokens/cancellation_token.dart';</code>
        </line>
        <line>
            <code>import 'worker.dart';</code>
        </line>
        <line>
            <code>import 'worker_channel.dart';</code>
        </line>
        <line>
            <code>import 'worker_message.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Make [WorkerRequest] a [WorkerMessage] to minimize serialization overhead.</code>
        </line>
        <line>
            <code>typedef WorkerRequest = WorkerMessage;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Extension methods operating on a `List` as a [WorkerRequest]. [WorkerRequest]s are used to communicate from a</code>
        </line>
        <line>
            <code>/// [Channel] to a [Worker]. Typically a [WorkerRequest] consists of a command ID and a list of arguments. The</code>
        </line>
        <line>
            <code>/// [command] ID is used by the [Worker] to dispatch the [WorkerRequest] to the method responsible for handling</code>
        </line>
        <line>
            <code>/// it.</code>
        </line>
        <line>
            <code>/// The command's arguments are passed as a list and should only contain primitive values or objects that can be</code>
        </line>
        <line>
            <code>/// transfered across workers. For applications running on a VM platform, Dart objects should be safe according to</code>
        </line>
        <line>
            <code>/// Dart's documentation of [SendPort.send]. [WorkerRequestImpl] also implements specific requests used for worker</code>
        </line>
        <line>
            <code>/// startup, stream/token cancellation, worker termination...</code>
        </line>
        <line>
            <code>extension WorkerRequestImpl on WorkerRequest {</code>
        </line>
        <line>
            <code>  // 0 is reserved for travel time</code>
        </line>
        <line>
            <code>  static const _$client = 1;</code>
        </line>
        <line>
            <code>  static const _$command = 2;</code>
        </line>
        <line>
            <code>  static const _$args = 3;</code>
        </line>
        <line>
            <code>  static const _$token = 4;</code>
        </line>
        <line>
            <code>  static const _$streamId = 5;</code>
        </line>
        <line>
            <code>  static const _$logLevel = 5;</code>
        </line>
        <line>
            <code>  static const _$id = 6;</code>
        </line>
        <line>
            <code>  static const _$inspectResponse = 7;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new request with the specified [command] ID and optional arguments.</code>
        </line>
        <line hits="1">
            <code>  static WorkerRequest userCommand(dynamic channelInfo, int command, List args,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          CancellationToken? token, bool inspectResponse) =&gt;</code>
        </line>
        <line hits="1">
            <code>      [</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 0 - travel time</code>
        </line>
        <line>
            <code>        channelInfo, // 1 - client</code>
        </line>
        <line>
            <code>        command, // 2 - command</code>
        </line>
        <line>
            <code>        args, // 3 - args</code>
        </line>
        <line>
            <code>        token, // 4 - cancellation token</code>
        </line>
        <line>
            <code>        null, // 5 - stream id / log level</code>
        </line>
        <line>
            <code>        null, // 6 - worker id</code>
        </line>
        <line>
            <code>        inspectResponse, // 8 - inspect response</code>
        </line>
        <line>
            <code>      ];</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new start request.</code>
        </line>
        <line hits="2">
            <code>  static WorkerRequest start(dynamic channelInfo, String id, List args) =&gt; [</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 0 - travel time</code>
        </line>
        <line>
            <code>        channelInfo, // 1 - client</code>
        </line>
        <line>
            <code>        _connectCommand, // 2 - command</code>
        </line>
        <line>
            <code>        args, // 3 - args</code>
        </line>
        <line>
            <code>        null, // 4 - cancellation token</code>
        </line>
        <line hits="2">
            <code>        Squadron.logLevel, // 5 - log level</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        id, // 6 - worker id</code>
        </line>
        <line>
            <code>        true, // 7 - inspect response</code>
        </line>
        <line>
            <code>      ];</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new stream cancellation request.</code>
        </line>
        <line hits="2">
            <code>  static WorkerRequest cancelStream(int streamId) =&gt; [</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 0 - travel time</code>
        </line>
        <line>
            <code>        null, // 1 - client</code>
        </line>
        <line>
            <code>        _cancelStreamCommand, // 2 - command</code>
        </line>
        <line>
            <code>        null, // 3 - args</code>
        </line>
        <line>
            <code>        null, // 4 - cancellation token</code>
        </line>
        <line>
            <code>        streamId, // 5 - stream id</code>
        </line>
        <line>
            <code>        null, // 6 - worker id</code>
        </line>
        <line>
            <code>        null, // 7 - inspect response</code>
        </line>
        <line>
            <code>      ];</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new cancellation request.</code>
        </line>
        <line hits="2">
            <code>  static WorkerRequest cancel(CancellationToken token) =&gt; [</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 0 - travel time</code>
        </line>
        <line>
            <code>        null, // 1 - client</code>
        </line>
        <line>
            <code>        _cancelCommand, // 2 - command</code>
        </line>
        <line>
            <code>        null, // 3 - args</code>
        </line>
        <line>
            <code>        token, // 4 - cancellation token</code>
        </line>
        <line>
            <code>        null, // 5 - stream id / log level</code>
        </line>
        <line>
            <code>        null, // 6 - worker id</code>
        </line>
        <line>
            <code>        null, // 7 - inspect response</code>
        </line>
        <line>
            <code>      ];</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new termination request.</code>
        </line>
        <line hits="2">
            <code>  static WorkerRequest stop() =&gt; [</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 0 - travel time</code>
        </line>
        <line>
            <code>        null, // 1 - client</code>
        </line>
        <line>
            <code>        _terminateCommand, // 2 - command</code>
        </line>
        <line>
            <code>        null, // 3 - args</code>
        </line>
        <line>
            <code>        null, // 4 - cancellation token</code>
        </line>
        <line>
            <code>        null, // 5 - stream id / log level</code>
        </line>
        <line>
            <code>        null, // 6 - worker id</code>
        </line>
        <line>
            <code>        null, // 7 - inspect response</code>
        </line>
        <line>
            <code>      ];</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The client's [WorkerChannel]. Only valid on the receiving end.</code>
        </line>
        <line hits="3">
            <code>  WorkerChannel? get client =&gt; this[_$client];</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The channel method to be used for sending data back.</code>
        </line>
        <line hits="1">
            <code>  void Function(dynamic)? get reply =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      inspectResponse ? client?.inspectAndReply : client?.reply;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The client's channel info.</code>
        </line>
        <line hits="1">
            <code>  dynamic get channelInfo =&gt; this[_$client];</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Cancellation token.</code>
        </line>
        <line hits="3">
            <code>  CancellationToken? get cancelToken =&gt; this[_$token];</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Stream id.</code>
        </line>
        <line hits="3">
            <code>  int? get streamId =&gt; this[_$streamId];</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The current Squadron log level. This is set automatically and only used for connection commands.</code>
        </line>
        <line hits="2">
            <code>  int? get logLevel =&gt; this[_$logLevel];</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The [command]'s ID.</code>
        </line>
        <line hits="3">
            <code>  int get command =&gt; this[_$command];</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The ID of the worker that initiated the command (only used for connection commands).</code>
        </line>
        <line hits="2">
            <code>  String? get id =&gt; this[_$id];</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The command's arguments, if any.</code>
        </line>
        <line hits="3">
            <code>  List get args =&gt; this[_$args];</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Flag indicating whether the Channel should inspect the payload to identify non-base type objects. In</code>
        </line>
        <line>
            <code>  /// Web workers, ownership of these objects must be transfered across threads.</code>
        </line>
        <line hits="3">
            <code>  bool get inspectResponse =&gt; this[_$inspectResponse];</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// flag for start requests.</code>
        </line>
        <line hits="3">
            <code>  bool get isConnection =&gt; (command == _connectCommand);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// flag for stream cancellation requests.</code>
        </line>
        <line hits="3">
            <code>  bool get isStreamCancellation =&gt; (command == _cancelStreamCommand);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// flag for cancellation requests.</code>
        </line>
        <line hits="3">
            <code>  bool get isCancellation =&gt; (command == _cancelCommand);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// flag for termination requests.</code>
        </line>
        <line hits="3">
            <code>  bool get isTermination =&gt; (command == _terminateCommand);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static const int _connectCommand = -1;</code>
        </line>
        <line>
            <code>  static const int _cancelStreamCommand = -2;</code>
        </line>
        <line>
            <code>  static const int _cancelCommand = -3;</code>
        </line>
        <line>
            <code>  static const int _terminateCommand = -4;</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>@internal</code>
        </line>
        <line>
            <code>extension WorkerRequestExt on WorkerRequest {</code>
        </line>
        <line>
            <code>  static const _$client = WorkerRequestImpl._$client;</code>
        </line>
        <line>
            <code>  static const _$args = WorkerRequestImpl._$args;</code>
        </line>
        <line>
            <code>  static const _$token = WorkerRequestImpl._$token;</code>
        </line>
        <line>
            <code>  static const _$inspectResponse = WorkerRequestImpl._$inspectResponse;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// In-place deserialization of a [WorkerRequest] received by the worker.</code>
        </line>
        <line hits="1">
            <code>  void unwrapRequest() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    this[_$client] = WorkerChannel.deserialize(this[_$client]);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    this[_$token] = CancellationToken.deserialize(this[_$token]);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    this[_$inspectResponse] ??= false;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    this[_$args] ??= const [];</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    setTravelTime();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// In-place serialization of a [WorkerRequest].</code>
        </line>
        <line hits="2">
            <code>  void wrapRequest() {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    this[_$token] = (this[_$token] as CancellationToken?)?.serialize();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    initTravelTime();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  void overrideCancelToken(CancellationToken token) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    if (cancelToken == null || cancelToken!.id != token.id) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create(</code>
        </line>
        <line hits="0">
            <code>          'cancellation token mismatch', StackTrace.current);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>    this[_$token] = token;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
