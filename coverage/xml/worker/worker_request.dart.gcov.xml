<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-09-07" filename="worker_request.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9583333" lines-covered="46" lines-valid="48" package="/worker" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'package:meta/meta.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../_impl/xplat/_helpers.dart';</code>
        </line>
        <line>
            <code>import '../_impl/xplat/_internal_logger.dart';</code>
        </line>
        <line>
            <code>import '../exceptions/squadron_error.dart';</code>
        </line>
        <line>
            <code>import '../tokens/_squadron_cancelation_token.dart';</code>
        </line>
        <line>
            <code>import '../typedefs.dart';</code>
        </line>
        <line>
            <code>import 'worker.dart';</code>
        </line>
        <line>
            <code>import 'worker_channel.dart';</code>
        </line>
        <line>
            <code>import 'worker_message.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [WorkerRequest]s are used to communicate from a client to a [Worker].</code>
        </line>
        <line>
            <code>/// Typically a [WorkerRequest] consists of a command ID and a list of</code>
        </line>
        <line>
            <code>/// arguments. The [command] ID is used by the [Worker] to dispatch the</code>
        </line>
        <line>
            <code>/// [WorkerRequest] to the method responsible for handling it.</code>
        </line>
        <line>
            <code>/// The command's arguments are passed as a list and should only contain</code>
        </line>
        <line>
            <code>/// primitive values or objects that can be transfered across workers. For</code>
        </line>
        <line>
            <code>/// applications running on a VM platform, Dart objects should be safe</code>
        </line>
        <line>
            <code>/// according to Dart's documentation of [SendPort.send]. [WorkerRequestImpl]</code>
        </line>
        <line>
            <code>/// also implements specific requests used for worker startup, stream/token</code>
        </line>
        <line>
            <code>/// cancelation, worker termination...</code>
        </line>
        <line>
            <code>extension type WorkerRequest._(List data) implements WorkerMessage {</code>
        </line>
        <line>
            <code>  /// Creates a new request with the specified [command] ID and optional arguments.</code>
        </line>
        <line hits="9">
            <code>  static WorkerRequest userCommand(PlatformChannel channelInfo, int command,</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          List args, SquadronCancelationToken? token, bool inspectResponse) =&gt;</code>
        </line>
        <line hits="18">
            <code>      WorkerRequest._([</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>        microsecTimeStamp(), // 0 - travel time</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        channelInfo, // 1 - channel</code>
        </line>
        <line>
            <code>        command, // 2 - command</code>
        </line>
        <line>
            <code>        args, // 3 - args</code>
        </line>
        <line>
            <code>        token, // 4 - cancelation token</code>
        </line>
        <line>
            <code>        null, // 5 - stream id</code>
        </line>
        <line>
            <code>        inspectResponse, // 6 - inspect response</code>
        </line>
        <line>
            <code>      ]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new start request.</code>
        </line>
        <line hits="10">
            <code>  static WorkerRequest start(PlatformChannel channelInfo, List args) =&gt;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20">
            <code>      WorkerRequest._([</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="19">
            <code>        microsecTimeStamp(), // 0 - travel time</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        channelInfo, // 1 - channel</code>
        </line>
        <line>
            <code>        _connectCommand, // 2 - command</code>
        </line>
        <line>
            <code>        args, // 3 - args</code>
        </line>
        <line>
            <code>        null, // 4 - cancelation token</code>
        </line>
        <line>
            <code>        null, // 5 - stream id</code>
        </line>
        <line>
            <code>        true, // 6 - inspect response</code>
        </line>
        <line>
            <code>      ]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new stream cancelation request.</code>
        </line>
        <line hits="9">
            <code>  static WorkerRequest cancelStream(int streamId) =&gt; WorkerRequest._([</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>        microsecTimeStamp(), // 0 - travel time</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 1 - channel</code>
        </line>
        <line>
            <code>        _cancelStreamCommand, // 2 - command</code>
        </line>
        <line>
            <code>        null, // 3 - args</code>
        </line>
        <line>
            <code>        null, // 4 - cancelation token</code>
        </line>
        <line>
            <code>        streamId, // 5 - stream id</code>
        </line>
        <line>
            <code>        null, // 6 - inspect response</code>
        </line>
        <line>
            <code>      ]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new cancelation request.</code>
        </line>
        <line hits="2">
            <code>  static WorkerRequest cancel(SquadronCancelationToken token) =&gt;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      WorkerRequest._([</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>        microsecTimeStamp(), // 0 - travel time</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 1 - channel</code>
        </line>
        <line>
            <code>        _cancelTokenCommand, // 2 - command</code>
        </line>
        <line>
            <code>        null, // 3 - args</code>
        </line>
        <line>
            <code>        token, // 4 - cancelation token</code>
        </line>
        <line>
            <code>        null, // 5 - stream id</code>
        </line>
        <line>
            <code>        null, // 6 - inspect response</code>
        </line>
        <line>
            <code>      ]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a new termination request.</code>
        </line>
        <line hits="27">
            <code>  static WorkerRequest stop() =&gt; WorkerRequest._([</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>        microsecTimeStamp(), // 0 - travel time</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 1 - channel</code>
        </line>
        <line>
            <code>        _terminateCommand, // 2 - command</code>
        </line>
        <line>
            <code>        null, // 3 - args</code>
        </line>
        <line>
            <code>        null, // 4 - cancelation token</code>
        </line>
        <line>
            <code>        null, // 5 - stream id</code>
        </line>
        <line>
            <code>        null, // 6 - inspect response</code>
        </line>
        <line>
            <code>      ]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The client's [WorkerChannel]. Only valid on the receiving end.</code>
        </line>
        <line hits="19">
            <code>  WorkerChannel? get channel =&gt; data[_$channel];</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The channel method to be used for sending data back.</code>
        </line>
        <line hits="9">
            <code>  void Function(dynamic)? get reply =&gt;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="28">
            <code>      inspectResponse ? channel?.inspectAndReply : channel?.reply;</code>
            <hit count="28" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The client's channel info.</code>
        </line>
        <line hits="9">
            <code>  PlatformChannel? get channelInfo =&gt; data[_$channel];</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Cancelation token.</code>
        </line>
        <line hits="27">
            <code>  SquadronCancelationToken? get cancelToken =&gt; data[_$token];</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Stream id.</code>
        </line>
        <line hits="6">
            <code>  int? get streamId =&gt; data[_$streamId];</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The [command]'s ID.</code>
        </line>
        <line hits="27">
            <code>  int get command =&gt; data[_$command];</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The command's arguments, if any.</code>
        </line>
        <line hits="19">
            <code>  List get args =&gt; data[_$args];</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Flag indicating whether the Channel should inspect the payload to identify non-base type objects. In</code>
        </line>
        <line>
            <code>  /// Web Workers, ownership of these objects must be transfered across threads.</code>
        </line>
        <line hits="19">
            <code>  bool get inspectResponse =&gt; data[_$inspectResponse];</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// flag for start requests.</code>
        </line>
        <line hits="27">
            <code>  bool get isConnection =&gt; (command == _connectCommand);</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// flag for stream cancelation requests.</code>
        </line>
        <line hits="27">
            <code>  bool get isStreamCancelation =&gt; (command == _cancelStreamCommand);</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// flag for cancelation requests.</code>
        </line>
        <line hits="27">
            <code>  bool get isTokenCancelation =&gt; (command == _cancelTokenCommand);</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// flag for termination requests.</code>
        </line>
        <line hits="27">
            <code>  bool get isTermination =&gt; (command == _terminateCommand);</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  static const int _connectCommand = -1;</code>
        </line>
        <line>
            <code>  static const int _cancelStreamCommand = -2;</code>
        </line>
        <line>
            <code>  static const int _cancelTokenCommand = -3;</code>
        </line>
        <line>
            <code>  static const int _terminateCommand = -4;</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>// 0 is reserved for travel time</code>
        </line>
        <line>
            <code>const _$channel = 1;</code>
        </line>
        <line>
            <code>const _$command = 2;</code>
        </line>
        <line>
            <code>const _$args = 3;</code>
        </line>
        <line>
            <code>const _$token = 4;</code>
        </line>
        <line>
            <code>const _$streamId = 5;</code>
        </line>
        <line>
            <code>const _$inspectResponse = 6;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>@internal</code>
        </line>
        <line>
            <code>extension WorkerRequestExt on WorkerRequest {</code>
        </line>
        <line>
            <code>  /// In-place deserialization of a [WorkerRequest] received by the worker.</code>
        </line>
        <line hits="9">
            <code>  void unwrapInPlace(InternalLogger? logger) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    unwrapTravelTime();</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="28">
            <code>    data[_$command] = (data[_$command] as num).toInt();</code>
            <hit count="28" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="22">
            <code>    data[_$streamId] = (data[_$streamId] as num?)?.toInt();</code>
            <hit count="22" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="28">
            <code>    data[_$channel] = WorkerChannel.deserialize(data[_$channel], logger);</code>
            <hit count="28" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="28">
            <code>    data[_$token] = SquadronCancelationToken.deserialize(data[_$token]);</code>
            <hit count="28" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    data[_$inspectResponse] ??= false;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    data[_$args] ??= const [];</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// In-place serialization of a [WorkerRequest].</code>
        </line>
        <line hits="19">
            <code>  List wrapInPlace() {</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="19">
            <code>    final token = data[_$token];</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11">
            <code>    if (token is SquadronCancelationToken) {</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>      data[_$token] = token.serialize();</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="9">
            <code>    return data;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>  }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>  static WorkerRequest from(List data) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="19">
            <code>    if (data.length != 7) {</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create('Invalid worker request');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="9">
            <code>    return WorkerRequest._(data);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>@internal</code>
        </line>
        <line>
            <code>extension CancelationTokenExt on WorkerRequest {</code>
        </line>
        <line hits="2">
            <code>  void overrideCancelToken(SquadronCancelationToken token) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    if (cancelToken == null || cancelToken!.id != token.id) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create('Cancelation token mismatch');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="2">
            <code>    data[_$token] = token;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
