<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-05-25" filename="worker.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9579832" lines-covered="114" lines-valid="119" package="/worker" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'package:cancelation_token/cancelation_token.dart';</code>
        </line>
        <line>
            <code>import 'package:logger/logger.dart';</code>
        </line>
        <line>
            <code>import 'package:meta/meta.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../_impl/xplat/_helpers.dart';</code>
        </line>
        <line>
            <code>import '../channel.dart';</code>
        </line>
        <line>
            <code>import '../exceptions/exception_manager.dart';</code>
        </line>
        <line>
            <code>import '../exceptions/squadron_exception.dart';</code>
        </line>
        <line>
            <code>import '../exceptions/worker_exception.dart';</code>
        </line>
        <line>
            <code>import '../iworker.dart';</code>
        </line>
        <line>
            <code>import '../stats/worker_stat.dart';</code>
        </line>
        <line>
            <code>import '../tokens/_squadron_cancelation_token.dart';</code>
        </line>
        <line>
            <code>import '../typedefs.dart';</code>
        </line>
        <line>
            <code>import '../worker/worker_request.dart';</code>
        </line>
        <line>
            <code>import '../worker_service.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Base worker class.</code>
        </line>
        <line>
            <code>///</code>
        </line>
        <line>
            <code>/// This base class takes care of creating the [Channel] and firing up the</code>
        </line>
        <line>
            <code>/// worker. Typically, derived classes should add proxy methods sending</code>
        </line>
        <line>
            <code>/// [WorkerRequest]s to the worker.</code>
        </line>
        <line>
            <code>abstract class Worker&lt;S&gt; implements WorkerService, IWorker {</code>
        </line>
        <line>
            <code>  /// Creates a [Worker] with the specified entrypoint.</code>
        </line>
        <line hits="7">
            <code>  Worker(this._entryPoint,</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      {this.args = const [],</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      PlatformThreadHook? threadHook,</code>
        </line>
        <line>
            <code>      ExceptionManager? exceptionManager})</code>
        </line>
        <line hits="1">
            <code>      : _threadHook = threadHook,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        _exceptionManager = exceptionManager;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The [Worker]'s entry point; typically, a top-level function in native</code>
        </line>
        <line>
            <code>  /// world or the Uri to a JavaScript file in browser world.</code>
        </line>
        <line>
            <code>  final EntryPoint _entryPoint;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  Logger? channelLogger;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="7">
            <code>  @override</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  ExceptionManager get exceptionManager =&gt;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="21">
            <code>      (_exceptionManager ??= ExceptionManager());</code>
            <hit count="21" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  ExceptionManager? _exceptionManager;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final PlatformThreadHook? _threadHook;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The [Worker]'s start arguments.</code>
        </line>
        <line>
            <code>  final List args;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Start timestamp (in microseconds since Epoch).</code>
        </line>
        <line>
            <code>  int? _started;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Stopped timestamp (in microseconds since Epoch).</code>
        </line>
        <line>
            <code>  int? _stopped;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Current workload.</code>
        </line>
        <line hits="9">
            <code>  int get workload =&gt; _workload;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int _workload = 0;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Maximum acceptable workload.</code>
        </line>
        <line hits="10">
            <code>  int get maxWorkload =&gt; _maxWorkload;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int _maxWorkload = 0;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Total processed workload.</code>
        </line>
        <line hits="9">
            <code>  int get totalWorkload =&gt; _totalWorkload;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int _totalWorkload = 0;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Total errors.</code>
        </line>
        <line hits="10">
            <code>  int get totalErrors =&gt; _totalErrors;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int _totalErrors = 0;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Up time.</code>
        </line>
        <line hits="12">
            <code>  Duration get upTime =&gt; (_started == null)</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      ? Duration.zero</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="22">
            <code>      : Duration(microseconds: (_stopped ?? microsecTimeStamp()) - _started!);</code>
            <hit count="22" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Idle time.</code>
        </line>
        <line hits="20">
            <code>  Duration get idleTime =&gt; (_workload &gt; 0 || _idle == null)</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      ? Duration.zero</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20">
            <code>      : Duration(microseconds: microsecTimeStamp() - _idle!);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int? _idle;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Indicates if the [Worker] has been stopped.</code>
        </line>
        <line hits="15">
            <code>  bool get isStopped =&gt; _stopped != null;</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Worker] status.</code>
        </line>
        <line hits="8">
            <code>  String get status {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>    if (isStopped) {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      return 'STOPPED';</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>    } else if (_workload == 0) {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      return 'IDLE';</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="0">
            <code>      return 'WORKING($_workload)';</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="4">
            <code>  }</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Worker] statistics.</code>
        </line>
        <line hits="12">
            <code>  WorkerStat get stats =&gt; WorkerStatExt.create(</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      runtimeType,</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      hashCode,</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      isStopped,</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>      status,</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      workload,</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      maxWorkload,</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      totalWorkload,</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      totalErrors,</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      upTime,</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>      idleTime);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] to communicate with the worker.</code>
        </line>
        <line hits="6">
            <code>  Channel? get channel =&gt; _channel;</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  Channel? _channel;</code>
        </line>
        <line hits="7">
            <code>  Future&lt;Channel&gt;? _openChannel;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a workload to the worker.</code>
        </line>
        <line hits="12">
            <code>  Future&lt;T&gt; send&lt;T&gt;(</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    int command, {</code>
        </line>
        <line>
            <code>    List args = const [],</code>
        </line>
        <line>
            <code>    CancelationToken? token,</code>
        </line>
        <line>
            <code>    bool inspectRequest = false,</code>
        </line>
        <line>
            <code>    bool inspectResponse = false,</code>
        </line>
        <line>
            <code>  }) {</code>
        </line>
        <line>
            <code>    // ensure the worker is up and running</code>
        </line>
        <line hits="12">
            <code>    if (_channel != null) {</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>      return _send(</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>          _channel!, command, args, token, inspectRequest, inspectResponse);</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="10">
            <code>      return start().then((channel) =&gt; _send(</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          channel, command, args, token, inspectRequest, inspectResponse));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="6">
            <code>  }</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="12">
            <code>  Future&lt;T&gt; _send&lt;T&gt;(Channel channel, int command, List args,</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      CancelationToken? token, bool inspectRequest, bool inspectResponse) {</code>
        </line>
        <line>
            <code>    // update stats</code>
        </line>
        <line hits="12">
            <code>    _workload++;</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="24">
            <code>    if (_workload &gt; _maxWorkload) {</code>
            <hit count="24" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>      _maxWorkload = _workload;</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>    // send command</code>
        </line>
        <line hits="12">
            <code>    final squadronToken = channel.wrap(token);</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>    return channel</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>        .sendRequest&lt;T&gt;(command, args,</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>            token: squadronToken,</code>
        </line>
        <line>
            <code>            inspectRequest: inspectRequest,</code>
        </line>
        <line>
            <code>            inspectResponse: inspectResponse)</code>
        </line>
        <line hits="14">
            <code>        .catchError((e, st) {</code>
            <hit count="14" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>      _totalErrors++;</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      throw SquadronException.from(e, st, command);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>    }).whenComplete(() {</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>      _workload--;</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>      _totalWorkload++;</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>      _idle = microsecTimeStamp();</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>    });</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>  }</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a streaming workload to the worker.</code>
        </line>
        <line hits="10">
            <code>  Stream&lt;T&gt; stream&lt;T&gt;(int command,</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      {List args = const [],</code>
        </line>
        <line>
            <code>      CancelationToken? token,</code>
        </line>
        <line>
            <code>      bool inspectRequest = false,</code>
        </line>
        <line>
            <code>      bool inspectResponse = false}) {</code>
        </line>
        <line>
            <code>    // update stats</code>
        </line>
        <line hits="10">
            <code>    _workload++;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20">
            <code>    if (_workload &gt; _maxWorkload) {</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>      _maxWorkload = _workload;</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="5">
            <code>    bool done = false;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    void onDone() {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      if (!done) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>        done = true;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="15">
            <code>        _workload--;</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>        _totalWorkload++;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="15">
            <code>        _idle = microsecTimeStamp();</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="5">
            <code>    }</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="10">
            <code>    if (_channel != null) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      // worker is up and running: return the stream directly</code>
        </line>
        <line hits="15">
            <code>      final squadronToken = _channel!.wrap(token);</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="15">
            <code>      return _channel!.sendStreamingRequest&lt;T&gt;(</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        command,</code>
        </line>
        <line>
            <code>        args,</code>
        </line>
        <line>
            <code>        onDone: onDone,</code>
        </line>
        <line>
            <code>        token: squadronToken,</code>
        </line>
        <line>
            <code>        inspectRequest: inspectRequest,</code>
        </line>
        <line>
            <code>        inspectResponse: inspectResponse,</code>
        </line>
        <line>
            <code>      );</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>    // worker has not started yet: start it and forward the stream via a StreamController</code>
        </line>
        <line hits="1">
            <code>    late final StreamController&lt;T&gt; controller;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    controller = StreamController&lt;T&gt;(onListen: () async {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>      try {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        final channel = await start();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        final squadronToken = _channel!.wrap(token);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        await controller.addStream(channel.sendStreamingRequest&lt;T&gt;(</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          command,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          args,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          onDone: onDone,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          token: squadronToken,</code>
        </line>
        <line hits="1">
            <code>          inspectRequest: inspectRequest,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          inspectResponse: inspectResponse,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        ));</code>
        </line>
        <line hits="0">
            <code>      } catch (ex, st) {</code>
        </line>
        <line hits="0">
            <code>        controller.addError(SquadronException.from(ex, st), st);</code>
        </line>
        <line>
            <code>      } finally {</code>
        </line>
        <line hits="2">
            <code>        controller.close();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        onDone();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line hits="1">
            <code>    });</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    return controller.stream;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>  }</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a [Channel] and starts the worker using the [_entryPoint].</code>
        </line>
        <line hits="7">
            <code>  @override</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>  Future&lt;Channel&gt; start() async {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="14">
            <code>    if (_stopped != null) {</code>
            <hit count="14" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      throw WorkerException('worker is stopped');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="14">
            <code>    if (_channel == null) {</code>
            <hit count="14" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="21">
            <code>      _openChannel ??= Channel.open(</code>
            <hit count="21" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="42">
            <code>          exceptionManager, channelLogger, _entryPoint, args, _threadHook);</code>
            <hit count="42" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="14">
            <code>      final channel = await _openChannel!;</code>
            <hit count="14" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="14">
            <code>      if (_channel == null) {</code>
            <hit count="14" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="14">
            <code>        _channel = channel;</code>
            <hit count="14" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="21">
            <code>        _started = microsecTimeStamp();</code>
            <hit count="21" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="19">
            <code>        _idle = _started;</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="14">
            <code>    return _channel!;</code>
            <hit count="14" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>  }</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Stops this worker.</code>
        </line>
        <line hits="6">
            <code>  @override</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>  void stop() {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>    if (_stopped == null) {</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>      _stopped = microsecTimeStamp();</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>      _openChannel = null;</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>      _channel?.close();</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>      _channel = null;</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="4">
            <code>  }</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Workers do not need an [operations] map.</code>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Map&lt;int, CommandHandler&gt; get operations =&gt; WorkerService.noOperations;</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>@internal</code>
        </line>
        <line>
            <code>extension WorkerExt on Worker {</code>
        </line>
        <line hits="4">
            <code>  void setExceptionManager(ExceptionManager exceptionManager) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>    _exceptionManager ??= exceptionManager;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
