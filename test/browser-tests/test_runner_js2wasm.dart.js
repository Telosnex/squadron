// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.4.3.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is the priority the
//    library should be loaded with as specified in the code via the
//    load-priority annotation (0: normal, 1: high).
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is the
//    priority the library should be loaded with as specified in the code via
//    the load-priority annotation (0: normal, 1: high).
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = string.charCodeAt(index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var t1, index0, codeUnit;
      for (t1 = string.length; index > 0; index = index0) {
        index0 = index - 1;
        if (!(index0 < t1))
          return A.ioore(string, index0);
        codeUnit = string.charCodeAt(index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$_innerHtml$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$_innerHtml(receiver, value);
    },
    set$innerHtml$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
    },
    get$add$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$add(receiver);
    },
    get$attributes$x(receiver) {
      return J.getInterceptor$x(receiver).get$attributes(receiver);
    },
    get$cancel$z(receiver) {
      return J.getInterceptor$z(receiver).get$cancel(receiver);
    },
    get$current$z(receiver) {
      return J.getInterceptor$z(receiver).get$current(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$keys$x(receiver) {
      return J.getInterceptor$x(receiver).get$keys(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$message$z(receiver) {
      return J.getInterceptor$z(receiver).get$message(receiver);
    },
    get$metadata$z(receiver) {
      return J.getInterceptor$z(receiver).get$metadata(receiver);
    },
    get$outerHtml$x(receiver) {
      return J.getInterceptor$x(receiver).get$outerHtml(receiver);
    },
    get$parent$x(receiver) {
      return J.getInterceptor$x(receiver).get$parent(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    get$stream$z(receiver) {
      return J.getInterceptor$z(receiver).get$stream(receiver);
    },
    get$values$x(receiver) {
      return J.getInterceptor$x(receiver).get$values(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    _clearChildren$0$x(receiver) {
      return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
    },
    _removeEventListener$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addEventListener$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    addStream$2$cancelOnError$z(receiver, a0, a1) {
      return J.getInterceptor$z(receiver).addStream$2$cancelOnError(receiver, a0, a1);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    allMatches$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).allMatches$2(receiver, a0, a1);
    },
    cancel$0$z(receiver) {
      return J.getInterceptor$z(receiver).cancel$0(receiver);
    },
    cancel$1$z(receiver, a0) {
      return J.getInterceptor$z(receiver).cancel$1(receiver, a0);
    },
    cancel$2$z(receiver, a0, a1) {
      return J.getInterceptor$z(receiver).cancel$2(receiver, a0, a1);
    },
    clear$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).clear$0(receiver);
    },
    close$0$z(receiver) {
      return J.getInterceptor$z(receiver).close$0(receiver);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    complete$1$z(receiver, a0) {
      return J.getInterceptor$z(receiver).complete$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    containsKey$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).containsKey$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    error$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).error$1(receiver, a0);
    },
    every$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).every$1(receiver, a0);
    },
    fillRange$3$ax(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    forEach$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    map$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).map$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    map$2$1$ax(receiver, a0, $T1, $T2) {
      return J.getInterceptor$ax(receiver).map$2$1(receiver, a0, $T1, $T2);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    message$1$z(receiver, a0) {
      return J.getInterceptor$z(receiver).message$1(receiver, a0);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    postMessage$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).postMessage$1(receiver, a0);
    },
    postMessage$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).postMessage$2(receiver, a0, a1);
    },
    remove$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).remove$0(receiver);
    },
    remove$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
    },
    send$1$1$z(receiver, a0, $T1) {
      return J.getInterceptor$z(receiver).send$1$1(receiver, a0, $T1);
    },
    send$1$2$args$z(receiver, a0, a1, $T1) {
      return J.getInterceptor$z(receiver).send$1$2$args(receiver, a0, a1, $T1);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    start$0$x(receiver) {
      return J.getInterceptor$x(receiver).start$0(receiver);
    },
    stop$0$x(receiver) {
      return J.getInterceptor$x(receiver).stop$0(receiver);
    },
    stream$1$2$token$z(receiver, a0, a1, $T1) {
      return J.getInterceptor$z(receiver).stream$1$2$token(receiver, a0, a1, $T1);
    },
    stream$1$3$args$token$z(receiver, a0, a1, a2, $T1) {
      return J.getInterceptor$z(receiver).stream$1$3$args$token(receiver, a0, a1, a2, $T1);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    terminate$0$x(receiver) {
      return J.getInterceptor$x(receiver).terminate$0(receiver);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toLowerCase$0$s(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toRadixString$1$n(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toSet$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toSet$0(receiver);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    where$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    whereType$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).whereType$1$0(receiver, $T1);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _.__interceptors$_length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    createSentinel() {
      return $;
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI(localName) {
      return new A.LateError("Local '" + localName + "' has not been initialized.");
    },
    CodeUnits$(_string) {
      return new A.CodeUnits(_string);
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      A.ArgumentError_checkNotNull(takeCount, _s9_, type$.int);
      A.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new A.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_, type$.int);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    FollowedByIterable_FollowedByIterable$firstEfficient(first, second, $E) {
      if ($E._eval$1("EfficientLengthIterable<0>")._is(second))
        return new A.EfficientLengthFollowedByIterable(first, second, $E._eval$1("EfficientLengthFollowedByIterable<0>"));
      return new A.FollowedByIterable(first, second, $E._eval$1("FollowedByIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooMany() {
      return new A.StateError("Too many elements");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    LateError: function LateError(t0) {
      this.__internal$_message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipWhileIterable: function SkipWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipWhileIterator: function SkipWhileIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._hasSkipped = false;
      _.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FollowedByIterable: function FollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this.__internal$_second = t1;
      this.$ti = t2;
    },
    EfficientLengthFollowedByIterable: function EfficientLengthFollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this.__internal$_second = t1;
      this.$ti = t2;
    },
    FollowedByIterator: function FollowedByIterator(t0, t1, t2) {
      this._currentIterator = t0;
      this._nextIterable = t1;
      this.$ti = t2;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    NonNullsIterable: function NonNullsIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    NonNullsIterator: function NonNullsIterator(t0, t1) {
      this._source = t0;
      this.__internal$_current = null;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, index, index0, values, map,
        keys = A.List_List$from(other.get$keys(other), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (index = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i, index = index0) {
          k = keys[_i];
          $V._as(other.$index(0, k));
          index0 = index + 1;
          object[k] = index;
        }
        values = A.List_List$from(other.get$values(other), true, $V);
        map = new A.ConstantStringMap(object, values, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
        map.$keys = keys;
        return map;
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    ConstantSet__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify constant Set"));
    },
    instantiate1(f, T1) {
      var t1 = new A.Instantiation1(f, T1._eval$1("Instantiation1<0>"));
      t1.Instantiation$1(f);
      return t1;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((digitsPart.charCodeAt(i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_dateNow() {
      return Date.now();
    },
    Primitives_initTicker() {
      var $window, performance;
      if ($.Primitives_timerFrequency !== 0)
        return;
      $.Primitives_timerFrequency = 1000;
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      if (!!$window.dartUseDateNowForTicks)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new A.Primitives_initTicker_closure(performance);
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
      var value,
        jsMonth = month - 1;
      if (years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      value = Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds);
      if (isNaN(value) || value < -864e13 || value > 864e13)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments._length !== 0)
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var t1, argumentCount, jsStub;
      if (Array.isArray(positionalArguments))
        t1 = namedArguments == null || namedArguments._length === 0;
      else
        t1 = false;
      if (t1) {
        argumentCount = positionalArguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1(positionalArguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2(positionalArguments[0], positionalArguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3(positionalArguments[0], positionalArguments[1], positionalArguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3], positionalArguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, keys, _i, defaultValue, used, key,
        $arguments = Array.isArray(positionalArguments) ? positionalArguments : A.List_List$of(positionalArguments, true, type$.dynamic),
        argumentCount = $arguments.length,
        requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments._length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments._length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (argumentCount > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, $arguments, null);
        if (argumentCount < maxArguments) {
          missingDefaults = defaultValues.slice(argumentCount - requiredParameterCount);
          if ($arguments === positionalArguments)
            $arguments = A.List_List$of($arguments, true, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        }
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if ($arguments === positionalArguments)
          $arguments = A.List_List$of($arguments, true, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[A._asString(keys[_i])];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            key = A._asString(keys[_i]);
            if (namedArguments.containsKey$1(0, key)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, key));
            } else {
              defaultValue = defaultValues[key];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments._length)
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    checkInt(value) {
      if (!A._isInt(value))
        throw A.wrapException(A.argumentErrorValue(value));
      return value;
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(new Error(), ex);
    },
    initializeExceptionWrapper(wrapper, ex) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwExpressionWithWrapper(ex, wrapper) {
      throw A.initializeExceptionWrapper(wrapper, ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    constantHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (key instanceof A._Type)
        return A.Primitives_objectHashCode(key);
      if (key instanceof A._Record)
        return key.get$hashCode(key);
      if (key instanceof A.Symbol)
        return key.get$hashCode(0);
      return A.objectHashCode(key);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    fillLiteralSet(values, result) {
      var index,
        $length = values.length;
      for (index = 0; index < $length; ++index)
        result.add$1(0, values[index]);
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A._CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else
        return !J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex)).get$isEmpty(0);
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    stringReplaceFirstRE(receiver, regexp, replacement, startIndex) {
      var match = regexp._execGlobal$2(receiver, startIndex);
      if (match == null)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, match._match.index, match.get$end(0), replacement);
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern == "string")
        return A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof A.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, A.escapeReplacement(replacement));
      }
      return A.stringReplaceAllGeneral(receiver, pattern, replacement);
    },
    stringReplaceAllGeneral(receiver, pattern, replacement) {
      var t1, startIndex, t2, match;
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), startIndex = 0, t2 = ""; t1.moveNext$0();) {
        match = t1.get$current(t1);
        t2 = t2 + receiver.substring(startIndex, match.get$start(match)) + replacement;
        startIndex = match.get$end(match);
      }
      t1 = t2 + receiver.substring(startIndex);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (receiver.indexOf(pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _stringIdentity(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
      var t1, t2, startIndex, t3, match, t4, t5;
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new A._AllMatchesIterator(t1._re, t1.__js_helper$_string, t1.__js_helper$_start), t2 = type$.RegExpMatch, startIndex = 0, t3 = ""; t1.moveNext$0();) {
        match = t1.__js_helper$_current;
        if (match == null)
          match = t2._as(match);
        t4 = match._match;
        t5 = t4.index;
        t3 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$2(receiver, startIndex, t5))) + A.S(onMatch.call$1(match));
        startIndex = t5 + t4[0].length;
      }
      t1 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index, t1, matches, match;
      if (typeof pattern == "string") {
        index = receiver.indexOf(pattern, startIndex);
        if (index < 0)
          return receiver;
        return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
      }
      if (pattern instanceof A.JSSyntaxRegExp)
        return startIndex === 0 ? receiver.replace(pattern._nativeRegExp, A.escapeReplacement(replacement)) : A.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
      t1 = J.allMatches$2$s(pattern, receiver, startIndex);
      matches = t1.get$iterator(t1);
      if (!matches.moveNext$0())
        return receiver;
      match = matches.get$current(matches);
      return B.JSString_methods.replaceRange$3(receiver, match.get$start(match), match.get$end(match), replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    _Record_2_revoke_url: function _Record_2_revoke_url(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_runner_script: function _Record_2_runner_script(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this._values = t1;
      this.$ti = t2;
    },
    _KeysOrValues: function _KeysOrValues(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    _KeysOrValuesOrElementsIterator: function _KeysOrValuesOrElementsIterator(t0, t1, t2) {
      var _ = this;
      _._elements = t0;
      _._length = t1;
      _.__js_helper$_index = 0;
      _.__js_helper$_current = null;
      _.$ti = t2;
    },
    ConstantSet: function ConstantSet() {
    },
    ConstantStringSet: function ConstantStringSet(t0, t1, t2) {
      this._jsIndex = t0;
      this._length = t1;
      this.$ti = t2;
    },
    GeneralConstantSet: function GeneralConstantSet(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_initTicker_closure: function Primitives_initTicker_closure(t0) {
      this.performance = t0;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    _CyclicInitializationError: function _CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _._length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    JsIdentityLinkedHashMap: function JsIdentityLinkedHashMap(t0) {
      var _ = this;
      _._length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsConstantLinkedHashMap: function JsConstantLinkedHashMap(t0) {
      var _ = this;
      _._length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this.__js_helper$_string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _.__js_helper$_string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldNI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has not been initialized."), new Error());
    },
    throwLateFieldAI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has already been initialized."), new Error());
    },
    throwLateFieldADI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."), new Error());
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1.__late_helper$_value = t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      return list;
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 12 || kind === 13;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 12:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    getRuntimeTypeOfClosure(closure) {
      var rti = A.closureFunctionType(closure);
      return A.createRuntimeType(rti == null ? A.instanceType(closure) : rti);
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return object._getRti$0();
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = A._createRuntimeType(rti) : t1;
    },
    _createRuntimeType(rti) {
      var starErasedRti, t1,
        s = rti._canonicalRecipe,
        starErasedRecipe = s.replace(/\*/g, "");
      if (starErasedRecipe === s)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      t1 = starErasedRti._cachedRuntimeType;
      return t1 == null ? starErasedRti._cachedRuntimeType = A._createRuntimeType(starErasedRti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i) {
        if (!(i < values.length))
          return A.ioore(values, i);
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      }
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, unstarredKind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (t1 === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      unstarred = t1 === 6 ? testRti._primary : testRti;
      unstarredKind = unstarred._kind;
      if (unstarredKind === 8)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarredKind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isDefinitelyTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (unstarredKind === 11) {
        predicate = A.createRecordTypePredicate(unstarred._primary, unstarred._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!A.isSoundTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              if (!(kind === 6 && A._nullIs(testRti._primary)))
                t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A._rtiToString(testRti, null))));
    },
    checkTypeBound(type, bound, variable, methodName) {
      if (A.isSubtype(init.typeUniverse, type, bound))
        return type;
      throw A.wrapException(A._TypeError$fromMessage("The type argument '" + A._rtiToString(type, null) + "' is not a subtype of the type variable bound '" + A._rtiToString(bound, null) + "' of type variable '" + variable + "' in '" + methodName + "'."));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this,
        unstarred = testRti._kind === 6 ? testRti._primary : testRti;
      return unstarred._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, unstarred)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = A._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            t3 = boundRti === t2;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6)
        return A._rtiToString(rti._primary, genericContext);
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 12 || argumentKind === 13 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 13)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 14) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isSoundTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isSoundTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isSoundTopType(baseType) || baseType === type$.Object || baseType === type$.legacy_Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 14;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 12:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var optionalPositional, named, requiredPositional, returnType, parameters, _null = null,
        t1 = parser.u,
        head = stack.pop();
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            named = _null;
            break;
          case -2:
            named = stack.pop();
            optionalPositional = _null;
            break;
          default:
            stack.push(head);
            named = _null;
            optionalPositional = named;
            break;
        }
      else {
        stack.push(head);
        named = _null;
        optionalPositional = named;
      }
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null, false) ? 1 : 0;
        sCache.set(t, result);
      }
      if (0 === result)
        return false;
      if (1 === result)
        return true;
      return true;
    },
    _isSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var t1, sKind, leftTypeVariable, tKind, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isSoundTopType(s))
        return false;
      t1 = s._kind;
      if (t1 === 1)
        return true;
      leftTypeVariable = sKind === 14;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv, false))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv, false);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv, false))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv, false);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv, false);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv, false))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv, false);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv, false);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 12;
      if ((!t1 || sKind === 13) && t === type$.Function)
        return true;
      t2 = sKind === 11;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 13) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 13)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv, false) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv, false))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv, false);
      }
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (t2 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv, false);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv, false))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv, false))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv, false);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv, false);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv, isLegacy) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv, false))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv, false))
          return false;
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isSoundTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isDefinitelyTopType(t) {
      var t1;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      return t1;
    },
    isSoundTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this._message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic(milliseconds, callback) {
      var t1 = new A._TimerImpl(false);
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(0, object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _SyncStarIterator__terminatedBody(_1, _2, _3) {
      return 0;
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B._StringStackTrace_uwd;
    },
    Future_Future(computation, $T) {
      var result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(B.Duration_0, new A.Future_Future_closure(result, computation));
      return result;
    },
    Future_Future$microtask(computation, $T) {
      var result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.scheduleMicrotask(new A.Future_Future$microtask_closure(result, computation));
      return result;
    },
    Future_Future$sync(computation, $T) {
      var result, error, stackTrace, future, replacement, t1, exception;
      try {
        result = computation.call$0();
        t1 = $T._eval$1("Future<0>")._is(result) ? result : A._Future$value(result, $T);
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1 = $.Zone__current;
        future = new A._Future(t1, $T._eval$1("_Future<0>"));
        replacement = t1.errorCallback$2(error, stackTrace);
        if (replacement != null)
          future._asyncCompleteError$2(replacement.error, replacement.stackTrace);
        else
          future._asyncCompleteError$2(error, stackTrace);
        return future;
      }
    },
    Future_Future$value(value, $T) {
      var t1 = value == null ? $T._as(value) : value,
        t2 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t2._asyncComplete$1(t1);
      return t2;
    },
    Future_Future$error(error, stackTrace, $T) {
      var t1, replacement;
      A.checkNotNullable(error, "error", type$.Object);
      t1 = $.Zone__current;
      if (t1 !== B.C__RootZone) {
        replacement = t1.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        }
      }
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Future_Future$delayed(duration, computation, $T) {
      var t1, result;
      if (computation == null)
        t1 = !$T._is(null);
      else
        t1 = false;
      if (t1)
        throw A.wrapException(A.ArgumentError$value(null, "computation", "The type parameter is not nullable"));
      result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(duration, new A.Future_Future$delayed_closure(computation, result, $T));
      return result;
    },
    Future_wait(futures, eagerError, $T) {
      var handleError, future, pos, e, st, t1, t2, _i, t3, exception, _box_0 = {}, cleanUp = null,
        _future = new A._Future($.Zone__current, $T._eval$1("_Future<List<0>>"));
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.stackTrace = _box_0.error = null;
      handleError = new A.Future_wait_handleError(_box_0, cleanUp, eagerError, _future);
      try {
        for (t1 = futures.length, t2 = type$.Null, _i = 0, t3 = 0; _i < futures.length; futures.length === t1 || (0, A.throwConcurrentModificationError)(futures), ++_i) {
          future = futures[_i];
          pos = t3;
          future.then$1$2$onError(new A.Future_wait_closure(_box_0, pos, _future, $T, cleanUp, eagerError), handleError, t2);
          t3 = ++_box_0.remaining;
        }
        if (t3 === 0) {
          t1 = _future;
          t1._completeWithValue$1(A._setArrayType([], $T._eval$1("JSArray<0>")));
          return t1;
        }
        _box_0.values = A.List_List$filled(t3, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        if (_box_0.remaining === 0 || eagerError)
          return A.Future_Future$error(e, st, $T._eval$1("List<0>"));
        else {
          _box_0.error = e;
          _box_0.stackTrace = st;
        }
      }
      return _future;
    },
    Future_forEach(elements, action, $T) {
      return A.Future_doWhile(new A.Future_forEach_closure(new J.ArrayIterator(elements, elements.length, A._arrayInstanceType(elements)._eval$1("ArrayIterator<1>")), action));
    },
    Future__kTrue(_) {
      return true;
    },
    Future_doWhile(action) {
      var t1 = $.Zone__current,
        doneSignal = new A._Future(t1, type$._Future_void),
        nextIteration = A._Cell$named("nextIteration");
      nextIteration.__late_helper$_value = t1.bindUnaryCallbackGuarded$1$1(new A.Future_doWhile_closure(action, doneSignal, nextIteration), type$.bool);
      nextIteration._readLocal$0().call$1(true);
      return doneSignal;
    },
    FutureExtensions_onError(_this, handleError, $T, $E) {
      var onError, t1, result;
      $T._eval$1("_Future<0>")._as(_this);
      onError = $T._eval$1("0/(Object,StackTrace)")._as(new A.FutureExtensions_onError_onError($E, null, handleError, $T));
      t1 = $.Zone__current;
      result = new A._Future(t1, $T._eval$1("_Future<0>"));
      if (t1 !== B.C__RootZone)
        onError = t1.registerBinaryCallback$3$1(onError, $T._eval$1("0/"), type$.Object, type$.StackTrace);
      _this._addListener$1(new A._FutureListener(result, 2, null, onError, _this.$ti._eval$1("@<1>")._bind$1($T)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    Completer_Completer($T) {
      return new A._AsyncCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncCompleter<0>"));
    },
    _completeWithErrorCallback(result, error, stackTrace) {
      var replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      result._completeError$2(error, stackTrace);
    },
    _Future$zoneValue(value, _zone, $T) {
      var t1 = new A._Future(_zone, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future$value(value, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainCoreFutureSync(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
      t1 = t2 | target._state & 1;
      source._state = t1;
      if ((t1 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__chainCoreFutureAsync(source, target) {
      var t2, t3, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      for (t2 = type$._Future_dynamic; t3 = t1._state, (t3 & 4) !== 0; t1 = source) {
        source = t2._as(t1._resultOrListeners);
        _box_0.source = source;
      }
      if ((t3 & 24) === 0) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(t1);
        _box_0.source._prependListeners$1(listeners);
        return;
      }
      if ((t3 & 16) === 0 && target._resultOrListeners == null) {
        target._cloneResult$1(t1);
        return;
      }
      target._state ^= 2;
      target._zone.scheduleMicrotask$1(new A._Future__chainCoreFutureAsync_closure(_box_0, target));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t1 = t5._zone;
            t1 = !(t1 === zone || t1.get$errorZone() === zone.get$errorZone());
          } else
            t1 = false;
          if (t1) {
            t1 = _box_1.source;
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = _box_0.listener.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFutureSync(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      if (B.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = B.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
    },
    Stream_Stream$value(value, $T) {
      var _null = null,
        t1 = $T._eval$1("_AsyncStreamController<0>"),
        t2 = new A._AsyncStreamController(_null, _null, _null, _null, t1);
      t2._async$_add$1(0, value);
      t2._closeUnchecked$0();
      return new A._ControllerStream(t2, t1._eval$1("_ControllerStream<1>"));
    },
    Stream_Stream$fromFuture(future, $T) {
      var _null = null,
        t1 = $T._eval$1("_SyncStreamController<0>"),
        controller = new A._SyncStreamController(_null, _null, _null, _null, t1);
      future.then$1$2$onError(new A.Stream_Stream$fromFuture_closure(controller, $T), new A.Stream_Stream$fromFuture_closure0(controller), type$.Null);
      return new A._ControllerStream(controller, t1._eval$1("_ControllerStream<1>"));
    },
    Stream_Stream$fromIterable(elements, $T) {
      return new A._MultiStream(false, new A.Stream_Stream$fromIterable_closure(elements, $T), $T._eval$1("_MultiStream<0>"));
    },
    StreamIterator_StreamIterator(stream, $T) {
      return new A._StreamIterator(A.checkNotNullable(stream, "stream", type$.Object), $T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController(onCancel, onListen, onPause, onResume, $T) {
      return new A._AsyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current.handleUncaughtError$2(e, s);
      }
    },
    _ControllerSubscription$(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0,
        t3 = onError != null ? 32 : 0;
      return new A._ControllerSubscription(_controller, A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T), A._BufferingStreamSubscription__registerErrorHandler(t1, onError), A._BufferingStreamSubscription__registerDoneHandler(t1, onDone), t1, t2 | t3, $T._eval$1("_ControllerSubscription<0>"));
    },
    _AddStreamState$(controller, source, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = $T._eval$1("~(0)")._as(controller.get$_async$_add(controller)),
        t3 = controller.get$_addError();
      return new A._AddStreamState(new A._Future(t1, type$._Future_dynamic), source.listen$4$cancelOnError$onDone$onError(t2, false, controller.get$_async$_close(), t3), $T._eval$1("_AddStreamState<0>"));
    },
    _AddStreamState_makeErrorHandler(controller) {
      return new A._AddStreamState_makeErrorHandler_closure(controller);
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return zone.registerUnaryCallback$2$1(t1, type$.void, $T);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return zone.registerUnaryCallback$2$1(handleError, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.", null));
    },
    _BufferingStreamSubscription__registerDoneHandler(zone, handleDone) {
      var t1 = handleDone == null ? A.async___nullDoneHandler$closure() : handleDone;
      return zone.registerCallback$1$1(t1, type$.void);
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      $.Zone__current.handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler() {
    },
    _DoneStreamSubscription$(onDone, $T) {
      var t1 = $.Zone__current,
        t2 = new A._DoneStreamSubscription(t1, $T._eval$1("_DoneStreamSubscription<0>"));
      A.scheduleMicrotask(t2.get$_onMicrotask());
      if (onDone != null)
        t2.set$_async$_onDone(t1.registerCallback$1$1(onDone, type$.void));
      return t2;
    },
    _cancelAndValue(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(0),
        t1 = $.$get$Future__nullFuture();
      if (cancelFuture !== t1)
        cancelFuture.whenComplete$1(new A._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return t1.createTimer$2(duration, callback);
      return t1.createTimer$2(duration, t1.bindCallbackGuarded$1(callback));
    },
    Timer_Timer$periodic(duration, callback) {
      var boundCallback,
        t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return t1.createPeriodicTimer$2(duration, callback);
      boundCallback = t1.bindUnaryCallbackGuarded$1$1(callback, type$.Timer);
      return $.Zone__current.createPeriodicTimer$2(duration, boundCallback);
    },
    _rootHandleUncaughtError($self, $parent, zone, error, stackTrace) {
      A._rootHandleError(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("0()")._as(f);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRegisterCallback($self, $parent, zone, f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    _rootRegisterUnaryCallback($self, $parent, zone, f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    _rootRegisterBinaryCallback($self, $parent, zone, f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    _rootErrorCallback($self, $parent, zone, error, stackTrace) {
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      var t1, t2;
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone) {
        t1 = B.C__RootZone.get$errorZone();
        t2 = zone.get$errorZone();
        f = t1 !== t2 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      }
      A._scheduleAsyncCallback(f);
    },
    _rootCreateTimer($self, $parent, zone, duration, callback) {
      type$.Duration._as(duration);
      type$.void_Function._as(callback);
      return A.Timer__createTimer(duration, B.C__RootZone !== zone ? zone.bindCallback$1$1(callback, type$.void) : callback);
    },
    _rootCreatePeriodicTimer($self, $parent, zone, duration, callback) {
      type$.Duration._as(duration);
      type$.void_Function_Timer._as(callback);
      return A.Timer__createPeriodicTimer(duration, B.C__RootZone !== zone ? zone.bindUnaryCallback$2$1(callback, type$.void, type$.Timer) : callback);
    },
    _rootPrint($self, $parent, zone, line) {
      A.printString(A._asString(line));
    },
    _printToZone(line) {
      $.Zone__current.print$1(0, line);
    },
    _rootFork($self, $parent, zone, specification, zoneValues) {
      var valueMap, t1, registerCallback, registerUnaryCallback, registerBinaryCallback, errorCallback, $print, handleUncaughtError;
      type$.nullable_ZoneSpecification._as(specification);
      type$.nullable_Map_of_nullable_Object_and_nullable_Object._as(zoneValues);
      $.printToZone = A.async___printToZone$closure();
      if (specification == null)
        specification = B._ZoneSpecification_48t;
      if (zoneValues == null)
        valueMap = zone.get$_async$_map();
      else {
        t1 = type$.nullable_Object;
        valueMap = A.HashMap_HashMap$from(zoneValues, t1, t1);
      }
      t1 = new A._CustomZone(zone.get$_run(), zone.get$_runUnary(), zone.get$_runBinary(), zone.get$_registerCallback(), zone.get$_registerUnaryCallback(), zone.get$_registerBinaryCallback(), zone.get$_errorCallback(), zone.get$_scheduleMicrotask(), zone.get$_createTimer(), zone.get$_createPeriodicTimer(), zone.get$_print(), zone.get$_fork(), zone.get$_handleUncaughtError(), zone, valueMap);
      registerCallback = specification.registerCallback;
      if (registerCallback != null)
        t1.set$_registerCallback(new A._ZoneFunction(t1, registerCallback, type$._ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function));
      registerUnaryCallback = specification.registerUnaryCallback;
      if (registerUnaryCallback != null)
        t1.set$_registerUnaryCallback(new A._ZoneFunction(t1, registerUnaryCallback, type$._ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B));
      registerBinaryCallback = specification.registerBinaryCallback;
      if (registerBinaryCallback != null)
        t1.set$_registerBinaryCallback(new A._ZoneFunction(t1, registerBinaryCallback, type$._ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C));
      errorCallback = specification.errorCallback;
      if (errorCallback != null)
        t1.set$_errorCallback(new A._ZoneFunction(t1, errorCallback, type$._ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace));
      $print = specification.print;
      if ($print != null)
        t1.set$_print(new A._ZoneFunction(t1, $print, type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_String));
      handleUncaughtError = specification.handleUncaughtError;
      if (handleUncaughtError != null)
        t1.set$_handleUncaughtError(new A._ZoneFunction(t1, handleUncaughtError, type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace));
      return t1;
    },
    runZoned(body, zoneSpecification, zoneValues, $R) {
      A.checkNotNullable(body, "body", $R._eval$1("0()"));
      return A._runZoned(body, zoneValues, zoneSpecification, $R);
    },
    _runZoned(body, zoneValues, specification, $R) {
      return $.Zone__current.fork$2$specification$zoneValues(specification, zoneValues).run$1$1(body, $R);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._async$_body = t0;
      _._suspendedBodies = _._nestedIterator = _._datum = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _BroadcastStream: function _BroadcastStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._eventState = 0;
      _._async$_previous = _._async$_next = null;
      _._controller = t0;
      _._async$_onData = t1;
      _._onError = t2;
      _._async$_onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._async$_pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _SyncBroadcastStreamController: function _SyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _SyncBroadcastStreamController__sendData_closure: function _SyncBroadcastStreamController__sendData_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _SyncBroadcastStreamController__sendError_closure: function _SyncBroadcastStreamController__sendError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _SyncBroadcastStreamController__sendDone_closure: function _SyncBroadcastStreamController__sendDone_closure(t0) {
      this.$this = t0;
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    Future_Future_closure: function Future_Future_closure(t0, t1) {
      this.result = t0;
      this.computation = t1;
    },
    Future_Future$microtask_closure: function Future_Future$microtask_closure(t0, t1) {
      this.result = t0;
      this.computation = t1;
    },
    Future_Future$delayed_closure: function Future_Future$delayed_closure(t0, t1, t2) {
      this.computation = t0;
      this.result = t1;
      this.T = t2;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.T = t3;
      _.cleanUp = t4;
      _.eagerError = t5;
    },
    Future_forEach_closure: function Future_forEach_closure(t0, t1) {
      this.iterator = t0;
      this.action = t1;
    },
    Future_doWhile_closure: function Future_doWhile_closure(t0, t1, t2) {
      this.action = t0;
      this.doneSignal = t1;
      this.nextIteration = t2;
    },
    FutureExtensions_onError_onError: function FutureExtensions_onError_onError(t0, t1, t2, t3) {
      var _ = this;
      _.E = t0;
      _.test = t1;
      _.handleError = t2;
      _.T = t3;
    },
    TimeoutException: function TimeoutException(t0, t1) {
      this.message = t0;
      this.duration = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__chainCoreFutureAsync_closure: function _Future__chainCoreFutureAsync_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_Stream$fromFuture_closure: function Stream_Stream$fromFuture_closure(t0, t1) {
      this.controller = t0;
      this.T = t1;
    },
    Stream_Stream$fromFuture_closure0: function Stream_Stream$fromFuture_closure0(t0) {
      this.controller = t0;
    },
    Stream_Stream$fromIterable_closure: function Stream_Stream$fromIterable_closure(t0, t1) {
      this.elements = t0;
      this.T = t1;
    },
    Stream_Stream$fromIterable_closure_next: function Stream_Stream$fromIterable_closure_next(t0, t1, t2) {
      this._box_0 = t0;
      this.controller = t1;
      this.zone = t2;
    },
    Stream_Stream$fromIterable__closure: function Stream_Stream$fromIterable__closure(t0, t1, t2) {
      this._box_0 = t0;
      this.zone = t1;
      this.next = t2;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_isEmpty_closure: function Stream_isEmpty_closure(t0) {
      this.future = t0;
    },
    Stream_isEmpty_closure0: function Stream_isEmpty_closure0(t0, t1, t2) {
      this.$this = t0;
      this.subscription = t1;
      this.future = t2;
    },
    Stream_toList_closure: function Stream_toList_closure(t0, t1) {
      this.$this = t0;
      this.result = t1;
    },
    Stream_toList_closure0: function Stream_toList_closure0(t0, t1) {
      this.future = t0;
      this.result = t1;
    },
    Stream_first_closure: function Stream_first_closure(t0) {
      this.future = t0;
    },
    Stream_first_closure0: function Stream_first_closure0(t0, t1, t2) {
      this.$this = t0;
      this.subscription = t1;
      this.future = t2;
    },
    StreamView: function StreamView() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._controller = t0;
      _._async$_onData = t1;
      _._onError = t2;
      _._async$_onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._async$_pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _StreamSinkWrapper: function _StreamSinkWrapper(t0, t1) {
      this._async$_target = t0;
      this.$ti = t1;
    },
    _AddStreamState: function _AddStreamState(t0, t1, t2) {
      this.addStreamFuture = t0;
      this.addSubscription = t1;
      this.$ti = t2;
    },
    _AddStreamState_makeErrorHandler_closure: function _AddStreamState_makeErrorHandler_closure(t0) {
      this.controller = t0;
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _StreamControllerAddStreamState: function _StreamControllerAddStreamState(t0, t1, t2, t3) {
      var _ = this;
      _._varData = t0;
      _.addStreamFuture = t1;
      _.addSubscription = t2;
      _.$ti = t3;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription_asFuture_closure: function _BufferingStreamSubscription_asFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _BufferingStreamSubscription_asFuture_closure0: function _BufferingStreamSubscription_asFuture_closure0(t0, t1) {
      this.$this = t0;
      this.result = t1;
    },
    _BufferingStreamSubscription_asFuture__closure: function _BufferingStreamSubscription_asFuture__closure(t0, t1, t2) {
      this.result = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents(t0) {
      var _ = this;
      _._state = 0;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _.$ti = t0;
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1) {
      var _ = this;
      _._state = 1;
      _._zone = t0;
      _._async$_onDone = null;
      _.$ti = t1;
    },
    _DoneStreamSubscription_asFuture_closure: function _DoneStreamSubscription_asFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _StreamIterator: function _StreamIterator(t0, t1) {
      var _ = this;
      _._subscription = null;
      _._stateData = t0;
      _._async$_hasValue = false;
      _.$ti = t1;
    },
    _EmptyStream: function _EmptyStream(t0) {
      this.$ti = t0;
    },
    _MultiStream: function _MultiStream(t0, t1, t2) {
      this.isBroadcast = t0;
      this._async$_onListen = t1;
      this.$ti = t2;
    },
    _MultiStream_listen_closure: function _MultiStream_listen_closure(t0, t1) {
      this.$this = t0;
      this.controller = t1;
    },
    _MultiStreamController: function _MultiStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._stream = t0;
      _._subscription = null;
      _._async$_onData = t1;
      _._onError = t2;
      _._async$_onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._async$_pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1, t2) {
      this.zone = t0;
      this.$function = t1;
      this.$ti = t2;
    },
    _ZoneSpecification: function _ZoneSpecification(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.handleUncaughtError = t0;
      _.run = t1;
      _.runUnary = t2;
      _.runBinary = t3;
      _.registerCallback = t4;
      _.registerUnaryCallback = t5;
      _.registerBinaryCallback = t6;
      _.errorCallback = t7;
      _.scheduleMicrotask = t8;
      _.createTimer = t9;
      _.createPeriodicTimer = t10;
      _.print = t11;
      _.fork = t12;
    },
    _ZoneDelegate: function _ZoneDelegate(t0) {
      this._delegationTarget = t0;
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._run = t0;
      _._runUnary = t1;
      _._runBinary = t2;
      _._registerCallback = t3;
      _._registerUnaryCallback = t4;
      _._registerBinaryCallback = t5;
      _._errorCallback = t6;
      _._scheduleMicrotask = t7;
      _._createTimer = t8;
      _._createPeriodicTimer = t9;
      _._print = t10;
      _._fork = t11;
      _._handleUncaughtError = t12;
      _._delegateCache = null;
      _.parent = t13;
      _._async$_map = t14;
    },
    _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.R = t2;
    },
    _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.registered = t1;
      _.T = t2;
      _.R = t3;
    },
    _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.registered = t1;
    },
    _CustomZone_bindUnaryCallbackGuarded_closure: function _CustomZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.T = t2;
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindUnaryCallback_closure: function _RootZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.T = t2;
      _.R = t3;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    HashMap_HashMap($K, $V) {
      return new A._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap(equals, hashCode, $K, $V) {
      if (hashCode == null) {
        if (equals == null)
          return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
        hashCode = A.collection___defaultHashCode$closure();
      } else {
        if (A.core__identityHashCode$closure() === hashCode && A.core__identical$closure() === equals)
          return new A.JsIdentityLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsIdentityLinkedHashMap<1,2>"));
        if (equals == null)
          equals = A.collection___defaultEquals$closure();
      }
      return A._LinkedCustomHashMap$(equals, hashCode, null, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      return new A._LinkedCustomHashMap(_equals, _hashCode, new A._LinkedCustomHashMap_closure($K), $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal(values, $E) {
      return $E._eval$1("LinkedHashSet<0>")._as(A.fillLiteralSet(values, new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"))));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    HashMap_HashMap$from(other, $K, $V) {
      var result = A.HashMap_HashMap($K, $V);
      other.forEach$1(0, new A.HashMap_HashMap$from_closure(result, $K, $V));
      return result;
    },
    IterableExtensions_get_lastOrNull(_this, $T) {
      if (_this.length === 0)
        return null;
      return B.JSArray_methods.get$last(_this);
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, $E._as(t1.get$current(t1)));
      return result;
    },
    LinkedHashSet_LinkedHashSet$of(elements, $E) {
      var t1 = A.LinkedHashSet_LinkedHashSet($E);
      t1.addAll$1(0, elements);
      return t1;
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        J.forEach$1$ax(m, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__fillMapWithIterables(map, keys, values) {
      var keyIterator = keys.get$iterator(keys),
        valueIterator = values.get$iterator(values),
        hasNextKey = keyIterator.moveNext$0(),
        hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.get$current(keyIterator), valueIterator.get$current(valueIterator));
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw A.wrapException(A.ArgumentError$("Iterables do not have same length.", null));
    },
    ListQueue$($E) {
      return new A.ListQueue(A.List_List$filled(A.ListQueue__calculateCapacity(null), null, false, $E._eval$1("0?")), $E._eval$1("ListQueue<0>"));
    },
    ListQueue__calculateCapacity(initialCapacity) {
      return 8;
    },
    _ListQueueIterator$(queue, $E) {
      return new A._ListQueueIterator(queue, queue._collection$_tail, queue._modificationCount, queue._collection$_head, $E._eval$1("_ListQueueIterator<0>"));
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._collection$_keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _._length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    UnmodifiableListView: function UnmodifiableListView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_entries_closure: function MapBase_entries_closure(t0) {
      this.$this = t0;
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0, t1) {
      var _ = this;
      _._collection$_table = t0;
      _._modificationCount = _._collection$_tail = _._collection$_head = 0;
      _.$ti = t1;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _Utf8Decoder__makeNativeUint8List(codeUnits, start, end) {
      var bytes, t1, i, b,
        $length = end - start;
      if ($length <= 4096)
        bytes = $.$get$_Utf8Decoder__reusableBuffer();
      else
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if ((b & 255) !== b)
          b = 255;
        bytes[i] = b;
      }
      return bytes;
    },
    _Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$_Utf8Decoder__decoderNonfatal() : $.$get$_Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A._Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A._Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, end));
    },
    _Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, t3, i, byteOr, byte, outputIndex0, t4, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = J.getInterceptor$asx(bytes), t2 = alphabet.length, t3 = output.length, i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 18 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex < t3))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits >>> 12 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t3))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 6 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex < t3))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t3))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t1 = bits >>> 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits << 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t1 = bits >>> 10 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits >>> 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            t1 = bits << 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = alphabet.charCodeAt(t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + J.toRadixString$1$n(t1.$index(bytes, i), 16), null));
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      var t1 = _toEncodable == null ? A.convert___defaultToEncodable$closure() : _toEncodable;
      return new A._JsonStringStringifier(_sink, [], t1);
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var stringifier, t1,
        output = new A.StringBuffer("");
      if (indent == null)
        stringifier = A._JsonStringStringifier$(output, toEncodable);
      else {
        t1 = toEncodable == null ? A.convert___defaultToEncodable$closure() : toEncodable;
        stringifier = new A._JsonStringStringifierPretty(indent, 0, output, [], t1);
      }
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__decoder_closure: function _Utf8Decoder__decoder_closure() {
    },
    _Utf8Decoder__decoderNonfatal_closure: function _Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    _ByteCallbackSink: function _ByteCallbackSink(t0, t1) {
      this._convert$_callback = t0;
      this._convert$_buffer = t1;
      this._bufferIndex = 0;
    },
    Codec: function Codec() {
    },
    _FusedCodec: function _FusedCodec(t0, t1, t2) {
      this._convert$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0, t1) {
      this.indent = t0;
      this._toEncodable = t1;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._convert$_sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty(t0, t1, t2, t3, t4) {
      var _ = this;
      _._indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _._convert$_sink = t2;
      _._seen = t3;
      _._toEncodable = t4;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._convert$_buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    _BigIntImpl__parseDecimal(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + source.charCodeAt(i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return (codeUnit | 32) - 97 + 10;
    },
    _BigIntImpl__parseHex(source, startPos, isNegative) {
      var i, chunk, j, i0, digitValue, digitIndex, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = B.JSNumber_methods.ceil$0(sourceLength / 4),
        digits = new Uint16Array(chunkCount),
        t2 = chunkCount - 1,
        lastDigitLength = sourceLength - t2 * 4;
      for (i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= 16)
          return null;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex = t2 - 1;
      if (!(t2 >= 0 && t2 < chunkCount))
        return A.ioore(digits, t2);
      digits[t2] = chunk;
      for (; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(source, i);
          digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
          if (digitValue >= 16)
            return null;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (!(digitIndex >= 0 && digitIndex < chunkCount))
          return A.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (chunkCount === 1) {
        if (0 >= chunkCount)
          return A.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      t1 = A._BigIntImpl__normalize(chunkCount, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__tryParse(source, radix) {
      var match, t1, t2, isNegative, decimalMatch, hexMatch;
      if (source === "")
        return null;
      match = $.$get$_BigIntImpl__parseRE().firstMatch$1(source);
      if (match == null)
        return null;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      isNegative = t1[1] === "-";
      if (4 >= t2)
        return A.ioore(t1, 4);
      decimalMatch = t1[4];
      hexMatch = t1[3];
      if (5 >= t2)
        return A.ioore(t1, 5);
      if (decimalMatch != null)
        return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (hexMatch != null)
        return A._BigIntImpl__parseHex(hexMatch, 2, isNegative);
      return null;
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, i, t2,
        resultDigits = new Uint16Array($length),
        n = to - from;
      for (t1 = digits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(digits, t2);
        t2 = digits[t2];
        if (!(i < $length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$from(value) {
      var t1;
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      if (value === 1)
        return $.$get$_BigIntImpl_one();
      if (value === 2)
        return $.$get$_BigIntImpl_two();
      if (Math.abs(value) < 4294967296)
        return A._BigIntImpl__BigIntImpl$_fromInt(B.JSInt_methods.toInt$0(value));
      t1 = A._BigIntImpl__BigIntImpl$_fromDouble(value);
      return t1;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          digits[3] = 32768;
          t1 = A._BigIntImpl__normalize(4, digits);
          return new A._BigIntImpl(t1 !== 0, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        digits[0] = value;
        t1 = A._BigIntImpl__normalize(1, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        digits[0] = value & 65535;
        digits[1] = B.JSInt_methods._shrOtherPositive$1(value, 16);
        t1 = A._BigIntImpl__normalize(2, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      t1 = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1;
      digits = new Uint16Array(t1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = A._BigIntImpl__normalize(t1, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__BigIntImpl$_fromDouble(value) {
      var bits, i, t1, t2, exponent, unshiftedDigits, unshiftedBig, absResult;
      if (isNaN(value) || value == 1 / 0 || value == -1 / 0)
        throw A.wrapException(A.ArgumentError$("Value must be finite: " + value, null));
      value = Math.floor(value);
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      bits = $.$get$_BigIntImpl__bitsForFromDouble();
      for (i = 0; i < 8; ++i)
        bits[i] = 0;
      t1 = bits.buffer;
      A._checkViewArguments(t1, 0, null);
      t1 = new DataView(t1, 0);
      B.NativeByteData_methods._setFloat64$3(t1, 0, value, true);
      t1 = bits[7];
      t2 = bits[6];
      exponent = (t1 << 4 >>> 0) + (t2 >>> 4) - 1075;
      unshiftedDigits = new Uint16Array(4);
      unshiftedDigits[0] = (bits[1] << 8 >>> 0) + bits[0];
      unshiftedDigits[1] = (bits[3] << 8 >>> 0) + bits[2];
      unshiftedDigits[2] = (bits[5] << 8 >>> 0) + bits[4];
      unshiftedDigits[3] = t2 & 15 | 16;
      unshiftedBig = new A._BigIntImpl(false, unshiftedDigits, 4);
      if (exponent < 0)
        absResult = unshiftedBig.$shr(0, -exponent);
      else
        absResult = exponent > 0 ? unshiftedBig.$shl(0, exponent) : unshiftedBig;
      return absResult;
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods.$shr(digit, carryBitShift);
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl((digit & bitMask) >>> 0, bitShift);
      }
      if (!(digitShift >= 0 && digitShift < t2))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i, t2,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.length, i = digitsShift; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t2 = resultUsed - 1;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(resultDigits, t2);
      if (resultDigits[t2] === 0)
        resultUsed = t2;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods.$shr(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.length, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods.$shr(digit, bitShift);
      }
      if (!(last >= 0 && last < t2))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      if (!(used >= 0 && used < t3))
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, c, i0, t3, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(multiplicandDigits, i);
        t3 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t3 + accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    identityHashCode(object) {
      return A.objectHashCode(object);
    },
    Expando__checkType(object) {
      if (A._isBool(object) || typeof object == "number" || typeof object == "string" || object instanceof A._Record)
        A.Expando__badExpandoKey(object);
    },
    Expando__badExpandoKey(object) {
      throw A.wrapException(A.ArgumentError$value(object, "object", "Expandos are not allowed on strings, numbers, bools, records or null"));
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    DateTime$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 864e13)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + millisecondsSinceEpoch, null));
      A.checkNotNullable(true, "isUtc", type$.bool);
      return new A.DateTime(millisecondsSinceEpoch, true);
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current(t1)));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list, $E);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(A.List_List$_of(elements, $E), $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current(t1));
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      return J.JSArray_markUnmodifiableList(A.List_List$from(elements, false, $E));
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var t1, t2, maxLength, array, len;
      A.RangeError_checkNotNegative(start, "start");
      t1 = end == null;
      t2 = !t1;
      if (t2) {
        maxLength = end - start;
        if (maxLength < 0)
          throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
        if (maxLength === 0)
          return "";
      }
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        if (t1)
          end = len;
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.String__stringFromUint8List(charCodes, start, end);
      if (t2)
        charCodes = J.take$1$ax(charCodes, end);
      if (start > 0)
        charCodes = J.skip$1$ax(charCodes, start);
      return A.Primitives_stringFromCharCodes(A.List_List$of(charCodes, true, type$.int));
    },
    String_String$fromCharCode(charCode) {
      return A.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromUint8List(charCodes, start, endOrNull) {
      var len = charCodes.length;
      if (start >= len)
        return "";
      return A.Primitives_stringFromNativeUint8List(charCodes, start, endOrNull == null || endOrNull > len ? len : endOrNull);
    },
    RegExp_RegExp(source, caseSensitive, multiLine) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, false, false, false));
    },
    identical(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current(iterator));
      }
      return string;
    },
    NoSuchMethodError_NoSuchMethodError$withInvocation(receiver, invocation) {
      return new A.NoSuchMethodError(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments());
    },
    Uri_base() {
      var cachedUri, uri,
        current = A.Primitives_currentUri();
      if (current == null)
        throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
      cachedUri = $.Uri__cachedBaseUri;
      if (cachedUri != null && current === $.Uri__cachedBaseString)
        return cachedUri;
      uri = A.Uri_parse(current);
      $.Uri__cachedBaseUri = uri;
      $.Uri__cachedBaseString = current;
      return uri;
    },
    _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte, t3,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding();
        t1 = t1._nativeRegExp.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = encoding.encode$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128) {
          t3 = byte >>> 4;
          if (!(t3 < 8))
            return A.ioore(canonicalTable, t3);
          t3 = (canonicalTable[t3] & 1 << (byte & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    DateTime$_withValue(_value, isUtc) {
      if (Math.abs(_value) > 864e13)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + _value, null));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return new A.DateTime(_value, isUtc);
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$(microseconds, milliseconds, seconds) {
      return new A.Duration(microseconds + 1000 * milliseconds + 1000000 * seconds);
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull($name) {
      return new A.ArgumentError(false, null, $name, "Must not be null");
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    IndexError_check(index, $length, indexable) {
      if (0 > index || index >= $length)
        throw A.wrapException(A.IndexError$withLength(index, $length, indexable, null, "index"));
      return index;
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_Iterable$generate(count, generator, $E) {
      if (count <= 0)
        return new A.EmptyIterable($E._eval$1("EmptyIterable<0>"));
      if (generator == null) {
        if (!$E._eval$1("0(int)")._is(A.core__GeneratorIterable__id$closure()))
          throw A.wrapException(A.ArgumentError$("Generator must be supplied or element type must allow integers", "generator"));
        generator = A.core__GeneratorIterable__id$closure();
      }
      return new A._GeneratorIterable(count, generator, $E._eval$1("_GeneratorIterable<0>"));
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _GeneratorIterable__id(n) {
      return A._asInt(n);
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current(it));
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object4 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      return object4;
    },
    print(object) {
      var line = A.S(object),
        toZone = $.printToZone;
      if (toZone == null)
        A.printString(line);
      else
        toZone.call$1(line);
    },
    _combineSurrogatePair(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Uri_Uri$dataFromString($content) {
      var t1, _null = null,
        buffer = new A.StringBuffer(""),
        indices = A._setArrayType([-1], type$.JSArray_int);
      A.UriData__writeUri(_null, _null, _null, buffer, indices);
      B.JSArray_methods.add$1(indices, buffer._contents.length);
      buffer._contents += ",";
      A.UriData__uriEncodeBytes(B.List_42A, B.C_AsciiCodec.encode$1($content), buffer);
      t1 = buffer._contents;
      return new A.UriData(t1.charCodeAt(0) == 0 ? t1 : t1, indices, _null).get$uri();
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, userInfoStart, userInfo, host, portNumber, port, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        if (4 >= end)
          return A.ioore(uri, 4);
        delta = ((uri.charCodeAt(4) ^ 58) * 3 | uri.charCodeAt(0) ^ 100 | uri.charCodeAt(1) ^ 97 | uri.charCodeAt(2) ^ 116 | uri.charCodeAt(3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      B.JSArray_methods.$indexSet(indices, 0, 0);
      B.JSArray_methods.$indexSet(indices, 1, -1);
      B.JSArray_methods.$indexSet(indices, 2, -1);
      B.JSArray_methods.$indexSet(indices, 7, -1);
      B.JSArray_methods.$indexSet(indices, 3, 0);
      B.JSArray_methods.$indexSet(indices, 4, 0);
      B.JSArray_methods.$indexSet(indices, 5, end);
      B.JSArray_methods.$indexSet(indices, 6, end);
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        B.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!B.JSString_methods.startsWith$2(uri, "\\", pathStart))
              if (hostStart > 0)
                t2 = B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1) || B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2);
              else
                t2 = false;
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
                t2 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
              else
                t2 = true;
              if (t2)
                scheme = _null;
              else if (schemeEnd === 4)
                if (B.JSString_methods.startsWith$2(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    ++fragmentStart;
                    queryStart0 = queryStart + 1;
                    uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (B.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    fragmentStart -= 3;
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && B.JSString_methods.startsWith$2(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                  fragmentStart -= 4;
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = !t2;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (end < uri.length) {
          uri = B.JSString_methods.substring$2(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new A._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = A._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            A._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        } else
          port = _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      A._asString(encodedComponent);
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri_splitQueryString(query) {
      var t1 = type$.String;
      return B.JSArray_methods.fold$1$2(A._setArrayType(query.split("&"), type$.JSArray_String), A.LinkedHashMap_LinkedHashMap$_empty(t1, t1), new A.Uri_splitQueryString_closure(B.C_Utf8Codec), type$.Map_String_String);
    },
    Uri__parseIPv4Address(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = host.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (!(partIndex < 4))
            return A.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (!(partIndex < 4))
        return A.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, last, bytes, wildCardLength, index, value, j, t2, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host),
        t1 = host.length;
      if (t1 < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!(i < t1))
              return A.ioore(host, i);
            if (host.charCodeAt(i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            B.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          B.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          B.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (!(index >= 0 && index < 16))
              return A.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (!(t2 < 16))
              return A.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = B.JSInt_methods._shrOtherPositive$1(value, 8);
          if (!(index >= 0 && index < 16))
            return A.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (!(t2 < 16))
            return A.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri(host, path, pathSegments, scheme) {
      var userInfo, query, fragment, port, isFile, t1, hasAuthority, t2, _null = null;
      scheme = scheme == null ? "" : A._Uri__makeScheme(scheme, 0, scheme.length);
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      query = A._Uri__makeQuery(_null, 0, 0, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(path, 0, path == null ? 0 : path.length, pathSegments, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal(scheme, userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__Uri$file(path, windows) {
      return windows ? A._Uri__makeWindowsFileUrl(path, false) : A._Uri__makeFileUri(path, false);
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        if (J.contains$1$asx(segment, "/")) {
          t1 = A.UnsupportedError$("Illegal path character " + A.S(segment));
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
      var t1, t2, t3;
      for (t1 = A.SubListIterable$(segments, firstSegment, null, A._arrayInstanceType(segments)._precomputed1), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (B.JSString_methods.contains$1(t3, A.RegExp_RegExp('["*/:<>?\\\\|]', true, false)))
          if (argumentError)
            throw A.wrapException(A.ArgumentError$("Illegal character in path", null));
          else
            throw A.wrapException(A.UnsupportedError$("Illegal character in path: " + t3));
      }
    },
    _Uri__checkWindowsDriveLetter(charCode, argumentError) {
      var t1,
        _s21_ = "Illegal drive letter ";
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      if (argumentError)
        throw A.wrapException(A.ArgumentError$(_s21_ + A.String_String$fromCharCode(charCode), null));
      else
        throw A.wrapException(A.UnsupportedError$(_s21_ + A.String_String$fromCharCode(charCode)));
    },
    _Uri__makeFileUri(path, slashTerminated) {
      var _null = null,
        segments = A._setArrayType(path.split("/"), type$.JSArray_String);
      if (B.JSString_methods.startsWith$1(path, "/"))
        return A._Uri__Uri(_null, _null, segments, "file");
      else
        return A._Uri__Uri(_null, _null, segments, _null);
    },
    _Uri__makeWindowsFileUrl(path, slashTerminated) {
      var t1, pathSegments, pathStart, hostPart, _s1_ = "\\", _null = null, _s4_ = "file";
      if (B.JSString_methods.startsWith$1(path, "\\\\?\\"))
        if (B.JSString_methods.startsWith$2(path, "UNC\\", 4))
          path = B.JSString_methods.replaceRange$3(path, 0, 7, _s1_);
        else {
          path = B.JSString_methods.substring$1(path, 4);
          t1 = path.length;
          if (t1 >= 3) {
            if (1 >= t1)
              return A.ioore(path, 1);
            if (path.charCodeAt(1) === 58) {
              if (2 >= t1)
                return A.ioore(path, 2);
              t1 = path.charCodeAt(2) !== 92;
            } else
              t1 = true;
          } else
            t1 = true;
          if (t1)
            throw A.wrapException(A.ArgumentError$value(path, "path", "Windows paths with \\\\?\\ prefix must be absolute"));
        }
      else
        path = A.stringReplaceAllUnchecked(path, "/", _s1_);
      t1 = path.length;
      if (t1 > 1 && path.charCodeAt(1) === 58) {
        if (0 >= t1)
          return A.ioore(path, 0);
        A._Uri__checkWindowsDriveLetter(path.charCodeAt(0), true);
        if (t1 !== 2) {
          if (2 >= t1)
            return A.ioore(path, 2);
          t1 = path.charCodeAt(2) !== 92;
        } else
          t1 = true;
        if (t1)
          throw A.wrapException(A.ArgumentError$value(path, "path", "Windows paths with drive letter must be absolute"));
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 1);
        return A._Uri__Uri(_null, _null, pathSegments, _s4_);
      }
      if (B.JSString_methods.startsWith$1(path, _s1_))
        if (B.JSString_methods.startsWith$2(path, _s1_, 1)) {
          pathStart = B.JSString_methods.indexOf$2(path, _s1_, 2);
          t1 = pathStart < 0;
          hostPart = t1 ? B.JSString_methods.substring$1(path, 2) : B.JSString_methods.substring$2(path, 2, pathStart);
          pathSegments = A._setArrayType((t1 ? "" : B.JSString_methods.substring$1(path, pathStart + 1)).split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(hostPart, _null, pathSegments, _s4_);
        } else {
          pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(_null, _null, pathSegments, _s4_);
        }
      else {
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
        return A._Uri__Uri(_null, _null, pathSegments, _null);
      }
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      t1 = host.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(host, start);
      if (host.charCodeAt(start) === 91) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(host, t2);
        if (host.charCodeAt(t2) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t1 = start + 1;
        index = A._Uri__checkZoneID(host, t1, t2);
        if (index < t2) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t2, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t1, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(host, i);
        if (host.charCodeAt(i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var t1, index, sectionStart, isNormalized, char, replacement, t2, t3, tail, sourceLength, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (t1 = host.length, index = start, sectionStart = index, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t3 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t3 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_piR, t2);
            t2 = (B.List_piR[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if ((char & 64512) === 55296 && index + 1 < end) {
              t2 = index + 1;
              if (!(t2 < t1))
                return A.ioore(host, t2);
              tail = host.charCodeAt(t2);
              if ((tail & 64512) === 56320) {
                char = (char & 1023) << 10 | tail & 1023 | 65536;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            slice = B.JSString_methods.substring$2(host, sectionStart, index);
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t2 = buffer;
            } else
              t2 = buffer;
            t2._contents += slice;
            t3 = A._Uri__escapeChar(char);
            t2._contents += t3;
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var t1, index, sectionStart, buffer, isNormalized, char, replacement, t2, slice, t3, sourceLength, tail;
      for (t1 = host.length, index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          t3 = buffer._contents += slice;
          if (t2) {
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t3 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_4AN, t2);
            t2 = (B.List_4AN[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t2 = char >>> 4;
              if (!(t2 < 8))
                return A.ioore(B.List_VOY, t2);
              t2 = (B.List_VOY[t2] & 1 << (char & 15)) !== 0;
            } else
              t2 = false;
            if (t2)
              A._Uri__fail(host, index, "Invalid character");
            else {
              if ((char & 64512) === 55296 && index + 1 < end) {
                t2 = index + 1;
                if (!(t2 < t1))
                  return A.ioore(host, t2);
                tail = host.charCodeAt(t2);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              slice = B.JSString_methods.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              if (buffer == null) {
                buffer = new A.StringBuffer("");
                t2 = buffer;
              } else
                t2 = buffer;
              t2._contents += slice;
              t3 = A._Uri__escapeChar(char);
              t2._contents += t3;
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        if (!isNormalized)
          slice = slice.toLowerCase();
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var t1, i, containsUpperCase, codeUnit, t2;
      if (start === end)
        return "";
      t1 = scheme.length;
      if (!(start < t1))
        return A.ioore(scheme, start);
      if (!A._Uri__isAlphabeticCharacter(scheme.charCodeAt(start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(scheme, i);
        codeUnit = scheme.charCodeAt(i);
        if (codeUnit < 128) {
          t2 = codeUnit >>> 4;
          if (!(t2 < 8))
            return A.ioore(B.List_GVy, t2);
          t2 = (B.List_GVy[t2] & 1 << (codeUnit & 15)) !== 0;
        } else
          t2 = false;
        if (!t2)
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, B.List_2jN, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var t1, result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        t1 = A._arrayInstanceType(pathSegments);
        result = new A.MappedListIterable(pathSegments, t1._eval$1("String(1)")._as(new A._Uri__makePath_closure()), t1._eval$1("MappedListIterable<1,String>")).join$1(0, "/");
      } else if (pathSegments != null)
        throw A.wrapException(A.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, B.List_M2I, true, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/") && !B.JSString_methods.startsWith$1(path, "\\"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null)
        return A._Uri__normalizeOrSubstring(query, start, end, B.List_42A, true, false);
      return null;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, B.List_42A, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var t3, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2,
        t2 = source.length;
      if (t1 >= t2)
        return "%";
      t3 = index + 1;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(source, t3);
      firstDigit = source.charCodeAt(t3);
      if (!(t1 >= 0))
        return A.ioore(source, t1);
      secondDigit = source.charCodeAt(t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = B.JSInt_methods._shrOtherPositive$1(value, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_piR, t1);
        t1 = (B.List_piR[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, t1, flag, encodedBytes, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        t1 = char >>> 4;
        if (!(t1 < 16))
          return A.ioore(_s16_, t1);
        codeUnits[1] = _s16_.charCodeAt(t1);
        codeUnits[2] = _s16_.charCodeAt(char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (!(index < t1))
            return A.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = byte >>> 4;
          if (!(t3 < 16))
            return A.ioore(_s16_, t3);
          if (!(t2 < t1))
            return A.ioore(codeUnits, t2);
          codeUnits[t2] = _s16_.charCodeAt(t3);
          t3 = index + 2;
          if (!(t3 < t1))
            return A.ioore(codeUnits, t3);
          codeUnits[t3] = _s16_.charCodeAt(byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1, t2, index, sectionStart, buffer, char, t3, replacement, sourceLength, tail, t4, _null = null;
      for (t1 = !escapeDelimiters, t2 = component.length, index = start, sectionStart = index, buffer = _null; index < end;) {
        if (!(index >= 0 && index < t2))
          return A.ioore(component, index);
        char = component.charCodeAt(index);
        if (char < 127) {
          t3 = char >>> 4;
          if (!(t3 < 8))
            return A.ioore(charTable, t3);
          t3 = (charTable[t3] & 1 << (char & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          ++index;
        else {
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement) {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash) {
            replacement = "/";
            sourceLength = 1;
          } else {
            if (t1)
              if (char <= 93) {
                t3 = char >>> 4;
                if (!(t3 < 8))
                  return A.ioore(B.List_VOY, t3);
                t3 = (B.List_VOY[t3] & 1 << (char & 15)) !== 0;
              } else
                t3 = false;
            else
              t3 = false;
            if (t3) {
              A._Uri__fail(component, index, "Invalid character");
              sourceLength = _null;
              replacement = sourceLength;
            } else {
              if ((char & 64512) === 55296) {
                t3 = index + 1;
                if (t3 < end) {
                  if (!(t3 < t2))
                    return A.ioore(component, t3);
                  tail = component.charCodeAt(t3);
                  if ((tail & 64512) === 56320) {
                    char = (char & 1023) << 10 | tail & 1023 | 65536;
                    sourceLength = 2;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              replacement = A._Uri__escapeChar(char);
            }
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t3 = buffer;
          } else
            t3 = buffer;
          t4 = t3._contents += B.JSString_methods.substring$2(component, sectionStart, index);
          t3._contents = t4 + A.S(replacement);
          if (typeof sourceLength !== "number")
            return A.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end) {
        t1 = B.JSString_methods.substring$2(component, sectionStart, end);
        buffer._contents += t1;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              B.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      if (appendSlash)
        B.JSArray_methods.add$1(output, "");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment) {
          appendSlash = output.length !== 0 && B.JSArray_methods.get$last(output) !== "..";
          if (appendSlash) {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
          } else
            B.JSArray_methods.add$1(output, "..");
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        B.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return A.ioore(output, 0);
        B.JSArray_methods.$indexSet(output, 0, A._Uri__escapeScheme(output[0]));
      }
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(path.charCodeAt(0)))
        for (i = 1; i < t1; ++i) {
          char = path.charCodeAt(i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_GVy, t2);
            t2 = (B.List_GVy[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var t1, byte, i, t2, charCode;
      for (t1 = s.length, byte = 0, i = 0; i < 2; ++i) {
        t2 = pos + i;
        if (!(t2 < t1))
          return A.ioore(s, t2);
        charCode = s.charCodeAt(t2);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = text.length,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        if (!(i < t1))
          return A.ioore(text, i);
        codeUnit = text.charCodeAt(i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t2 = plusToSpace && codeUnit === 43;
          else
            t2 = true;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple)
        if (B.C_Utf8Codec === encoding)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (i = start; i < end; ++i) {
          if (!(i < t1))
            return A.ioore(text, i);
          codeUnit = text.charCodeAt(i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            B.JSArray_methods.add$1(bytes, A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else if (plusToSpace && codeUnit === 43)
            B.JSArray_methods.add$1(bytes, 32);
          else
            B.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      type$.List_int._as(bytes);
      return B.Utf8Decoder_false.convert$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__writeUri(mimeType, charsetName, parameters, buffer, indices) {
      buffer._contents = buffer._contents;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = text.charCodeAt(i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        B.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          if (!(i >= 0))
            return A.ioore(text, i);
          char = text.charCodeAt(i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          B.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      B.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.C_Base64Codec.normalize$3(0, text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, B.List_42A, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    UriData__uriEncodeBytes(canonicalTable, bytes, buffer) {
      var t1, byteOr, i, byte, t2,
        _s16_ = "0123456789ABCDEF";
      for (t1 = bytes.length, byteOr = 0, i = 0; i < t1; ++i) {
        byte = bytes[i];
        byteOr |= byte;
        if (byte < 128) {
          t2 = byte >>> 4;
          if (!(t2 < 8))
            return A.ioore(canonicalTable, t2);
          t2 = (canonicalTable[t2] & 1 << (byte & 15)) !== 0;
        } else
          t2 = false;
        if (t2) {
          t2 = A.Primitives_stringFromCharCode(byte);
          buffer._contents += t2;
        } else {
          t2 = A.Primitives_stringFromCharCode(37);
          buffer._contents += t2;
          t2 = byte >>> 4;
          if (!(t2 < 16))
            return A.ioore(_s16_, t2);
          t2 = A.Primitives_stringFromCharCode(_s16_.charCodeAt(t2));
          buffer._contents += t2;
          t2 = A.Primitives_stringFromCharCode(_s16_.charCodeAt(byte & 15));
          buffer._contents += t2;
        }
      }
      if ((byteOr & 4294967040) !== 0)
        for (i = 0; i < t1; ++i) {
          byte = bytes[i];
          if (byte > 255)
            throw A.wrapException(A.ArgumentError$value(byte, "non-byte value", null));
        }
    },
    _createTables() {
      var _i, t1, t2, t3, b,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "\\", _s1_3 = "?", _s1_4 = "#", _s2_ = "/\\",
        tables = J.JSArray_JSArray$allocateGrowable(22, type$.Uint8List);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t1 = new A._createTables_build(tables);
      t2 = new A._createTables_setChars();
      t3 = new A._createTables_setRange();
      b = t1.call$2(0, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 227);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(14, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(15, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(1, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(2, 235);
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_2, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(3, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_2, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(4, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(5, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(6, 231);
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(7, 231);
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      t2.call$3(t1.call$2(8, 8), "]", 5);
      b = t1.call$2(9, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(16, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(17, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(10, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(18, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(19, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(11, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(12, 236);
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_3, 12);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(13, 237);
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_3, 13);
      t3.call$3(t1.call$2(20, 245), "az", 21);
      b = t1.call$2(21, 245);
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var t1, i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (t1 = uri.length, i = start; i < end; ++i) {
        if (!(state >= 0 && state < tables.length))
          return A.ioore(tables, state);
        table = tables[state];
        if (!(i < t1))
          return A.ioore(uri, i);
        char = uri.charCodeAt(i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        B.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && B.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _skipPackageNameChars(source, start, end) {
      var t1, i, dots, char;
      for (t1 = source.length, i = start, dots = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    _caseInsensitiveCompareStart(prefix, string, start) {
      var t1, t2, result, i, t3, stringChar, delta, lowerChar;
      for (t1 = prefix.length, t2 = string.length, result = 0, i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 < t2))
          return A.ioore(string, t3);
        stringChar = string.charCodeAt(t3);
        delta = prefix.charCodeAt(i) ^ stringChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = stringChar | delta;
            if (97 <= lowerChar && lowerChar <= 122) {
              result = 32;
              continue;
            }
          }
          return -1;
        }
      }
      return result;
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable(t0, t1, t2) {
      this.length = t0;
      this._generator = t1;
      this.$ti = t2;
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace(t0) {
      this._stackTrace = t0;
    },
    Stopwatch: function Stopwatch() {
      this._stop = this._start = 0;
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._core$_position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri_splitQueryString_closure: function Uri_splitQueryString_closure(t0) {
      this.encoding = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_queryParameters_FI = _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_queryParameters_FI = _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    Expando: function Expando() {
    },
    window() {
      var t1 = window;
      t1.toString;
      return t1;
    },
    Element_Element$html(html, treeSanitizer, validator) {
      var t2,
        t1 = document.body;
      t1.toString;
      t2 = type$._ChildNodeListLazy;
      return type$.Element._as(new A.WhereIterable(new A._ChildNodeListLazy(B.BodyElement_methods.createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator)), t2._eval$1("bool(ListBase.E)")._as(new A.Element_Element$html_closure()), t2._eval$1("WhereIterable<ListBase.E>")).get$single(0));
    },
    Element__safeTagName(element) {
      var t1, exception,
        result = "element tag unavailable";
      try {
        t1 = element.tagName;
        t1.toString;
        result = t1;
      } catch (exception) {
      }
      return result;
    },
    _EventStreamSubscription$(_target, _eventType, onData, _useCapture, $T) {
      var t1 = onData == null ? null : A._wrapZone0(new A._EventStreamSubscription_closure0(onData), type$.Event);
      t1 = new A._EventStreamSubscription0(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription0<0>"));
      t1._tryResume$0();
      return t1;
    },
    _Html5NodeValidator$(uriPolicy) {
      var t1 = document.createElement("a");
      t1.toString;
      t1 = new A._SameOriginUriPolicy(t1, type$.Location._as(window.location));
      t1 = new A._Html5NodeValidator(t1);
      t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
      return t1;
    },
    _Html5NodeValidator__standardAttributeValidator(element, attributeName, value, context) {
      type$.Element._as(element);
      A._asString(attributeName);
      A._asString(value);
      type$._Html5NodeValidator._as(context);
      return true;
    },
    _Html5NodeValidator__uriAttributeValidator(element, attributeName, value, context) {
      var t1, t2, t3, t4, t5;
      type$.Element._as(element);
      A._asString(attributeName);
      A._asString(value);
      t1 = type$._Html5NodeValidator._as(context).uriPolicy;
      t2 = t1._hiddenAnchor;
      B.AnchorElement_methods.set$href(t2, value);
      t3 = t2.hostname;
      t1 = t1._loc;
      if (t3 == t1.hostname) {
        t4 = t2.port;
        t5 = t1.port;
        t5.toString;
        if (t4 === t5) {
          t4 = t2.protocol;
          t1 = t1.protocol;
          t1.toString;
          t1 = t4 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
      if (!t1)
        if (t3 === "")
          if (t2.port === "") {
            t1 = t2.protocol;
            t1 = t1 === ":" || t1 === "";
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = true;
      return t1;
    },
    _TemplatingNodeValidator$() {
      var t1 = type$.String,
        t2 = A.LinkedHashSet_LinkedHashSet$from(B.List_ym9, t1),
        t3 = A._setArrayType(["TEMPLATE"], type$.JSArray_String),
        t4 = type$.String_Function_String._as(new A._TemplatingNodeValidator_closure());
      t1 = new A._TemplatingNodeValidator(t2, A.LinkedHashSet_LinkedHashSet(t1), A.LinkedHashSet_LinkedHashSet(t1), A.LinkedHashSet_LinkedHashSet(t1), null);
      t1._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new A.MappedListIterable(B.List_ym9, t4, type$.MappedListIterable_String_String), t3, null);
      return t1;
    },
    _convertNativeToDart_Window(win) {
      return A._DOMWindowCrossFrame__createSafe(win);
    },
    _DOMWindowCrossFrame__createSafe(w) {
      var t1 = window;
      t1.toString;
      if (w === t1)
        return type$.WindowBase._as(w);
      else
        return new A._DOMWindowCrossFrame(w);
    },
    _wrapZone0(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    BaseElement: function BaseElement() {
    },
    Blob: function Blob() {
    },
    BodyElement: function BodyElement() {
    },
    CharacterData: function CharacterData() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssRule: function CssRule() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DivElement: function DivElement() {
    },
    Document: function Document() {
    },
    DomException: function DomException() {
    },
    DomImplementation: function DomImplementation() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomTokenList: function DomTokenList() {
    },
    _FrozenElementList: function _FrozenElementList(t0, t1) {
      this._nodeList = t0;
      this.$ti = t1;
    },
    Element: function Element() {
    },
    Element_Element$html_closure: function Element_Element$html_closure() {
    },
    ErrorEvent: function ErrorEvent() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    File: function File() {
    },
    FileList: function FileList() {
    },
    FileWriter: function FileWriter() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    HtmlDocument: function HtmlDocument() {
    },
    ImageData: function ImageData() {
    },
    Location: function Location() {
    },
    MediaList: function MediaList() {
    },
    MessageEvent: function MessageEvent() {
    },
    MessagePort: function MessagePort() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiInputMap_values_closure: function MidiInputMap_values_closure(t0) {
      this.values = t0;
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap_values_closure: function MidiOutputMap_values_closure(t0) {
      this.values = t0;
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    _ChildNodeListLazy: function _ChildNodeListLazy(t0) {
      this._this = t0;
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    RtcStatsReport_values_closure: function RtcStatsReport_values_closure(t0) {
      this.values = t0;
    },
    SelectElement: function SelectElement() {
    },
    SharedArrayBuffer: function SharedArrayBuffer() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    Storage: function Storage() {
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    Storage_values_closure: function Storage_values_closure(t0) {
      this.values = t0;
    },
    StyleSheet: function StyleSheet() {
    },
    TableElement: function TableElement() {
    },
    TableRowElement: function TableRowElement() {
    },
    TableSectionElement: function TableSectionElement() {
    },
    TemplateElement: function TemplateElement() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeRanges: function TimeRanges() {
    },
    Touch: function Touch() {
    },
    TouchList: function TouchList() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    Url: function Url() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    Window: function Window() {
    },
    Worker: function Worker() {
    },
    _Attr: function _Attr() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DomRect: function _DomRect() {
    },
    _GamepadList: function _GamepadList() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _ElementAttributeMap: function _ElementAttributeMap(t0) {
      this._html$_element = t0;
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    _EventStream0: function _EventStream0(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription0: function _EventStreamSubscription0(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure0: function _EventStreamSubscription_closure0(t0) {
      this.onData = t0;
    },
    _EventStreamSubscription_onData_closure0: function _EventStreamSubscription_onData_closure0(t0) {
      this.handleData = t0;
    },
    _Html5NodeValidator: function _Html5NodeValidator(t0) {
      this.uriPolicy = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    NodeValidatorBuilder: function NodeValidatorBuilder(t0) {
      this._validators = t0;
    },
    NodeValidatorBuilder_allowsElement_closure: function NodeValidatorBuilder_allowsElement_closure(t0) {
      this.element = t0;
    },
    NodeValidatorBuilder_allowsAttribute_closure: function NodeValidatorBuilder_allowsAttribute_closure(t0, t1, t2) {
      this.element = t0;
      this.attributeName = t1;
      this.value = t2;
    },
    _SimpleNodeValidator: function _SimpleNodeValidator() {
    },
    _SimpleNodeValidator_closure: function _SimpleNodeValidator_closure() {
    },
    _SimpleNodeValidator_closure0: function _SimpleNodeValidator_closure0() {
    },
    _TemplatingNodeValidator: function _TemplatingNodeValidator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._templateAttrs = t0;
      _.allowedElements = t1;
      _.allowedAttributes = t2;
      _.allowedUriAttributes = t3;
      _.uriPolicy = t4;
    },
    _TemplatingNodeValidator_closure: function _TemplatingNodeValidator_closure() {
    },
    _SvgNodeValidator: function _SvgNodeValidator() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._html$_length = t1;
      _._position = -1;
      _._html$_current = null;
      _.$ti = t2;
    },
    _DOMWindowCrossFrame: function _DOMWindowCrossFrame(t0) {
      this.__window = t0;
    },
    _SameOriginUriPolicy: function _SameOriginUriPolicy(t0, t1) {
      this._hiddenAnchor = t0;
      this._loc = t1;
    },
    _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer(t0) {
      this.validator = t0;
      this.numTreeModifications = 0;
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: function _ValidatingTreeSanitizer_sanitizeTree_walk(t0) {
      this.$this = t0;
    },
    _CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase: function _CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase() {
    },
    _DomRectList_JavaScriptObject_ListMixin: function _DomRectList_JavaScriptObject_ListMixin() {
    },
    _DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin: function _DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_JavaScriptObject_ListMixin: function _DomStringList_JavaScriptObject_ListMixin() {
    },
    _DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin: function _DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _FileList_JavaScriptObject_ListMixin: function _FileList_JavaScriptObject_ListMixin() {
    },
    _FileList_JavaScriptObject_ListMixin_ImmutableListMixin: function _FileList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_JavaScriptObject_ListMixin: function _HtmlCollection_JavaScriptObject_ListMixin() {
    },
    _HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin: function _HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_JavaScriptObject_MapMixin: function _MidiInputMap_JavaScriptObject_MapMixin() {
    },
    _MidiOutputMap_JavaScriptObject_MapMixin: function _MidiOutputMap_JavaScriptObject_MapMixin() {
    },
    _MimeTypeArray_JavaScriptObject_ListMixin: function _MimeTypeArray_JavaScriptObject_ListMixin() {
    },
    _MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin: function _MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _NodeList_JavaScriptObject_ListMixin: function _NodeList_JavaScriptObject_ListMixin() {
    },
    _NodeList_JavaScriptObject_ListMixin_ImmutableListMixin: function _NodeList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_JavaScriptObject_ListMixin: function _PluginArray_JavaScriptObject_ListMixin() {
    },
    _PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin: function _PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_JavaScriptObject_MapMixin: function _RtcStatsReport_JavaScriptObject_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_JavaScriptObject_ListMixin: function _SpeechGrammarList_JavaScriptObject_ListMixin() {
    },
    _SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin: function _SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _Storage_JavaScriptObject_MapMixin: function _Storage_JavaScriptObject_MapMixin() {
    },
    _TextTrackCueList_JavaScriptObject_ListMixin: function _TextTrackCueList_JavaScriptObject_ListMixin() {
    },
    _TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin: function _TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_JavaScriptObject_ListMixin: function _TouchList_JavaScriptObject_ListMixin() {
    },
    _TouchList_JavaScriptObject_ListMixin_ImmutableListMixin: function _TouchList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_JavaScriptObject_ListMixin: function __CssRuleList_JavaScriptObject_ListMixin() {
    },
    __CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin: function __CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __GamepadList_JavaScriptObject_ListMixin: function __GamepadList_JavaScriptObject_ListMixin() {
    },
    __GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin: function __GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_JavaScriptObject_ListMixin: function __NamedNodeMap_JavaScriptObject_ListMixin() {
    },
    __NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin: function __NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_JavaScriptObject_ListMixin: function __SpeechRecognitionResultList_JavaScriptObject_ListMixin() {
    },
    __SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_JavaScriptObject_ListMixin: function __StyleSheetList_JavaScriptObject_ListMixin() {
    },
    __StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin: function __StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _convertNativeToDart_Value(value) {
      var t1, values, i;
      if (value == null)
        return value;
      if (typeof value == "string" || typeof value == "number" || A._isBool(value))
        return value;
      if (A.isJavaScriptSimpleObject(value))
        return A.convertNativeToDart_Dictionary(value);
      t1 = Array.isArray(value);
      t1.toString;
      if (t1) {
        values = [];
        i = 0;
        while (true) {
          t1 = value.length;
          t1.toString;
          if (!(i < t1))
            break;
          values.push(A._convertNativeToDart_Value(value[i]));
          ++i;
        }
        return values;
      }
      return value;
    },
    convertNativeToDart_Dictionary(object) {
      var dict, keys, t1, _i, key, t2;
      if (object == null)
        return null;
      dict = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
        key = keys[_i];
        t2 = key;
        t2.toString;
        dict.$indexSet(0, t2, A._convertNativeToDart_Value(object[key]));
      }
      return dict;
    },
    isJavaScriptSimpleObject(value) {
      var proto = Object.getPrototypeOf(value),
        t1 = proto === Object.prototype;
      t1.toString;
      if (!t1) {
        t1 = proto === null;
        t1.toString;
      } else
        t1 = true;
      return t1;
    },
    _StructuredClone: function _StructuredClone() {
    },
    _StructuredClone_walk_closure: function _StructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredClone_walk_closure0: function _StructuredClone_walk_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this.$this = t0;
      this.map = t1;
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    _convertDartFunctionFast(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast(callback, $arguments) {
      type$.List_dynamic._as($arguments);
      type$.Function._as(callback);
      return A.Primitives_applyFunction(callback, $arguments, null);
    },
    allowInterop(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return $F._as(A._convertDartFunctionFast(f));
    },
    _noJsifyRequired(o) {
      return o == null || A._isBool(o) || typeof o == "number" || typeof o == "string" || type$.Int8List._is(o) || type$.Uint8List._is(o) || type$.Uint8ClampedList._is(o) || type$.Int16List._is(o) || type$.Uint16List._is(o) || type$.Int32List._is(o) || type$.Uint32List._is(o) || type$.Float32List._is(o) || type$.Float64List._is(o) || type$.ByteBuffer._is(o) || type$.ByteData._is(o);
    },
    jsify(object) {
      if (A._noJsifyRequired(object))
        return object;
      return new A.jsify__convert(new A._IdentityHashMap(type$._IdentityHashMap_of_nullable_Object_and_nullable_Object)).call$1(object);
    },
    callMethod(o, method, args, $T) {
      return $T._as(o[method].apply(o, args));
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer, $T), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    _noDartifyRequired(o) {
      return o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string" || o instanceof Int8Array || o instanceof Uint8Array || o instanceof Uint8ClampedArray || o instanceof Int16Array || o instanceof Uint16Array || o instanceof Int32Array || o instanceof Uint32Array || o instanceof Float32Array || o instanceof Float64Array || o instanceof ArrayBuffer || o instanceof DataView;
    },
    dartify(o) {
      if (A._noDartifyRequired(o))
        return o;
      return new A.dartify_convert(new A._IdentityHashMap(type$._IdentityHashMap_of_nullable_Object_and_nullable_Object)).call$1(o);
    },
    jsify__convert: function jsify__convert(t0) {
      this._convertedObjects = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    dartify_convert: function dartify_convert(t0) {
      this._convertedObjects = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PointList: function PointList() {
    },
    ScriptElement0: function ScriptElement0() {
    },
    StringList: function StringList() {
    },
    SvgElement: function SvgElement() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    _LengthList_JavaScriptObject_ListMixin: function _LengthList_JavaScriptObject_ListMixin() {
    },
    _LengthList_JavaScriptObject_ListMixin_ImmutableListMixin: function _LengthList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _NumberList_JavaScriptObject_ListMixin: function _NumberList_JavaScriptObject_ListMixin() {
    },
    _NumberList_JavaScriptObject_ListMixin_ImmutableListMixin: function _NumberList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _StringList_JavaScriptObject_ListMixin: function _StringList_JavaScriptObject_ListMixin() {
    },
    _StringList_JavaScriptObject_ListMixin_ImmutableListMixin: function _StringList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _TransformList_JavaScriptObject_ListMixin: function _TransformList_JavaScriptObject_ListMixin() {
    },
    _TransformList_JavaScriptObject_ListMixin_ImmutableListMixin: function _TransformList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioParamMap_values_closure: function AudioParamMap_values_closure(t0) {
      this.values = t0;
    },
    AudioTrackList: function AudioTrackList() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    _AudioParamMap_JavaScriptObject_MapMixin: function _AudioParamMap_JavaScriptObject_MapMixin() {
    },
    AsyncMemoizer: function AsyncMemoizer(t0, t1) {
      this._async_memoizer$_completer = t0;
      this.$ti = t1;
    },
    DelegatingSink: function DelegatingSink(t0, t1) {
      this._sink$_sink = t0;
      this.$ti = t1;
    },
    FutureGroup: function FutureGroup(t0, t1, t2) {
      var _ = this;
      _._future_group$_pending = 0;
      _._future_group$_closed = false;
      _._future_group$_completer = t0;
      _._future_group$_values = t1;
      _.$ti = t2;
    },
    FutureGroup_add_closure: function FutureGroup_add_closure(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    FutureGroup_add_closure0: function FutureGroup_add_closure0(t0) {
      this.$this = t0;
    },
    StreamGroup: function StreamGroup(t0, t1, t2) {
      var _ = this;
      _.__StreamGroup__controller_A = $;
      _._stream_group$_closed = false;
      _._stream_group$_state = t0;
      _._stream_group$_subscriptions = t1;
      _.$ti = t2;
    },
    StreamGroup_add_closure: function StreamGroup_add_closure() {
    },
    StreamGroup_add_closure0: function StreamGroup_add_closure0(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    StreamGroup__onListen_closure: function StreamGroup__onListen_closure() {
    },
    StreamGroup__onCancel_closure: function StreamGroup__onCancel_closure(t0) {
      this.$this = t0;
    },
    StreamGroup__onCancelBroadcast_closure: function StreamGroup__onCancelBroadcast_closure(t0) {
      this.$this = t0;
    },
    StreamGroup__listenToStream_closure: function StreamGroup__listenToStream_closure(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    _StreamGroupState: function _StreamGroupState(t0) {
      this.name = t0;
    },
    All: function All() {
    },
    CancelationToken: function CancelationToken() {
    },
    CanceledException: function CanceledException(t0) {
      this.message = t0;
    },
    _self(x, $X) {
      return $X._as(x);
    },
    CanceledExceptions: function CanceledExceptions(t0) {
      this._canceled_exceptions$_exceptions = t0;
    },
    CanceledExceptions_message_closure: function CanceledExceptions_message_closure() {
    },
    TimeoutCanceledException: function TimeoutCanceledException(t0) {
      this.message = t0;
    },
    CancelableToken: function CancelableToken(t0) {
      this._cancelable_token$_exception = null;
      this._cancelable_token$_canceler = t0;
    },
    CompositeToken$any(tokens) {
      var t1 = $.Zone__current,
        t2 = A._setArrayType(tokens.slice(0), A._arrayInstanceType(tokens));
      t1 = new A.CompositeToken(B._Mode_0, t2, new A._AsyncCompleter(new A._Future(t1, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
      t1.CompositeToken$_$2(tokens, B._Mode_0);
      return t1;
    },
    _Mode: function _Mode(t0) {
      this._name = t0;
    },
    CompositeToken: function CompositeToken(t0, t1, t2) {
      var _ = this;
      _._mode = t0;
      _._tokens = t1;
      _._canceler = t2;
      _._composite_token$_exception = null;
    },
    CompositeToken$__closure: function CompositeToken$__closure(t0, t1) {
      this.$this = t0;
      this.idx = t1;
    },
    CompositeToken__checkTokens_closure: function CompositeToken__checkTokens_closure() {
    },
    TimeoutToken$(timeout) {
      var t1 = $.Zone__current;
      if (timeout._duration < 0)
        A.throwExpression(A.ArgumentError$value(timeout, "timeout", null));
      return new A.TimeoutToken(timeout, new A._AsyncCompleter(new A._Future(t1, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
    },
    TimeoutToken: function TimeoutToken(t0, t1) {
      var _ = this;
      _.timeout = t0;
      _._timeout_token$_exception = _._timeout_token$_timer = null;
      _._timeout_token$_canceler = t1;
    },
    TimeoutToken_ensureStarted_closure: function TimeoutToken_ensureStarted_closure(t0) {
      this.$this = t0;
    },
    EmptyUnmodifiableSet: function EmptyUnmodifiableSet(t0) {
      this.$ti = t0;
    },
    _EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin: function _EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin() {
    },
    mergeMaps(map1, map2, value, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap$of(map1, $K, $V);
      map2.forEach$1(0, new A.mergeMaps_closure(result, value, $V, $K));
      return result;
    },
    mergeMaps_closure: function mergeMaps_closure(t0, t1, t2, t3) {
      var _ = this;
      _.result = t0;
      _.value = t1;
      _.V = t2;
      _.K = t3;
    },
    QueueList__computeInitialCapacity(initialCapacity) {
      return 8;
    },
    QueueList__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    QueueList: function QueueList(t0, t1, t2, t3) {
      var _ = this;
      _._table = t0;
      _._head = t1;
      _._tail = t2;
      _.$ti = t3;
    },
    _QueueList_Object_ListMixin: function _QueueList_Object_ListMixin() {
    },
    UnionSet: function UnionSet(t0, t1, t2) {
      this._sets = t0;
      this._disjoint = t1;
      this.$ti = t2;
    },
    UnionSet_length_closure: function UnionSet_length_closure(t0) {
      this.$this = t0;
    },
    UnionSet__iterable_closure: function UnionSet__iterable_closure(t0) {
      this.$this = t0;
    },
    UnionSet_contains_closure: function UnionSet_contains_closure(t0, t1) {
      this.$this = t0;
      this.element = t1;
    },
    _UnionSet_SetBase_UnmodifiableSetMixin: function _UnionSet_SetBase_UnmodifiableSetMixin() {
    },
    UnionSetController: function UnionSetController(t0, t1, t2) {
      this.set = t0;
      this._union_set_controller$_sets = t1;
      this.$ti = t2;
    },
    UnmodifiableSetMixin__throw() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable Set"));
    },
    UnmodifiableSetView: function UnmodifiableSetView(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    UnmodifiableSetMixin: function UnmodifiableSetMixin() {
    },
    _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: function _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin() {
    },
    _DelegatingIterableBase: function _DelegatingIterableBase() {
    },
    DelegatingSet: function DelegatingSet(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    head(url) {
      return A._withClient(new A.head_closure(url, null), type$.Response);
    },
    _withClient(fn, $T) {
      return A._withClient$body(fn, $T, $T);
    },
    _withClient$body(fn, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], client, t1, client0;
      var $async$_withClient = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              client0 = $.Zone__current.$index(0, B.Symbol__clientToken);
              client0 = client0 == null ? null : type$.Client_Function._as(client0).call$0();
              client = client0 == null ? new A.BrowserClient(A.LinkedHashSet_LinkedHashSet$_empty(type$.JSObject)) : client0;
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(fn.call$1(client), $async$_withClient);
            case 6:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              J.close$0$z(client);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_withClient, $async$completer);
    },
    head_closure: function head_closure(t0, t1) {
      this.url = t0;
      this.headers = t1;
    },
    BaseClient: function BaseClient() {
    },
    BaseRequest: function BaseRequest() {
    },
    BaseRequest_closure: function BaseRequest_closure() {
    },
    BaseRequest_closure0: function BaseRequest_closure0() {
    },
    BaseResponse: function BaseResponse() {
    },
    _extension_0_get_responseHeaders(_this) {
      var _i, header, t2, splitIdx, key, value,
        t1 = type$.String,
        headers = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1),
        headersList = A._asString(_this.getAllResponseHeaders()).split("\r\n");
      for (t1 = headersList.length, _i = 0; _i < t1; ++_i) {
        header = headersList[_i];
        t2 = J.getInterceptor$asx(header);
        if (t2.get$length(header) === 0)
          continue;
        splitIdx = t2.indexOf$1(header, ": ");
        if (splitIdx === -1)
          continue;
        key = t2.substring$2(header, 0, splitIdx).toLowerCase();
        value = t2.substring$1(header, splitIdx + 2);
        if (headers.containsKey$1(0, key))
          headers.$indexSet(0, key, A.S(headers.$index(0, key)) + ", " + value);
        else
          headers.$indexSet(0, key, value);
      }
      return headers;
    },
    BrowserClient: function BrowserClient(t0) {
      this._xhrs = t0;
      this._isClosed = false;
    },
    BrowserClient_send_closure: function BrowserClient_send_closure(t0, t1, t2) {
      this.xhr = t0;
      this.completer = t1;
      this.request = t2;
    },
    BrowserClient_send_closure0: function BrowserClient_send_closure0(t0, t1) {
      this.completer = t0;
      this.request = t1;
    },
    ByteStream: function ByteStream(t0) {
      this._stream = t0;
    },
    ByteStream_toBytes_closure: function ByteStream_toBytes_closure(t0) {
      this.completer = t0;
    },
    ClientException$(message, uri) {
      return new A.ClientException(message, uri);
    },
    ClientException: function ClientException(t0, t1) {
      this.message = t0;
      this.uri = t1;
    },
    Request$(method, url) {
      var t1 = new Uint8Array(0),
        t2 = $.$get$BaseRequest__tokenRE();
      if (!t2._nativeRegExp.test(method))
        A.throwExpression(A.ArgumentError$value(method, "method", "Not a valid method"));
      t2 = type$.String;
      return new A.Request(B.C_Utf8Codec, t1, method, url, A.LinkedHashMap_LinkedHashMap(new A.BaseRequest_closure(), new A.BaseRequest_closure0(), t2, t2));
    },
    Request: function Request(t0, t1, t2, t3, t4) {
      var _ = this;
      _._defaultEncoding = t0;
      _._bodyBytes = t1;
      _.method = t2;
      _.url = t3;
      _.headers = t4;
      _._finalized = false;
    },
    Response_fromStream(response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, t5, t6, body, t1, t2, t3, t4;
      var $async$Response_fromStream = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(response.stream.toBytes$0(), $async$Response_fromStream);
            case 3:
              // returning from await.
              body = $async$result;
              t1 = response.statusCode;
              t2 = response.request;
              t3 = response.headers;
              t4 = response.reasonPhrase;
              A.toUint8List(body);
              t5 = body.length;
              t6 = new A.Response(t2, t1, t4, t5, t3, false, true);
              t6.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t1, t5, t3, false, true, t4, t2);
              $async$returnValue = t6;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Response_fromStream, $async$completer);
    },
    Response: function Response(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.request = t0;
      _.statusCode = t1;
      _.reasonPhrase = t2;
      _.contentLength = t3;
      _.headers = t4;
      _.isRedirect = t5;
      _.persistentConnection = t6;
    },
    StreamedResponse: function StreamedResponse() {
    },
    StreamedResponseV2: function StreamedResponseV2(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.stream = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    AnsiColor: function AnsiColor(t0, t1) {
      this.fg = t0;
      this.color = t1;
    },
    DevelopmentFilter: function DevelopmentFilter() {
      this._level = null;
    },
    LogEvent: function LogEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.level = t0;
      _.message = t1;
      _.error = t2;
      _.stackTrace = t3;
      _.time = t4;
    },
    LogFilter: function LogFilter() {
    },
    Level: function Level(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    LogOutput: function LogOutput() {
    },
    LogPrinter: function LogPrinter() {
    },
    Logger$(filter, level, output, printer) {
      var t1 = filter == null ? $.$get$Logger_defaultFilter().call$0() : filter,
        t2 = printer == null ? $.$get$Logger_defaultPrinter().call$0() : printer;
      t1 = new A.Logger(t1, t2, output == null ? $.$get$Logger_defaultOutput().call$0() : output);
      t1.Logger$4$filter$level$output$printer(filter, level, output, printer);
      return t1;
    },
    Logger: function Logger(t0, t1, t2) {
      var _ = this;
      _.__Logger__initialization_F = $;
      _._filter = t0;
      _._printer = t1;
      _._output = t2;
    },
    Logger_defaultFilter_closure: function Logger_defaultFilter_closure() {
    },
    Logger_defaultPrinter_closure: function Logger_defaultPrinter_closure() {
    },
    Logger_defaultOutput_closure: function Logger_defaultOutput_closure() {
    },
    OutputEvent: function OutputEvent(t0) {
      this.lines = t0;
    },
    ConsoleOutput: function ConsoleOutput() {
    },
    PrettyPrinter$() {
      var t1 = new A.PrettyPrinter();
      t1.PrettyPrinter$12$colors$errorMethodCount$excludeBox$excludePaths$levelColors$levelEmojis$lineLength$methodCount$noBoxingByDefault$printEmojis$printTime$stackTraceBeginIndex(true, 8, B.Map_empty3, B.List_empty, null, null, 120, 2, false, true, false, 0);
      return t1;
    },
    PrettyPrinter: function PrettyPrinter() {
      var _ = this;
      _.__PrettyPrinter__includeBox_F = $;
      _._bottomBorder = _._middleBorder = _._topBorder = "";
    },
    PrettyPrinter_closure: function PrettyPrinter_closure(t0) {
      this.$this = t0;
    },
    PrettyPrinter_formatStackTrace_closure: function PrettyPrinter_formatStackTrace_closure(t0) {
      this.$this = t0;
    },
    _Empty: function _Empty() {
    },
    _NotEmpty: function _NotEmpty() {
    },
    _IsNull: function _IsNull() {
    },
    _IsNotNull: function _IsNotNull() {
    },
    _IsTrue: function _IsTrue() {
    },
    _IsFalse: function _IsFalse() {
    },
    _Contains: function _Contains(t0) {
      this._core_matchers$_expected = t0;
    },
    _Contains_matches_closure: function _Contains_matches_closure(t0, t1) {
      this.expected = t0;
      this.matchState = t1;
    },
    _Predicate: function _Predicate(t0, t1, t2) {
      this._matcher = t0;
      this._core_matchers$_description = t1;
      this.$ti = t2;
    },
    StringDescription$() {
      return new A.StringDescription(new A.StringBuffer(""));
    },
    StringDescription: function StringDescription(t0) {
      this._out = t0;
    },
    _StringEqualsMatcher__writeLeading(buff, s, start) {
      var t1 = buff._contents;
      if (start > 10) {
        t1 += "... ";
        buff._contents = t1;
        buff._contents = t1 + B.JSString_methods.substring$2(s, start - 10, start);
      } else
        buff._contents = t1 + B.JSString_methods.substring$2(s, 0, start);
    },
    _StringEqualsMatcher__writeTrailing(buff, s, start) {
      var t1 = start + 10,
        t2 = buff._contents;
      if (t1 > s.length)
        buff._contents = t2 + B.JSString_methods.substring$1(s, start);
      else {
        t1 = t2 + B.JSString_methods.substring$2(s, start, t1);
        buff._contents = t1;
        buff._contents = t1 + " ...";
      }
    },
    _Mismatch$simple($location, actual, problem) {
      return new A._Mismatch($location, actual, new A._Mismatch$simple_closure(problem), false);
    },
    _StringEqualsMatcher: function _StringEqualsMatcher(t0) {
      this._equals_matcher$_value = t0;
    },
    _DeepMatcher: function _DeepMatcher(t0, t1) {
      this._expected = t0;
      this._limit = t1;
    },
    _DeepMatcher__compareSets_closure: function _DeepMatcher__compareSets_closure(t0, t1, t2, t3) {
      var _ = this;
      _.matcher = t0;
      _.expectedElement = t1;
      _.location = t2;
      _.depth = t3;
    },
    _DeepMatcher__compareSets_closure0: function _DeepMatcher__compareSets_closure0(t0) {
      this.expectedElement = t0;
    },
    _DeepMatcher__recursiveMatch_closure: function _DeepMatcher__recursiveMatch_closure(t0, t1, t2, t3) {
      var _ = this;
      _.expected = t0;
      _.actual = t1;
      _.matchState = t2;
      _.depth = t3;
    },
    _DeepMatcher__recursiveMatch_closure0: function _DeepMatcher__recursiveMatch_closure0(t0) {
      this.e = t0;
    },
    _DeepMatcher__recursiveMatch_closure1: function _DeepMatcher__recursiveMatch_closure1(t0, t1) {
      this.err = t0;
      this.key = t1;
    },
    _DeepMatcher__recursiveMatch_closure2: function _DeepMatcher__recursiveMatch_closure2(t0, t1) {
      this.err = t0;
      this.key = t1;
    },
    _DeepMatcher__recursiveMatch_closure3: function _DeepMatcher__recursiveMatch_closure3(t0) {
      this.expected = t0;
    },
    _Mismatch: function _Mismatch(t0, t1, t2, t3) {
      var _ = this;
      _.location = t0;
      _.actual = t1;
      _.describeProblem = t2;
      _.instead = t3;
    },
    _Mismatch$simple_closure: function _Mismatch$simple_closure(t0) {
      this.problem = t0;
    },
    expect(actual, matcher, reason) {
      A._expect(actual, matcher, null, reason, null, false);
    },
    _expect(actual, matcher, formatter, reason, skip, verbose) {
      var matchState, e, trace, t2, exception, t1 = {};
      t1.matcher = matcher;
      t1.reason = reason;
      if (type$.nullable_Invoker._as($.Zone__current.$index(0, B.Symbol_EY8)) == null)
        A.throwExpression(new A.OutsideTestException());
      if (type$.nullable_StackTraceFormatter._as($.Zone__current.$index(0, $.$get$_currentKey())) == null)
        $.$get$TestHandle__defaultFormatter();
      matcher = A.wrapMatcher(matcher);
      t1.matcher = matcher;
      t2 = type$.dynamic;
      matchState = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      try {
        if (matcher.matches$2(0, actual, matchState)) {
          t2 = A.Future_Future$sync(new A._expect_closure(), t2);
          return t2;
        }
        t2 = reason;
      } catch (exception) {
        e = A.unwrapException(exception);
        trace = A.getTraceFromException(exception);
        t2 = t1.reason;
        if (t2 == null) {
          reason = A.S(e) + " at " + A.S(trace);
          t1.reason = reason;
          t2 = reason;
        }
      }
      A.fail(new A._expect_closure0().call$5(actual, type$.Matcher._as(t1.matcher), t2, matchState, false));
    },
    fail(message) {
      return A.throwExpression(new A.TestFailure(message));
    },
    formatFailure(expected, actual, which, reason) {
      var t2,
        t1 = A.StringDescription$().addDescriptionOf$1(expected)._out._contents;
      t1 = A.indent0(t1.charCodeAt(0) == 0 ? t1 : t1, "Expected: ");
      t2 = A.StringDescription$().addDescriptionOf$1(actual)._out._contents;
      t2 = "" + (t1 + "\n") + (A.indent0(t2.charCodeAt(0) == 0 ? t2 : t2, "  Actual: ") + "\n");
      t1 = which.length !== 0 ? t2 + (A.indent0(which, "   Which: ") + "\n") : t2;
      if (reason != null)
        t1 += reason + "\n";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _expect_closure0: function _expect_closure0() {
    },
    _expect_closure: function _expect_closure() {
    },
    FeatureMatcher: function FeatureMatcher() {
    },
    Matcher: function Matcher() {
    },
    _IsNot: function _IsNot(t0) {
      this._operator_matchers$_matcher = t0;
    },
    _OrderingMatcher: function _OrderingMatcher(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._order_matchers$_value = t0;
      _._equalValue = t1;
      _._lessThanValue = t2;
      _._greaterThanValue = t3;
      _._comparisonDescription = t4;
      _._valueInDescription = t5;
    },
    prettyPrint(object, maxItems, maxLineLength) {
      return new A.prettyPrint_prettyPrintImpl(maxItems, maxLineLength).call$4(object, 0, A.LinkedHashSet_LinkedHashSet$_empty(type$.nullable_Object), true);
    },
    _typeName(x) {
      if (x instanceof A._Type)
        return "Type";
      if (type$.Uri._is(x))
        return "Uri";
      if (type$.Set_dynamic._is(x))
        return "Set";
      if (x instanceof A._BigIntImpl)
        return "BigInt";
      return J.get$runtimeType$(x).toString$0(0);
    },
    _escapeString(source) {
      var t1 = A.escape(A._asString(source));
      return A.stringReplaceAllUnchecked(t1, "'", "\\'");
    },
    prettyPrint_prettyPrintImpl: function prettyPrint_prettyPrintImpl(t0, t1) {
      this.maxItems = t0;
      this.maxLineLength = t1;
    },
    prettyPrint_prettyPrintImpl_pp: function prettyPrint_prettyPrintImpl_pp(t0, t1, t2) {
      this._box_0 = t0;
      this.prettyPrintImpl = t1;
      this.indent = t2;
    },
    prettyPrint_prettyPrintImpl_closure: function prettyPrint_prettyPrintImpl_closure(t0) {
      this.indent = t0;
    },
    prettyPrint_prettyPrintImpl_closure0: function prettyPrint_prettyPrintImpl_closure0(t0, t1) {
      this.pp = t0;
      this.object = t1;
    },
    prettyPrint_prettyPrintImpl_closure1: function prettyPrint_prettyPrintImpl_closure1(t0) {
      this.indent = t0;
    },
    _MatchesRegExp: function _MatchesRegExp(t0) {
      this._regexp = t0;
    },
    TypeMatcher: function TypeMatcher(t0) {
      this.$ti = t0;
    },
    wrapMatcher(valueOrMatcher) {
      var _s18_ = "satisfies function";
      if (valueOrMatcher instanceof A.Matcher)
        return valueOrMatcher;
      else if (type$.bool_Function_nullable_Object._is(valueOrMatcher))
        return new A._Predicate(valueOrMatcher, _s18_, type$._Predicate_nullable_Object);
      else if (type$.bool_Function_Never._is(valueOrMatcher))
        return new A._Predicate(new A.wrapMatcher_closure(valueOrMatcher), _s18_, type$._Predicate_nullable_Object);
      else
        return typeof valueOrMatcher == "string" ? new A._StringEqualsMatcher(valueOrMatcher) : new A._DeepMatcher(valueOrMatcher, 100);
    },
    escape(str) {
      return A.stringReplaceAllFuncUnchecked(A.stringReplaceAllUnchecked(str, "\\", "\\\\"), $.$get$_escapeRegExp(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.escape_closure())), null);
    },
    _getHexLiteral(input) {
      return "\\x" + B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(new A.Runes(A._asString(input)).get$single(0), 16).toUpperCase(), 2, "0");
    },
    wrapMatcher_closure: function wrapMatcher_closure(t0) {
      this.valueOrMatcher = t0;
    },
    escape_closure: function escape_closure() {
    },
    Context_Context(style) {
      return new A.Context(style, ".");
    },
    _parseUri(uri) {
      return uri;
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = "" + (method + "(");
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, t3._eval$1("String(ListIterable.E)")._as(new A._validateArgList_closure()), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, t2, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t2 = style.isSeparator$1(path.charCodeAt(0));
      } else
        t2 = false;
      if (t2) {
        if (0 >= t1)
          return A.ioore(path, 0);
        B.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        B.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(path.charCodeAt(i))) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(path, start, i));
          B.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        B.JSArray_methods.add$1(parts, B.JSString_methods.substring$1(path, start));
        B.JSArray_methods.add$1(separators, "");
      }
      return new A.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    Style__getPlatformStyle() {
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      var t1 = A.Uri_base();
      if (!B.JSString_methods.endsWith$1(t1.get$path(t1), "/"))
        return $.$get$Style_url();
      if (A._Uri__Uri(null, "a/b", null, null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure() {
    },
    Pool: function Pool(t0, t1, t2, t3, t4) {
      var _ = this;
      _._requestedResources = t0;
      _._onReleaseCallbacks = t1;
      _._onReleaseCompleters = t2;
      _._maxAllocatedResources = t3;
      _._allocatedResources = 0;
      _._closeGroup = _._timer = null;
      _._pool$_closeMemo = t4;
    },
    Pool_close_closure: function Pool_close_closure(t0) {
      this.$this = t0;
    },
    Pool__onResourceReleaseAllowed_closure: function Pool__onResourceReleaseAllowed_closure(t0, t1) {
      this.zone = t0;
      this.registered = t1;
    },
    Pool__runOnRelease_closure: function Pool__runOnRelease_closure(t0) {
      this.$this = t0;
    },
    Pool__runOnRelease_closure0: function Pool__runOnRelease_closure0(t0) {
      this.$this = t0;
    },
    PoolResource: function PoolResource(t0) {
      this._pool = t0;
      this._released = false;
    },
    openChannel(entryPoint, exceptionManager, logger, startArguments, hook) {
      return A.openChannel$body(entryPoint, exceptionManager, logger, startArguments, hook);
    },
    openChannel$body(entryPoint, exceptionManager, logger, startArguments, hook) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Channel),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], com, webEntryPoint, worker, fail, success, startRequest, data, msg, transfer, jsTransfer, ex, st, channel, hookRes, t2, t3, t4, t5, exception, t1, completer, ready, $async$exception;
      var $async$openChannel = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.Zone__current;
              completer = new A._AsyncCompleter(new A._Future(t1, type$._Future_Channel), type$._AsyncCompleter_Channel);
              ready = new A._AsyncCompleter(new A._Future(t1, type$._Future_void), type$._AsyncCompleter_void);
              t1 = self;
              t2 = type$.JSObject;
              com = t2._as(new t1.MessageChannel());
              webEntryPoint = A.getEntryPointUrl(entryPoint);
              worker = A._Cell$named("worker");
              fail = new A.openChannel_fail(ready, completer);
              success = new A.openChannel_success(ready, completer);
              $async$handler = 4;
              worker.__late_helper$_value = t2._as(new t1.Worker(webEntryPoint._1));
              worker._readLocal$0()["@@dbgid"] = webEntryPoint._1 + "#";
              t3 = type$.Function;
              t4 = type$.JavaScriptFunction;
              worker._readLocal$0().onerror = t4._as(A.allowInterop(new A.openChannel_closure(exceptionManager, logger, fail, entryPoint), t3));
              worker._readLocal$0().onmessageerror = type$.nullable_JavaScriptFunction._as(worker._readLocal$0().onerror);
              worker._readLocal$0().onmessage = t4._as(A.allowInterop(new A.openChannel_closure0(exceptionManager, logger, fail, ready), t3));
              $async$goto = 7;
              return A._asyncAwait(ready.future, $async$openChannel);
            case 7:
              // returning from await.
              t5 = t2._as(com.port2);
              startRequest = [A.microsecTimeStamp(), t5, -1, startArguments, null, null, true];
              t2._as(com.port1).onmessage = t4._as(A.allowInterop(new A.openChannel_closure1(exceptionManager, logger, completer, fail, success), t3));
              try {
                data = A.WorkerRequestExt_wrapInPlace(startRequest);
                msg = A.jsify(data);
                transfer = A.Transferables_get(data);
                t3 = transfer == null || J.get$length$asx(transfer) === 0;
                t4 = type$.void;
                if (t3)
                  A.callMethod(worker._readLocal$0(), "postMessage", [msg], t4);
                else {
                  jsTransfer = type$.JSArray_nullable_Object._as(A.jsify(transfer));
                  A.callMethod(worker._readLocal$0(), "postMessage", [msg, jsTransfer], t4);
                }
              } catch (exception) {
                ex = A.unwrapException(exception);
                st = A.getTraceFromException(exception);
                if (logger != null)
                  logger.e$1(0, new A.openChannel_closure2(startRequest, ex));
                t3 = A.SquadronError$_("Failed to post message: " + A.S(ex), st);
                throw A.wrapException(t3);
              }
              $async$goto = 8;
              return A._asyncAwait(completer.future, $async$openChannel);
            case 8:
              // returning from await.
              channel = $async$result;
              $async$goto = hook != null ? 9 : 10;
              break;
            case 9:
              // then
              hookRes = A.UserCode_run(logger, new A.openChannel_closure3(hook, worker), "PlatforWorkerHook for " + entryPoint.toString$0(0), type$.void);
              $async$goto = hookRes instanceof A._Future ? 11 : 12;
              break;
            case 11:
              // then
              $async$goto = 13;
              return A._asyncAwait(hookRes, $async$openChannel);
            case 13:
              // returning from await.
            case 12:
              // join
            case 10:
              // join
              if (logger != null)
                logger.t$1("created Web Worker for " + entryPoint.toString$0(0));
              $async$returnValue = channel;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (logger != null)
                logger.t$1("failed to create Web Worker for " + entryPoint.toString$0(0));
              t2._as(com.port1).close();
              t2._as(com.port2).close();
              worker._readLocal$0().terminate();
              throw $async$exception;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              if (webEntryPoint._0)
                t1.URL.revokeObjectURL(webEntryPoint._1);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$openChannel, $async$completer);
    },
    getEntryPointUrl(workerEntrypoint) {
      var blob,
        t1 = A.IterableExtensions_get_lastOrNull(workerEntrypoint.get$pathSegments(), type$.String),
        fileName = t1 == null ? null : t1.toLowerCase();
      if (fileName == null)
        fileName = "";
      if (B.JSString_methods.endsWith$1(fileName, ".js") || B.JSString_methods.endsWith$1(fileName, ".mjs"))
        return new A._Record_2_revoke_url(false, workerEntrypoint.toString$0(0));
      else if (B.JSString_methods.endsWith$1(fileName, ".wasm")) {
        t1 = self;
        blob = type$.JSObject._as(new t1.Blob(A._setArrayType(['(async function() {\n  try {\n    let dart2wasm_runtime; let moduleInstance;\n    const workerUri = new URL("' + workerEntrypoint.toString$0(0) + "\", self.location.origin).href;\n    const runtimeUri = workerUri.replaceAll('.unopt', '').replaceAll('.wasm', '.mjs');\n    try {\n      const dartModule = WebAssembly.compileStreaming(fetch(workerUri));\n      dart2wasm_runtime = await import(runtimeUri);\n      moduleInstance = await dart2wasm_runtime.instantiate(dartModule, {});\n    } catch (exception) {\n      console.error(`Failed to fetch and instantiate wasm module ${workerUri}: ${exception}`);\n      console.error('See https://dart.dev/web/wasm for more information.');\n      throw new Error(`Worker ${workerUri}: ${exception.message ?? 'Unknown error when instantiating worker module'}`);\n    }\n    try {\n      await dart2wasm_runtime.invoke(moduleInstance);\n      console.log(`Succesfully loaded and invoked ${workerUri}`);\n    } catch (exception) {\n      console.error(`Exception while invoking wasm module ${workerUri}: ${exception}`);\n      throw new Error(`Worker ${workerUri}: ${exception.message ?? 'Unknown error when invoking worker module'}`);\n    }\n  } catch (ex) {\n    const ts = (Date.now() - Date.UTC(2020, 1, 2)) * 1000;\n    postMessage([ts, null, [\"$sqdrn\", `Unexpected error: ${ex}`, null], null, null]);\n  }\n})()"], type$.JSArray_String), {type: "application/javascript"}));
        return new A._Record_2_revoke_url(true, A._asString(t1.URL.createObjectURL(blob)));
      } else if (workerEntrypoint.isScheme$1("data") || workerEntrypoint.isScheme$1("javascript"))
        return new A._Record_2_revoke_url(false, workerEntrypoint.toString$0(0));
      else
        throw A.wrapException(A.SquadronError$_("Invalid entry point URI", null));
    },
    _BaseWebChannel: function _BaseWebChannel() {
    },
    _BaseWebChannel__postRequest_closure: function _BaseWebChannel__postRequest_closure(t0, t1) {
      this.req = t0;
      this.ex = t1;
    },
    _BaseWebChannel__inspectAndPostRequest_closure: function _BaseWebChannel__inspectAndPostRequest_closure(t0, t1) {
      this.req = t0;
      this.ex = t1;
    },
    _BaseWebChannel__postResponse_closure: function _BaseWebChannel__postResponse_closure(t0, t1) {
      this.res = t0;
      this.ex = t1;
    },
    _BaseWebChannel__inspectAndPostResponse_closure: function _BaseWebChannel__inspectAndPostResponse_closure(t0, t1) {
      this.res = t0;
      this.ex = t1;
    },
    _WebChannel: function _WebChannel(t0, t1, t2) {
      var _ = this;
      _.__channel$_closed = false;
      _.exceptionManager = t0;
      _._sendPort = t1;
      _._logger = t2;
    },
    _WebChannel_sendRequest_closure: function _WebChannel_sendRequest_closure(t0) {
      this.controller = t0;
    },
    _WebChannel_sendRequest_closure0: function _WebChannel_sendRequest_closure0(t0) {
      this.controller = t0;
    },
    _WebChannel_sendRequest_closure1: function _WebChannel_sendRequest_closure1(t0, t1) {
      this.com = t0;
      this.controller = t1;
    },
    _WebChannel_sendStreamingRequest_closure: function _WebChannel_sendStreamingRequest_closure(t0) {
      this.controller = t0;
    },
    _WebChannel_sendStreamingRequest_closure0: function _WebChannel_sendStreamingRequest_closure0(t0, t1, t2) {
      this.com = t0;
      this.controller = t1;
      this.onDone = t2;
    },
    _WebWorkerChannel: function _WebWorkerChannel(t0, t1) {
      this._sendPort = t0;
      this._logger = t1;
    },
    _WebWorkerChannel_error_closure: function _WebWorkerChannel_error_closure(t0) {
      this.error = t0;
    },
    _WebForwardChannel: function _WebForwardChannel(t0, t1, t2, t3, t4) {
      var _ = this;
      _._remote = t0;
      _._com = t1;
      _.__channel$_closed = false;
      _.exceptionManager = t2;
      _._sendPort = t3;
      _._logger = t4;
    },
    _WebForwardChannel__forward_closure: function _WebForwardChannel__forward_closure(t0, t1) {
      this.e = t0;
      this.ex = t1;
    },
    openChannel_fail: function openChannel_fail(t0, t1) {
      this.ready = t0;
      this.completer = t1;
    },
    openChannel_success: function openChannel_success(t0, t1) {
      this.ready = t0;
      this.completer = t1;
    },
    openChannel_closure: function openChannel_closure(t0, t1, t2, t3) {
      var _ = this;
      _.exceptionManager = t0;
      _.logger = t1;
      _.fail = t2;
      _.entryPoint = t3;
    },
    openChannel__closure2: function openChannel__closure2(t0) {
      this.error = t0;
    },
    openChannel__closure3: function openChannel__closure3(t0, t1, t2) {
      this.e = t0;
      this.entryPoint = t1;
      this.logger = t2;
    },
    openChannel___closure: function openChannel___closure(t0) {
      this._box_0 = t0;
    },
    openChannel___closure0: function openChannel___closure0(t0) {
      this.entryPoint = t0;
    },
    openChannel_closure0: function openChannel_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.exceptionManager = t0;
      _.logger = t1;
      _.fail = t2;
      _.ready = t3;
    },
    openChannel__closure1: function openChannel__closure1(t0) {
      this.error = t0;
    },
    openChannel_closure1: function openChannel_closure1(t0, t1, t2, t3, t4) {
      var _ = this;
      _.exceptionManager = t0;
      _.logger = t1;
      _.completer = t2;
      _.fail = t3;
      _.success = t4;
    },
    openChannel__closure: function openChannel__closure(t0) {
      this.error = t0;
    },
    openChannel__closure0: function openChannel__closure0(t0) {
      this.response = t0;
    },
    openChannel_closure2: function openChannel_closure2(t0, t1) {
      this.startRequest = t0;
      this.ex = t1;
    },
    openChannel_closure3: function openChannel_closure3(t0, t1) {
      this.hook = t0;
      this.worker = t1;
    },
    _WebLocalWorker: function _WebLocalWorker(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.__local_worker$_port = t0;
      _.___WebLocalWorker__channel_A = $;
      _.service = t1;
      _.operations = t2;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
      _.$ti = t5;
    },
    JsWorkerRunnerExt_get_handle(_this) {
      return new A.JsWorkerRunnerExt_get_handle_closure(_this);
    },
    JsWorkerRunnerExt_get_handle_closure: function JsWorkerRunnerExt_get_handle_closure(t0) {
      this._this = t0;
    },
    InternalLogger: function InternalLogger(t0, t1, t2) {
      var _ = this;
      _.__Logger__initialization_F = $;
      _._filter = t0;
      _._printer = t1;
      _._output = t2;
    },
    _NoLogOutput: function _NoLogOutput() {
    },
    _DummyPrinter: function _DummyPrinter() {
    },
    _LogAllFilter: function _LogAllFilter() {
      this._level = null;
    },
    PoolWorker_compareCapacityDesc(a, b) {
      var t2,
        t1 = type$.PoolWorker_Worker;
      t1._as(a);
      t1._as(b);
      t1 = a._capacity;
      t2 = b._capacity;
      if (t1 !== t2)
        return B.JSInt_methods.compareTo$1(t2, t1);
      t1 = a._lastStart;
      if (t1 == null)
        return 1;
      t2 = b._lastStart;
      if (t2 == null)
        return -1;
      return B.JSInt_methods.compareTo$1(t1, t2);
    },
    PoolWorker_isStopped(w) {
      return type$.PoolWorker_Worker._as(w).worker._worker$_stopped != null;
    },
    PoolWorker_getStats(w) {
      return type$.PoolWorker_Worker._as(w).worker.get$stats();
    },
    PoolWorker: function PoolWorker(t0, t1, t2, t3) {
      var _ = this;
      _.worker = t0;
      _.__pool_worker$_maxWorkload = t1;
      _._lastStart = null;
      _._capacity = t2;
      _.$ti = t3;
    },
    PoolWorker_run_closure: function PoolWorker_run_closure(t0) {
      this.$this = t0;
    },
    StreamWrapper$(streamRequest, exceptionManager, logger, cast, messages, onDone, postRequest, token, $T) {
      var t1 = $.Zone__current;
      t1 = new A.StreamWrapper(cast, exceptionManager, logger, messages, streamRequest, postRequest, token, new A._AsyncCompleter(new A._Future(t1, type$._Future_int), type$._AsyncCompleter_int), $T._eval$1("StreamWrapper<0>"));
      t1.StreamWrapper$8$cast$messages$onDone$postRequest$token(streamRequest, exceptionManager, logger, cast, messages, onDone, postRequest, token, $T);
      return t1;
    },
    StreamWrapper: function StreamWrapper(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._cast = t0;
      _.__stream_wrapper$_exceptionManager = t1;
      _.__stream_wrapper$_logger = t2;
      _._messages = t3;
      _._streamRequest = t4;
      _.__stream_wrapper$_postRequest = t5;
      _._token = t6;
      _.__StreamWrapper__controller_F = $;
      _.__stream_wrapper$_paused = 0;
      _.__StreamWrapper__handle_A = $;
      _.__stream_wrapper$_buffer = null;
      _._streamId = t7;
      _.$ti = t8;
    },
    StreamWrapper_closure: function StreamWrapper_closure(t0) {
      this.$this = t0;
    },
    StreamWrapper_closure0: function StreamWrapper_closure0(t0) {
      this.onDone = t0;
    },
    StreamWrapper__onListen_closure: function StreamWrapper__onListen_closure(t0) {
      this.$this = t0;
    },
    TokenId: function TokenId() {
      this._id = 0;
    },
    UserCode__log(logger, logContext, ex) {
      var message;
      if (logger != null) {
        message = logContext;
        if (message == null)
          message = "";
        logger.e$1(0, "User code threw an exception (" + message + "): " + A.S(ex));
      }
    },
    UserCode__noop(_) {
    },
    UserCode_run(logger, callback, logContext, $T) {
      var res, ex, exception;
      try {
        res = callback.call$0();
        if (res instanceof A._Future)
          res.then$1$2$onError(A._user_code_UserCode__noop$closure(), new A.UserCode_run_closure(logger, logContext), type$.void);
        return res;
      } catch (exception) {
        ex = A.unwrapException(exception);
        A.UserCode__log(logger, logContext, ex);
        return null;
      }
    },
    UserCode_run_closure: function UserCode_run_closure(t0, t1) {
      this.logger = t0;
      this.logContext = t1;
    },
    ValueWrapper$(request, exceptionManager, logger, cast, messages, postRequest, token, $T) {
      var t1 = $.Zone__current;
      t1 = new A.ValueWrapper(request, postRequest, cast, new A._AsyncCompleter(new A._Future(t1, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncCompleter<0>")), $T._eval$1("ValueWrapper<0>"));
      t1.ValueWrapper$7$cast$messages$postRequest$token(request, exceptionManager, logger, cast, messages, postRequest, token, $T);
      return t1;
    },
    ValueWrapper: function ValueWrapper(t0, t1, t2, t3, t4) {
      var _ = this;
      _._request = t0;
      _.__value_wrapper$_postRequest = t1;
      _.__value_wrapper$_cast = t2;
      _.__value_wrapper$_completer = t3;
      _.__ValueWrapper__sub_F = $;
      _.$ti = t4;
    },
    ValueWrapper_closure: function ValueWrapper_closure(t0, t1) {
      this.$this = t0;
      this.token = t1;
    },
    ValueWrapper_closure0: function ValueWrapper_closure0(t0, t1, t2) {
      this.$this = t0;
      this.exceptionManager = t1;
      this.logger = t2;
    },
    ValueWrapper_closure1: function ValueWrapper_closure1(t0) {
      this.$this = t0;
    },
    WorkerRunner_WorkerRunner$use(localWorker) {
      var runner,
        t1 = new A._LogAllFilter(),
        t2 = new A._DummyPrinter(),
        t3 = new A._NoLogOutput(),
        t4 = new A.InternalLogger(t1, t2, t3);
      t4.Logger$4$filter$level$output$printer(t1, null, t3, t2);
      runner = new A.WorkerRunner(new A.WorkerRunner_WorkerRunner$use_closure(), t4, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.CancelationTokenReference));
      runner.set$_operations(A.LinkedHashMap_LinkedHashMap$of(localWorker.service.get$operations(), type$.int, type$.dynamic_Function_List_dynamic));
      return runner;
    },
    WorkerRunner: function WorkerRunner(t0, t1, t2) {
      var _ = this;
      _._terminate = t0;
      _.internalLogger = t1;
      _._operations = null;
      _._cancelTokens = t2;
      _._terminationRequested = false;
      _.__worker_runner$_executing = 0;
      _._streamCancelers = null;
      _.__worker_runner$_streamId = 0;
    },
    WorkerRunner_WorkerRunner$use_closure: function WorkerRunner_WorkerRunner$use_closure() {
    },
    WorkerRunner__getTokenRef_closure: function WorkerRunner__getTokenRef_closure(t0) {
      this.token = t0;
    },
    WorkerRunner__pipe_onDone: function WorkerRunner__pipe_onDone(t0, t1, t2) {
      this._box_0 = t0;
      this.client = t1;
      this.done = t2;
    },
    WorkerRunner__pipe_closure: function WorkerRunner__pipe_closure(t0) {
      this.reply = t0;
    },
    WorkerRunner__pipe_closure0: function WorkerRunner__pipe_closure0(t0) {
      this.client = t0;
    },
    WorkerRunner__pipe_closure1: function WorkerRunner__pipe_closure1(t0, t1) {
      this.$this = t0;
      this.streamId = t1;
    },
    WorkerStreamTask: function WorkerStreamTask(t0, t1, t2, t3) {
      var _ = this;
      _._producer = t0;
      _._streamer = t1;
      _.__WorkerStreamTask__controller_F = $;
      _._paused = 0;
      _._isPaused = false;
      _.__worker_task$_canceled = _._finished = _._executed = _.__worker_stream_task$_subscription = null;
      _._counter = t2;
      _._canceledException = null;
      _.$ti = t3;
    },
    WorkerStreamTask__done_closure: function WorkerStreamTask__done_closure(t0, t1) {
      this.$this = t0;
      this.exception = t1;
    },
    WorkerStreamTask_run_closure: function WorkerStreamTask_run_closure(t0, t1) {
      this.$this = t0;
      this.worker = t1;
    },
    WorkerTask: function WorkerTask() {
    },
    WorkerValueTask: function WorkerValueTask(t0, t1, t2, t3) {
      var _ = this;
      _._computer = t0;
      _.__worker_value_task$_completer = t1;
      _.__worker_task$_canceled = _._finished = _._executed = null;
      _._counter = t2;
      _._canceledException = null;
      _.$ti = t3;
    },
    WorkerValueTask__completeWithError_closure: function WorkerValueTask__completeWithError_closure(t0, t1) {
      this.$this = t0;
      this.ex = t1;
    },
    WorkerValueTask__completeWithResult_closure: function WorkerValueTask__completeWithResult_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    WorkerValueTask_run_closure: function WorkerValueTask_run_closure(t0, t1) {
      this.$this = t0;
      this.worker = t1;
    },
    ConcurrencySettings: function ConcurrencySettings(t0, t1, t2) {
      this.minWorkers = t0;
      this.maxWorkers = t1;
      this.maxParallel = t2;
    },
    ExceptionManager$() {
      return new A.ExceptionManager(A.LinkedHashMap_LinkedHashMap$_literal(["$cncld", A.squadron_canceled_exception__SquadronCanceledExceptionExt_deserialize$closure(), "$tmt", A.squadron_timeout_exception__SquadronTimeoutExceptionExt_deserialize$closure(), "$cncld*", A.squadron_canceled_exceptions__SquadronCanceledExceptionsExt_deserialize$closure(), "$sqdrn", A.squadron_error__SquadronErrorExt_deserialize$closure(), "$wrkr", A.worker_exception__WorkerExceptionExt_deserialize$closure()], type$.String, type$.nullable_SquadronException_Function_List_dynamic));
    },
    ExceptionManager: function ExceptionManager(t0) {
      this._deserializers = t0;
    },
    SquadronCanceledException$(tokenId, message, stackTrace) {
      var t1 = new A.SquadronCanceledException(tokenId, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    SquadronCanceledException_SquadronCanceledException$from(tokenId, ex, stackTrace) {
      if (type$.TimeoutCanceledException._is(ex))
        return A.SquadronTimeoutException$(tokenId, ex.get$message(ex), ex.get$duration(ex), ex.get$stackTrace());
      else if (type$.CanceledExceptions._is(ex))
        return new A.SquadronCanceledExceptions(tokenId, J.map$1$1$ax(ex.get$innerExceptions(), new A.SquadronCanceledException_SquadronCanceledException$from_closure(tokenId), type$.SquadronCanceledException).toList$0(0));
      else
        return A.SquadronCanceledException$(tokenId, ex.get$message(ex), ex.get$stackTrace());
    },
    SquadronCanceledExceptionExt_deserialize(props) {
      var t1, t2, t3;
      type$.nullable_List_dynamic._as(props);
      if (props == null)
        return null;
      t1 = J.getInterceptor$asx(props);
      switch (t1.$index(props, 0)) {
        case "$cncld":
          t2 = A._asString(t1.$index(props, 1));
          t3 = A._asString(t1.$index(props, 2));
          t1 = A._asStringQ(t1.$index(props, 3));
          return A.SquadronCanceledException$(t2, t3, t1 == null ? null : new A._StringStackTrace(t1));
        case "$cncld*":
          return A.SquadronCanceledExceptionsExt_deserialize(props);
        case "$tmt":
          return A.SquadronTimeoutExceptionExt_deserialize(props);
        default:
          return null;
      }
    },
    SquadronCanceledException: function SquadronCanceledException(t0, t1, t2) {
      this.tokenId = t0;
      this.message = t1;
      this._squadron_exception$_stackTrace = t2;
    },
    SquadronCanceledException_SquadronCanceledException$from_closure: function SquadronCanceledException_SquadronCanceledException$from_closure(t0) {
      this.tokenId = t0;
    },
    SquadronCanceledExceptionsExt_deserialize(props) {
      var t1;
      type$.nullable_List_dynamic._as(props);
      if (props == null)
        return null;
      t1 = J.getInterceptor$asx(props);
      if (!J.$eq$(t1.$index(props, 0), "$cncld*"))
        return null;
      return new A.SquadronCanceledExceptions(A._asString(t1.$index(props, 1)), J.toList$0$ax(type$.Iterable_SquadronCanceledException._as(J.map$1$ax(t1.$index(props, 2), A.squadron_canceled_exception__SquadronCanceledExceptionExt_deserialize$closure()))));
    },
    SquadronCanceledExceptions: function SquadronCanceledExceptions(t0, t1) {
      this.tokenId = t0;
      this._exceptions = t1;
    },
    SquadronCanceledExceptions_message_closure: function SquadronCanceledExceptions_message_closure() {
    },
    SquadronCanceledExceptions_serialize_closure: function SquadronCanceledExceptions_serialize_closure() {
    },
    SquadronError$_(message, stackTrace) {
      var t1 = new A.SquadronError(message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    SquadronErrorExt_deserialize(exceptionInfo) {
      var t1, t2;
      type$.List_dynamic._as(exceptionInfo);
      t1 = J.getInterceptor$asx(exceptionInfo);
      if (J.$eq$(t1.$index(exceptionInfo, 0), "$sqdrn")) {
        t2 = A._asString(t1.$index(exceptionInfo, 1));
        t1 = A._asStringQ(t1.$index(exceptionInfo, 2));
        t1 = A.SquadronError$_(t2, t1 == null ? null : new A._StringStackTrace(t1));
      } else
        t1 = null;
      return t1;
    },
    SquadronError: function SquadronError(t0, t1) {
      this.message = t0;
      this._squadron_exception$_stackTrace = t1;
    },
    SquadronException_from(error, stackTrace, command) {
      var t1;
      if (error instanceof A.WorkerException) {
        if (error._command == null)
          error._command = command;
        return error;
      } else if (type$.SquadronException._is(error))
        return error;
      else if (type$.CanceledException._is(error))
        return A.SquadronCanceledException_SquadronCanceledException$from("", error, null);
      else if (type$.TimeoutException._is(error)) {
        t1 = error.get$message(error);
        return A.SquadronTimeoutException$("", t1, error.get$duration(error), null);
      } else
        return A.WorkerException$(J.toString$0$(error), command, stackTrace);
    },
    SquadronException: function SquadronException() {
    },
    SquadronTimeoutException$(tokenId, message, duration, stackTrace) {
      var t1 = new A.SquadronTimeoutException(duration, tokenId, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    SquadronTimeoutExceptionExt_deserialize(props) {
      var t1, microSecs, t2, t3, t4, _null = null;
      type$.nullable_List_dynamic._as(props);
      if (props == null)
        return _null;
      t1 = J.getInterceptor$asx(props);
      if (!J.$eq$(t1.$index(props, 0), "$tmt"))
        return _null;
      microSecs = t1.$index(props, 4);
      t2 = A._asString(t1.$index(props, 1));
      t3 = A._asString(t1.$index(props, 2));
      t4 = microSecs == null ? _null : A.Duration$(A._asInt(microSecs), 0, 0);
      t1 = A._asStringQ(t1.$index(props, 3));
      return A.SquadronTimeoutException$(t2, t3, t4, t1 == null ? _null : new A._StringStackTrace(t1));
    },
    SquadronTimeoutException: function SquadronTimeoutException(t0, t1, t2, t3) {
      var _ = this;
      _.duration = t0;
      _.tokenId = t1;
      _.message = t2;
      _._squadron_exception$_stackTrace = t3;
    },
    TaskCanceledException: function TaskCanceledException(t0) {
      this.message = t0;
    },
    WorkerException$(message, command, stackTrace) {
      var t1 = new A.WorkerException(command, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    WorkerExceptionExt_deserialize(data) {
      var t1, t2, t3;
      type$.List_dynamic._as(data);
      t1 = J.getInterceptor$asx(data);
      if (J.$eq$(t1.$index(data, 0), "$wrkr")) {
        t2 = A._asString(t1.$index(data, 1));
        t3 = A._asStringQ(t1.$index(data, 2));
        t3 = t3 == null ? null : new A._StringStackTrace(t3);
        t3 = A.WorkerException$(t2, A._asIntQ(t1.$index(data, 3)), t3);
        t1 = t3;
      } else
        t1 = null;
      return t1;
    },
    WorkerException: function WorkerException(t0, t1, t2) {
      this._command = t0;
      this.message = t1;
      this._squadron_exception$_stackTrace = t2;
    },
    LocalWorker_LocalWorker$create(service, $W) {
      var t1 = A.ExceptionManager$(),
        t2 = type$.JSObject,
        t3 = t2._as(new self.MessageChannel()),
        t4 = new A._WebLocalWorker(t3, service, $.$get$WorkerService_noOperations(), false, new A.Object(), $W._eval$1("_WebLocalWorker<0>")),
        runner = A.WorkerRunner_WorkerRunner$use(t4);
      t2._as(t3.port1).onmessage = type$.JavaScriptFunction._as(A.allowInterop(A.JsWorkerRunnerExt_get_handle(runner), type$.Function));
      t3 = t2._as(t3.port2);
      t4.___WebLocalWorker__channel_A = t3 == null ? null : new A._WebChannel(t1, t3, runner.internalLogger);
      return t4;
    },
    LocalWorker: function LocalWorker() {
    },
    _LocalWorker_Object_Releasable: function _LocalWorker_Object_Releasable() {
    },
    WorkerPool: function WorkerPool() {
    },
    WorkerPool__provisionWorkers_closure: function WorkerPool__provisionWorkers_closure(t0) {
      this.$this = t0;
    },
    WorkerPool__provisionWorkers_closure0: function WorkerPool__provisionWorkers_closure0(t0, t1) {
      this.$this = t0;
      this.poolWorker = t1;
    },
    WorkerPool__provisionWorkers_closure1: function WorkerPool__provisionWorkers_closure1(t0, t1) {
      this.poolWorker = t0;
      this.errors = t1;
    },
    WorkerPool__provisionWorkers_closure2: function WorkerPool__provisionWorkers_closure2(t0, t1, t2) {
      this.$this = t0;
      this.errors = t1;
      this.tasks = t2;
    },
    WorkerPool__provisionWorkers__closure: function WorkerPool__provisionWorkers__closure() {
    },
    WorkerPool__provisionWorkers__closure0: function WorkerPool__provisionWorkers__closure0() {
    },
    WorkerPool__provisionWorkers__closure1: function WorkerPool__provisionWorkers__closure1() {
    },
    WorkerPool__provisionWorkers__closure2: function WorkerPool__provisionWorkers__closure2() {
    },
    WorkerPool_stop_closure: function WorkerPool_stop_closure(t0, t1) {
      this.$this = t0;
      this.predicate = t1;
    },
    WorkerPool__schedule_closure: function WorkerPool__schedule_closure() {
    },
    WorkerPool__schedule_closure0: function WorkerPool__schedule_closure0(t0) {
      this.$this = t0;
    },
    WorkerPool__schedule_closure1: function WorkerPool__schedule_closure1(t0) {
      this.$this = t0;
    },
    WorkerPool__dispatchTasks_closure: function WorkerPool__dispatchTasks_closure(t0, t1) {
      this.$this = t0;
      this.task = t1;
    },
    WorkerPool_cancel_closure: function WorkerPool_cancel_closure(t0) {
      this.task = t0;
    },
    _WorkerPool_Object_Releasable: function _WorkerPool_Object_Releasable() {
    },
    PerfCounter$($name) {
      return new A.PerfCounter($name);
    },
    PerfCounter: function PerfCounter(t0) {
      var _ = this;
      _.name = t0;
      _._perf_counter$_totalErrors = _._totalCount = _._totalTimeInMicroseconds = _._maxTimeInMicroseconds = 0;
    },
    PerfCounterSnapshot$(counter) {
      return new A.PerfCounterSnapshot(counter._totalTimeInMicroseconds, counter._totalCount, counter._perf_counter$_totalErrors);
    },
    PerfCounterSnapshot: function PerfCounterSnapshot(t0, t1, t2) {
      this.totalTimeInMicroseconds = t0;
      this.totalCount = t1;
      this.totalErrors = t2;
    },
    WorkerStat: function WorkerStat(t0, t1, t2) {
      this.isStopped = t0;
      this.maxWorkload = t1;
      this.totalErrors = t2;
    },
    CancelationTokenReference: function CancelationTokenReference(t0, t1, t2) {
      var _ = this;
      _.id = t0;
      _.__cancelation_token_ref$_exception = null;
      _.__cancelation_token_ref$_completer = t1;
      _._hasRef = t2;
      _._refCount = 0;
    },
    SquadronCancelationToken$_(token, id) {
      var t1 = new A.SquadronCancelationToken(id, token, new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
      if (token != null)
        token.get$onCanceled().then$1$1(t1.get$_checkToken(), type$.void);
      return t1;
    },
    SquadronCancelationToken_deserialize(props) {
      var t1, id, ex, token;
      if (props == null)
        return null;
      t1 = J.getInterceptor$asx(props);
      id = t1.$index(props, 0);
      ex = A.SquadronCanceledExceptionExt_deserialize(type$.nullable_List_dynamic._as(t1.$index(props, 1)));
      token = A.SquadronCancelationToken$_(null, A._asString(id));
      if (ex != null) {
        token.__squadron_cancelation_token$_exception = ex;
        token.__squadron_cancelation_token$_completer.complete$1(0, ex);
      }
      return token;
    },
    SquadronCancelationTokenExt_wrap(_this) {
      var t1;
      if (_this == null)
        return null;
      if (type$.SquadronCancelationToken._is(_this))
        return _this;
      t1 = A.SquadronCancelationToken$_(_this, "" + ++$.$get$TokenId__instance()._id + "@" + $.$get$TokenId__instanceId());
      t1._checkToken$0();
      return t1;
    },
    SquadronCancelationToken: function SquadronCancelationToken(t0, t1, t2) {
      var _ = this;
      _.id = t0;
      _.token = t1;
      _.__squadron_cancelation_token$_exception = null;
      _.__squadron_cancelation_token$_completer = t2;
    },
    Worker0: function Worker0() {
    },
    Worker_send_sendReq: function Worker_send_sendReq(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.command = t1;
      _.args = t2;
      _.squadronToken = t3;
      _.inspectRequest = t4;
      _.inspectResponse = t5;
      _.T = t6;
    },
    Worker_send_sendReq_closure: function Worker_send_sendReq_closure(t0, t1) {
      this.$this = t0;
      this.command = t1;
    },
    Worker_send_sendReq_closure0: function Worker_send_sendReq_closure0(t0) {
      this.$this = t0;
    },
    Worker_stream_onDone: function Worker_stream_onDone(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Worker_stream_closure: function Worker_stream_closure(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.$this = t0;
      _.token = t1;
      _.controller = t2;
      _.command = t3;
      _.args = t4;
      _.onDone = t5;
      _.inspectRequest = t6;
      _.inspectResponse = t7;
      _.T = t8;
    },
    Worker_start_closure: function Worker_start_closure(t0) {
      this.$this = t0;
    },
    _Worker_Object_Releasable: function _Worker_Object_Releasable() {
    },
    WorkerResponse_get_result(_this) {
      var t1 = J.getInterceptor$asx(_this),
        err = type$.nullable_SquadronException._as(t1.$index(_this, 2));
      if (err != null)
        throw A.wrapException(err);
      else
        return t1.$index(_this, 1);
    },
    WorkerResponseExt_unwrapInPlace(_this, exceptionManager, logger) {
      var t1, t2, t3, log, t4, t5, t6, t7, t8, _null = null;
      A.WorkerMessageExt_unwrapTravelTime(_this);
      t1 = J.getInterceptor$asx(_this);
      t2 = type$.nullable_List_dynamic;
      t3 = t2._as(t1.$index(_this, 4));
      if (t3 == null)
        log = _null;
      else {
        t4 = J.getInterceptor$asx(t3);
        t5 = A._asNumQ(t4.$index(t3, 0));
        t5 = A.LogEventSerialization__getLevel(t5 == null ? _null : B.JSNumber_methods.toInt$0(t5));
        t6 = t4.$index(t3, 1);
        t7 = A._asNumQ(t4.$index(t3, 2));
        t7 = t7 == null ? _null : B.JSNumber_methods.toInt$0(t7);
        if (t7 == null)
          t7 = _null;
        else {
          t8 = $.$get$_latestUPDEpoch();
          t8 = A.DateTime$_withValue(t8._value + B.JSInt_methods._tdivFast$1(A.Duration$(t7, 0, 0)._duration, 1000), t8.isUtc);
          t7 = t8;
        }
        t8 = t4.$index(t3, 3);
        t3 = A._asStringQ(t4.$index(t3, 4));
        t3 = t3 == null ? _null : new A._StringStackTrace(t3);
        log = new A.LogEvent(t5, t6, t8, t3, t7 == null ? new A.DateTime(Date.now(), false) : t7);
      }
      if (log != null) {
        if (logger != null) {
          t1 = log.level;
          t2 = log.message;
          t3 = log.time;
          logger.log$5$error$stackTrace$time(t1, t2, log.error, log.stackTrace, t3);
        }
        return false;
      } else {
        t1.$indexSet(_this, 2, exceptionManager.deserialize$1(t2._as(t1.$index(_this, 2))));
        if (t1.$index(_this, 3) == null)
          t1.$indexSet(_this, 3, false);
        return true;
      }
    },
    WorkerResponseExt_wrapInPlace(_this) {
      var t2,
        t1 = J.getInterceptor$asx(_this),
        result = t1.$index(_this, 1);
      if (type$.Iterable_dynamic._is(result) && !type$.List_dynamic._is(result))
        t1.$indexSet(_this, 1, J.toList$0$ax(result));
      t2 = type$.nullable_SquadronException._as(t1.$index(_this, 2));
      t1.$indexSet(_this, 2, t2 == null ? null : t2.serialize$0());
      return _this;
    },
    WorkerResponseExt_from(data) {
      if (J.get$length$asx(data) !== 5)
        throw A.wrapException(A.SquadronError$_("Invalid worker response", null));
      return data;
    },
    LogEventSerialization__getLevel(value) {
      if (value == null)
        return B.Level_2000_debug;
      return new A.WhereIterable(B.List_Ah0, type$.bool_Function_Level._as(new A.LogEventSerialization__getLevel_closure(value)), type$.WhereIterable_Level).get$first(0);
    },
    LogEventSerialization__getLevel_closure: function LogEventSerialization__getLevel_closure(t0) {
      this.value = t0;
    },
    Chain_capture(callback, errorZone, when, $T) {
      var t1 = A.runZoned(callback, null, null, $T);
      return t1;
    },
    Chain_Chain$current() {
      var t1 = $.Zone__current,
        t2 = $.$get$_specKey(),
        t3 = type$.nullable_StackZoneSpecification;
      if (t3._as(t1.$index(0, t2)) != null) {
        t1 = t3._as($.Zone__current.$index(0, t2));
        t2 = t1._currentTrace$1(3);
        t1 = t1._currentNode;
        return new A._Node(A.Trace_Trace$from(t2), t1).toChain$0();
      }
      return new A.LazyChain(new A.Chain_Chain$current_closure(A.Chain_Chain$forTrace(A.StackTrace_current()), 0));
    },
    Chain_Chain$forTrace(trace) {
      var t1, t2, t3;
      if (type$.Chain._is(trace))
        return trace;
      t1 = $.Zone__current;
      t2 = $.$get$_specKey();
      t3 = type$.nullable_StackZoneSpecification;
      if (t3._as(t1.$index(0, t2)) != null)
        return t3._as($.Zone__current.$index(0, t2)).chainFor$1(trace);
      t1 = type$.Trace;
      if (t1._is(trace))
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([trace], type$.JSArray_Trace), t1));
      return new A.LazyChain(new A.Chain_Chain$forTrace_closure(trace));
    },
    Chain_Chain$parse(chain) {
      var t1, t2,
        _s51_ = string$.______;
      if (chain.length === 0)
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([], type$.JSArray_Trace), type$.Trace));
      t1 = $.$get$vmChainGap();
      if (B.JSString_methods.contains$1(chain, t1)) {
        t1 = B.JSString_methods.split$1(chain, t1);
        t2 = A._arrayInstanceType(t1);
        return new A.Chain(A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Chain_Chain$parse_closure()), t2._eval$1("WhereIterable<1>")), t2._eval$1("Trace(1)")._as(A.trace_Trace___parseVM_tearOff$closure()), t2._eval$1("MappedIterable<1,Trace>")), type$.Trace));
      }
      if (!B.JSString_methods.contains$1(chain, _s51_))
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([A.Trace_Trace$parse(chain)], type$.JSArray_Trace), type$.Trace));
      return new A.Chain(A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(chain.split(_s51_), type$.JSArray_String), type$.Trace_Function_String._as(A.trace_Trace___parseFriendly_tearOff$closure()), type$.MappedListIterable_String_Trace), type$.Trace));
    },
    Chain: function Chain(t0) {
      this.traces = t0;
    },
    Chain_Chain$current_closure: function Chain_Chain$current_closure(t0, t1) {
      this.chain = t0;
      this.level = t1;
    },
    Chain_Chain$forTrace_closure: function Chain_Chain$forTrace_closure(t0) {
      this.trace = t0;
    },
    Chain_Chain$parse_closure: function Chain_Chain$parse_closure() {
    },
    Chain_toTrace_closure: function Chain_toTrace_closure() {
    },
    Chain_toString_closure0: function Chain_toString_closure0() {
    },
    Chain_toString__closure0: function Chain_toString__closure0() {
    },
    Chain_toString_closure: function Chain_toString_closure(t0) {
      this.longest = t0;
    },
    Chain_toString__closure: function Chain_toString__closure(t0) {
      this.longest = t0;
    },
    Frame___parseVM_tearOff(frame) {
      return A.Frame_Frame$parseVM(A._asString(frame));
    },
    Frame_Frame$parseVM(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseVM_closure(frame));
    },
    Frame___parseV8_tearOff(frame) {
      return A.Frame_Frame$parseV8(A._asString(frame));
    },
    Frame_Frame$parseV8(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseV8_closure(frame));
    },
    Frame_Frame$_parseFirefoxEval(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$_parseFirefoxEval_closure(frame));
    },
    Frame___parseFirefox_tearOff(frame) {
      return A.Frame_Frame$parseFirefox(A._asString(frame));
    },
    Frame_Frame$parseFirefox(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFirefox_closure(frame));
    },
    Frame___parseFriendly_tearOff(frame) {
      return A.Frame_Frame$parseFriendly(A._asString(frame));
    },
    Frame_Frame$parseFriendly(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFriendly_closure(frame));
    },
    Frame__uriOrPathToUri(uriOrPath) {
      if (B.JSString_methods.contains$1(uriOrPath, $.$get$Frame__uriRegExp()))
        return A.Uri_parse(uriOrPath);
      else if (B.JSString_methods.contains$1(uriOrPath, $.$get$Frame__windowsRegExp()))
        return A._Uri__Uri$file(uriOrPath, true);
      else if (B.JSString_methods.startsWith$1(uriOrPath, "/"))
        return A._Uri__Uri$file(uriOrPath, false);
      if (B.JSString_methods.contains$1(uriOrPath, "\\"))
        return $.$get$windows().toUri$1(uriOrPath);
      return A.Uri_parse(uriOrPath);
    },
    Frame__catchFormatException(text, body) {
      var t1, exception;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception)))
          return new A.UnparsedFrame(A._Uri__Uri(null, "unparsed", null, null), text);
        else
          throw exception;
      }
    },
    Frame: function Frame(t0, t1, t2, t3) {
      var _ = this;
      _.uri = t0;
      _.line = t1;
      _.column = t2;
      _.member = t3;
    },
    Frame_Frame$parseVM_closure: function Frame_Frame$parseVM_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseV8_closure: function Frame_Frame$parseV8_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseV8_closure_parseLocation: function Frame_Frame$parseV8_closure_parseLocation(t0) {
      this.frame = t0;
    },
    Frame_Frame$_parseFirefoxEval_closure: function Frame_Frame$_parseFirefoxEval_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseFirefox_closure: function Frame_Frame$parseFirefox_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseFriendly_closure: function Frame_Frame$parseFriendly_closure(t0) {
      this.frame = t0;
    },
    LazyChain: function LazyChain(t0) {
      this._thunk = t0;
      this.__LazyChain__chain_FI = $;
    },
    LazyTrace: function LazyTrace(t0) {
      this._lazy_trace$_thunk = t0;
      this.__LazyTrace__trace_FI = $;
    },
    StackZoneSpecification_chainFor_closure: function StackZoneSpecification_chainFor_closure(t0) {
      this._box_0 = t0;
    },
    StackZoneSpecification_chainFor_closure0: function StackZoneSpecification_chainFor_closure0(t0, t1) {
      this.$this = t0;
      this.original = t1;
    },
    StackZoneSpecification__currentTrace_closure: function StackZoneSpecification__currentTrace_closure(t0, t1, t2) {
      this.$this = t0;
      this.stackTrace = t1;
      this.level = t2;
    },
    _Node: function _Node(t0, t1) {
      this.trace = t0;
      this.previous = t1;
    },
    Trace_Trace$from(trace) {
      if (type$.Trace._is(trace))
        return trace;
      if (type$.Chain._is(trace))
        return trace.toTrace$0();
      return new A.LazyTrace(new A.Trace_Trace$from_closure(trace));
    },
    Trace_Trace$parse(trace) {
      var error, t1, exception;
      try {
        if (trace.length === 0) {
          t1 = A.Trace$(A._setArrayType([], type$.JSArray_Frame), null);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_v8Trace())) {
          t1 = A.Trace$parseV8(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, "\tat ")) {
          t1 = A.Trace$parseJSCore(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_firefoxSafariTrace()) || B.JSString_methods.contains$1(trace, $.$get$_firefoxEvalTrace())) {
          t1 = A.Trace$parseFirefox(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, string$.______)) {
          t1 = A.Chain_Chain$parse(trace).toTrace$0();
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_friendlyTrace())) {
          t1 = A.Trace$parseFriendly(trace);
          return t1;
        }
        t1 = A.Trace$parseVM(trace);
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.FormatException._is(t1)) {
          error = t1;
          throw A.wrapException(A.FormatException$(J.get$message$z(error) + "\nStack trace:\n" + trace, null, null));
        } else
          throw exception;
      }
    },
    Trace___parseVM_tearOff(trace) {
      return A.Trace$parseVM(A._asString(trace));
    },
    Trace$parseVM(trace) {
      var t1 = A.List_List$unmodifiable(A.Trace__parseVM(trace), type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace__parseVM(trace) {
      var $frames,
        t1 = B.JSString_methods.trim$0(trace),
        t2 = $.$get$vmChainGap(),
        t3 = type$.WhereIterable_String,
        lines = new A.WhereIterable(A._setArrayType(A.stringReplaceAllUnchecked(t1, t2, "").split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace__parseVM_closure()), t3);
      if (!lines.get$iterator(0).moveNext$0())
        return A._setArrayType([], type$.JSArray_Frame);
      t1 = A.TakeIterable_TakeIterable(lines, lines.get$length(0) - 1, t3._eval$1("Iterable.E"));
      t2 = A._instanceType(t1);
      t2 = A.MappedIterable_MappedIterable(t1, t2._eval$1("Frame(Iterable.E)")._as(A.frame_Frame___parseVM_tearOff$closure()), t2._eval$1("Iterable.E"), type$.Frame);
      $frames = A.List_List$of(t2, true, A._instanceType(t2)._eval$1("Iterable.E"));
      if (!J.endsWith$1$s(lines.get$last(0), ".da"))
        B.JSArray_methods.add$1($frames, A.Frame_Frame$parseVM(lines.get$last(0)));
      return $frames;
    },
    Trace$parseV8(trace) {
      var t2, t3,
        t1 = A.SubListIterable$(A._setArrayType(trace.split("\n"), type$.JSArray_String), 1, null, type$.String);
      t1 = t1.super$Iterable$skipWhile(0, t1.$ti._eval$1("bool(ListIterable.E)")._as(new A.Trace$parseV8_closure()));
      t2 = type$.Frame;
      t3 = t1.$ti;
      t2 = A.List_List$unmodifiable(A.MappedIterable_MappedIterable(t1, t3._eval$1("Frame(Iterable.E)")._as(A.frame_Frame___parseV8_tearOff$closure()), t3._eval$1("Iterable.E"), t2), t2);
      return new A.Trace(t2, new A._StringStackTrace(trace));
    },
    Trace$parseJSCore(trace) {
      var t1 = A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(A._setArrayType(trace.split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseJSCore_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(A.frame_Frame___parseV8_tearOff$closure()), type$.MappedIterable_String_Frame), type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace$parseFirefox(trace) {
      var t1 = A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(A._setArrayType(B.JSString_methods.trim$0(trace).split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseFirefox_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(A.frame_Frame___parseFirefox_tearOff$closure()), type$.MappedIterable_String_Frame), type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace___parseFriendly_tearOff(trace) {
      return A.Trace$parseFriendly(A._asString(trace));
    },
    Trace$parseFriendly(trace) {
      var t1 = trace.length === 0 ? A._setArrayType([], type$.JSArray_Frame) : new A.MappedIterable(new A.WhereIterable(A._setArrayType(B.JSString_methods.trim$0(trace).split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseFriendly_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(A.frame_Frame___parseFriendly_tearOff$closure()), type$.MappedIterable_String_Frame);
      t1 = A.List_List$unmodifiable(t1, type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace$($frames, original) {
      var t1 = A.List_List$unmodifiable($frames, type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(original == null ? "" : original));
    },
    Trace: function Trace(t0, t1) {
      this.frames = t0;
      this.original = t1;
    },
    Trace_Trace$from_closure: function Trace_Trace$from_closure(t0) {
      this.trace = t0;
    },
    Trace__parseVM_closure: function Trace__parseVM_closure() {
    },
    Trace$parseV8_closure: function Trace$parseV8_closure() {
    },
    Trace$parseJSCore_closure: function Trace$parseJSCore_closure() {
    },
    Trace$parseFirefox_closure: function Trace$parseFirefox_closure() {
    },
    Trace$parseFriendly_closure: function Trace$parseFriendly_closure() {
    },
    Trace_toString_closure0: function Trace_toString_closure0() {
    },
    Trace_toString_closure: function Trace_toString_closure(t0) {
      this.longest = t0;
    },
    UnparsedFrame: function UnparsedFrame(t0, t1) {
      this.uri = t0;
      this.member = t1;
    },
    OutsideTestException: function OutsideTestException() {
    },
    ClosedException: function ClosedException() {
    },
    Compiler: function Compiler(t0, t1, t2) {
      this.name = t0;
      this.identifier = t1;
      this._name = t2;
    },
    Timeout: function Timeout(t0, t1) {
      this.duration = t0;
      this.scaleFactor = t1;
    },
    Declarer$_(_parent, _name, _metadata, _platformVariables, _collectTraces, _trace, _noRetry, _fullTestName, _seenNames) {
      var t1 = type$.JSArray_of_dynamic_Function,
        t2 = type$.JSArray_GroupEntry;
      return new A.Declarer(_parent, _name, _metadata, _platformVariables, _trace, false, false, A._setArrayType([], t1), A._setArrayType([], t1), A._setArrayType([], t1), A._setArrayType([], type$.JSArray_of_void_Function), A._setArrayType([], t2), A._setArrayType([], t2), _fullTestName, _seenNames);
    },
    Declarer: function Declarer(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._parent = t0;
      _._declarer$_name = t1;
      _._metadata = t2;
      _._platformVariables = t3;
      _._declarer$_trace = t4;
      _._collectTraces = t5;
      _._noRetry = t6;
      _._setUps = t7;
      _._tearDowns = t8;
      _._setUpAlls = t9;
      _._setUpAllTrace = null;
      _._tearDownAlls = t10;
      _._tearDownAllTrace = null;
      _._entries = t11;
      _._built = false;
      _._soloEntries = t12;
      _._fullTestName = t13;
      _._seenNames = t14;
    },
    Declarer_test_closure: function Declarer_test_closure(t0, t1) {
      this.$this = t0;
      this.body = t1;
    },
    Declarer_test__closure: function Declarer_test__closure(t0, t1) {
      this.$this = t0;
      this.body = t1;
    },
    Declarer_group_closure: function Declarer_group_closure(t0) {
      this.body = t0;
    },
    Declarer_build_closure: function Declarer_build_closure(t0) {
      this.$this = t0;
    },
    Declarer_build__closure: function Declarer_build__closure() {
    },
    Declarer__runSetUps_closure: function Declarer__runSetUps_closure() {
    },
    Declarer__setUpAll_closure: function Declarer__setUpAll_closure(t0) {
      this.$this = t0;
    },
    Declarer__setUpAll__closure: function Declarer__setUpAll__closure(t0) {
      this.$this = t0;
    },
    Declarer__setUpAll___closure: function Declarer__setUpAll___closure() {
    },
    Declarer__tearDownAll_closure: function Declarer__tearDownAll_closure(t0) {
      this.$this = t0;
    },
    Declarer__tearDownAll__closure: function Declarer__tearDownAll__closure(t0) {
      this.$this = t0;
    },
    DuplicateTestNameException: function DuplicateTestNameException(t0) {
      this.name = t0;
    },
    Group$($name, entries, metadata, setUpAll, tearDownAll, trace) {
      var t1 = A.List_List$unmodifiable(entries, type$.GroupEntry);
      return new A.Group($name, metadata, trace, t1, setUpAll, tearDownAll);
    },
    Group: function Group(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.metadata = t1;
      _.trace = t2;
      _.entries = t3;
      _.setUpAll = t4;
      _.tearDownAll = t5;
    },
    Group_forPlatform_closure: function Group_forPlatform_closure(t0) {
      this.platform = t0;
    },
    Group__map_closure: function Group__map_closure(t0) {
      this.callback = t0;
    },
    Invoker_guard(callback, $T) {
      var _null = null;
      return A.runZoned(callback, new A._ZoneSpecification(new A.Invoker_guard_closure(), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), _null, $T._eval$1("0?"));
    },
    Invoker$_(suite, test, groups, guarded) {
      var t1 = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void),
        t2 = new A.Invoker(guarded, new A.Object(), t1, A._setArrayType([], type$.JSArray_Zone), new A.Object(), A._setArrayType([], type$.JSArray_of_void_Function), A._setArrayType([], type$.JSArray_String));
      t1 = A.LiveTestController$(suite, test, t2.get$_onRun(), type$.void_Function_$opt_void._as(t1.get$complete(t1)), groups);
      t2.__Invoker__controller_F !== $ && A.throwLateFieldAI("_controller");
      t2.__Invoker__controller_F = t1;
      return t2;
    },
    LocalTest: function LocalTest(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.metadata = t1;
      _.trace = t2;
      _.isScaffoldAll = t3;
      _._body = t4;
      _._guarded = t5;
    },
    Invoker: function Invoker(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.__Invoker__controller_F = $;
      _._guarded = t0;
      _._forceOpenForTearDownKey = t1;
      _._onCloseCompleter = t2;
      _._outstandingCallbackZones = t3;
      _._counterKey = t4;
      _._runCount = 0;
      _._timeoutTimer = null;
      _._invoker$_tearDowns = t5;
      _._printsOnFailure = t6;
    },
    Invoker_guard_closure: function Invoker_guard_closure() {
    },
    Invoker_guard__closure: function Invoker_guard__closure(t0, t1, t2, t3) {
      var _ = this;
      _.invoker = t0;
      _.zone = t1;
      _.error = t2;
      _.stackTrace = t3;
    },
    Invoker_runTearDowns_closure: function Invoker_runTearDowns_closure(t0, t1) {
      this.$this = t0;
      this.tearDowns = t1;
    },
    Invoker_runTearDowns__closure: function Invoker_runTearDowns__closure(t0, t1) {
      this.tearDowns = t0;
      this.completer = t1;
    },
    Invoker_runTearDowns__closure0: function Invoker_runTearDowns__closure0(t0) {
      this.$this = t0;
    },
    Invoker__waitForOutstandingCallbacks_closure: function Invoker__waitForOutstandingCallbacks_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.fn = t2;
      _.counter = t3;
    },
    Invoker__waitForOutstandingCallbacks_closure0: function Invoker__waitForOutstandingCallbacks_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Invoker_heartbeat_message: function Invoker_heartbeat_message(t0) {
      this.timeout = t0;
    },
    Invoker_heartbeat_closure: function Invoker_heartbeat_closure(t0, t1, t2) {
      this.$this = t0;
      this.message = t1;
      this.timeout = t2;
    },
    Invoker_heartbeat__closure: function Invoker_heartbeat__closure(t0, t1, t2) {
      this.$this = t0;
      this.message = t1;
      this.timeout = t2;
    },
    Invoker__handleError_closure: function Invoker__handleError_closure(t0) {
      this._box_0 = t0;
    },
    Invoker__onRun_closure: function Invoker__onRun_closure(t0) {
      this.$this = t0;
    },
    Invoker__onRun__closure: function Invoker__onRun__closure(t0) {
      this.$this = t0;
    },
    Invoker__onRun___closure: function Invoker__onRun___closure(t0) {
      this.$this = t0;
    },
    Invoker__onRun____closure: function Invoker__onRun____closure() {
    },
    Invoker__onRun____closure0: function Invoker__onRun____closure0(t0) {
      this.$this = t0;
    },
    Invoker__onRun___closure0: function Invoker__onRun___closure0(t0) {
      this.$this = t0;
    },
    _AsyncCounter: function _AsyncCounter(t0) {
      this._count = 1;
      this._invoker$_completer = t0;
    },
    LiveTest: function LiveTest() {
    },
    LiveTestController$(suite, test, _onRun, _onClose, groups) {
      var _null = null,
        t1 = A._setArrayType([], type$.JSArray_AsyncError),
        t2 = $.Zone__current,
        t3 = A.List_List$unmodifiable(groups, type$.Group);
      return new A.LiveTestController(suite, t3, test, _onRun, _onClose, t1, B.State_Status_0_Result_0, new A._SyncBroadcastStreamController(_null, _null, type$._SyncBroadcastStreamController_State), new A._SyncBroadcastStreamController(_null, _null, type$._SyncBroadcastStreamController_AsyncError), new A._SyncBroadcastStreamController(_null, _null, type$._SyncBroadcastStreamController_Message), new A._AsyncCompleter(new A._Future(t2, type$._Future_void), type$._AsyncCompleter_void));
    },
    LiveTestController: function LiveTestController(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.suite = t0;
      _.groups = t1;
      _.test = t2;
      _._live_test_controller$_onRun = t3;
      _._live_test_controller$_onClose = t4;
      _._errors = t5;
      _.state = t6;
      _._onStateChange = t7;
      _._live_test_controller$_onError = t8;
      _._onMessage = t9;
      _.completer = t10;
      _._live_test_controller$_runCalled = false;
    },
    Message: function Message(t0, t1) {
      this.type = t0;
      this.text = t1;
    },
    MessageType: function MessageType(t0) {
      this.name = t0;
    },
    Metadata__parseOnPlatform(onPlatform) {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.PlatformSelector, type$.Metadata);
    },
    Metadata__parseTags(tags) {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.String);
    },
    Metadata_Metadata(chainStackTraces, forTag, languageVersionComment, onPlatform, retry, skip, skipReason, tags, testOn, timeout, verboseTrace) {
      var t2, t3, empty, t4, merged, _null = null, t1 = {};
      t1.tags = tags;
      t1.forTag = forTag;
      t2 = new A.Metadata_Metadata_unresolved(t1, testOn, timeout, skip, verboseTrace, chainStackTraces, retry, skipReason, onPlatform, languageVersionComment);
      if (forTag == null || tags == null)
        return t2.call$0();
      t1.tags = A.LinkedHashSet_LinkedHashSet$from(tags, type$.String);
      t3 = type$.Metadata;
      t1.forTag = A.LinkedHashMap_LinkedHashMap$from(t1.forTag, type$.BooleanSelector, t3);
      empty = A.Metadata$_(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      t4 = t1.forTag;
      merged = B.JSArray_methods.fold$1$2(J.toList$0$ax(t4.get$keys(t4)), empty, new A.Metadata_Metadata_closure(t1), t3);
      if (merged === empty)
        return t2.call$0();
      return merged.merge$1(t2.call$0());
    },
    Metadata$_(chainStackTraces, forTag, languageVersionComment, onPlatform, retry, skip, skipReason, tags, testOn, timeout, verboseTrace) {
      var t1 = testOn == null ? B.PlatformSelector_All : testOn,
        t2 = timeout == null ? B.Timeout_null_1 : timeout,
        t3 = tags == null ? A.LinkedHashSet_LinkedHashSet$_empty(type$.String) : tags.toSet$0(0),
        t4 = onPlatform == null ? B.Map_empty : new A.UnmodifiableMapView(onPlatform, type$.UnmodifiableMapView_PlatformSelector_Metadata),
        t5 = forTag == null ? B.Map_empty0 : new A.UnmodifiableMapView(forTag, type$.UnmodifiableMapView_BooleanSelector_Metadata);
      t5 = new A.Metadata(t1, t2, skip, skipReason, verboseTrace, chainStackTraces, new A.UnmodifiableSetView(t3, type$.UnmodifiableSetView_String), retry, t4, t5, languageVersionComment);
      if (retry != null)
        A.RangeError_checkNotNegative(retry, "retry");
      t5._validateTags$0();
      return t5;
    },
    Metadata$parse(onPlatform, retry, skip, tags, testOn, timeout) {
      var _null = null,
        t1 = timeout == null ? B.Timeout_null_1 : timeout,
        t2 = skip == null ? _null : skip,
        t3 = A.Metadata__parseOnPlatform(onPlatform);
      t3 = new A.Metadata(B.PlatformSelector_All, t1, t2, _null, _null, _null, A.Metadata__parseTags(tags), retry, t3, B.Map_empty0, _null);
      if (retry != null)
        A.RangeError_checkNotNegative(retry, "retry");
      t3._validateTags$0();
      return t3;
    },
    Metadata: function Metadata(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.testOn = t0;
      _.timeout = t1;
      _._skip = t2;
      _.skipReason = t3;
      _._verboseTrace = t4;
      _._chainStackTraces = t5;
      _.tags = t6;
      _._retry = t7;
      _.onPlatform = t8;
      _.forTag = t9;
      _.languageVersionComment = t10;
    },
    Metadata_Metadata_unresolved: function Metadata_Metadata_unresolved(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._box_0 = t0;
      _.testOn = t1;
      _.timeout = t2;
      _.skip = t3;
      _.verboseTrace = t4;
      _.chainStackTraces = t5;
      _.retry = t6;
      _.skipReason = t7;
      _.onPlatform = t8;
      _.languageVersionComment = t9;
    },
    Metadata_Metadata_closure: function Metadata_Metadata_closure(t0) {
      this._box_0 = t0;
    },
    Metadata__validateTags_closure: function Metadata__validateTags_closure() {
    },
    Metadata__validateTags_closure0: function Metadata__validateTags_closure0() {
    },
    Metadata_validatePlatformSelectors_closure: function Metadata_validatePlatformSelectors_closure(t0) {
      this.validVariables = t0;
    },
    Metadata_merge_closure: function Metadata_merge_closure() {
    },
    Metadata_merge_closure0: function Metadata_merge_closure0() {
    },
    Metadata_forPlatform_closure: function Metadata_forPlatform_closure(t0, t1) {
      this._box_0 = t0;
      this.platform = t1;
    },
    OperatingSystem: function OperatingSystem(t0, t1) {
      this.name = t0;
      this.identifier = t1;
    },
    PlatformSelector__wrapFormatException(body, span, $T) {
      var t1 = body.call$0();
      return t1;
    },
    PlatformSelector: function PlatformSelector(t0) {
      this._inner = t0;
    },
    PlatformSelector_validate_closure: function PlatformSelector_validate_closure(t0, t1) {
      this.$this = t0;
      this.validVariables = t1;
    },
    PlatformSelector_validate__closure: function PlatformSelector_validate__closure(t0) {
      this.validVariables = t0;
    },
    PlatformSelector_evaluate_closure: function PlatformSelector_evaluate_closure(t0) {
      this.platform = t0;
    },
    Runtime: function Runtime(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.identifier = t1;
      _.isDartVM = t2;
      _.isBrowser = t3;
      _.isBlink = t4;
      _.defaultCompiler = t5;
      _.supportedCompilers = t6;
    },
    StackTraceFormatter: function StackTraceFormatter(t0, t1) {
      this._except = t0;
      this._only = t1;
    },
    State: function State(t0, t1) {
      this.status = t0;
      this.result = t1;
    },
    Status: function Status(t0) {
      this._name = t0;
    },
    Result: function Result(t0) {
      this._name = t0;
    },
    Suite__filterGroup(group, platform) {
      var t1,
        filtered = group.forPlatform$1(platform);
      if (filtered != null)
        return filtered;
      t1 = A.List_List$unmodifiable(A._setArrayType([], type$.JSArray_GroupEntry), type$.GroupEntry);
      return new A.Group("", group.metadata, null, t1, null, null);
    },
    Suite: function Suite() {
    },
    SuitePlatform: function SuitePlatform(t0, t1, t2) {
      this.runtime = t0;
      this.os = t1;
      this.compiler = t2;
    },
    Test: function Test() {
    },
    TestFailure: function TestFailure(t0) {
      this.message = t0;
    },
    pumpEventQueue(times) {
      if (times === 0)
        return A.Future_Future$value(null, type$.dynamic);
      return A.Future_Future(new A.pumpEventQueue_closure(times), type$.dynamic);
    },
    pumpEventQueue_closure: function pumpEventQueue_closure(t0) {
      this.times = t0;
    },
    Engine$() {
      var t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, _null = null,
        t1 = $.Zone__current,
        t2 = type$.RunnerSuite,
        t3 = A.StreamController_StreamController(_null, _null, _null, _null, t2),
        t4 = new A.StreamGroup(B._StreamGroupState_dormant, A.LinkedHashMap_LinkedHashMap$_empty(type$.Stream_LiveTest, type$.nullable_StreamSubscription_LiveTest), type$.StreamGroup_LiveTest);
      t4.set$__StreamGroup__controller_A(type$.StreamController_LiveTest._as(new A._SyncBroadcastStreamController(t4.get$_onListen(), t4.get$_onCancelBroadcast(), type$._SyncBroadcastStreamController_LiveTest)));
      t5 = type$.Set_LiveTest;
      t6 = A.LinkedHashSet_LinkedHashSet$_empty(t5);
      t7 = type$.UnionSet_LiveTest;
      t8 = type$.UnionSetController_LiveTest;
      t9 = A.LinkedHashSet_LinkedHashSet$_empty(t5);
      t5 = A.LinkedHashSet_LinkedHashSet$_empty(t5);
      t10 = A.List_List$filled(A.QueueList__computeInitialCapacity(_null), _null, false, type$.nullable_LiveTest);
      t11 = type$.LiveTest;
      t12 = type$.Completer_PoolResource;
      t13 = A.ListQueue$(t12);
      t14 = A.ListQueue$(type$.void_Function);
      t12 = A.ListQueue$(t12);
      t15 = $.Zone__current;
      t1 = new A.Engine(new A.Pool(t13, t14, t12, 1, new A.AsyncMemoizer(new A._AsyncCompleter(new A._Future(t15, type$._Future_dynamic), type$._AsyncCompleter_dynamic), type$.AsyncMemoizer_dynamic)), new A.FutureGroup(new A._AsyncCompleter(new A._Future(t1, type$._Future_List_void), type$._AsyncCompleter_List_void), [], type$.FutureGroup_void), A.LinkedHashSet_LinkedHashSet$_empty(type$.StreamSubscription_dynamic), t3, A.LinkedHashSet_LinkedHashSet$_empty(t2), new A._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_RunnerSuite), new A._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_LiveSuite), t4, new A.UnionSetController(new A.UnionSet(t6, true, t7), t6, t8), new A.UnionSetController(new A.UnionSet(t9, true, t7), t9, t8), new A.UnionSetController(new A.UnionSet(t5, true, t7), t5, t8), new A.QueueList(t10, 0, 0, type$.QueueList_LiveTest), A.LinkedHashSet_LinkedHashSet$_empty(t11), A.LinkedHashSet_LinkedHashSet$_empty(t11));
      t1.Engine$4$concurrency$coverage$stopOnFirstFailure$testRandomizeOrderingSeed(_null, _null, false, _null);
      return t1;
    },
    Engine: function Engine(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _._closed = _._runCalled = false;
      _._closedBeforeDone = null;
      _._runPool = t0;
      _._group = t1;
      _._engine$_subscriptions = t2;
      _._suiteController = t3;
      _._addedSuites = t4;
      _._onSuiteAddedController = t5;
      _._onSuiteStartedController = t6;
      _._onTestStartedGroup = t7;
      _._passedGroup = t8;
      _._skippedGroup = t9;
      _._failedGroup = t10;
      _._active = t11;
      _._activeSuiteLoads = t12;
      _._restarted = t13;
    },
    Engine_success_closure: function Engine_success_closure() {
    },
    Engine_closure: function Engine_closure(t0) {
      this.$this = t0;
    },
    Engine_closure0: function Engine_closure0() {
    },
    Engine_run_closure: function Engine_run_closure(t0) {
      this.$this = t0;
    },
    Engine_run__closure: function Engine_run__closure(t0, t1) {
      this.$this = t0;
      this.suite = t1;
    },
    Engine_run___closure: function Engine_run___closure(t0) {
      this._box_0 = t0;
    },
    Engine_run_closure0: function Engine_run_closure0(t0, t1) {
      this.$this = t0;
      this.subscription = t1;
    },
    Engine__runLiveTest_closure: function Engine__runLiveTest_closure(t0, t1) {
      this.$this = t0;
      this.liveTest = t1;
    },
    Engine__runLiveTest_closure0: function Engine__runLiveTest_closure0(t0, t1) {
      this.$this = t0;
      this.subscription = t1;
    },
    Engine__runLiveTest_closure1: function Engine__runLiveTest_closure1() {
    },
    Engine__runSkippedTest_closure: function Engine__runSkippedTest_closure() {
    },
    Engine__runSkippedTest_closure0: function Engine__runSkippedTest_closure0(t0, t1) {
      this.controller = t0;
      this.skipped = t1;
    },
    Engine__runSkippedTest_closure1: function Engine__runSkippedTest_closure1() {
    },
    LiveSuite: function LiveSuite() {
    },
    LiveSuiteController$(_suite) {
      var t1 = $.Zone__current,
        t2 = type$._Future_void,
        t3 = type$._AsyncCompleter_void,
        t4 = type$.LiveTest;
      return new A.LiveSuiteController(_suite, new A.FutureGroup(new A._AsyncCompleter(new A._Future(t1, type$._Future_List_void), type$._AsyncCompleter_List_void), [], type$.FutureGroup_void), new A._AsyncCompleter(new A._Future(t1, t2), t3), new A._SyncBroadcastStreamController(null, null, type$._SyncBroadcastStreamController_LiveTest), A.LinkedHashSet_LinkedHashSet$_empty(t4), A.LinkedHashSet_LinkedHashSet$_empty(t4), A.LinkedHashSet_LinkedHashSet$_empty(t4), new A.AsyncMemoizer(new A._AsyncCompleter(new A._Future(t1, t2), t3), type$.AsyncMemoizer_void));
    },
    _LiveSuite: function _LiveSuite(t0) {
      this._live_suite_controller$_controller = t0;
    },
    LiveSuiteController: function LiveSuiteController(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.__LiveSuiteController_liveSuite_FI = $;
      _._suite = t0;
      _._onCompleteGroup = t1;
      _._live_suite_controller$_onCloseCompleter = t2;
      _._onTestStartedController = t3;
      _._passed = t4;
      _._skipped = t5;
      _._failed = t6;
      _._live_suite_controller$_active = null;
      _._live_suite_controller$_closeMemo = t7;
    },
    LiveSuiteController_reportLiveTest_closure: function LiveSuiteController_reportLiveTest_closure(t0, t1, t2) {
      this.$this = t0;
      this.liveTest = t1;
      this.countSuccess = t2;
    },
    LiveSuiteController_close_closure: function LiveSuiteController_close_closure(t0) {
      this.$this = t0;
    },
    ExpandedReporter: function ExpandedReporter(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _._color = t0;
      _._green = t1;
      _._red = t2;
      _._yellow = t3;
      _._gray = t4;
      _._bold = t5;
      _._noColor = t6;
      _._engine = t7;
      _._printPath = t8;
      _._printPlatform = t9;
      _._stopwatch = t10;
      _._lastProgressFailed = _._lastProgressSkipped = _._lastProgressPassed = 0;
      _._lastProgressMessage = "";
      _._lastProgressSuffix = null;
      _._shouldPrintStackTraceChainingNotice = false;
      _._subscriptions = t11;
      _._sink = t12;
    },
    ExpandedReporter__onTestStarted_closure: function ExpandedReporter__onTestStarted_closure(t0, t1) {
      this.$this = t0;
      this.liveTest = t1;
    },
    ExpandedReporter__onTestStarted_closure0: function ExpandedReporter__onTestStarted_closure0(t0, t1) {
      this.$this = t0;
      this.liveTest = t1;
    },
    ExpandedReporter__onTestStarted_closure1: function ExpandedReporter__onTestStarted_closure1(t0, t1) {
      this.$this = t0;
      this.liveTest = t1;
    },
    RunnerSuite: function RunnerSuite(t0, t1, t2, t3, t4) {
      var _ = this;
      _._runner_suite$_controller = t0;
      _.platform = t1;
      _.path = t2;
      _.group = t3;
      _.ignoreTimeouts = t4;
    },
    RunnerSuiteController: function RunnerSuiteController(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__RunnerSuiteController__suite_F = $;
      _._config = t0;
      _._onClose = t1;
      _._onDebuggingController = t2;
      _._channelNames = t3;
      _._closeMemo = t4;
    },
    RunnerSuiteController__close_closure: function RunnerSuiteController__close_closure(t0) {
      this.$this = t0;
    },
    SuiteConfiguration__list(input, $T) {
      return null;
    },
    SuiteConfiguration__map(input, $K, $V) {
      return B.Map_empty1;
    },
    SuiteConfiguration: function SuiteConfiguration(t0, t1, t2) {
      this._allowTestRandomization = t0;
      this._runSkipped = t1;
      this._ignoreTimeouts = t2;
    },
    IterableSet: function IterableSet(t0, t1) {
      this._iterable_set$_base = t0;
      this.$ti = t1;
    },
    _IterableSet_Object_SetMixin: function _IterableSet_Object_SetMixin() {
    },
    _IterableSet_Object_SetMixin_UnmodifiableSetMixin: function _IterableSet_Object_SetMixin_UnmodifiableSetMixin() {
    },
    _declarer() {
      var t1, t2, t3, _null = null,
        declarer = type$.nullable_Declarer._as($.Zone__current.$index(0, B.Symbol_yzu));
      if (declarer != null)
        return declarer;
      t1 = $._globalDeclarer;
      if (t1 != null)
        return t1;
      t1 = A.Metadata_Metadata(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      t2 = type$.JSArray_of_dynamic_Function;
      t3 = type$.JSArray_GroupEntry;
      $._globalDeclarer = new A.Declarer(_null, _null, t1, B.C_EmptyUnmodifiableSet, _null, false, false, A._setArrayType([], t2), A._setArrayType([], t2), A._setArrayType([], t2), A._setArrayType([], type$.JSArray_of_void_Function), A._setArrayType([], t3), A._setArrayType([], t3), _null, _null);
      new A._declarer_closure().call$0();
      t3 = $._globalDeclarer;
      t3.toString;
      return t3;
    },
    test(description, body) {
      var _null = null;
      A._declarer().test$9$onPlatform$retry$skip$solo$tags$testOn$timeout(description, body, _null, _null, _null, false, _null, _null, _null);
      return;
    },
    group(description, body) {
      var _null = null;
      A._declarer().group$9$onPlatform$retry$skip$solo$tags$testOn$timeout(description, body, _null, _null, _null, false, _null, _null, _null);
      return;
    },
    _declarer_closure: function _declarer_closure() {
    },
    _declarer__closure: function _declarer__closure(t0) {
      this.engine = t0;
    },
    currentOSGuess_closure: function currentOSGuess_closure() {
    },
    PrintSink: function PrintSink(t0) {
      this._buffer = t0;
    },
    ReleasedException: function ReleasedException() {
    },
    Releasable: function Releasable() {
    },
    Using_useAsync(_this, asyncProcess, $T, $R) {
      return A.runZoned(new A.Using_useAsync_closure(_this, asyncProcess, $R), null, null, $R._eval$1("Future<0>"));
    },
    Using_useAsync_closure: function Using_useAsync_closure(t0, t1, t2) {
      this._this = t0;
      this.asyncProcess = t1;
      this.R = t2;
    },
    _EventStreamSubscription$0(_target, _eventType, onData, _useCapture, $T) {
      var t1;
      if (onData == null)
        t1 = null;
      else {
        t1 = A._wrapZone(new A._EventStreamSubscription_closure(onData), type$.JSObject);
        t1 = t1 == null ? null : type$.JavaScriptFunction._as(A.allowInterop(t1, type$.Function));
      }
      t1 = new A._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
      t1._streams$_tryResume$0();
      return t1;
    },
    _wrapZone(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    EventStreamProvider0: function EventStreamProvider0(t0, t1) {
      this._streams$_eventType = t0;
      this.$ti = t1;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._streams$_target = t0;
      _._streams$_eventType = t1;
      _._streams$_useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._streams$_pauseCount = 0;
      _._streams$_target = t0;
      _._streams$_eventType = t1;
      _._streams$_onData = t2;
      _._streams$_useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _EventStreamSubscription_onData_closure: function _EventStreamSubscription_onData_closure(t0) {
      this.handleData = t0;
    },
    TestEntryPointsExt_set(_this, root, platform) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        ext, t1;
      var $async$TestEntryPointsExt_set = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              switch (platform) {
                case B.TestPlatform_JavaScript_js:
                  root += "workers/js";
                  ext = "js";
                  break;
                case B.TestPlatform_WebAssembly_wasm:
                  root += "workers/wasm";
                  ext = "unopt.wasm";
                  break;
                default:
                  throw A.wrapException(A.UnsupportedError$("Unsupported platform " + platform.toString$0(0)));
              }
              _this.native = A.Uri_parse(root + "/native_worker.js");
              _this.notAWorker = A.Uri_parse(root + "/not_a_worker.dart." + ext);
              _this.echo = A.Uri_parse(root + "/echo_worker.dart." + ext);
              _this.cache = A.Uri_parse(root + "/cache_worker.dart." + ext);
              _this.installable = A.Uri_parse(root + "/installable_worker.dart." + ext);
              _this.issues = A.Uri_parse(root + "/issues_worker.dart." + ext);
              _this.local = A.Uri_parse(root + "/local_client_worker.dart." + ext);
              _this.prime = A.Uri_parse(root + "/prime_worker.dart." + ext);
              _this.test = A.Uri_parse(root + "/test_worker.dart." + ext);
              t1 = type$.Base64Codec._eval$1("Codec.S")._as(B.C_Utf8Encoder.convert$1('onmessage = (e) => { postMessage(`ECHO "${e.data}"`); };\n'));
              t1 = A.Uri_parse("data:application/javascript;base64," + B.C_Base64Codec.get$encoder().convert$1(t1));
              _this.inMemory = t1;
              $async$goto = 2;
              return A._asyncAwait(A._checkWebWorkers(new A.NonNullsIterable(A._setArrayType([_this.echo, t1, _this.native, _this.notAWorker, _this.cache, _this.installable, _this.issues, _this.local, _this.prime, _this.test, null, null, null], type$.JSArray_nullable_Uri), type$.NonNullsIterable_Uri)), $async$TestEntryPointsExt_set);
            case 2:
              // returning from await.
              _this.missingWorker = A.Uri_parse(root + "/missing_worker.dart." + ext);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$TestEntryPointsExt_set, $async$completer);
    },
    _fail(message) {
      var t1;
      window.toString;
      t1 = typeof console != "undefined";
      t1.toString;
      if (t1)
        window.console.error(message);
      throw A.wrapException(A.Exception_Exception(message));
    },
    _checkWebWorkers(workerUrls) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        messages, t2, workerLinks, workers, t3, path, t4, uri, fileName, t1, $async$temp1;
      var $async$_checkWebWorkers = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = typeof window.Worker != "undefined";
              t1.toString;
              if (!t1)
                A._fail("\n============================================================================ \nWeb Workers are not supported on this platform\n============================================================================ \n\n");
              messages = A._setArrayType([], type$.JSArray_String);
              t1 = document;
              t1.toString;
              t2 = type$.Element;
              A.checkTypeBound(t2, t2, "T", "querySelectorAll");
              t1 = t1.querySelectorAll('link[rel="x-web-worker"]');
              t1.toString;
              t2 = type$._FrozenElementList_Element;
              workerLinks = new A._FrozenElementList(t1, t2);
              workers = A.LinkedHashSet_LinkedHashSet$_empty(type$.Uri);
              t1 = new A.ListIterator(workerLinks, workerLinks.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E");
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              t3 = t1.__internal$_current;
              if (t3 == null)
                t3 = t2._as(t3);
              path = t3.getAttribute("href");
              t4 = path == null;
              uri = A.Uri_parse(t4 ? "/" : path).normalizePath$0();
              fileName = B.JSArray_methods.get$last(uri.get$pathSegments());
              $async$goto = t4 ? 4 : 6;
              break;
            case 4:
              // then
              B.JSArray_methods.add$1(messages, "href attribute is missing for " + A.S(J.get$outerHtml$x(t3)));
              // goto join
              $async$goto = 5;
              break;
            case 6:
              // else
              $async$goto = !B.JSString_methods.endsWith$1(fileName, ".js") && !B.JSString_methods.endsWith$1(fileName, ".mjs") && !B.JSString_methods.endsWith$1(fileName, ".wasm") ? 7 : 9;
              break;
            case 7:
              // then
              B.JSArray_methods.add$1(messages, "URLs for Web Worker " + path + " must reference a JavaScript file ending with '.js' or a WebAssembly file ending with '.wasm'");
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              $async$temp1 = A;
              $async$goto = 10;
              return A._asyncAwait(A.UriChecker_exists(uri), $async$_checkWebWorkers);
            case 10:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result))
                B.JSArray_methods.add$1(messages, "Web Worker " + path + " could not be found");
              else if (workerUrls.every$1(0, new A._checkWebWorkers_closure(uri)))
                B.JSArray_methods.add$1(messages, "Web Worker " + path + " is not used");
              else
                workers.add$1(0, uri);
            case 8:
              // join
            case 5:
              // join
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              for (t1 = workerUrls.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new A._checkWebWorkers_closure0()), t3 = workerUrls.get$iterator(0), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")); t1.moveNext$0();) {
                t2 = t3.get$current(0);
                if (workers.every$1(0, new A._checkWebWorkers_closure1(t2)))
                  B.JSArray_methods.add$1(messages, "Worker " + t2.toString$0(0) + ' is not referenced from the test HTML template file. It should be referenced with:\n   <link rel="x-web-worker" href="' + t2.toString$0(0) + '">');
              }
              if (messages.length !== 0)
                A._fail("\n============================================================================ \nCannot run tests because some workers are missing or invalid.\nPlease ensure Web Workers have been compiled prior to running Browser tests.\n\n" + B.JSArray_methods.join$1(messages, "\n") + "\n============================================================================ \n\n");
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_checkWebWorkers, $async$completer);
    },
    _checkWebWorkers_closure: function _checkWebWorkers_closure(t0) {
      this.uri = t0;
    },
    _checkWebWorkers_closure0: function _checkWebWorkers_closure0() {
    },
    _checkWebWorkers_closure1: function _checkWebWorkers_closure1(t0) {
      this.workerUrl = t0;
    },
    CacheStat: function CacheStat(t0, t1, t2, t3, t4) {
      var _ = this;
      _.hit = t0;
      _.miss = t1;
      _.expired = t2;
      _.size = t3;
      _.maxSize = t4;
    },
    CacheWorker$(context) {
      var t1 = context.entryPoints.cache;
      t1.toString;
      return new A.CacheWorker(t1, null, B.List_empty0, false, new A.Object());
    },
    CacheWorker: function CacheWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _._worker$_exceptionManager = _.channelLogger = null;
      _._threadHook = t1;
      _.args = t2;
      _._worker$_stopped = _._started = null;
      _._totalErrors = _._totalWorkload = _._maxWorkload = _._workload = 0;
      _._openChannel = _._channel = _._idle = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    execute(tc) {
      type$.TestContext._as(tc);
      tc.run$1(new A.execute_closure0(tc));
    },
    execute_closure0: function execute_closure0(t0) {
      this.tc = t0;
    },
    execute__closure0: function execute__closure0(t0, t1, t2) {
      this.pool = t0;
      this.tc = t1;
      this.worker = t2;
    },
    execute__closure1: function execute__closure1(t0, t1) {
      this.pool = t0;
      this.worker = t1;
    },
    execute__closure2: function execute__closure2(t0, t1, t2) {
      this.tc = t0;
      this.pool = t1;
      this.worker = t2;
    },
    execute___closure0: function execute___closure0(t0, t1) {
      this.tc = t0;
      this.pool = t1;
    },
    execute____closure16: function execute____closure16(t0) {
      this.pool = t0;
    },
    execute_____closure47: function execute_____closure47(t0) {
      this.digits = t0;
    },
    execute_____closure48: function execute_____closure48(t0) {
      this._box_0 = t0;
    },
    execute____closure17: function execute____closure17(t0) {
      this.pool = t0;
    },
    execute____closure18: function execute____closure18(t0) {
      this.pool = t0;
    },
    execute____closure19: function execute____closure19(t0) {
      this.pool = t0;
    },
    execute_____closure45: function execute_____closure45(t0) {
      this.digits = t0;
    },
    execute_____closure46: function execute_____closure46(t0) {
      this._box_1 = t0;
    },
    execute____closure20: function execute____closure20(t0) {
      this.pool = t0;
    },
    execute_____closure40: function execute_____closure40(t0) {
      this.digits = t0;
    },
    execute_____closure41: function execute_____closure41(t0) {
      this._box_2 = t0;
    },
    execute_____closure42: function execute_____closure42() {
    },
    execute_____closure43: function execute_____closure43() {
    },
    execute_____closure44: function execute_____closure44() {
    },
    execute____closure21: function execute____closure21(t0) {
      this.pool = t0;
    },
    execute_____closure35: function execute_____closure35(t0) {
      this.digits = t0;
    },
    execute_____closure36: function execute_____closure36(t0) {
      this._box_3 = t0;
    },
    execute_____closure37: function execute_____closure37() {
    },
    execute_____closure38: function execute_____closure38() {
    },
    execute_____closure39: function execute_____closure39() {
    },
    execute___closure1: function execute___closure1(t0, t1) {
      this.tc = t0;
      this.pool = t1;
    },
    execute____closure10: function execute____closure10(t0) {
      this.pool = t0;
    },
    execute_____closure34: function execute_____closure34() {
    },
    execute____closure11: function execute____closure11(t0) {
      this.pool = t0;
    },
    execute____closure12: function execute____closure12(t0) {
      this.pool = t0;
    },
    execute____closure13: function execute____closure13(t0) {
      this.pool = t0;
    },
    execute_____closure29: function execute_____closure29() {
    },
    execute_____closure30: function execute_____closure30() {
    },
    execute______closure2: function execute______closure2() {
    },
    execute_____closure31: function execute_____closure31() {
    },
    execute______closure0: function execute______closure0() {
    },
    execute______closure1: function execute______closure1() {
    },
    execute_____closure32: function execute_____closure32() {
    },
    execute______closure: function execute______closure() {
    },
    execute_____closure33: function execute_____closure33() {
    },
    execute____closure14: function execute____closure14(t0) {
      this.pool = t0;
    },
    execute_____closure19: function execute_____closure19(t0, t1, t2) {
      this.status = t0;
      this.i = t1;
      this.start = t2;
    },
    execute_____closure21: function execute_____closure21(t0, t1, t2) {
      this._box_4 = t0;
      this.status = t1;
      this.i = t2;
    },
    execute_____closure20: function execute_____closure20(t0, t1, t2) {
      this.status = t0;
      this.i = t1;
      this.completer = t2;
    },
    execute_____closure22: function execute_____closure22() {
    },
    execute_____closure23: function execute_____closure23() {
    },
    execute_____closure24: function execute_____closure24() {
    },
    execute_____closure25: function execute_____closure25() {
    },
    execute_____closure26: function execute_____closure26() {
    },
    execute_____closure27: function execute_____closure27() {
    },
    execute_____closure28: function execute_____closure28() {
    },
    execute____closure15: function execute____closure15(t0) {
      this.pool = t0;
    },
    execute_____closure9: function execute_____closure9(t0, t1, t2) {
      this.status = t0;
      this.i = t1;
      this.firstTaskStarted = t2;
    },
    execute_____closure11: function execute_____closure11(t0, t1, t2) {
      this._box_5 = t0;
      this.status = t1;
      this.i = t2;
    },
    execute_____closure10: function execute_____closure10(t0, t1, t2) {
      this.status = t0;
      this.i = t1;
      this.completer = t2;
    },
    execute_____closure12: function execute_____closure12() {
    },
    execute_____closure13: function execute_____closure13() {
    },
    execute_____closure14: function execute_____closure14() {
    },
    execute_____closure15: function execute_____closure15() {
    },
    execute_____closure16: function execute_____closure16() {
    },
    execute_____closure17: function execute_____closure17() {
    },
    execute_____closure18: function execute_____closure18() {
    },
    execute___closure2: function execute___closure2(t0, t1, t2) {
      this.tc = t0;
      this.worker = t1;
      this.pool = t2;
    },
    execute____closure7: function execute____closure7(t0) {
      this.worker = t0;
    },
    execute____closure8: function execute____closure8(t0) {
      this.worker = t0;
    },
    execute____closure9: function execute____closure9(t0) {
      this.pool = t0;
    },
    execute_____closure7: function execute_____closure7(t0) {
      this._box_6 = t0;
    },
    execute_____closure8: function execute_____closure8(t0) {
      this._box_6 = t0;
    },
    execute___closure3: function execute___closure3(t0, t1, t2) {
      this.tc = t0;
      this.worker = t1;
      this.pool = t2;
    },
    execute____closure4: function execute____closure4(t0) {
      this.worker = t0;
    },
    execute____closure5: function execute____closure5(t0) {
      this.worker = t0;
    },
    execute____closure6: function execute____closure6(t0) {
      this.pool = t0;
    },
    execute_____closure5: function execute_____closure5(t0) {
      this._box_7 = t0;
    },
    execute_____closure6: function execute_____closure6(t0) {
      this._box_7 = t0;
    },
    execute___closure4: function execute___closure4(t0, t1, t2) {
      this.tc = t0;
      this.worker = t1;
      this.pool = t2;
    },
    execute____closure1: function execute____closure1(t0) {
      this.worker = t0;
    },
    execute____closure2: function execute____closure2(t0) {
      this.worker = t0;
    },
    execute____closure3: function execute____closure3(t0) {
      this.pool = t0;
    },
    execute_____closure1: function execute_____closure1(t0) {
      this._box_8 = t0;
    },
    execute_____closure2: function execute_____closure2(t0) {
      this._box_8 = t0;
    },
    execute_____closure3: function execute_____closure3(t0) {
      this._box_8 = t0;
    },
    execute_____closure4: function execute_____closure4(t0) {
      this._box_8 = t0;
    },
    SequenceReplacement$(_sequence, replacement, closeTag) {
      var t1 = closeTag == null ? null : new A.CodeUnits(closeTag);
      return new A.SequenceReplacement(_sequence, new A.CodeUnits(replacement), t1);
    },
    ConsoleToHtml: function ConsoleToHtml() {
    },
    ConsoleToHtml_convert_closure: function ConsoleToHtml_convert_closure(t0, t1) {
      this._box_0 = t0;
      this.codeUnits = t1;
    },
    SequenceReplacement: function SequenceReplacement(t0, t1, t2) {
      this._sequence = t0;
      this._codeUnits = t1;
      this._closeTag = t2;
    },
    CustomException_deserialize(data) {
      var t1, t2, t3;
      type$.List_dynamic._as(data);
      t1 = J.getInterceptor$asx(data);
      if (J.$eq$(t1.$index(data, 0), "CUSTOM")) {
        t2 = A._asString(t1.$index(data, 1));
        t1 = A._asStringQ(t1.$index(data, 2));
        t1 = t1 == null ? null : new A._StringStackTrace(t1);
        t3 = new A.CustomException(null, t2, t1);
        t3.SquadronException$init$2(t2, t1);
        return t3;
      }
      return null;
    },
    CustomException: function CustomException(t0, t1, t2) {
      this._command = t0;
      this.message = t1;
      this._squadron_exception$_stackTrace = t2;
    },
    HtmlLogger: function HtmlLogger(t0, t1) {
      var _ = this;
      _._sw = t0;
      _._div = t1;
      _._scrollToEnd = true;
      _._forceScroll = false;
    },
    InstallableWorker$(context, throwOnInstall, throwOnUninstall) {
      var t1 = context.entryPoints.installable;
      t1.toString;
      return new A.InstallableWorker(t1, null, [throwOnInstall, throwOnUninstall], false, new A.Object());
    },
    InstallableWorker: function InstallableWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _._worker$_exceptionManager = _.channelLogger = null;
      _._threadHook = t1;
      _.args = t2;
      _._worker$_stopped = _._started = null;
      _._totalErrors = _._totalWorkload = _._maxWorkload = _._workload = 0;
      _._openChannel = _._channel = _._idle = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    IssuesWorkerPool$(context) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_IssuesWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = B.ConcurrencySettings_1_3_1,
        t6 = A.ExceptionManager$();
      return new A.IssuesWorkerPool(new A.IssuesWorkerPool_closure(context), t6, t5, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_IssuesWorker_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    IssuesWorker$(context) {
      var t1 = context.entryPoints.issues;
      t1.toString;
      return new A.IssuesWorker(t1, null, B.List_empty0, false, new A.Object());
    },
    IssuesWorkerPool: function IssuesWorkerPool(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._workerFactory = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _.concurrencySettings = t2;
      _._workers = t3;
      _._deadWorkerStats = t4;
      _._stopped = false;
      _._maxSize = 0;
      _._workerPoolListeners = t5;
      _._startingWorkers = 0;
      _._worker_pool$_queue = t6;
      _._executing = t7;
      _.Releasable__released = t8;
      _.Releasable__token = t9;
    },
    IssuesWorkerPool_closure: function IssuesWorkerPool_closure(t0) {
      this.context = t0;
    },
    IssuesWorkerPool_issue_8_closure: function IssuesWorkerPool_issue_8_closure(t0) {
      this.words = t0;
    },
    IssuesWorker: function IssuesWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _._worker$_exceptionManager = _.channelLogger = null;
      _._threadHook = t1;
      _.args = t2;
      _._worker$_stopped = _._started = null;
      _._totalErrors = _._totalWorkload = _._maxWorkload = _._workload = 0;
      _._openChannel = _._channel = _._idle = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    execute0(tc) {
      type$.TestContext._as(tc);
      tc.run$1(new A.execute_closure(tc));
    },
    execute_closure: function execute_closure(t0) {
      this.tc = t0;
    },
    execute__closure: function execute__closure(t0) {
      this.tc = t0;
    },
    execute___closure: function execute___closure(t0) {
      this.tc = t0;
    },
    execute____closure: function execute____closure(t0) {
      this.tc = t0;
    },
    execute_____closure0: function execute_____closure0() {
    },
    execute____closure0: function execute____closure0(t0) {
      this.tc = t0;
    },
    execute_____closure: function execute_____closure() {
    },
    LocalClientWorkerPool$(context, localService, concurrencySettings) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_LocalClientWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = concurrencySettings,
        t6 = A.ExceptionManager$();
      return new A.LocalClientWorkerPool(new A.LocalClientWorkerPool_closure(context, localService), t6, t5, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_LocalClientWorker_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    LocalClientWorker$(context, args) {
      var t1 = context.entryPoints.local;
      t1.toString;
      return new A.LocalClientWorker(t1, null, args, false, new A.Object());
    },
    LocalClientWorkerPool: function LocalClientWorkerPool(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._workerFactory = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _.concurrencySettings = t2;
      _._workers = t3;
      _._deadWorkerStats = t4;
      _._stopped = false;
      _._maxSize = 0;
      _._workerPoolListeners = t5;
      _._startingWorkers = 0;
      _._worker_pool$_queue = t6;
      _._executing = t7;
      _.Releasable__released = t8;
      _.Releasable__token = t9;
    },
    LocalClientWorkerPool_closure: function LocalClientWorkerPool_closure(t0, t1) {
      this.context = t0;
      this.localService = t1;
    },
    LocalClientWorkerPool_checkIds_closure: function LocalClientWorkerPool_checkIds_closure() {
    },
    LocalClientWorkerPool_checkException_closure: function LocalClientWorkerPool_checkException_closure() {
    },
    LocalClientWorkerPool_checkSequence_closure: function LocalClientWorkerPool_checkSequence_closure(t0) {
      this.count = t0;
    },
    LocalClientWorker: function LocalClientWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _._worker$_exceptionManager = _.channelLogger = null;
      _._threadHook = t1;
      _.args = t2;
      _._worker$_stopped = _._started = null;
      _._totalErrors = _._totalWorkload = _._maxWorkload = _._workload = 0;
      _._openChannel = _._channel = _._idle = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    LocalService: function LocalService() {
    },
    LocalServiceImpl: function LocalServiceImpl() {
      this.__LocalServiceImpl_operations_FI = $;
    },
    LocalServiceImpl_operations_closure: function LocalServiceImpl_operations_closure(t0) {
      this.$this = t0;
    },
    LocalServiceImpl_operations_closure0: function LocalServiceImpl_operations_closure0(t0) {
      this.$this = t0;
    },
    LocalServiceImpl_operations_closure1: function LocalServiceImpl_operations_closure1(t0) {
      this.$this = t0;
    },
    execute1(tc) {
      type$.TestContext._as(tc);
      tc.run$1(new A.execute_closure3(tc));
    },
    execute_closure3: function execute_closure3(t0) {
      this.tc = t0;
    },
    execute__closure5: function execute__closure5(t0, t1, t2) {
      this.tc = t0;
      this.localService = t1;
      this.regExp = t2;
    },
    execute___closure23: function execute___closure23(t0, t1, t2) {
      this.tc = t0;
      this.localService = t1;
      this.regExp = t2;
    },
    execute____closure28: function execute____closure28(t0) {
      this.localService = t0;
    },
    execute_____closure57: function execute_____closure57() {
    },
    execute____closure29: function execute____closure29(t0, t1, t2) {
      this.localService = t0;
      this.tc = t1;
      this.regExp = t2;
    },
    execute_____closure56: function execute_____closure56(t0, t1) {
      this.tc = t0;
      this.regExp = t1;
    },
    execute______closure7: function execute______closure7(t0) {
      this.regExp = t0;
    },
    execute____closure30: function execute____closure30(t0, t1, t2) {
      this.localService = t0;
      this.tc = t1;
      this.regExp = t2;
    },
    execute_____closure55: function execute_____closure55(t0, t1) {
      this.tc = t0;
      this.regExp = t1;
    },
    execute______closure6: function execute______closure6(t0) {
      this.regExp = t0;
    },
    execute___closure24: function execute___closure24(t0, t1) {
      this.tc = t0;
      this.localService = t1;
    },
    execute____closure25: function execute____closure25(t0) {
      this.localService = t0;
    },
    execute_____closure54: function execute_____closure54() {
    },
    execute____closure26: function execute____closure26(t0, t1) {
      this.localService = t0;
      this.tc = t1;
    },
    execute_____closure53: function execute_____closure53() {
    },
    execute____closure27: function execute____closure27(t0, t1) {
      this.localService = t0;
      this.tc = t1;
    },
    execute_____closure52: function execute_____closure52(t0) {
      this.tc = t0;
    },
    execute______closure5: function execute______closure5() {
    },
    execute___closure25: function execute___closure25(t0, t1) {
      this.tc = t0;
      this.localService = t1;
    },
    execute____closure22: function execute____closure22(t0) {
      this.localService = t0;
    },
    execute_____closure51: function execute_____closure51() {
    },
    execute____closure23: function execute____closure23(t0, t1) {
      this.localService = t0;
      this.tc = t1;
    },
    execute_____closure50: function execute_____closure50(t0) {
      this.tc = t0;
    },
    execute______closure4: function execute______closure4() {
    },
    execute_______closure0: function execute_______closure0() {
    },
    execute____closure24: function execute____closure24(t0, t1) {
      this.localService = t0;
      this.tc = t1;
    },
    execute_____closure49: function execute_____closure49(t0) {
      this.tc = t0;
    },
    execute______closure3: function execute______closure3() {
    },
    execute_______closure: function execute_______closure() {
    },
    execute2(tc) {
      type$.TestContext._as(tc);
      tc.run$1(new A.execute_closure2(tc));
    },
    execute_closure2: function execute_closure2(t0) {
      this.tc = t0;
    },
    execute__closure4: function execute__closure4(t0, t1, t2) {
      this.tc = t0;
      this.memoryLogger = t1;
      this.logs = t2;
    },
    execute___closure11: function execute___closure11(t0, t1, t2) {
      this.worker = t0;
      this.tc = t1;
      this.memoryLogger = t2;
    },
    execute___closure12: function execute___closure12(t0) {
      this.worker = t0;
    },
    execute___closure13: function execute___closure13(t0) {
      this.memoryLogger = t0;
    },
    execute___closure14: function execute___closure14(t0) {
      this.memoryLogger = t0;
    },
    execute___closure15: function execute___closure15(t0, t1) {
      this.worker = t0;
      this.logs = t1;
    },
    execute___closure16: function execute___closure16(t0, t1) {
      this.worker = t0;
      this.logs = t1;
    },
    execute___closure17: function execute___closure17(t0, t1) {
      this.worker = t0;
      this.logs = t1;
    },
    execute___closure18: function execute___closure18(t0, t1) {
      this.worker = t0;
      this.logs = t1;
    },
    execute___closure19: function execute___closure19(t0, t1) {
      this.worker = t0;
      this.logs = t1;
    },
    execute___closure20: function execute___closure20(t0, t1) {
      this.worker = t0;
      this.logs = t1;
    },
    execute___closure21: function execute___closure21(t0, t1) {
      this.worker = t0;
      this.logs = t1;
    },
    execute___closure22: function execute___closure22(t0, t1) {
      this.worker = t0;
      this.logs = t1;
    },
    execute3(tc) {
      type$.TestContext._as(tc);
      tc.run$1(new A.execute_closure1(tc));
    },
    execute_closure1: function execute_closure1(t0) {
      this.tc = t0;
    },
    execute__closure3: function execute__closure3(t0) {
      this.tc = t0;
    },
    execute___closure5: function execute___closure5(t0, t1) {
      this.testWorker = t0;
      this.tc = t1;
    },
    execute___closure6: function execute___closure6(t0) {
      this.testWorker = t0;
    },
    execute___closure7: function execute___closure7(t0, t1) {
      this.testWorker = t0;
      this.tc = t1;
    },
    execute___closure8: function execute___closure8(t0, t1) {
      this.testWorker = t0;
      this.tc = t1;
    },
    execute___closure9: function execute___closure9(t0, t1) {
      this.testWorker = t0;
      this.tc = t1;
    },
    execute___closure10: function execute___closure10(t0) {
      this.testWorker = t0;
    },
    MemoryLogger$(logs, filter) {
      var t1 = new A.NoOutput(),
        t2 = new A.EmptyPrinter(),
        t3 = new A.MemoryLogger(filter, logs, filter, t2, t1);
      t3.Logger$4$filter$level$output$printer(filter, B.Level_0_all, t1, t2);
      return t3;
    },
    MemoryLogger: function MemoryLogger(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memory_logger$_filter = t0;
      _._logs = t1;
      _.__Logger__initialization_F = $;
      _._filter = t2;
      _._printer = t3;
      _._output = t4;
    },
    MemoryLogFilter: function MemoryLogFilter() {
      this._level = null;
    },
    MissingWorker: function MissingWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _._worker$_exceptionManager = _.channelLogger = null;
      _._threadHook = t1;
      _.args = t2;
      _._worker$_stopped = _._started = null;
      _._totalErrors = _._totalWorkload = _._maxWorkload = _._workload = 0;
      _._openChannel = _._channel = _._idle = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    PrimeWorkerPool$(context, cache, concurrencySettings) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_PrimeWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = A.ExceptionManager$();
      return new A.PrimeWorkerPool(new A.PrimeWorkerPool_closure(context, cache), t5, concurrencySettings, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_PrimeWorker_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    PrimeWorker$(context, cache) {
      var t1 = context.entryPoints.prime;
      t1.toString;
      return new A.PrimeWorker(t1, null, [cache == null ? null : cache._channel.share$0(0)._sendPort], false, new A.Object());
    },
    PrimeWorkerPool: function PrimeWorkerPool(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._workerFactory = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _.concurrencySettings = t2;
      _._workers = t3;
      _._deadWorkerStats = t4;
      _._stopped = false;
      _._maxSize = 0;
      _._workerPoolListeners = t5;
      _._startingWorkers = 0;
      _._worker_pool$_queue = t6;
      _._executing = t7;
      _.Releasable__released = t8;
      _.Releasable__token = t9;
    },
    PrimeWorkerPool_closure: function PrimeWorkerPool_closure(t0, t1) {
      this.context = t0;
      this.cache = t1;
    },
    PrimeWorkerPool_isPrime_closure: function PrimeWorkerPool_isPrime_closure(t0) {
      this.n = t0;
    },
    PrimeWorkerPool_getPrimes_closure: function PrimeWorkerPool_getPrimes_closure(t0, t1) {
      this.min = t0;
      this.max = t1;
    },
    PrimeWorker: function PrimeWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _._worker$_exceptionManager = _.channelLogger = null;
      _._threadHook = t1;
      _.args = t2;
      _._worker$_stopped = _._started = null;
      _._totalErrors = _._totalWorkload = _._maxWorkload = _._workload = 0;
      _._openChannel = _._channel = _._idle = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    execute4(tc) {
      type$.TestContext._as(tc);
      tc.run$1(new A.execute_closure4(tc));
    },
    execute_closure4: function execute_closure4(t0) {
      this.tc = t0;
    },
    execute__closure6: function execute__closure6(t0) {
      this.tc = t0;
    },
    execute___closure26: function execute___closure26(t0) {
      this.tc = t0;
    },
    execute___closure27: function execute___closure27(t0) {
      this.tc = t0;
    },
    TestContext_init(root, workerPlatform) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.TestContext),
        $async$returnValue, t1;
      var $async$TestContext_init = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new A.TestEntryPoints();
              $async$goto = 3;
              return A._asyncAwait(A.TestEntryPointsExt_set(t1, root, workerPlatform), $async$TestContext_init);
            case 3:
              // returning from await.
              $async$returnValue = new A.TestContext(workerPlatform, t1, A.LinkedHashSet_LinkedHashSet$_empty(type$.Pattern), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.TestResult));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$TestContext_init, $async$completer);
    },
    TestContext: function TestContext(t0, t1, t2, t3) {
      var _ = this;
      _._completer = null;
      _._pending = 0;
      _._canceled = false;
      _.workerPlatform = t0;
      _.entryPoints = t1;
      _.onlyTests = t2;
      _.testResults = t3;
      _._testPath = "";
    },
    TestContext_done_closure: function TestContext_done_closure(t0) {
      this.$this = t0;
    },
    TestContext_test_closure: function TestContext_test_closure(t0) {
      this.$this = t0;
    },
    TestContext_test_closure1: function TestContext_test_closure1(t0) {
      this.$this = t0;
    },
    TestContext_test_closure0: function TestContext_test_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.currentTest = t1;
      _.body = t2;
      _.timeout = t3;
    },
    TestResult: function TestResult() {
    },
    TestEntryPoints: function TestEntryPoints() {
      var _ = this;
      _.test = _.prime = _.local = _.issues = _.installable = _.cache = _.missingWorker = _.notAWorker = _.native = _.inMemory = _.echo = null;
    },
    NoOutput: function NoOutput() {
    },
    EmptyPrinter: function EmptyPrinter() {
    },
    TestPlatform: function TestPlatform(t0, t1) {
      this.label = t0;
      this._name = t1;
    },
    run(testLabels, platform) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_TestContext),
        $async$returnValue, testContext, t2, t3, line, toZone, t4, t1;
      var $async$run = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx(testLabels);
              $async$goto = t1.get$isNotEmpty(testLabels) ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return A._asyncAwait(A.TestContext_init("/", platform), $async$run);
            case 6:
              // returning from await.
              testContext = $async$result;
              for (t1 = t1.get$iterator(testLabels), t2 = testContext.onlyTests; t1.moveNext$0();)
                t2.add$1(0, A.RegExp_RegExp(A.quoteStringForRegExp(t1.get$current(t1)) + ".*", false, false));
              t1 = A._instanceType(t2);
              A.print("Selected tests: " + new A.EfficientLengthMappedIterable(t2, t1._eval$1("String(1)")._as(new A.run_closure()), t1._eval$1("EfficientLengthMappedIterable<1,String>")).join$1(0, ", "));
              A.print("Running on platform " + $.$get$platformName());
              for (t1 = $.$get$executors(), t1 = t1.get$entries(t1), t1 = t1.get$iterator(t1), t2 = type$.Location; t1.moveNext$0();) {
                t3 = t1.get$current(t1).value;
                line = "Run from script " + t3._1;
                toZone = $.printToZone;
                if (toZone == null)
                  A.printString(line);
                else
                  toZone.call$1(line);
                t3._0.call$1(testContext);
                t3 = testContext._pending;
                t4 = A._convertNativeToDart_Window(window.parent);
                if (t4 != null)
                  J.postMessage$2$x(t4, "" + t3 + " tests pending...", B.Location_methods.get$origin(t2._as(window.location)));
              }
              A.Timer_Timer$periodic(A.Duration$(0, 100, 0), new A.run_closure0(testContext));
              testContext.get$done().then$1$1(new A.run_closure1(), type$.void);
              $async$returnValue = testContext;
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$run, $async$completer);
    },
    run_closure: function run_closure() {
    },
    run_closure0: function run_closure0(t0) {
      this.testContext = t0;
    },
    run_closure1: function run_closure1() {
    },
    main() {
      return A.main$body();
    },
    main$body() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        htmlLogger, t4, t1, t2, t3, $async$temp1;
      var $async$main = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = type$.DivElement._as(document.querySelector("#output"));
              t3 = new A.Stopwatch();
              $.$get$Stopwatch__frequency();
              htmlLogger = new A.HtmlLogger(t3, t2);
              t4 = type$._ElementEventStreamImpl_Event;
              A._EventStreamSubscription$(t2, "scroll", t4._eval$1("~(1)?")._as(htmlLogger.get$_onScroll()), false, t4._precomputed1);
              t3.start$0(0);
              self.dartPrint = A.allowInterop(new A.main_closure(htmlLogger), type$.Null_Function_dynamic);
              t1.context = null;
              t3 = window;
              t3.toString;
              A._EventStreamSubscription$(t3, "message", type$.nullable_void_Function_MessageEvent._as(new A.main_closure0(t1)), false, type$.MessageEvent);
              t3 = type$.Location._as(window.location).href;
              t3.toString;
              t3 = A.Uri_parse(t3).get$queryParameters();
              $async$temp1 = t1;
              $async$goto = 2;
              return A._asyncAwait(A.run(t3.get$keys(t3), B.TestPlatform_WebAssembly_wasm), $async$main);
            case 2:
              // returning from await.
              $async$temp1.context = $async$result;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$main, $async$completer);
    },
    main_closure: function main_closure(t0) {
      this.htmlLogger = t0;
    },
    main_closure0: function main_closure0(t0) {
      this._box_0 = t0;
    },
    TestWorkerPool$(context, concurrencySettings) {
      var t1 = concurrencySettings == null ? B.ConcurrencySettings_1_4_50 : concurrencySettings,
        t2 = A._setArrayType([], type$.JSArray_PoolWorker_TestWorker),
        t3 = A._setArrayType([], type$.JSArray_WorkerStat),
        t4 = type$.WorkerTask_dynamic_Worker,
        t5 = A.ListQueue$(t4),
        t6 = A.ExceptionManager$();
      return new A.TestWorkerPool(new A.TestWorkerPool_closure(context), t6, t1, t2, t3, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_TestWorker_bool), t5, A.LinkedHashSet_LinkedHashSet$_empty(t4), false, new A.Object());
    },
    TestWorkerPool$throws(context) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_TestWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = B.ConcurrencySettings_1_4_50,
        t6 = A.ExceptionManager$();
      return new A.TestWorkerPool(new A.TestWorkerPool$throws_closure(context), t6, t5, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_TestWorker_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    TestWorkerPool$missingStartRequest(context) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_TestWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = B.ConcurrencySettings_1_4_50,
        t6 = A.ExceptionManager$();
      return new A.TestWorkerPool(new A.TestWorkerPool$missingStartRequest_closure(context), t6, t5, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_TestWorker_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    TestWorkerPool$invalid(context) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_TestWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = B.ConcurrencySettings_1_4_50,
        t6 = A.ExceptionManager$();
      return new A.TestWorkerPool(new A.TestWorkerPool$invalid_closure(context), t6, t5, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_TestWorker_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    TestWorker$(context, hook) {
      var t1 = context.entryPoints.test;
      t1.toString;
      return new A.TestWorker(t1, hook, [0], false, new A.Object());
    },
    TestWorker$throws(context) {
      var t1 = context.entryPoints.test;
      t1.toString;
      return new A.TestWorker(t1, null, [1], false, new A.Object());
    },
    TestWorker$invalid(context) {
      var t1 = context.entryPoints.test;
      t1.toString;
      return new A.TestWorker(t1, null, [2], false, new A.Object());
    },
    TestWorker$missingStartRequest(context) {
      null.toString;
      return new A.TestWorker(null, null, [0], false, new A.Object());
    },
    TestWorkerPool: function TestWorkerPool(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._workerFactory = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _.concurrencySettings = t2;
      _._workers = t3;
      _._deadWorkerStats = t4;
      _._stopped = false;
      _._maxSize = 0;
      _._workerPoolListeners = t5;
      _._startingWorkers = 0;
      _._worker_pool$_queue = t6;
      _._executing = t7;
      _.Releasable__released = t8;
      _.Releasable__token = t9;
    },
    TestWorkerPool_closure: function TestWorkerPool_closure(t0) {
      this.context = t0;
    },
    TestWorkerPool$throws_closure: function TestWorkerPool$throws_closure(t0) {
      this.context = t0;
    },
    TestWorkerPool$missingStartRequest_closure: function TestWorkerPool$missingStartRequest_closure(t0) {
      this.context = t0;
    },
    TestWorkerPool$invalid_closure: function TestWorkerPool$invalid_closure(t0) {
      this.context = t0;
    },
    TestWorkerPool_io_closure: function TestWorkerPool_io_closure(t0) {
      this.ms = t0;
    },
    TestWorkerPool_delayed_closure: function TestWorkerPool_delayed_closure(t0) {
      this.n = t0;
    },
    TestWorkerPool_throwTaskTimeOutException_closure: function TestWorkerPool_throwTaskTimeOutException_closure() {
    },
    TestWorkerPool_throwCanceledException_closure: function TestWorkerPool_throwCanceledException_closure() {
    },
    TestWorkerPool_throwCustomException_closure: function TestWorkerPool_throwCustomException_closure() {
    },
    TestWorkerPool_ping_closure: function TestWorkerPool_ping_closure() {
    },
    TestWorkerPool_finite_closure: function TestWorkerPool_finite_closure(t0, t1) {
      this.count = t0;
      this.token = t1;
    },
    TestWorkerPool_getPendingInfiniteWithErrors_closure: function TestWorkerPool_getPendingInfiniteWithErrors_closure() {
    },
    TestWorkerPool_infiniteWithErrors_closure: function TestWorkerPool_infiniteWithErrors_closure(t0) {
      this.token = t0;
    },
    TestWorkerPool_delayedIdentityTask_closure: function TestWorkerPool_delayedIdentityTask_closure(t0) {
      this.n = t0;
    },
    TestWorkerPool_finiteTask_closure: function TestWorkerPool_finiteTask_closure(t0, t1) {
      this.n = t0;
      this.token = t1;
    },
    TestWorkerPool_infiniteWithErrorsTask_closure: function TestWorkerPool_infiniteWithErrorsTask_closure(t0) {
      this.token = t0;
    },
    TestWorker: function TestWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _._worker$_exceptionManager = _.channelLogger = null;
      _._threadHook = t1;
      _.args = t2;
      _._worker$_stopped = _._started = null;
      _._totalErrors = _._totalWorkload = _._maxWorkload = _._workload = 0;
      _._openChannel = _._channel = _._idle = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    _errorFromEvent($event) {
      var t1;
      if (type$.ErrorEvent._is($event)) {
        t1 = $event.error;
        return t1 == null ? new A._Exception("Unknown error") : t1;
      } else
        return new A._Exception("Unknown error: " + A.S($event));
    },
    execute5(tc) {
      type$.TestContext._as(tc);
      tc.run$1(new A.execute_closure7(tc));
    },
    execute_closure7: function execute_closure7(t0) {
      this.tc = t0;
    },
    execute__closure9: function execute__closure9(t0) {
      this.tc = t0;
    },
    execute___closure42: function execute___closure42(t0) {
      this.tc = t0;
    },
    execute____closure86: function execute____closure86(t0) {
      this.completer = t0;
    },
    execute____closure87: function execute____closure87(t0) {
      this.completer = t0;
    },
    execute___closure43: function execute___closure43(t0) {
      this.tc = t0;
    },
    execute____closure83: function execute____closure83(t0, t1) {
      this.ready = t0;
      this.completer = t1;
    },
    execute____closure84: function execute____closure84(t0, t1) {
      this._box_0 = t0;
      this.ready = t1;
    },
    execute____closure85: function execute____closure85(t0) {
      this.completer = t0;
    },
    execute___closure44: function execute___closure44(t0) {
      this.tc = t0;
    },
    execute____closure81: function execute____closure81(t0) {
      this.completer = t0;
    },
    execute____closure82: function execute____closure82(t0) {
      this.completer = t0;
    },
    execute___closure45: function execute___closure45() {
    },
    execute____closure79: function execute____closure79(t0) {
      this.completer = t0;
    },
    execute____closure80: function execute____closure80(t0) {
      this.completer = t0;
    },
    execute___closure46: function execute___closure46() {
    },
    execute____closure77: function execute____closure77(t0) {
      this.completer = t0;
    },
    execute____closure78: function execute____closure78(t0) {
      this.completer = t0;
    },
    execute6(tc) {
      type$.TestContext._as(tc);
      tc.run$1(new A.execute_closure5(tc));
    },
    execute_closure5: function execute_closure5(t0) {
      this.tc = t0;
    },
    execute__closure7: function execute__closure7(t0, t1) {
      this.tc = t0;
      this.logger = t1;
    },
    execute___closure28: function execute___closure28(t0) {
      this.tc = t0;
    },
    execute____closure53: function execute____closure53(t0) {
      this.tc = t0;
    },
    execute_____closure80: function execute_____closure80() {
    },
    execute______closure17: function execute______closure17(t0, t1) {
      this.completedTasks = t0;
      this.id = t1;
    },
    execute______closure18: function execute______closure18(t0) {
      this.pool = t0;
    },
    execute___closure29: function execute___closure29(t0) {
      this.tc = t0;
    },
    execute____closure52: function execute____closure52() {
    },
    execute_____closure79: function execute_____closure79(t0, t1, t2) {
      this._box_0 = t0;
      this.pool = t1;
      this.maxIdle = t2;
    },
    execute______closure16: function execute______closure16(t0) {
      this.maxIdle = t0;
    },
    execute___closure30: function execute___closure30(t0) {
      this.tc = t0;
    },
    execute____closure49: function execute____closure49(t0) {
      this.tc = t0;
    },
    execute_____closure78: function execute_____closure78() {
    },
    execute____closure50: function execute____closure50(t0) {
      this.tc = t0;
    },
    execute_____closure77: function execute_____closure77() {
    },
    execute____closure51: function execute____closure51(t0) {
      this.tc = t0;
    },
    execute_____closure76: function execute_____closure76() {
    },
    execute___closure31: function execute___closure31(t0) {
      this.tc = t0;
    },
    execute____closure43: function execute____closure43(t0) {
      this.tc = t0;
    },
    execute_____closure75: function execute_____closure75() {
    },
    execute______closure14: function execute______closure14() {
    },
    execute______closure15: function execute______closure15() {
    },
    execute____closure44: function execute____closure44(t0) {
      this.tc = t0;
    },
    execute_____closure74: function execute_____closure74() {
    },
    execute______closure12: function execute______closure12() {
    },
    execute______closure13: function execute______closure13() {
    },
    execute____closure45: function execute____closure45(t0) {
      this.tc = t0;
    },
    execute_____closure73: function execute_____closure73() {
    },
    execute____closure46: function execute____closure46(t0) {
      this.tc = t0;
    },
    execute_____closure72: function execute_____closure72() {
    },
    execute____closure47: function execute____closure47(t0) {
      this.tc = t0;
    },
    execute_____closure71: function execute_____closure71() {
    },
    execute____closure48: function execute____closure48(t0) {
      this.tc = t0;
    },
    execute_____closure70: function execute_____closure70() {
    },
    execute___closure32: function execute___closure32(t0, t1) {
      this.tc = t0;
      this.logger = t1;
    },
    execute____closure42: function execute____closure42(t0) {
      this.logger = t0;
    },
    execute___closure33: function execute___closure33(t0) {
      this.tc = t0;
    },
    execute____closure41: function execute____closure41() {
    },
    execute___closure34: function execute___closure34(t0) {
      this.tc = t0;
    },
    execute____closure40: function execute____closure40() {
    },
    execute___closure35: function execute___closure35(t0) {
      this.tc = t0;
    },
    execute____closure39: function execute____closure39() {
    },
    execute___closure36: function execute___closure36(t0) {
      this.tc = t0;
    },
    execute____closure38: function execute____closure38() {
    },
    execute_____closure69: function execute_____closure69(t0) {
      this.digits = t0;
    },
    execute___closure37: function execute___closure37(t0) {
      this.tc = t0;
    },
    execute____closure31: function execute____closure31(t0) {
      this.tc = t0;
    },
    execute_____closure68: function execute_____closure68() {
    },
    execute______closure8: function execute______closure8(t0, t1) {
      this.errors = t0;
      this.token = t1;
    },
    execute______closure9: function execute______closure9() {
    },
    execute______closure10: function execute______closure10() {
    },
    execute______closure11: function execute______closure11() {
    },
    execute____closure32: function execute____closure32(t0) {
      this.tc = t0;
    },
    execute_____closure67: function execute_____closure67(t0) {
      this.numbers = t0;
    },
    execute____closure33: function execute____closure33(t0) {
      this.tc = t0;
    },
    execute____closure34: function execute____closure34(t0) {
      this.tc = t0;
    },
    execute____closure35: function execute____closure35(t0) {
      this.tc = t0;
    },
    execute_____closure64: function execute_____closure64(t0) {
      this.numbers = t0;
    },
    execute_____closure65: function execute_____closure65(t0) {
      this.errors = t0;
    },
    execute____closure_pause: function execute____closure_pause(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _.sub = t1;
      _.numbers = t2;
      _.errors = t3;
    },
    execute____closure_resume: function execute____closure_resume(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _.numbers = t1;
      _.errors = t2;
      _.sub = t3;
    },
    execute_____closure66: function execute_____closure66() {
    },
    execute____closure36: function execute____closure36(t0) {
      this.tc = t0;
    },
    execute_____closure60: function execute_____closure60(t0) {
      this.numbers0 = t0;
    },
    execute_____closure61: function execute_____closure61(t0) {
      this.errors0 = t0;
    },
    execute_____closure62: function execute_____closure62(t0) {
      this.numbers1 = t0;
    },
    execute_____closure63: function execute_____closure63(t0) {
      this.errors1 = t0;
    },
    execute____closure37: function execute____closure37(t0) {
      this.tc = t0;
    },
    execute_____closure58: function execute_____closure58(t0) {
      this.numbers = t0;
    },
    execute_____closure59: function execute_____closure59(t0) {
      this.errors = t0;
    },
    execute7(tc) {
      type$.TestContext._as(tc);
      tc.run$1(new A.execute_closure6(tc));
    },
    execute_closure6: function execute_closure6(t0) {
      this.tc = t0;
    },
    execute__closure8: function execute__closure8(t0) {
      this.tc = t0;
    },
    execute___closure38: function execute___closure38(t0, t1, t2) {
      this.memoryLogger = t0;
      this.tc = t1;
      this.logs = t2;
    },
    execute____closure70: function execute____closure70(t0) {
      this.memoryLogger = t0;
    },
    execute____closure71: function execute____closure71(t0) {
      this.memoryLogger = t0;
    },
    execute____closure72: function execute____closure72(t0, t1) {
      this.tc = t0;
      this.memoryLogger = t1;
    },
    execute_____closure107: function execute_____closure107(t0) {
      this.memoryLogger = t0;
    },
    execute____closure73: function execute____closure73(t0, t1) {
      this.tc = t0;
      this.memoryLogger = t1;
    },
    execute____closure_hook0: function execute____closure_hook0(t0) {
      this._box_0 = t0;
    },
    execute_____closure106: function execute_____closure106(t0, t1) {
      this._box_0 = t0;
      this.memoryLogger = t1;
    },
    execute____closure74: function execute____closure74(t0, t1, t2) {
      this.tc = t0;
      this.memoryLogger = t1;
      this.logs = t2;
    },
    execute____closure_hook: function execute____closure_hook(t0) {
      this._box_1 = t0;
    },
    execute_____closure105: function execute_____closure105(t0, t1, t2) {
      this._box_1 = t0;
      this.memoryLogger = t1;
      this.logs = t2;
    },
    execute____closure75: function execute____closure75(t0, t1, t2) {
      this.tc = t0;
      this.memoryLogger = t1;
      this.logs = t2;
    },
    execute_____closure102: function execute_____closure102(t0, t1, t2) {
      this.tc = t0;
      this.memoryLogger = t1;
      this.logs = t2;
    },
    execute______closure21: function execute______closure21(t0, t1) {
      this.memoryLogger = t0;
      this.logs = t1;
    },
    execute_____closure103: function execute_____closure103(t0, t1, t2) {
      this.tc = t0;
      this.memoryLogger = t1;
      this.logs = t2;
    },
    execute______closure20: function execute______closure20(t0, t1) {
      this.memoryLogger = t0;
      this.logs = t1;
    },
    execute_____closure104: function execute_____closure104(t0, t1, t2) {
      this.tc = t0;
      this.memoryLogger = t1;
      this.logs = t2;
    },
    execute______closure19: function execute______closure19(t0, t1) {
      this.memoryLogger = t0;
      this.logs = t1;
    },
    execute____closure76: function execute____closure76(t0) {
      this.tc = t0;
    },
    execute_____closure101: function execute_____closure101() {
    },
    execute___closure39: function execute___closure39(t0) {
      this.tc = t0;
    },
    execute____closure66: function execute____closure66(t0) {
      this.tc = t0;
    },
    execute_____closure100: function execute_____closure100() {
    },
    execute____closure67: function execute____closure67(t0) {
      this.tc = t0;
    },
    execute_____closure99: function execute_____closure99() {
    },
    execute____closure68: function execute____closure68(t0) {
      this.tc = t0;
    },
    execute_____closure98: function execute_____closure98() {
    },
    execute____closure69: function execute____closure69(t0) {
      this.tc = t0;
    },
    execute_____closure97: function execute_____closure97() {
    },
    execute___closure40: function execute___closure40(t0) {
      this.tc = t0;
    },
    execute____closure63: function execute____closure63(t0) {
      this.tc = t0;
    },
    execute_____closure96: function execute_____closure96() {
    },
    execute_____closure_createTask0: function execute_____closure_createTask0(t0, t1, t2) {
      this._box_2 = t0;
      this.worker = t1;
      this.completedTasks = t2;
    },
    execute______createTask_closure0: function execute______createTask_closure0(t0, t1) {
      this.completedTasks = t0;
      this.id = t1;
    },
    execute____closure64: function execute____closure64(t0) {
      this.tc = t0;
    },
    execute_____closure95: function execute_____closure95() {
    },
    execute_____closure_createTask: function execute_____closure_createTask(t0, t1, t2) {
      this._box_3 = t0;
      this.worker = t1;
      this.completedTasks = t2;
    },
    execute______createTask_closure: function execute______createTask_closure(t0, t1) {
      this.completedTasks = t0;
      this.id = t1;
    },
    execute____closure65: function execute____closure65(t0) {
      this.tc = t0;
    },
    execute_____closure85: function execute_____closure85(t0, t1) {
      this.worker = t0;
      this.tc = t1;
    },
    execute_____closure86: function execute_____closure86(t0) {
      this.worker = t0;
    },
    execute_____closure87: function execute_____closure87(t0) {
      this.worker = t0;
    },
    execute_____closure88: function execute_____closure88(t0) {
      this.worker = t0;
    },
    execute_____closure89: function execute_____closure89(t0) {
      this.worker = t0;
    },
    execute_____closure90: function execute_____closure90(t0) {
      this.worker = t0;
    },
    execute_____closure91: function execute_____closure91(t0) {
      this.worker = t0;
    },
    execute_____closure92: function execute_____closure92(t0) {
      this.worker = t0;
    },
    execute_____closure93: function execute_____closure93(t0) {
      this.worker = t0;
    },
    execute_____closure94: function execute_____closure94(t0) {
      this.worker = t0;
    },
    execute___closure41: function execute___closure41(t0) {
      this.tc = t0;
    },
    execute____closure54: function execute____closure54(t0, t1) {
      this.worker = t0;
      this.tc = t1;
    },
    execute____closure55: function execute____closure55(t0) {
      this.worker = t0;
    },
    execute____closure56: function execute____closure56(t0) {
      this.worker = t0;
    },
    execute_____closure83: function execute_____closure83(t0, t1, t2, t3) {
      var _ = this;
      _.errors = t0;
      _.maxErrors = t1;
      _.sub = t2;
      _.done = t3;
    },
    execute_____closure84: function execute_____closure84() {
    },
    execute____closure57: function execute____closure57(t0) {
      this.worker = t0;
    },
    execute____closure58: function execute____closure58(t0) {
      this.worker = t0;
    },
    execute____closure59: function execute____closure59(t0) {
      this.worker = t0;
    },
    execute____closure60: function execute____closure60(t0) {
      this.worker = t0;
    },
    execute____closure_pause0: function execute____closure_pause0(t0, t1, t2, t3) {
      var _ = this;
      _._box_4 = t0;
      _.sub = t1;
      _.numbers = t2;
      _.errors = t3;
    },
    execute____closure_resume0: function execute____closure_resume0(t0, t1, t2, t3) {
      var _ = this;
      _._box_4 = t0;
      _.numbers = t1;
      _.errors = t2;
      _.sub = t3;
    },
    execute_____closure82: function execute_____closure82() {
    },
    execute____closure61: function execute____closure61(t0) {
      this.worker = t0;
    },
    execute____closure62: function execute____closure62(t0) {
      this.worker = t0;
    },
    execute_____closure81: function execute_____closure81(t0) {
      this._box_5 = t0;
    },
    max(a, b, $T) {
      A.checkTypeBound($T, type$.num, "T", "max");
      return Math.max($T._as(a), $T._as(b));
    },
    Channel_noop() {
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    IterableNullableExtension_whereNotNull(_this, $T) {
      return new A._SyncStarIterable(A.IterableNullableExtension_whereNotNull$body(_this, $T), $T._eval$1("_SyncStarIterable<0>"));
    },
    IterableNullableExtension_whereNotNull$body($async$_this, $async$$T) {
      return function() {
        var _this = $async$_this,
          $T = $async$$T;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, element;
        return function $async$IterableNullableExtension_whereNotNull($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = _this.get$iterator(_this);
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                element = t1.get$current(t1);
                $async$goto = element != null ? 4 : 5;
                break;
              case 4:
                // then
                $async$goto = 6;
                return $async$iterator._async$_current = element, 1;
              case 6:
                // after yield
              case 5:
                // join
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    toUint8List(input) {
      return input;
    },
    toByteStream(stream) {
      return stream;
    },
    indent0(text, first) {
      var t1, t2, t3, t4,
        prefix = B.JSString_methods.$mul(" ", first.length),
        lines = A._setArrayType(text.split("\n"), type$.JSArray_String);
      if (lines.length === 1)
        return first + text;
      t1 = first + A.S(B.JSArray_methods.get$first(lines)) + "\n";
      for (t2 = A.SubListIterable$(lines, 1, null, type$.String).take$1(0, lines.length - 2), t3 = t2.$ti, t2 = new A.ListIterator(t2, t2.get$length(0), t3._eval$1("ListIterator<ListIterable.E>")), t3 = t3._eval$1("ListIterable.E"); t2.moveNext$0();) {
        t4 = t2.__internal$_current;
        t1 += prefix + (t4 == null ? t3._as(t4) : t4) + "\n";
      }
      t1 += prefix + A.S(B.JSArray_methods.get$last(lines));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    current() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = A.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(A.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase)) {
        t1 = $._current;
        t1.toString;
        return t1;
      }
      $._currentUriBase = uri;
      if ($.$get$Style_platform() === $.$get$Style_url())
        t1 = $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : B.JSString_methods.substring$2(path, 0, lastIndex);
      }
      return t1;
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    driveLetterEnd(path, index) {
      var t2, t3, _null = null,
        t1 = path.length,
        index0 = index + 2;
      if (t1 < index0)
        return _null;
      if (!(index >= 0 && index < t1))
        return A.ioore(path, index);
      if (!A.isAlphabetic(path.charCodeAt(index)))
        return _null;
      t2 = index + 1;
      if (!(t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 58) {
        t3 = index + 4;
        if (t1 < t3)
          return _null;
        if (B.JSString_methods.substring$2(path, t2, t3).toLowerCase() !== "%3a")
          return _null;
        index = index0;
      }
      t2 = index + 2;
      if (t1 === t2)
        return t2;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return _null;
      return index + 3;
    },
    getErrorEventMessage(obj) {
      var t1,
        _s13_ = "Unknown error";
      if ("message" in obj) {
        t1 = obj.message;
        t1 = t1 == null ? null : J.toString$0$(t1);
        return t1 == null ? _s13_ : t1;
      } else
        return _s13_;
    },
    getErrorEventError(obj) {
      if (obj != null && "error" in obj)
        return A.dartify(obj.error);
      else
        return null;
    },
    getMessageEventData(obj) {
      var data;
      if (obj != null && "data" in obj) {
        data = A.dartify(obj.data);
        return data == null ? null : type$.List_dynamic._as(data);
      } else
        return null;
    },
    microsecTimeStamp() {
      var t1 = Date.now();
      return A.Duration$(0, new A.DateTime(t1, false).toUtc$0()._value - $.$get$_latestUPDEpoch()._value, 0)._duration;
    },
    Transferables_get(args) {
      var t1 = A.Transferables__get(args, A.LinkedHashSet_LinkedHashSet$_empty(type$.Object)),
        objects = A.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E"));
      return objects.length === 0 ? null : objects;
    },
    Transferables__isBaseType(data) {
      return data == null || typeof data == "string" || typeof data == "number" || A._isBool(data);
    },
    Transferables__isSafeForTransfer(data) {
      if (A.Transferables__isBaseType(data))
        return true;
      if (type$.List_String._is(data) || type$.List_num._is(data) || type$.List_bool._is(data))
        return true;
      if (type$.List_dynamic._is(data) && J.every$1$ax(data, A._transferables_Transferables__isSafeForTransfer$closure()))
        return true;
      return false;
    },
    Transferables__isNotSafeForTransfer(data) {
      return !A.Transferables__isSafeForTransfer(data);
    },
    Transferables__getObjects(list, seen) {
      return new A._SyncStarIterable(A.Transferables__getObjects$body(list, seen), type$._SyncStarIterable_Object);
    },
    Transferables__getObjects$body($async$list, $async$seen) {
      return function() {
        var list = $async$list,
          seen = $async$seen;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, o, t3;
        return function $async$Transferables__getObjects($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = J.where$1$ax(list, A._transferables_Transferables__isNotSafeForTransfer$closure()), t1 = t1.get$iterator(t1), t2 = type$.Object;
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                o = t1.get$current(t1);
                $async$goto = !seen.contains$1(0, o) ? 4 : 5;
                break;
              case 4:
                // then
                t3 = o == null;
                seen.add$1(0, t3 ? t2._as(o) : o);
                $async$goto = 6;
                return $async$iterator._async$_current = t3 ? t2._as(o) : o, 1;
              case 6:
                // after yield
              case 5:
                // join
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    Transferables__get(message, seen) {
      return new A._SyncStarIterable(A.Transferables__get$body(message, seen), type$._SyncStarIterable_Object);
    },
    Transferables__get$body($async$message, $async$seen) {
      return function() {
        var message = $async$message,
          seen = $async$seen;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, toBeInspected, t2, i, i0, arg, t3;
        return function $async$Transferables__get($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if (A.Transferables__isSafeForTransfer(message)) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = A.Transferables__getObjects(message, seen);
                toBeInspected = A.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E"));
                t1 = type$.Iterable_dynamic, t2 = type$.Map_dynamic_dynamic, i = 0;
              case 3:
                // for condition
                if (!(i < toBeInspected.length)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                i0 = i + 1;
                arg = toBeInspected[i];
                $async$goto = t2._is(arg) ? 6 : 8;
                break;
              case 6:
                // then
                t3 = J.getInterceptor$x(arg);
                if (!J.every$1$ax(t3.get$keys(arg), A._transferables_Transferables__isBaseType$closure()))
                  A.throwExpression(A.SquadronError$_("Map keys must be strings, numbers or booleans.", null));
                B.JSArray_methods.addAll$1(toBeInspected, A.Transferables__getObjects(t3.get$values(arg), seen));
                // goto join
                $async$goto = 7;
                break;
              case 8:
                // else
                $async$goto = t1._is(arg) ? 9 : 11;
                break;
              case 9:
                // then
                B.JSArray_methods.addAll$1(toBeInspected, A.Transferables__getObjects(arg, seen));
                // goto join
                $async$goto = 10;
                break;
              case 11:
                // else
                $async$goto = 12;
                return $async$iterator._async$_current = arg, 1;
              case 12:
                // after yield
              case 10:
                // join
              case 7:
                // join
              case 4:
                // for update
                i = i0;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
              case 1:
                // return
                return 0;
              case 2:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    UriChecker_exists(url) {
      return A.UriChecker_exists$body(url);
    },
    UriChecker_exists$body(url) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$currentError, $status, t1, exception, $async$exception;
      var $async$UriChecker_exists = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (url.isScheme$1("data")) {
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.head(url), $async$UriChecker_exists);
            case 7:
              // returning from await.
              $status = $async$result.statusCode;
              t1 = $status;
              if (typeof t1 !== "number") {
                $async$returnValue = A.iae(t1);
                // goto return
                $async$goto = 1;
                break;
              }
              if (200 <= t1) {
                t1 = $status;
                if (typeof t1 !== "number") {
                  $async$returnValue = t1.$lt();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = t1 < 300;
              } else
                t1 = false;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$UriChecker_exists, $async$completer);
    },
    HexExt_get_hex(_this) {
      return "0x" + B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(_this, 16), 8, "0");
    },
    Cast_get($T) {
      if (A.createRuntimeType($T) === B.Type_int_8nG)
        return $T._eval$1("0(@)")._as(A.cast_helpers_Cast_toInt$closure());
      else if (A.createRuntimeType($T) === B.Type_double_23F)
        return $T._eval$1("0(@)")._as(A.cast_helpers_Cast_toDbl$closure());
      else
        return A.instantiate1(A.cast_helpers_Cast_identity$closure(), $T);
    },
    Cast_toInt(value) {
      return B.JSNumber_methods.toInt$0(A._asNum(value));
    },
    Cast_toDbl(value) {
      return A._asNum(value);
    },
    Cast_identity(value, $T) {
      return $T._as(value);
    },
    WorkerMessageExt_unwrapTravelTime(_this) {
      var t1 = J.getInterceptor$asx(_this),
        ts = t1.$index(_this, 0);
      if (ts != null)
        t1.$indexSet(_this, 0, A.microsecTimeStamp() - B.JSNumber_methods.toInt$0(A._asNum(ts)));
    },
    WorkerRequest_get_command(_this) {
      return A._asInt(J.$index$asx(_this, 2));
    },
    WorkerRequestExt_wrapInPlace(_this) {
      var t1 = J.getInterceptor$asx(_this),
        token = t1.$index(_this, 4);
      if (type$.SquadronCancelationToken._is(token))
        t1.$indexSet(_this, 4, token.serialize$0());
      return _this;
    },
    pluralize($name, number) {
      if (number === 1)
        return $name;
      return $name + "s";
    },
    toSentence(iter) {
      var result,
        t1 = iter.length;
      if (t1 === 1)
        return J.toString$0$(B.JSArray_methods.get$first(iter));
      result = A.SubListIterable$(iter, 0, A.checkNotNullable(t1 - 1, "count", type$.int), A._arrayInstanceType(iter)._precomputed1).join$1(0, ", ");
      if (iter.length > 2)
        result += ",";
      return result + " and " + A.S(B.JSArray_methods.get$last(iter));
    },
    indent(text) {
      var t2, t3, t4,
        lines = A._setArrayType(text.split("\n"), type$.JSArray_String),
        t1 = lines.length;
      if (t1 === 1)
        return "  " + text;
      for (t1 = A.SubListIterable$(lines, 0, A.checkNotNullable(t1 - 1, "count", type$.int), type$.String), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"), t3 = ""; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        t3 += "  " + (t4 == null ? t2._as(t4) : t4) + "\n";
      }
      t1 = t3 + ("  " + A.S(B.JSArray_methods.get$last(lines)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    unsendable() {
    },
    getUnsendable() {
      return A._platform__unsendable$closure();
    },
    reportStatus($status) {
      var t1 = A._convertNativeToDart_Window(window.parent);
      return t1 == null ? null : J.postMessage$2$x(t1, $status, B.Location_methods.get$origin(type$.Location._as(window.location)));
    },
    unexpectedSuccess(process, res) {
      return new A._Exception(process + " completed successfully with res=" + A.S(res));
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      throw A.wrapException(A.NoSuchMethodError_NoSuchMethodError$withInvocation(receiver, type$.Invocation._as(invocation)));
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.Null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_0ua;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      var t1;
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw A.wrapException(A.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insertAll"));
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      receiver.length = receiver.length + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    where$1(receiver, f) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.WhereIterable(receiver, t1._eval$1("bool(1)")._as(f), t1._eval$1("WhereIterable<1>"));
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current(t1));
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("clear"));
      receiver.length = 0;
    },
    forEach$1(receiver, f) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1(receiver, f) {
      return this.map$1$1(receiver, f, type$.dynamic);
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    join$0(receiver) {
      return this.join$1(receiver, "");
    },
    take$1(receiver, n) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(n, "count", type$.int), A._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var end, i, element,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return orElse.call$0();
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    fillRange$3(receiver, start, end, fillValue) {
      var i;
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("fill range"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      A._arrayInstanceType(receiver)._precomputed1._as(fillValue);
      for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    replaceRange$3(receiver, start, end, replacement) {
      var removeLength, insertLength, insertEnd, t1, delta, newLength, _this = this;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(replacement);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("replaceRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      if (!type$.EfficientLengthIterable_dynamic._is(replacement))
        replacement = J.toList$0$ax(replacement);
      removeLength = end - start;
      insertLength = J.get$length$asx(replacement);
      insertEnd = start + insertLength;
      t1 = receiver.length;
      if (removeLength >= insertLength) {
        delta = removeLength - insertLength;
        newLength = t1 - delta;
        _this.setRange$3(receiver, start, insertEnd, replacement);
        if (delta !== 0) {
          _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
          _this.set$length(receiver, newLength);
        }
      } else {
        newLength = t1 + (insertLength - removeLength);
        receiver.length = newLength;
        _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
        _this.setRange$3(receiver, start, insertEnd, replacement);
      }
    },
    any$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (A.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!A.boolConversionCheck(test.call$1(receiver[i])))
          return false;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    sort$1(receiver, compare) {
      var len, a, b, undefineds, i,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("sort"));
      len = receiver.length;
      if (len < 2)
        return;
      if (compare == null)
        compare = J._interceptors_JSArray__compareAny$closure();
      if (len === 2) {
        a = receiver[0];
        b = receiver[1];
        t1 = compare.call$2(a, b);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          receiver[0] = b;
          receiver[1] = a;
        }
        return;
      }
      if (t1._precomputed1._is(null)) {
        for (undefineds = 0, i = 0; i < receiver.length; ++i)
          if (receiver[i] === void 0) {
            receiver[i] = null;
            ++undefineds;
          }
      } else
        undefineds = 0;
      receiver.sort(A.convertDartClosureToJS(compare, 2));
      if (undefineds > 0)
        this._replaceSomeNullsWithUndefined$1(receiver, undefineds);
    },
    _replaceSomeNullsWithUndefined$1(receiver, count) {
      var i0,
        i = receiver.length;
      for (; i0 = i - 1, i > 0; i = i0)
        if (receiver[i0] === null) {
          receiver[i0] = void 0;
          --count;
          if (count === 0)
            break;
        }
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = A._setArrayType(receiver.slice(0), A._arrayInstanceType(receiver));
      return t1;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    toSet$0(receiver) {
      return A.LinkedHashSet_LinkedHashSet$from(receiver, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("set length"));
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    whereType$1$0(receiver, $T) {
      return new A.WhereTypeIterable(receiver, $T._eval$1("WhereTypeIterable<0>"));
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._arrayInstanceType(receiver));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current(_) {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this.__interceptors$_length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2(receiver, lowerLimit, upperLimit) {
      if (B.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw A.wrapException(A.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toRadixString$1(receiver, radix) {
      var result, t1, t2, match, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      t1 = result.length;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(result, t2);
      if (result.charCodeAt(t2) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      var t1;
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $lt(receiver, other) {
      A._asNum(other);
      return receiver < other;
    },
    $gt(receiver, other) {
      A._asNum(other);
      return receiver > other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$bitLength(receiver) {
      var wordBits,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      return wordBits - Math.clz32(nonneg);
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1(receiver, string) {
      return this.allMatches$2(receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, t2, i, t3, _null = null;
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return _null;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(string, t3);
        if (string.charCodeAt(t3) !== receiver.charCodeAt(i))
          return _null;
      }
      return new A.StringMatch(start, receiver);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceFirst$2(receiver, from, to) {
      A.RangeError_checkValueInInterval(0, 0, receiver.length, "startIndex");
      return A.stringReplaceFirstUnchecked(receiver, from, to, 0);
    },
    split$1(receiver, pattern) {
      if (typeof pattern == "string")
        return A._setArrayType(receiver.split(pattern), type$.JSArray_String);
      else if (pattern instanceof A.JSSyntaxRegExp && pattern.get$_nativeAnchoredVersion().exec("").length - 2 === 0)
        return A._setArrayType(receiver.split(pattern._nativeRegExp), type$.JSArray_String);
      else
        return this._defaultSplit$1(receiver, pattern);
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return A.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    _defaultSplit$1(receiver, pattern) {
      var t1, start, $length, match, matchStart, matchEnd,
        result = A._setArrayType([], type$.JSArray_String);
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), start = 0, $length = 1; t1.moveNext$0();) {
        match = t1.get$current(t1);
        matchStart = match.get$start(match);
        matchEnd = match.get$end(match);
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart)
          continue;
        B.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        B.JSArray_methods.add$1(result, this.substring$1(receiver, start));
      return result;
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      type$.Pattern._as(pattern);
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern == "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1(receiver, pattern) {
      return this.startsWith$2(receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1(receiver, start) {
      return this.substring$2(receiver, start, null);
    },
    toLowerCase$0(receiver) {
      return receiver.toLowerCase();
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (0 >= endIndex)
        return A.ioore(result, 0);
      if (result.charCodeAt(0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      endIndex0 = result.charCodeAt(t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padRight$1(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2(receiver, pattern, start) {
      var match, t1, t2, i;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern == "string")
        return receiver.indexOf(pattern, start);
      if (pattern instanceof A.JSSyntaxRegExp) {
        match = pattern._execGlobal$2(receiver, start);
        return match == null ? -1 : match._match.index;
      }
      for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
        if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1(receiver, pattern) {
      return this.indexOf$2(receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1(receiver, pattern) {
      return this.lastIndexOf$2(receiver, pattern, null);
    },
    contains$1(receiver, other) {
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this.__internal$_message;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this._string.length;
    },
    $index(_, i) {
      var t1;
      A._asInt(i);
      t1 = this._string;
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      return t1.charCodeAt(i);
    }
  };
  A.nullFuture_closure.prototype = {
    call$0() {
      return A.Future_Future$value(null, type$.Null);
    },
    $signature: 0
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    every$1(_, test) {
      var $length, i, _this = this;
      A._instanceType(_this)._eval$1("bool(ListIterable.E)")._as(test);
      $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (!A.boolConversionCheck(test.call$1(_this.elementAt$1(0, i))))
          return false;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return true;
    },
    any$1(_, test) {
      var $length, i, _this = this;
      A._instanceType(_this)._eval$1("bool(ListIterable.E)")._as(test);
      $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (A.boolConversionCheck(test.call$1(_this.elementAt$1(0, i))))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    where$1(_, test) {
      return this.super$Iterable$where(0, A._instanceType(this)._eval$1("bool(ListIterable.E)")._as(test));
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    },
    fold$1$2(_, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      $T._as(initialValue);
      A._instanceType(_this)._bind$1($T)._eval$1("1(1,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, true, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      var i, _this = this,
        result = A.LinkedHashSet_LinkedHashSet(A._instanceType(_this)._eval$1("ListIterable.E"));
      for (i = 0; i < _this.get$length(_this); ++i)
        result.add$1(0, _this.elementAt$1(0, i));
      return result;
    }
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this.__internal$_start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(0), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this.__internal$_start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    take$1(_, count) {
      var endOrLength, t1, newEnd, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      endOrLength = _this._endOrLength;
      t1 = _this.__internal$_start;
      newEnd = t1 + count;
      if (endOrLength == null)
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      else {
        if (endOrLength < newEnd)
          return _this;
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      }
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = _this.$ti._precomputed1;
        return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), growable, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.ListIterator.prototype = {
    get$current(_) {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current(t1)));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current(_) {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return new A.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (A.boolConversionCheck(t2.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    get$current(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    },
    $isIterator: 1
  };
  A.ExpandIterable.prototype = {
    get$iterator(_) {
      var t1 = this.$ti;
      return new A.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, B.C_EmptyIterator, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("ExpandIterator<1,2>"));
    }
  };
  A.ExpandIterator.prototype = {
    get$current(_) {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$__internal$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current(t1))));
        } else
          return false;
      }
      t1 = _this._currentExpansion;
      _this.set$__internal$_current(t1.get$current(t1));
      return true;
    },
    set$_currentExpansion(_currentExpansion) {
      this._currentExpansion = this.$ti._eval$1("Iterator<2>?")._as(_currentExpansion);
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.TakeIterable.prototype = {
    get$iterator(_) {
      return new A.TakeIterator(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, A._instanceType(this)._eval$1("TakeIterator<1>"));
    }
  };
  A.EfficientLengthTakeIterable.prototype = {
    get$length(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  A.TakeIterator.prototype = {
    moveNext$0() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current(_) {
      var t1;
      if (this._remaining < 0) {
        this.$ti._precomputed1._as(null);
        return null;
      }
      t1 = this._iterator;
      return t1.get$current(t1);
    },
    $isIterator: 1
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    },
    $isIterator: 1
  };
  A.SkipWhileIterable.prototype = {
    get$iterator(_) {
      return new A.SkipWhileIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("SkipWhileIterator<1>"));
    }
  };
  A.SkipWhileIterator.prototype = {
    moveNext$0() {
      var t1, t2, _this = this;
      if (!_this._hasSkipped) {
        _this._hasSkipped = true;
        for (t1 = _this._iterator, t2 = _this._f; t1.moveNext$0();)
          if (!A.boolConversionCheck(t2.call$1(t1.get$current(t1))))
            return true;
      }
      return _this._iterator.moveNext$0();
    },
    get$current(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    },
    $isIterator: 1
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    contains$1(_, element) {
      return false;
    },
    every$1(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      return true;
    },
    any$1(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      return false;
    },
    join$1(_, separator) {
      return "";
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    where$1(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      return this;
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = this.$ti._precomputed1;
      return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      return A.LinkedHashSet_LinkedHashSet(this.$ti._precomputed1);
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.FollowedByIterable.prototype = {
    get$iterator(_) {
      return new A.FollowedByIterator(J.get$iterator$ax(this.__internal$_first), this.__internal$_second, A._instanceType(this)._eval$1("FollowedByIterator<1>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_first) + this.__internal$_second.get$length(0);
    },
    get$isEmpty(_) {
      var t1;
      if (J.get$isEmpty$asx(this.__internal$_first)) {
        t1 = this.__internal$_second;
        t1 = t1._collection$_head === t1._collection$_tail;
      } else
        t1 = false;
      return t1;
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.__internal$_first) || !this.__internal$_second.get$isEmpty(0);
    },
    contains$1(_, value) {
      return J.contains$1$asx(this.__internal$_first, value) || this.__internal$_second.contains$1(0, value);
    }
  };
  A.EfficientLengthFollowedByIterable.prototype = {$isEfficientLengthIterable: 1};
  A.FollowedByIterator.prototype = {
    moveNext$0() {
      var t1, _this = this;
      if (_this._currentIterator.moveNext$0())
        return true;
      t1 = _this._nextIterable;
      if (t1 != null) {
        _this.set$_currentIterator(A._ListQueueIterator$(t1, t1.$ti._precomputed1));
        _this.set$_nextIterable(null);
        return _this._currentIterator.moveNext$0();
      }
      return false;
    },
    get$current(_) {
      var t1 = this._currentIterator;
      return t1.get$current(t1);
    },
    set$_currentIterator(_currentIterator) {
      this._currentIterator = this.$ti._eval$1("Iterator<1>")._as(_currentIterator);
    },
    set$_nextIterable(_nextIterable) {
      this._nextIterable = this.$ti._eval$1("Iterable<1>?")._as(_nextIterable);
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current(t1)))
          return true;
      return false;
    },
    get$current(_) {
      var t1 = this._source;
      return this.$ti._precomputed1._as(t1.get$current(t1));
    },
    $isIterator: 1
  };
  A.NonNullsIterable.prototype = {
    get$_firstNonNull() {
      var t1, _i, element;
      for (t1 = this._source, _i = 0; _i < 13; ++_i) {
        element = t1[_i];
        if (element != null)
          return element;
      }
      return null;
    },
    get$isEmpty(_) {
      return this.get$_firstNonNull() == null;
    },
    get$isNotEmpty(_) {
      return this.get$_firstNonNull() != null;
    },
    get$iterator(_) {
      var t1 = this._source;
      return new A.NonNullsIterator(new J.ArrayIterator(t1, 13, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>")), this.$ti._eval$1("NonNullsIterator<1>"));
    }
  };
  A.NonNullsIterator.prototype = {
    moveNext$0() {
      var t1, t2, next;
      this.set$__internal$_current(null);
      for (t1 = this._source, t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        next = t1._current;
        if (next == null)
          next = t2._as(next);
        if (next != null) {
          this.set$__internal$_current(next);
          return true;
        }
      }
      return false;
    },
    get$current(_) {
      var t1 = this.__internal$_current;
      return t1 == null ? A.throwExpression(A.IterableElementError_noElement()) : t1;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1(receiver, value) {
      A.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1(_, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * B.JSString_methods.get$hashCode(this.__internal$_name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + this.__internal$_name + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this.__internal$_name === other.__internal$_name;
    },
    $isSymbol0: 1
  };
  A._Record_2_revoke_url.prototype = {$recipe: "+revoke,url(1,2)", $shape: 1};
  A._Record_2_runner_script.prototype = {$recipe: "+runner,script(1,2)", $shape: 2};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      A.ConstantMap__throwUnmodifiable();
    },
    remove$1(_, key) {
      A.ConstantMap__throwUnmodifiable();
    },
    map$2$1(_, transform, K2, V2) {
      var result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      this.forEach$1(0, new A.ConstantMap_map_closure(this, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), result));
      return result;
    },
    map$1(_, transform) {
      var t1 = type$.dynamic;
      return this.map$2$1(0, transform, t1, t1);
    },
    $isMap: 1
  };
  A.ConstantMap_map_closure.prototype = {
    call$2(key, value) {
      var t1 = A._instanceType(this.$this),
        entry = this.transform.call$2(t1._precomputed1._as(key), t1._rest[1]._as(value));
      this.result.$indexSet(0, entry.key, entry.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this._values.length;
    },
    get$_keys() {
      var keys = this.$keys;
      if (keys == null) {
        keys = Object.keys(this._jsIndex);
        this.$keys = keys;
      }
      return keys;
    },
    containsKey$1(_, key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsIndex.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(0, key))
        return null;
      return this._values[this._jsIndex[key]];
    },
    forEach$1(_, f) {
      var keys, values, t1, i;
      this.$ti._eval$1("~(1,2)")._as(f);
      keys = this.get$_keys();
      values = this._values;
      for (t1 = keys.length, i = 0; i < t1; ++i)
        f.call$2(keys[i], values[i]);
    },
    get$keys(_) {
      return new A._KeysOrValues(this.get$_keys(), this.$ti._eval$1("_KeysOrValues<1>"));
    },
    get$values(_) {
      return new A._KeysOrValues(this._values, this.$ti._eval$1("_KeysOrValues<2>"));
    }
  };
  A._KeysOrValues.prototype = {
    get$length(_) {
      return this._elements.length;
    },
    get$isEmpty(_) {
      return 0 === this._elements.length;
    },
    get$isNotEmpty(_) {
      return 0 !== this._elements.length;
    },
    get$iterator(_) {
      var t1 = this._elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    }
  };
  A._KeysOrValuesOrElementsIterator.prototype = {
    get$current(_) {
      var t1 = this.__js_helper$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this.__js_helper$_index;
      if (t1 >= _this._length) {
        _this.set$__js_helper$_current(null);
        return false;
      }
      _this.set$__js_helper$_current(_this._elements[t1]);
      ++_this.__js_helper$_index;
      return true;
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.ConstantSet.prototype = {
    add$1(_, value) {
      A._instanceType(this)._precomputed1._as(value);
      A.ConstantSet__throwUnmodifiable();
    }
  };
  A.ConstantStringSet.prototype = {
    get$length(_) {
      return this._length;
    },
    get$isEmpty(_) {
      return this._length === 0;
    },
    get$isNotEmpty(_) {
      return this._length !== 0;
    },
    get$iterator(_) {
      var t1, _this = this,
        keys = _this.$keys;
      if (keys == null) {
        keys = Object.keys(_this._jsIndex);
        _this.$keys = keys;
      }
      t1 = keys;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, _this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    },
    contains$1(_, key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsIndex.hasOwnProperty(key);
    },
    toSet$0(_) {
      return A.LinkedHashSet_LinkedHashSet$of(this, this.$ti._precomputed1);
    }
  };
  A.GeneralConstantSet.prototype = {
    get$length(_) {
      return this._elements.length;
    },
    get$isEmpty(_) {
      return this._elements.length === 0;
    },
    get$isNotEmpty(_) {
      return this._elements.length !== 0;
    },
    get$iterator(_) {
      var t1 = this._elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    },
    _getMap$0() {
      var t1, t2, _i, key, _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        t1 = _this.$ti;
        backingMap = new A.JsConstantLinkedHashMap(t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("JsConstantLinkedHashMap<1,2>"));
        for (t1 = _this._elements, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          backingMap.$indexSet(0, key, key);
        }
        _this.$map = backingMap;
      }
      return backingMap;
    },
    contains$1(_, key) {
      return this._getMap$0().containsKey$1(0, key);
    },
    toSet$0(_) {
      return A.LinkedHashSet_LinkedHashSet$of(this, this.$ti._precomputed1);
    }
  };
  A.Instantiation.prototype = {
    Instantiation$1(_genericClosure) {
      if (false)
        A.instantiatedGenericFunctionType(0, 0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation1 && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeTypeOfClosure(this) === A.getRuntimeTypeOfClosure(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeTypeOfClosure(this), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = B.JSArray_methods.join$1([A.createRuntimeType(this.$ti._precomputed1)], ", ");
      return this._genericClosure.toString$0(0) + " with " + ("<" + t1 + ">");
    }
  };
  A.Instantiation1.prototype = {
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    call$1(a0) {
      return this._genericClosure.call$1$1(a0, this.$ti._rest[0]);
    },
    call$4(a0, a1, a2, a3) {
      return this._genericClosure.call$1$4(a0, a1, a2, a3, this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this._memberName;
      if (t1 instanceof A.Symbol)
        return t1;
      return this._memberName = new A.Symbol(A._asString(t1));
    },
    get$positionalArguments() {
      var t1, t2, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return B.List_empty0;
      t1 = _this._arguments;
      t2 = J.getInterceptor$asx(t1);
      argumentCount = t2.get$length(t1) - J.get$length$asx(_this._namedArgumentNames) - _this._typeArgumentCount;
      if (argumentCount === 0)
        return B.List_empty0;
      list = [];
      for (index = 0; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments() {
      var t1, t2, namedArgumentCount, t3, t4, namedArgumentsStartIndex, map, i, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return B.Map_empty5;
      t1 = _this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = _this._arguments;
      t4 = J.getInterceptor$asx(t3);
      namedArgumentsStartIndex = t4.get$length(t3) - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return B.Map_empty5;
      map = new A.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i)
        map.$indexSet(0, new A.Symbol(A._asString(t2.$index(t1, i))), t4.$index(t3, namedArgumentsStartIndex + i));
      return new A.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  A.Primitives_initTicker_closure.prototype = {
    call$0() {
      return B.JSNumber_methods.floor$0(1000 * this.performance.now());
    },
    $signature: 78
  };
  A.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1;
      A._asString($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      B.JSArray_methods.add$1(this.namedArgumentList, $name);
      B.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 10
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    get$runtimeType(_) {
      var rti = A.closureFunctionType(this);
      return A.createRuntimeType(rti == null ? A.instanceType(this) : rti);
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A._CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A._Required.prototype = {};
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this._length;
    },
    get$isEmpty(_) {
      return this._length === 0;
    },
    get$isNotEmpty(_) {
      return this._length !== 0;
    },
    get$keys(_) {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(_, key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(_, key, ifAbsent) {
      var t2, value, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(0, key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    clear$0(_) {
      var _this = this;
      if (_this._length > 0) {
        _this._strings = _this._nums = _this.__js_helper$_rest = _this._first = _this._last = null;
        _this._length = 0;
        _this._modified$0();
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this._length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this._length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map._length;
    },
    get$isEmpty(_) {
      return this._map._length === 0;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this._map.containsKey$1(0, element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current(_) {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.JsIdentityLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A.JsConstantLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.constantHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 74
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 101
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 103
  };
  A._Record.prototype = {
    get$runtimeType(_) {
      return A.createRuntimeType(this._getRti$0());
    },
    _getRti$0() {
      return A.evaluateRtiForRecord(this.$recipe, this._getFieldValues$0());
    },
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var t2, separator, i, key, value,
        keys = this._fieldKeys$0(),
        values = this._getFieldValues$0(),
        t1 = (safe ? "" + "Record " : "") + "(";
      for (t2 = keys.length, separator = "", i = 0; i < t2; ++i, separator = ", ") {
        t1 += separator;
        key = keys[i];
        if (typeof key == "string")
          t1 = t1 + key + ": ";
        if (!(i < values.length))
          return A.ioore(values, i);
        value = values[i];
        t1 = safe ? t1 + A.Primitives_safeToString(value) : t1 + A.S(value);
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fieldKeys$0() {
      var t1,
        shapeTag = this.$shape;
      for (; $._Record__computedFieldKeys.length <= shapeTag;)
        B.JSArray_methods.add$1($._Record__computedFieldKeys, null);
      t1 = $._Record__computedFieldKeys[shapeTag];
      if (t1 == null) {
        t1 = this._computeFieldKeys$0();
        B.JSArray_methods.$indexSet($._Record__computedFieldKeys, shapeTag, t1);
      }
      return t1;
    },
    _computeFieldKeys$0() {
      var i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        t1 = type$.Object,
        result = J.JSArray_JSArray$allocateGrowable(arity, t1);
      for (i = 0; i < arity; ++i)
        result[i] = i;
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      return A.List_List$unmodifiable(result, t1);
    }
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this.$shape === other.$shape && J.$eq$(this._0, other._0) && J.$eq$(this._1, other._1);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, this._1, B.C_SentinelValue);
    }
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._AllMatchesIterable(this, string, start);
    },
    allMatches$1(_, string) {
      return this.allMatches$2(0, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      if (0 >= match.length)
        return A.ioore(match, -1);
      if (match.pop() != null)
        return null;
      return new A._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    matchAsPrefix$1(_, string) {
      return this.matchAsPrefix$2(0, string, 0);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$start(_) {
      return this._match.index;
    },
    get$end(_) {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this.__js_helper$_string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current(_) {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, _this = this,
        string = _this.__js_helper$_string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end(0);
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t3 = t1 + 1;
              if (t3 < t2) {
                if (!(t1 >= 0 && t1 < t2))
                  return A.ioore(string, t1);
                t1 = string.charCodeAt(t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  if (!(t3 >= 0))
                    return A.ioore(string, t3);
                  t1 = string.charCodeAt(t3);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this.__js_helper$_string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {
    get$end(_) {
      return this.start + this.pattern.length;
    },
    $index(_, g) {
      A._asInt(g);
      if (g !== 0)
        A.throwExpression(A.RangeError$value(g, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start(receiver) {
      return this.start;
    }
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current(_) {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    _readLocal$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(new A.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    },
    _readField$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
      return t1;
    },
    set$finalLocalValue(v) {
      var _this = this;
      if (_this.__late_helper$_value !== _this)
        throw A.wrapException(new A.LateError("Local '" + _this.__late_helper$_name + "' has already been initialized."));
      _this.__late_helper$_value = v;
    }
  };
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_EOZ;
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_mF8;
    },
    _setFloat64$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setFloat64(byteOffset, value, littleEndian);
    },
    $isTrustedGetRuntimeType: 1,
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw A.wrapException(A.ArgumentError$(skipCount, null));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asDouble(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_Ymk;
    },
    $isTrustedGetRuntimeType: 1,
    $isFloat32List: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_Ymk;
    },
    $isTrustedGetRuntimeType: 1,
    $isFloat64List: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_cot;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isInt16List: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_m1p;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isInt32List: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_woc;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isInt8List: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_2mh;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isUint16List: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_2mh;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isUint32List: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_9Bb;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isUint8ClampedList: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_CSc;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  A._Error.prototype = {
    toString$0(_) {
      return this._message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 6
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 92
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 2
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 2
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setInterval(A.convertDartClosureToJS(new A._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("Periodic timer."));
    },
    cancel$0(_) {
      var t1;
      if (self.setTimeout != null) {
        t1 = this._handle;
        if (t1 == null)
          return;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw A.wrapException(A.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._handle = null;
      t1._tick = 1;
      this.callback.call$0();
    },
    $signature: 1
  };
  A._TimerImpl$periodic_closure.prototype = {
    call$0() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = B.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    $signature: 2
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(_, value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 5
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 129
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 179
  };
  A._SyncStarIterator.prototype = {
    get$current(_) {
      var t1 = this._async$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    _resumeBody$2(errorCode, errorValue) {
      var body, t1, exception;
      errorCode = A._asInt(errorCode);
      errorValue = errorValue;
      body = this._async$_body;
      for (; true;)
        try {
          t1 = body(this, errorCode, errorValue);
          return t1;
        } catch (exception) {
          errorValue = exception;
          errorCode = 1;
        }
    },
    moveNext$0() {
      var nestedIterator, exception, value, suspendedBodies, _this = this, _null = null, errorValue = null, errorCode = 0;
      for (; true;) {
        nestedIterator = _this._nestedIterator;
        if (nestedIterator != null)
          try {
            if (nestedIterator.moveNext$0()) {
              _this.set$_async$_current(J.get$current$z(nestedIterator));
              return true;
            } else
              _this.set$_nestedIterator(_null);
          } catch (exception) {
            errorValue = exception;
            errorCode = 1;
            _this.set$_nestedIterator(_null);
          }
        value = _this._resumeBody$2(errorCode, errorValue);
        if (1 === value)
          return true;
        if (0 === value) {
          _this.set$_async$_current(_null);
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._async$_body = A._SyncStarIterator__terminatedBody;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._async$_body = suspendedBodies.pop();
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (2 === value) {
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (3 === value) {
          errorValue = _this._datum;
          _this._datum = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this.set$_async$_current(_null);
            _this._async$_body = A._SyncStarIterator__terminatedBody;
            throw errorValue;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._async$_body = suspendedBodies.pop();
          errorCode = 1;
          continue;
        }
        throw A.wrapException(A.StateError$("sync*"));
      }
      return false;
    },
    _yieldStar$1(iterable) {
      var t1, t2, _this = this;
      if (iterable instanceof A._SyncStarIterable) {
        t1 = iterable._outerHelper();
        t2 = _this._suspendedBodies;
        if (t2 == null)
          t2 = _this._suspendedBodies = [];
        B.JSArray_methods.add$1(t2, _this._async$_body);
        _this._async$_body = t1;
        return 2;
      } else {
        _this.set$_nestedIterator(J.get$iterator$ax(iterable));
        return 2;
      }
    },
    set$_async$_current(_current) {
      this._async$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_nestedIterator(_nestedIterator) {
      this._nestedIterator = this.$ti._eval$1("Iterator<1>?")._as(_nestedIterator);
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._BroadcastStream.prototype = {
    get$isBroadcast() {
      return true;
    }
  };
  A._BroadcastSubscription.prototype = {
    _onPause$0() {
    },
    _onResume$0() {
    },
    set$_async$_next(_next) {
      this._async$_next = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_next);
    },
    set$_async$_previous(_previous) {
      this._async$_previous = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_previous);
    }
  };
  A._BroadcastStreamController.prototype = {
    get$stream(_) {
      return new A._BroadcastStream(this, A._instanceType(this)._eval$1("_BroadcastStream<1>"));
    },
    get$_mayAddEvent() {
      return this._state < 4;
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      return t1 == null ? this._doneFuture = new A._Future($.Zone__current, type$._Future_void) : t1;
    },
    _removeListener$1(subscription) {
      var previous, next;
      A._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      previous = subscription._async$_previous;
      next = subscription._async$_next;
      if (previous == null)
        this.set$_firstSubscription(next);
      else
        previous.set$_async$_next(next);
      if (next == null)
        this.set$_lastSubscription(previous);
      else
        next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, t5, subscription, oldLast, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 4) !== 0)
        return A._DoneStreamSubscription$(onDone, t1._precomputed1);
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = onError != null ? 32 : 0;
      t5 = t1._eval$1("_BroadcastSubscription<1>");
      subscription = new A._BroadcastSubscription(_this, A._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._precomputed1), A._BufferingStreamSubscription__registerErrorHandler(t2, onError), A._BufferingStreamSubscription__registerDoneHandler(t2, onDone), t2, t3 | t4, t5);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
      t5._as(subscription);
      subscription._eventState = _this._state & 1;
      oldLast = _this._lastSubscription;
      _this.set$_lastSubscription(subscription);
      subscription.set$_async$_next(null);
      subscription.set$_async$_previous(oldLast);
      if (oldLast == null)
        _this.set$_firstSubscription(subscription);
      else
        oldLast.set$_async$_next(subscription);
      if (_this._firstSubscription == _this._lastSubscription)
        A._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1(sub) {
      var _this = this,
        t1 = A._instanceType(_this);
      sub = t1._eval$1("_BroadcastSubscription<1>")._as(t1._eval$1("StreamSubscription<1>")._as(sub));
      if (sub._async$_next === sub)
        return null;
      t1 = sub._eventState;
      if ((t1 & 2) !== 0)
        sub._eventState = t1 | 4;
      else {
        _this._removeListener$1(sub);
        if ((_this._state & 2) === 0 && _this._firstSubscription == null)
          _this._callOnCancel$0();
      }
      return null;
    },
    _recordPause$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _recordResume$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _addEventError$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add new events after calling close");
      return new A.StateError("Cannot add new events while doing an addStream");
    },
    add$1(_, data) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(data);
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    addError$2(error, stackTrace) {
      var replacement,
        t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      if (!this.get$_mayAddEvent())
        throw A.wrapException(this._addEventError$0());
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._sendError$2(error, stackTrace);
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0(_) {
      var t1, doneFuture, _this = this;
      if ((_this._state & 4) !== 0) {
        t1 = _this._doneFuture;
        t1.toString;
        return t1;
      }
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._state |= 4;
      doneFuture = _this._ensureDoneFuture$0();
      _this._sendDone$0();
      return doneFuture;
    },
    addStream$2$cancelOnError(_, stream, cancelOnError) {
      var addStreamState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("Stream<1>")._as(stream);
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._state |= 8;
      addStreamState = A._AddStreamState$(_this, stream, cancelOnError === true, t1._precomputed1);
      _this.set$_addStreamState(addStreamState);
      return addStreamState.addStreamFuture;
    },
    _async$_add$1(_, data) {
      this._sendData$1(A._instanceType(this)._precomputed1._as(data));
    },
    _addError$2(error, stackTrace) {
      this._sendError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _async$_close$0() {
      var t1 = this._addStreamState;
      t1.toString;
      this.set$_addStreamState(null);
      this._state &= 4294967287;
      t1.addStreamFuture._asyncComplete$1(null);
    },
    _forEachListener$1(action) {
      var t1, subscription, id, next, _this = this;
      A._instanceType(_this)._eval$1("~(_BufferingStreamSubscription<1>)")._as(action);
      t1 = _this._state;
      if ((t1 & 2) !== 0)
        throw A.wrapException(A.StateError$(string$.Cannotf));
      subscription = _this._firstSubscription;
      if (subscription == null)
        return;
      id = t1 & 1;
      _this._state = t1 ^ 3;
      for (; subscription != null;) {
        t1 = subscription._eventState;
        if ((t1 & 1) === id) {
          subscription._eventState = t1 | 2;
          action.call$1(subscription);
          t1 = subscription._eventState ^= 1;
          next = subscription._async$_next;
          if ((t1 & 4) !== 0)
            _this._removeListener$1(subscription);
          subscription._eventState &= 4294967293;
          subscription = next;
        } else
          subscription = subscription._async$_next;
      }
      _this._state &= 4294967293;
      if (_this._firstSubscription == null)
        _this._callOnCancel$0();
    },
    _callOnCancel$0() {
      if ((this._state & 4) !== 0) {
        var doneFuture = this._doneFuture;
        if ((doneFuture._state & 30) === 0)
          doneFuture._asyncComplete$1(null);
      }
      A._runGuarded(this.onCancel);
    },
    set$_firstSubscription(_firstSubscription) {
      this._firstSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_firstSubscription);
    },
    set$_lastSubscription(_lastSubscription) {
      this._lastSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_lastSubscription);
    },
    set$_addStreamState(_addStreamState) {
      this._addStreamState = A._instanceType(this)._eval$1("_AddStreamState<1>?")._as(_addStreamState);
    },
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._SyncBroadcastStreamController.prototype = {
    get$_mayAddEvent() {
      return A._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
    },
    _addEventError$0() {
      if ((this._state & 2) !== 0)
        return new A.StateError(string$.Cannotf);
      return this.super$_BroadcastStreamController$_addEventError();
    },
    _sendData$1(data) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(data);
      t1 = _this._firstSubscription;
      if (t1 == null)
        return;
      if (t1 === _this._lastSubscription) {
        _this._state |= 2;
        t1._async$_add$1(0, data);
        _this._state &= 4294967293;
        if (_this._firstSubscription == null)
          _this._callOnCancel$0();
        return;
      }
      _this._forEachListener$1(new A._SyncBroadcastStreamController__sendData_closure(_this, data));
    },
    _sendError$2(error, stackTrace) {
      if (this._firstSubscription == null)
        return;
      this._forEachListener$1(new A._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0() {
      var _this = this;
      if (_this._firstSubscription != null)
        _this._forEachListener$1(new A._SyncBroadcastStreamController__sendDone_closure(_this));
      else
        _this._doneFuture._asyncComplete$1(null);
    }
  };
  A._SyncBroadcastStreamController__sendData_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._async$_add$1(0, this.data);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._SyncBroadcastStreamController__sendError_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._addError$2(this.error, this.stackTrace);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._SyncBroadcastStreamController__sendDone_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._async$_close$0();
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._AsyncBroadcastStreamController.prototype = {
    _sendData$1(data) {
      var subscription,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      for (subscription = this._firstSubscription, t1 = t1._eval$1("_DelayedData<1>"); subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new A._DelayedData(data, t1));
    },
    _sendError$2(error, stackTrace) {
      var subscription;
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      var subscription = this._firstSubscription;
      if (subscription != null)
        for (; subscription != null; subscription = subscription._async$_next)
          subscription._addPending$1(B.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  };
  A.Future_Future_closure.prototype = {
    call$0() {
      var e, s, exception;
      try {
        this.result._complete$1(this.computation.call$0());
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._completeWithErrorCallback(this.result, e, s);
      }
    },
    $signature: 1
  };
  A.Future_Future$microtask_closure.prototype = {
    call$0() {
      var e, s, exception;
      try {
        this.result._complete$1(this.computation.call$0());
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._completeWithErrorCallback(this.result, e, s);
      }
    },
    $signature: 1
  };
  A.Future_Future$delayed_closure.prototype = {
    call$0() {
      var e, s, exception, _this = this,
        t1 = _this.computation;
      if (t1 == null) {
        _this.T._as(null);
        _this.result._complete$1(null);
      } else
        try {
          _this.result._complete$1(t1.call$0());
        } catch (exception) {
          e = A.unwrapException(exception);
          s = A.getTraceFromException(exception);
          A._completeWithErrorCallback(_this.result, e, s);
        }
    },
    $signature: 1
  };
  A.Future_wait_handleError.prototype = {
    call$2(theError, theStackTrace) {
      var t1, t2, _this = this;
      type$.Object._as(theError);
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        t1.error = theError;
        t1.stackTrace = theStackTrace;
        if (t2 === 0 || _this.eagerError)
          _this._future._completeError$2(theError, theStackTrace);
      } else if (t2 === 0 && !_this.eagerError) {
        t2 = t1.error;
        t2.toString;
        t1 = t1.stackTrace;
        t1.toString;
        _this._future._completeError$2(t2, t1);
      }
    },
    $signature: 23
  };
  A.Future_wait_closure.prototype = {
    call$1(value) {
      var remainingResults, valueList, t1, value0, t3, t4, _i, t5, _this = this,
        t2 = _this.T;
      t2._as(value);
      t3 = _this._box_0;
      remainingResults = --t3.remaining;
      valueList = t3.values;
      if (valueList != null) {
        J.$indexSet$ax(valueList, _this.pos, value);
        if (J.$eq$(remainingResults, 0)) {
          t1 = A._setArrayType([], t2._eval$1("JSArray<0>"));
          for (t3 = valueList, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
            value0 = t3[_i];
            t5 = value0;
            if (t5 == null)
              t5 = t2._as(t5);
            J.add$1$ax(t1, t5);
          }
          _this._future._completeWithValue$1(t1);
        }
      } else if (J.$eq$(remainingResults, 0) && !_this.eagerError) {
        t1 = t3.error;
        t1.toString;
        t3 = t3.stackTrace;
        t3.toString;
        _this._future._completeError$2(t1, t3);
      }
    },
    $signature() {
      return this.T._eval$1("Null(0)");
    }
  };
  A.Future_forEach_closure.prototype = {
    call$0() {
      var t2, result,
        t1 = this.iterator;
      if (!t1.moveNext$0())
        return false;
      t2 = t1._current;
      t1 = t2 == null ? t1.$ti._precomputed1._as(t2) : t2;
      result = this.action.call$1(t1);
      if (result instanceof A._Future)
        return result.then$1$1(A.async_Future__kTrue$closure(), type$.bool);
      return true;
    },
    $signature: 104
  };
  A.Future_doWhile_closure.prototype = {
    call$1(keepGoing) {
      var result, error, stackTrace, t1, t2, exception, error0, stackTrace0, replacement, t3, _this = this;
      A._asBool(keepGoing);
      for (t1 = type$.Future_bool, t2 = _this.action; keepGoing;) {
        result = null;
        try {
          result = t2.call$0();
        } catch (exception) {
          error = A.unwrapException(exception);
          stackTrace = A.getTraceFromException(exception);
          error0 = error;
          stackTrace0 = stackTrace;
          replacement = $.Zone__current.errorCallback$2(error0, stackTrace0);
          if (replacement != null) {
            error = replacement.error;
            stackTrace = replacement.stackTrace;
          } else {
            stackTrace = stackTrace0 == null ? A.AsyncError_defaultStackTrace(error0) : stackTrace0;
            error = error0;
          }
          _this.doneSignal._asyncCompleteError$2(error, stackTrace);
          return;
        }
        if (t1._is(result)) {
          t1 = result;
          t2 = _this.nextIteration;
          t3 = t2.__late_helper$_value;
          if (t3 === t2)
            A.throwExpression(A.LateError$localNI(t2.__late_helper$_name));
          t1.then$1$2$onError(t3, _this.doneSignal.get$_completeError(), type$.void);
          return;
        }
        keepGoing = result;
      }
      _this.doneSignal._complete$1(null);
    },
    $signature: 70
  };
  A.FutureExtensions_onError_onError.prototype = {
    call$2(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      if (!this.E._is(error))
        throw A.wrapException(error);
      return this.handleError.call$2(error, stackTrace);
    },
    $signature() {
      return this.T._eval$1("0/(Object,StackTrace)");
    }
  };
  A.TimeoutException.prototype = {
    toString$0(_) {
      var t1 = this.duration,
        result = t1 != null ? "TimeoutException after " + t1.toString$0(0) : "TimeoutException";
      return result + ": " + this.message;
    },
    $isException: 1,
    get$message(receiver) {
      return this.message;
    },
    get$duration(receiver) {
      return this.duration;
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var replacement,
        t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      if ((this.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._completeError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  A._AsyncCompleter.prototype = {
    complete$1(_, value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    complete$0(_) {
      return this.complete$1(0, null);
    },
    _completeError$2(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  A._SyncCompleter.prototype = {
    complete$1(_, value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    _completeError$2(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    _setChained$1(source) {
      this._state = this._state & 1 | 4;
      this._resultOrListeners = source;
    },
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        f = currentZone.registerUnaryCallback$2$1(f, $R._eval$1("0/"), t1._precomputed1);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future($.Zone__current, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$1(onError) {
      var t1 = this.$ti,
        t2 = $.Zone__current,
        result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        onError = A._registerErrorHandler(onError, t2);
      this._addListener$1(new A._FutureListener(result, 2, null, onError, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    whenComplete$1(action) {
      var t1, t2, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      t2 = $.Zone__current;
      result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        action = t2.registerCallback$1$1(action, type$.dynamic);
      this._addListener$1(new A._FutureListener(result, 8, action, null, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        _this._zone.scheduleMicrotask$1(new A._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new A._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          A._Future__chainCoreFutureSync(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setErrorObject$1(A.AsyncError$(error, stackTrace));
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      _this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteWithValue_closure(_this, value));
    },
    _chainFuture$1(value) {
      var t1 = this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        A._Future__chainCoreFutureAsync(value, this);
        return;
      }
      this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._state ^= 2;
      this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 1
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 1
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 6
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 28
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 1
  };
  A._Future__chainCoreFutureAsync_closure.prototype = {
    call$0() {
      A._Future__chainCoreFutureSync(this._box_0.source, this.target);
    },
    $signature: 1
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 1
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 1
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 1
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 135
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 1
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 1
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$isBroadcast() {
      return false;
    },
    map$1$1(_, convert, $S) {
      var t1 = A._instanceType(this);
      return new A._MapStream(t1._bind$1($S)._eval$1("1(Stream.T)")._as(convert), this, t1._eval$1("@<Stream.T>")._bind$1($S)._eval$1("_MapStream<1,2>"));
    },
    map$1(_, convert) {
      return this.map$1$1(0, convert, type$.dynamic);
    },
    get$length(_) {
      var t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_length_closure(t1, this), true, new A.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty(_) {
      var future = new A._Future($.Zone__current, type$._Future_bool),
        subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new A.Stream_isEmpty_closure(future), future.get$_completeError());
      subscription.onData$1(new A.Stream_isEmpty_closure0(this, subscription, future));
      return future;
    },
    toList$0(_) {
      var t1 = A._instanceType(this),
        result = A._setArrayType([], t1._eval$1("JSArray<Stream.T>")),
        future = new A._Future($.Zone__current, t1._eval$1("_Future<List<Stream.T>>"));
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_toList_closure(this, result), true, new A.Stream_toList_closure0(future, result), future.get$_completeError());
      return future;
    },
    get$first(_) {
      var future = new A._Future($.Zone__current, A._instanceType(this)._eval$1("_Future<Stream.T>")),
        subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new A.Stream_first_closure(future), future.get$_completeError());
      subscription.onData$1(new A.Stream_first_closure0(this, subscription, future));
      return future;
    }
  };
  A.Stream_Stream$fromFuture_closure.prototype = {
    call$1(value) {
      var t1 = this.controller;
      t1._async$_add$1(0, this.T._as(value));
      t1._closeUnchecked$0();
    },
    $signature() {
      return this.T._eval$1("Null(0)");
    }
  };
  A.Stream_Stream$fromFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1 = this.controller,
        t2 = error == null ? type$.Object._as(error) : error;
      t1._addError$2(t2, type$.StackTrace._as(stackTrace));
      t1._closeUnchecked$0();
    },
    $signature: 35
  };
  A.Stream_Stream$fromIterable_closure.prototype = {
    call$1(controller) {
      var e, s, t2, exception, zone, t1 = {};
      this.T._eval$1("MultiStreamController<0>")._as(controller);
      t1.iterator = null;
      try {
        t2 = this.elements;
        t1.iterator = t2.get$iterator(t2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        controller.addError$2(e, s);
        controller.close$0(0);
        return;
      }
      zone = $.Zone__current;
      t1.isScheduled = true;
      t2 = new A.Stream_Stream$fromIterable_closure_next(t1, controller, zone);
      controller.set$onResume(0, new A.Stream_Stream$fromIterable__closure(t1, zone, t2));
      zone.scheduleMicrotask$1(t2);
    },
    $signature() {
      return this.T._eval$1("~(MultiStreamController<0>)");
    }
  };
  A.Stream_Stream$fromIterable_closure_next.prototype = {
    call$0() {
      var hasNext, e, s, e0, s0, t2, exception, t3, _this = this,
        t1 = _this.controller;
      if ((t1._state & 1) !== 0)
        t2 = (t1.get$_subscription()._state & 4) !== 0;
      else
        t2 = true;
      if (t2) {
        _this._box_0.isScheduled = false;
        return;
      }
      hasNext = null;
      try {
        hasNext = _this._box_0.iterator.moveNext$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1.addErrorSync$2(e, s);
        t1.closeSync$0();
        return;
      }
      if (A.boolConversionCheck(hasNext)) {
        try {
          t2 = _this._box_0.iterator;
          t2 = t1.$ti._precomputed1._as(t2.get$current(t2));
          t3 = t1._state;
          if (t3 >= 4)
            A.throwExpression(t1._badEventState$0());
          if ((t3 & 1) !== 0)
            t1.get$_subscription()._async$_add$1(0, t2);
        } catch (exception) {
          e0 = A.unwrapException(exception);
          s0 = A.getTraceFromException(exception);
          t1.addErrorSync$2(e0, s0);
        }
        if ((t1._state & 1) !== 0) {
          t1 = t1.get$_subscription()._state;
          t1 = (t1 & 4) === 0;
        } else
          t1 = false;
        if (t1)
          _this.zone.scheduleMicrotask$1(_this);
        else
          _this._box_0.isScheduled = false;
      } else
        t1.closeSync$0();
    },
    $signature: 1
  };
  A.Stream_Stream$fromIterable__closure.prototype = {
    call$0() {
      var t1 = this._box_0;
      if (!t1.isScheduled) {
        t1.isScheduled = true;
        this.zone.scheduleMicrotask$1(this.next);
      }
    },
    $signature: 1
  };
  A.Stream_length_closure.prototype = {
    call$1(_) {
      A._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      ++this._box_0.count;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 1
  };
  A.Stream_isEmpty_closure.prototype = {
    call$0() {
      this.future._complete$1(true);
    },
    $signature: 1
  };
  A.Stream_isEmpty_closure0.prototype = {
    call$1(_) {
      A._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      A._cancelAndValue(this.subscription, this.future, false);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_toList_closure.prototype = {
    call$1(data) {
      B.JSArray_methods.add$1(this.result, A._instanceType(this.$this)._eval$1("Stream.T")._as(data));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_toList_closure0.prototype = {
    call$0() {
      this.future._complete$1(this.result);
    },
    $signature: 1
  };
  A.Stream_first_closure.prototype = {
    call$0() {
      var e, s, t1, exception;
      try {
        t1 = A.IterableElementError_noElement();
        throw A.wrapException(t1);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._completeWithErrorCallback(this.future, e, s);
      }
    },
    $signature: 1
  };
  A.Stream_first_closure0.prototype = {
    call$1(value) {
      A._cancelAndValue(this.subscription, this.future, A._instanceType(this.$this)._eval$1("Stream.T")._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.StreamView.prototype = {
    get$isBroadcast() {
      return this._stream.get$isBroadcast();
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      return this._stream.listen$4$cancelOnError$onDone$onError(A._instanceType(this)._eval$1("~(StreamView.T)?")._as(onData), cancelOnError, type$.nullable_void_Function._as(onDone), onError);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._StreamController.prototype = {
    get$stream(_) {
      return new A._ControllerStream(this, A._instanceType(this)._eval$1("_ControllerStream<1>"));
    },
    get$_pendingEvents() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = A._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData)._varData);
    },
    _ensurePendingEvents$0() {
      var events, t1, state, _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<1>"));
        return A._instanceType(_this)._eval$1("_PendingEvents<1>")._as(events);
      }
      t1 = A._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      events = state._varData;
      if (events == null)
        events = state._varData = new A._PendingEvents(t1._eval$1("_PendingEvents<1>"));
      return t1._eval$1("_PendingEvents<1>")._as(events);
    },
    get$_subscription() {
      var varData = this._varData;
      if ((this._state & 8) !== 0)
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData)._varData;
      return A._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add event after closing");
      return new A.StateError("Cannot add event while adding a stream");
    },
    addStream$2$cancelOnError(_, source, cancelOnError) {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("Stream<1>")._as(source);
      t2 = _this._state;
      if (t2 >= 4)
        throw A.wrapException(_this._badEventState$0());
      if ((t2 & 2) !== 0) {
        t1 = new A._Future($.Zone__current, type$._Future_dynamic);
        t1._asyncComplete$1(null);
        return t1;
      }
      t2 = _this._varData;
      t3 = cancelOnError === true;
      t4 = new A._Future($.Zone__current, type$._Future_dynamic);
      t5 = t1._eval$1("~(1)")._as(_this.get$_async$_add(_this));
      t6 = t3 ? A._AddStreamState_makeErrorHandler(_this) : _this.get$_addError();
      t6 = source.listen$4$cancelOnError$onDone$onError(t5, t3, _this.get$_async$_close(), t6);
      t3 = _this._state;
      if ((t3 & 1) !== 0 ? (_this.get$_subscription()._state & 4) !== 0 : (t3 & 2) === 0)
        t6.pause$0(0);
      _this._varData = new A._StreamControllerAddStreamState(t2, t4, t6, t1._eval$1("_StreamControllerAddStreamState<1>"));
      _this._state |= 8;
      return t4;
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new A._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1(_, value) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(value);
      if (_this._state >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._async$_add$1(0, value);
    },
    addError$2(error, stackTrace) {
      var replacement;
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", type$.Object);
      if (this._state >= 4)
        throw A.wrapException(this._badEventState$0());
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._addError$2(error, stackTrace);
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._closeUnchecked$0();
      return _this._ensureDoneFuture$0();
    },
    _closeUnchecked$0() {
      var t1 = this._state |= 4;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, B.C__DelayedDone);
    },
    _async$_add$1(_, value) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._state;
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new A._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    _addError$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new A._DelayedError(error, stackTrace));
    },
    _async$_close$0() {
      var _this = this,
        addState = A._instanceType(_this)._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      _this._varData = addState._varData;
      _this._state &= 4294967287;
      addState.addStreamFuture._asyncComplete$1(null);
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, t2, addState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 3) !== 0)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      subscription = A._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      t2 = _this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState._varData = subscription;
        addState.addSubscription.resume$0(0);
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new A._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._state & 8) !== 0)
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0(0);
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (cancelResult instanceof A._Future)
              result = cancelResult;
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            result0 = new A._Future($.Zone__current, type$._Future_void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.pause$0(0);
      A._runGuarded(_this.onPause);
    },
    _recordResume$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.resume$0(0);
      A._runGuarded(_this.onResume);
    },
    set$onListen(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onResume(_, onResume) {
      this.onResume = type$.nullable_void_Function._as(onResume);
    },
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      A._runGuarded(this.$this.onListen);
    },
    $signature: 1
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && (doneFuture._state & 30) === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 1
  };
  A._SyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.$ti._precomputed1._as(data);
      this.get$_subscription()._async$_add$1(0, data);
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0() {
      this.get$_subscription()._async$_close$0();
    }
  };
  A._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(data);
      this.get$_subscription()._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      this.get$_subscription()._addPending$1(B.C__DelayedDone);
    }
  };
  A._AsyncStreamController.prototype = {};
  A._SyncStreamController.prototype = {};
  A._ControllerStream.prototype = {
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A._ControllerStream && other._controller === this._controller;
    }
  };
  A._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0() {
      this._controller._recordPause$1(this);
    },
    _onResume$0() {
      this._controller._recordResume$1(this);
    }
  };
  A._StreamSinkWrapper.prototype = {$isSink: 1};
  A._AddStreamState.prototype = {
    cancel$0(_) {
      var cancel = this.addSubscription.cancel$0(0);
      return cancel.whenComplete$1(new A._AddStreamState_cancel_closure(this));
    }
  };
  A._AddStreamState_makeErrorHandler_closure.prototype = {
    call$2(e, s) {
      var t1 = this.controller;
      t1._addError$2(type$.Object._as(e), type$.StackTrace._as(s));
      t1._async$_close$0();
    },
    $signature: 28
  };
  A._AddStreamState_cancel_closure.prototype = {
    call$0() {
      this.$this.addStreamFuture._asyncComplete$1(null);
    },
    $signature: 2
  };
  A._StreamControllerAddStreamState.prototype = {};
  A._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      var _this = this;
      A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this.set$_async$_pending(pendingEvents);
      if (pendingEvents.lastPendingEvent != null) {
        _this._state = (_this._state | 128) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1(handleData) {
      var t1 = A._instanceType(this);
      this.set$_async$_onData(A._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(_BufferingStreamSubscription.T)?")._as(handleData), t1._eval$1("_BufferingStreamSubscription.T")));
    },
    onDone$1(handleDone) {
      this.set$_async$_onDone(A._BufferingStreamSubscription__registerDoneHandler(this._zone, type$.nullable_void_Function._as(handleDone)));
    },
    pause$0(_) {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 256 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 256) {
        t3 = _this._async$_pending;
        if (t3 != null)
          if (t3._state === 1)
            t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 64) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    resume$0(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 256) {
        t1 = _this._state = t1 - 256;
        if (t1 < 256)
          if ((t1 & 128) !== 0 && _this._async$_pending.lastPendingEvent != null)
            _this._async$_pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 64) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0(_) {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._async$_cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    asFuture$1$1(futureValue, $E) {
      var result, _this = this, t1 = {};
      t1.resultValue = null;
      if (!$E._is(null))
        throw A.wrapException(A.ArgumentError$notNull("futureValue"));
      $E._as(futureValue);
      t1.resultValue = futureValue;
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      _this.set$_async$_onDone(new A._BufferingStreamSubscription_asFuture_closure(t1, result));
      _this._state = (_this._state | 32) >>> 0;
      _this._onError = new A._BufferingStreamSubscription_asFuture_closure0(_this, result);
      return result;
    },
    asFuture$1$0($E) {
      return this.asFuture$1$1(null, $E);
    },
    _async$_cancel$0() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 128) !== 0) {
        t2 = _this._async$_pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 64) === 0)
        _this.set$_async$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _async$_add$1(_, data) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("_BufferingStreamSubscription.T")._as(data);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 64)
        _this._sendData$1(data);
      else
        _this._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<_BufferingStreamSubscription.T>")));
    },
    _addError$2(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 64)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _async$_close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 64)
        _this._sendDone$0();
      else
        _this._addPending$1(B.C__DelayedDone);
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var t1, _this = this,
        pending = _this._async$_pending;
      if (pending == null) {
        pending = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>"));
        _this.set$_async$_pending(pending);
      }
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 128) === 0) {
        t1 = (t1 | 128) >>> 0;
        _this._state = t1;
        if (t1 < 256)
          pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      t2 = _this._state;
      _this._state = (t2 | 64) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._async$_onData, data, t1);
      _this._state = (_this._state & 4294967231) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2(error, stackTrace) {
      var cancelFuture, _this = this,
        t1 = _this._state,
        t2 = new A._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._async$_cancel$0();
        cancelFuture = _this._cancelFuture;
        if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
          cancelFuture.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0() {
      var cancelFuture, _this = this,
        t1 = new A._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._async$_cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._state;
      _this._state = (t1 | 64) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967231) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 128) !== 0 && _this._async$_pending.lastPendingEvent == null) {
        t1 = _this._state = (t1 & 4294967167) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 256) {
            t2 = _this._async$_pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this.set$_async$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 64) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = (_this._state & 4294967231) >>> 0;
        _this._state = t1;
      }
      if ((t1 & 128) !== 0 && t1 < 256)
        _this._async$_pending.schedule$1(_this);
    },
    set$_async$_onData(_onData) {
      this._async$_onData = A._instanceType(this)._eval$1("~(_BufferingStreamSubscription.T)")._as(_onData);
    },
    set$_async$_onDone(_onDone) {
      this._async$_onDone = type$.void_Function._as(_onDone);
    },
    set$_async$_pending(_pending) {
      this._async$_pending = A._instanceType(this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(_pending);
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  A._BufferingStreamSubscription_asFuture_closure.prototype = {
    call$0() {
      this.result._complete$1(this._box_0.resultValue);
    },
    $signature: 1
  };
  A._BufferingStreamSubscription_asFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      var cancelFuture, t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      cancelFuture = this.$this.cancel$0(0);
      t1 = this.result;
      if (cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new A._BufferingStreamSubscription_asFuture__closure(t1, error, stackTrace));
      else
        t1._completeError$2(error, stackTrace);
    },
    $signature: 28
  };
  A._BufferingStreamSubscription_asFuture__closure.prototype = {
    call$0() {
      this.result._completeError$2(this.error, this.stackTrace);
    },
    $signature: 2
  };
  A._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 64) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t1._state = (t1._state & 4294967231) >>> 0;
    },
    $signature: 1
  };
  A._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 74) >>> 0;
      t1._zone.runGuarded$1(t1._async$_onDone);
      t1._state = (t1._state & 4294967231) >>> 0;
    },
    $signature: 1
  };
  A._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = A._instanceType(this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return this._controller._subscribe$4(t1._eval$1("~(1)?")._as(onData), onError, onDone, cancelOnError === true);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$cancelOnError$onError(onData, cancelOnError, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, onError);
    }
  };
  A._DelayedEvent.prototype = {
    set$next(_, next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next(receiver) {
      return this.next;
    }
  };
  A._DelayedData.prototype = {
    perform$1(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    }
  };
  A._DelayedError.prototype = {
    perform$1(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  };
  A._DelayedDone.prototype = {
    perform$1(dispatch) {
      dispatch._sendDone$0();
    },
    get$next(_) {
      return null;
    },
    set$next(_, _0) {
      throw A.wrapException(A.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  A._PendingEvents.prototype = {
    schedule$1(dispatch) {
      var t1, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      A.scheduleMicrotask(new A._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    },
    get$isEmpty(_) {
      return this.lastPendingEvent == null;
    },
    add$1(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next(0, $event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  A._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var t2, $event, nextEvent,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t2 = t1.$ti._eval$1("_EventDispatch<1>")._as(this.dispatch);
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next($event);
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        t1.lastPendingEvent = null;
      $event.perform$1(t2);
    },
    $signature: 1
  };
  A._DoneStreamSubscription.prototype = {
    onData$1(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
    },
    onDone$1(handleDone) {
      type$.nullable_void_Function._as(handleDone);
      if (this._state >= 0) {
        handleDone = this._zone.registerCallback$1$1(handleDone, type$.void);
        this.set$_async$_onDone(handleDone);
      }
    },
    pause$0(_) {
      var t1 = this._state;
      if (t1 >= 0)
        this._state = t1 + 2;
    },
    resume$0(_) {
      var _this = this,
        resumeState = _this._state - 2;
      if (resumeState < 0)
        return;
      if (resumeState === 0) {
        _this._state = 1;
        A.scheduleMicrotask(_this.get$_onMicrotask());
      } else
        _this._state = resumeState;
    },
    cancel$0(_) {
      this._state = -1;
      this.set$_async$_onDone(null);
      return $.$get$Future__nullFuture();
    },
    asFuture$1$1(futureValue, $E) {
      var result, t1 = {};
      t1.resultValue = null;
      if (!$E._is(null))
        throw A.wrapException(A.ArgumentError$notNull("futureValue"));
      $E._as(futureValue);
      t1.resultValue = futureValue;
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      if (this._state >= 0)
        this.set$_async$_onDone(this._zone.registerCallback$1$1(new A._DoneStreamSubscription_asFuture_closure(t1, result), type$.void));
      return result;
    },
    asFuture$1$0($E) {
      return this.asFuture$1$1(null, $E);
    },
    _onMicrotask$0() {
      var _0_0, _this = this,
        unscheduledState = _this._state - 1;
      if (unscheduledState === 0) {
        _this._state = -1;
        _0_0 = _this._async$_onDone;
        if (_0_0 != null) {
          _this.set$_async$_onDone(null);
          _this._zone.runGuarded$1(_0_0);
        }
      } else
        _this._state = unscheduledState;
    },
    set$_async$_onDone(_onDone) {
      this._async$_onDone = type$.nullable_void_Function._as(_onDone);
    },
    $isStreamSubscription: 1
  };
  A._DoneStreamSubscription_asFuture_closure.prototype = {
    call$0() {
      this.result._completeWithValue$1(this._box_0.resultValue);
    },
    $signature: 1
  };
  A._StreamIterator.prototype = {
    get$current(_) {
      var _this = this;
      if (_this._async$_hasValue)
        return _this.$ti._precomputed1._as(_this._stateData);
      return _this.$ti._precomputed1._as(null);
    },
    moveNext$0() {
      var future, _this = this,
        subscription = _this._subscription;
      if (subscription != null) {
        if (_this._async$_hasValue) {
          future = new A._Future($.Zone__current, type$._Future_bool);
          _this._stateData = future;
          _this._async$_hasValue = false;
          subscription.resume$0(0);
          return future;
        }
        throw A.wrapException(A.StateError$("Already waiting for next."));
      }
      return _this._initializeOrDone$0();
    },
    _initializeOrDone$0() {
      var future, subscription, _this = this,
        stateData = _this._stateData;
      if (stateData != null) {
        _this.$ti._eval$1("Stream<1>")._as(stateData);
        future = new A._Future($.Zone__current, type$._Future_bool);
        _this._stateData = future;
        subscription = stateData.listen$4$cancelOnError$onDone$onError(_this.get$_async$_onData(), true, _this.get$_async$_onDone(), _this.get$_onError());
        if (_this._stateData != null)
          _this.set$_subscription(subscription);
        return future;
      }
      return $.$get$Future__falseFuture();
    },
    cancel$0(_) {
      var _this = this,
        subscription = _this._subscription,
        stateData = _this._stateData;
      _this._stateData = null;
      if (subscription != null) {
        _this.set$_subscription(null);
        if (!_this._async$_hasValue)
          type$._Future_bool._as(stateData)._asyncComplete$1(false);
        else
          _this._async$_hasValue = false;
        return subscription.cancel$0(0);
      }
      return $.$get$Future__nullFuture();
    },
    _async$_onData$1(data) {
      var moveNextFuture, t1, _this = this;
      _this.$ti._precomputed1._as(data);
      if (_this._subscription == null)
        return;
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this._stateData = data;
      _this._async$_hasValue = true;
      moveNextFuture._complete$1(true);
      if (_this._async$_hasValue) {
        t1 = _this._subscription;
        if (t1 != null)
          t1.pause$0(0);
      }
    },
    _onError$2(error, stackTrace) {
      var subscription, moveNextFuture, _this = this;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      subscription = _this._subscription;
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this.set$_subscription(null);
      _this._stateData = null;
      if (subscription != null)
        moveNextFuture._completeError$2(error, stackTrace);
      else
        moveNextFuture._asyncCompleteError$2(error, stackTrace);
    },
    _async$_onDone$0() {
      var _this = this,
        subscription = _this._subscription,
        moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this.set$_subscription(null);
      _this._stateData = null;
      if (subscription != null)
        moveNextFuture._completeWithValue$1(false);
      else
        moveNextFuture._asyncCompleteWithValue$1(false);
    },
    set$_subscription(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A._EmptyStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      return A._DoneStreamSubscription$(type$.nullable_void_Function._as(onDone), t1._precomputed1);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    get$isBroadcast() {
      return true;
    }
  };
  A._MultiStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var controller, _null = null,
        t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      controller = new A._MultiStreamController(_null, _null, _null, _null, t1._eval$1("_MultiStreamController<1>"));
      controller.set$onListen(new A._MultiStream_listen_closure(this, controller));
      return controller._subscribe$4(onData, onError, onDone, cancelOnError === true);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    get$isBroadcast() {
      return this.isBroadcast;
    }
  };
  A._MultiStream_listen_closure.prototype = {
    call$0() {
      this.$this._async$_onListen.call$1(this.controller);
    },
    $signature: 1
  };
  A._MultiStreamController.prototype = {
    addErrorSync$2(error, stackTrace) {
      var t1;
      type$.nullable_StackTrace._as(stackTrace);
      t1 = this._state;
      if (t1 >= 4)
        throw A.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0) {
        t1 = this.get$_subscription();
        t1._addError$2(error, stackTrace == null ? B._StringStackTrace_uwd : stackTrace);
      }
    },
    closeSync$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return;
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      t1 |= 4;
      _this._state = t1;
      if ((t1 & 1) !== 0)
        _this.get$_subscription()._async$_close$0();
    },
    get$stream(_) {
      throw A.wrapException(A.UnsupportedError$("Not available"));
    },
    $isMultiStreamController: 1
  };
  A._cancelAndValue_closure.prototype = {
    call$0() {
      return this.future._complete$1(this.value);
    },
    $signature: 1
  };
  A._ForwardingStream.prototype = {
    get$isBroadcast() {
      return this._async$_source.get$isBroadcast();
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t2, t3, t4, t5,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t2 = t1._rest[1];
      t3 = $.Zone__current;
      t4 = cancelOnError === true ? 1 : 0;
      t5 = onError != null ? 32 : 0;
      t2 = new A._ForwardingStreamSubscription(this, A._BufferingStreamSubscription__registerDataHandler(t3, onData, t2), A._BufferingStreamSubscription__registerErrorHandler(t3, onError), A._BufferingStreamSubscription__registerDoneHandler(t3, onDone), t3, t4 | t5, t1._eval$1("@<1>")._bind$1(t2)._eval$1("_ForwardingStreamSubscription<1,2>"));
      t2.set$_subscription(this._async$_source.listen$3$onDone$onError(t2.get$_handleData(), t2.get$_handleDone(), t2.get$_async$_handleError()));
      return t2;
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$cancelOnError$onError(onData, cancelOnError, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, onError);
    }
  };
  A._ForwardingStreamSubscription.prototype = {
    _async$_add$1(_, data) {
      this.$ti._rest[1]._as(data);
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_add(0, data);
    },
    _addError$2(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.pause$0(0);
    },
    _onResume$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.resume$0(0);
    },
    _onCancel$0() {
      var subscription = this._subscription;
      if (subscription != null) {
        this.set$_subscription(null);
        return subscription.cancel$0(0);
      }
      return null;
    },
    _handleData$1(data) {
      this._stream._handleData$2(this.$ti._precomputed1._as(data), this);
    },
    _async$_handleError$2(error, stackTrace) {
      var t1;
      type$.StackTrace._as(stackTrace);
      t1 = error == null ? type$.Object._as(error) : error;
      this._stream.$ti._eval$1("_EventSink<2>")._as(this)._addError$2(t1, stackTrace);
    },
    _handleDone$0() {
      this._stream.$ti._eval$1("_EventSink<2>")._as(this)._async$_close$0();
    },
    set$_subscription(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A._MapStream.prototype = {
    _handleData$2(inputEvent, sink) {
      var outputEvent, e, s, exception, error, stackTrace, replacement,
        t1 = this.$ti;
      t1._precomputed1._as(inputEvent);
      t1._eval$1("_EventSink<2>")._as(sink);
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        error = e;
        stackTrace = s;
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        }
        sink._addError$2(error, stackTrace);
        return;
      }
      sink._async$_add$1(0, outputEvent);
    }
  };
  A._ZoneFunction.prototype = {};
  A._ZoneSpecification.prototype = {$isZoneSpecification: 1};
  A._ZoneDelegate.prototype = {$isZoneDelegate: 1};
  A._Zone.prototype = {
    _processUncaughtError$3(zone, error, stackTrace) {
      var implZone, handler, parentDelegate, parentZone, currentZone, e, s, implementation, t1, exception;
      type$.StackTrace._as(stackTrace);
      implementation = this.get$_handleUncaughtError();
      implZone = implementation.zone;
      if (implZone === B.C__RootZone) {
        A._rootHandleError(error, stackTrace);
        return;
      }
      handler = implementation.$function;
      parentDelegate = implZone.get$_parentDelegate();
      t1 = J.get$parent$x(implZone);
      t1.toString;
      parentZone = t1;
      currentZone = $.Zone__current;
      try {
        $.Zone__current = parentZone;
        handler.call$5(implZone, parentDelegate, zone, error, stackTrace);
        $.Zone__current = currentZone;
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current = currentZone;
        t1 = error === e ? stackTrace : s;
        parentZone._processUncaughtError$3(implZone, e, t1);
      }
    },
    $isZone: 1
  };
  A._CustomZone.prototype = {
    get$_delegate() {
      var t1 = this._delegateCache;
      return t1 == null ? this._delegateCache = new A._ZoneDelegate(this) : t1;
    },
    get$_parentDelegate() {
      return this.parent.get$_delegate();
    },
    get$errorZone() {
      return this._handleUncaughtError.zone;
    },
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        this.run$1$1(f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        this.runUnary$2$2(f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        this.runBinary$3$3(f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._CustomZone_bindCallback_closure(this, this.registerCallback$1$1($R._eval$1("0()")._as(f), $R), $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new A._CustomZone_bindUnaryCallback_closure(this, this.registerUnaryCallback$2$1($R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f), $R, $T), $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._CustomZone_bindCallbackGuarded_closure(this, this.registerCallback$1$1(type$.void_Function._as(f), type$.void));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._CustomZone_bindUnaryCallbackGuarded_closure(this, this.registerUnaryCallback$2$1($T._eval$1("~(0)")._as(f), type$.void, $T), $T);
    },
    $index(_, key) {
      var value,
        t1 = this._async$_map,
        result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(0, key))
        return result;
      value = this.parent.$index(0, key);
      if (value != null)
        t1.$indexSet(0, key, value);
      return value;
    },
    handleUncaughtError$2(error, stackTrace) {
      this._processUncaughtError$3(this, error, type$.StackTrace._as(stackTrace));
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      var implementation = this._fork,
        t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, specification, zoneValues);
    },
    run$1$1(f, $R) {
      var implementation, t1;
      $R._eval$1("0()")._as(f);
      implementation = this._run;
      t1 = implementation.zone;
      return implementation.$function.call$1$4(t1, t1.get$_parentDelegate(), this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      implementation = this._runUnary;
      t1 = implementation.zone;
      return implementation.$function.call$2$5(t1, t1.get$_parentDelegate(), this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      implementation = this._runBinary;
      t1 = implementation.zone;
      return implementation.$function.call$3$6(t1, t1.get$_parentDelegate(), this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1(callback, $R) {
      var implementation, t1;
      $R._eval$1("0()")._as(callback);
      implementation = this._registerCallback;
      t1 = implementation.zone;
      return implementation.$function.call$1$4(t1, t1.get$_parentDelegate(), this, callback, $R);
    },
    registerUnaryCallback$2$1(callback, $R, $T) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(callback);
      implementation = this._registerUnaryCallback;
      t1 = implementation.zone;
      return implementation.$function.call$2$4(t1, t1.get$_parentDelegate(), this, callback, $R, $T);
    },
    registerBinaryCallback$3$1(callback, $R, T1, T2) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(callback);
      implementation = this._registerBinaryCallback;
      t1 = implementation.zone;
      return implementation.$function.call$3$4(t1, t1.get$_parentDelegate(), this, callback, $R, T1, T2);
    },
    errorCallback$2(error, stackTrace) {
      var implementation, implementationZone;
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", type$.Object);
      implementation = this._errorCallback;
      implementationZone = implementation.zone;
      if (implementationZone === B.C__RootZone)
        return null;
      return implementation.$function.call$5(implementationZone, implementationZone.get$_parentDelegate(), this, error, stackTrace);
    },
    scheduleMicrotask$1(f) {
      var implementation, t1;
      type$.void_Function._as(f);
      implementation = this._scheduleMicrotask;
      t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, f);
    },
    createTimer$2(duration, f) {
      var implementation, t1;
      type$.void_Function._as(f);
      implementation = this._createTimer;
      t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, duration, f);
    },
    createPeriodicTimer$2(duration, f) {
      var implementation, t1;
      type$.void_Function_Timer._as(f);
      implementation = this._createPeriodicTimer;
      t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, duration, f);
    },
    print$1(_, line) {
      var implementation = this._print,
        t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, line);
    },
    set$_registerCallback(_registerCallback) {
      this._registerCallback = type$._ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function._as(_registerCallback);
    },
    set$_registerUnaryCallback(_registerUnaryCallback) {
      this._registerUnaryCallback = type$._ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B._as(_registerUnaryCallback);
    },
    set$_registerBinaryCallback(_registerBinaryCallback) {
      this._registerBinaryCallback = type$._ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C._as(_registerBinaryCallback);
    },
    set$_errorCallback(_errorCallback) {
      this._errorCallback = type$._ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace._as(_errorCallback);
    },
    set$_print(_print) {
      this._print = type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_String._as(_print);
    },
    set$_handleUncaughtError(_handleUncaughtError) {
      this._handleUncaughtError = type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace._as(_handleUncaughtError);
    },
    get$_run() {
      return this._run;
    },
    get$_runUnary() {
      return this._runUnary;
    },
    get$_runBinary() {
      return this._runBinary;
    },
    get$_registerCallback() {
      return this._registerCallback;
    },
    get$_registerUnaryCallback() {
      return this._registerUnaryCallback;
    },
    get$_registerBinaryCallback() {
      return this._registerBinaryCallback;
    },
    get$_errorCallback() {
      return this._errorCallback;
    },
    get$_scheduleMicrotask() {
      return this._scheduleMicrotask;
    },
    get$_createTimer() {
      return this._createTimer;
    },
    get$_createPeriodicTimer() {
      return this._createPeriodicTimer;
    },
    get$_print() {
      return this._print;
    },
    get$_fork() {
      return this._fork;
    },
    get$_handleUncaughtError() {
      return this._handleUncaughtError;
    },
    get$parent(receiver) {
      return this.parent;
    },
    get$_async$_map() {
      return this._async$_map;
    }
  };
  A._CustomZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.registered, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._CustomZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.registered, t1._as(arg), _this.R, t1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A._CustomZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.registered);
    },
    $signature: 1
  };
  A._CustomZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.registered, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 1
  };
  A._RootZone.prototype = {
    get$_run() {
      return B._ZoneFunction__RootZone__rootRun;
    },
    get$_runUnary() {
      return B._ZoneFunction__RootZone__rootRunUnary;
    },
    get$_runBinary() {
      return B._ZoneFunction__RootZone__rootRunBinary;
    },
    get$_registerCallback() {
      return B._ZoneFunction__RootZone__rootRegisterCallback;
    },
    get$_registerUnaryCallback() {
      return B._ZoneFunction_QOa;
    },
    get$_registerBinaryCallback() {
      return B._ZoneFunction_qxw;
    },
    get$_errorCallback() {
      return B._ZoneFunction__RootZone__rootErrorCallback;
    },
    get$_scheduleMicrotask() {
      return B._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$_createTimer() {
      return B._ZoneFunction__RootZone__rootCreateTimer;
    },
    get$_createPeriodicTimer() {
      return B._ZoneFunction_kWM;
    },
    get$_print() {
      return B._ZoneFunction__RootZone__rootPrint;
    },
    get$_fork() {
      return B._ZoneFunction__RootZone__rootFork;
    },
    get$_handleUncaughtError() {
      return B._ZoneFunction_NIe;
    },
    get$parent(_) {
      return null;
    },
    get$_async$_map() {
      return $.$get$_RootZone__rootMap();
    },
    get$_delegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null ? $._RootZone__rootDelegate = new A._ZoneDelegate(this) : t1;
    },
    get$_parentDelegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null ? $._RootZone__rootDelegate = new A._ZoneDelegate(this) : t1;
    },
    get$errorZone() {
      return this;
    },
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        A._rootRunBinary(null, null, this, f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new A._RootZone_bindUnaryCallback_closure(this, $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f), $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    $index(_, key) {
      return null;
    },
    handleUncaughtError$2(error, stackTrace) {
      A._rootHandleError(error, type$.StackTrace._as(stackTrace));
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      return A._rootFork(null, null, this, specification, zoneValues);
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1(f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    registerUnaryCallback$2$1(f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    errorCallback$2(error, stackTrace) {
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    scheduleMicrotask$1(f) {
      A._rootScheduleMicrotask(null, null, this, type$.void_Function._as(f));
    },
    createTimer$2(duration, f) {
      return A.Timer__createTimer(duration, type$.void_Function._as(f));
    },
    createPeriodicTimer$2(duration, f) {
      return A.Timer__createPeriodicTimer(duration, type$.void_Function_Timer._as(f));
    },
    print$1(_, line) {
      A.printString(line);
    }
  };
  A._RootZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._RootZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.f, t1._as(arg), _this.R, t1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 1
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    get$keys(_) {
      return new A._HashMapKeyIterable(this, A._instanceType(this)._eval$1("_HashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A._HashMapKeyIterable(this, t1._eval$1("_HashMapKeyIterable<1>")), new A._HashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(_, key) {
      var strings, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(0, key);
    },
    _get$1(_, key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = A._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        A._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._collection$_keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._collection$_keys = null;
        }
      }
    },
    remove$1(_, key) {
      var t1 = this._collection$_removeHashTableEntry$2(this._collection$_strings, key);
      return t1;
    },
    forEach$1(_, action) {
      var keys, $length, t2, i, key, t3, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._computeKeys$0();
      for ($length = keys.length, t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2._as(key);
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
        if (keys !== _this._collection$_keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._collection$_keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_keys = result;
    },
    _collection$_addHashTableEntry$3(table, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._collection$_keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _collection$_removeHashTableEntry$2(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = A._instanceType(this)._rest[1]._as(A._HashMap__getTableEntry(table, key));
        delete table[key];
        --this._collection$_length;
        this._collection$_keys = null;
        return value;
      } else
        return null;
    },
    _computeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    }
  };
  A._HashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A._IdentityHashMap.prototype = {
    _computeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_map._collection$_length !== 0;
    },
    get$iterator(_) {
      var t1 = this._collection$_map;
      return new A._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    },
    contains$1(_, element) {
      return this._collection$_map.containsKey$1(0, element);
    }
  };
  A._HashMapKeyIterator.prototype = {
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._collection$_keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1._collection$_keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A._LinkedCustomHashMap.prototype = {
    $index(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$JsLinkedHashMap$internalSet(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; ++i)
        if (A.boolConversionCheck(t2.call$2(t1._as(bucket[i].hashMapCellKey), t1._as(key))))
          return i;
      return -1;
    }
  };
  A._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 9
  };
  A._LinkedHashSet.prototype = {
    _newSet$0() {
      return new A._LinkedHashSet(A._instanceType(this)._eval$1("_LinkedHashSet<1>"));
    },
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._collection$_modifications, A._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(strings[object]) != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(nums[object]) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(0, element);
    },
    _add$1(_, element) {
      var rest, hash, bucket, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var _this = this;
      if (typeof object == "string" && object !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object == "number" && (object & 1073741823) === object)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(0, object);
    },
    _remove$1(_, object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      _this._collection$_unlinkCell$1(cell);
      return true;
    },
    clear$0(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._collection$_first = _this._collection$_last = null;
        _this._collection$_length = 0;
        _this._collection$_modified$0();
      }
    },
    _collection$_addHashTableEntry$2(table, element) {
      A._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_removeHashTableEntry$2(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = type$.nullable__LinkedHashSetCell._as(table[element]);
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0() {
      this._collection$_modifications = this._collection$_modifications + 1 & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(A._instanceType(_this)._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        t1 = _this._collection$_last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._collection$_last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    },
    $isLinkedHashSet: 1
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.UnmodifiableListView.prototype = {
    get$length(_) {
      var t1 = this._collection$_source;
      return t1.get$length(t1);
    },
    $index(_, index) {
      var t1 = this._collection$_source;
      return t1.elementAt$1(t1, A._asInt(index));
    }
  };
  A.HashMap_HashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 29
  };
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 29
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var $length, i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (!A.boolConversionCheck(test.call$1(this.$index(receiver, i))))
          return false;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    any$1(receiver, test) {
      var $length, i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (A.boolConversionCheck(test.call$1(this.$index(receiver, i))))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    where$1(receiver, test) {
      var t1 = A.instanceType(receiver);
      return new A.WhereIterable(receiver, t1._eval$1("bool(ListBase.E)")._as(test), t1._eval$1("WhereIterable<ListBase.E>"));
    },
    whereType$1$0(receiver, $T) {
      return new A.WhereTypeIterable(receiver, $T._eval$1("WhereTypeIterable<0>"));
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListBase.E)")._as(f), t1._eval$1("@<ListBase.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1(receiver, f) {
      return this.map$1$1(receiver, f, type$.dynamic);
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    take$1(receiver, count) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(count, "count", type$.int), A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListBase.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListBase.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        B.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    toSet$0(receiver) {
      var i,
        result = A.LinkedHashSet_LinkedHashSet(A.instanceType(receiver)._eval$1("ListBase.E"));
      for (i = 0; i < this.get$length(receiver); ++i)
        result.add$1(0, this.$index(receiver, i));
      return result;
    },
    add$1(receiver, element) {
      var t1;
      A.instanceType(receiver)._eval$1("ListBase.E")._as(element);
      t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    remove$1(receiver, element) {
      var i;
      for (i = 0; i < this.get$length(receiver); ++i)
        if (J.$eq$(this.$index(receiver, i), element)) {
          this._closeGap$2(receiver, i, i + 1);
          return true;
        }
      return false;
    },
    _closeGap$2(receiver, start, end) {
      var i, _this = this,
        $length = _this.get$length(receiver),
        size = end - start;
      for (i = end; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    fillRange$3(receiver, start, end, fill) {
      var value, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("ListBase.E?")._as(fill);
      value = fill == null ? t1._eval$1("ListBase.E")._as(fill) : fill;
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, value);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("Iterable<ListBase.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListBase.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.MapBase.prototype = {
    forEach$1(receiver, action) {
      var t2, key, t3,
        t1 = A.instanceType(receiver);
      t1._eval$1("~(MapBase.K,MapBase.V)")._as(action);
      for (t2 = J.get$iterator$ax(this.get$keys(receiver)), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current(t2);
        t3 = this.$index(receiver, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    get$entries(receiver) {
      return J.map$1$1$ax(this.get$keys(receiver), new A.MapBase_entries_closure(receiver), A.instanceType(receiver)._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    map$2$1(receiver, transform, K2, V2) {
      var result, t2, key, t3, entry,
        t1 = A.instanceType(receiver);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapBase.K,MapBase.V)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = J.get$iterator$ax(this.get$keys(receiver)), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current(t2);
        t3 = this.$index(receiver, key);
        entry = transform.call$2(key, t3 == null ? t1._as(t3) : t3);
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    map$1(receiver, transform) {
      var t1 = type$.dynamic;
      return this.map$2$1(receiver, transform, t1, t1);
    },
    containsKey$1(receiver, key) {
      return J.contains$1$asx(this.get$keys(receiver), key);
    },
    get$length(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    get$isEmpty(receiver) {
      return J.get$isEmpty$asx(this.get$keys(receiver));
    },
    get$isNotEmpty(receiver) {
      return J.get$isNotEmpty$asx(this.get$keys(receiver));
    },
    get$values(receiver) {
      var t1 = A.instanceType(receiver);
      return new A._MapBaseValueIterable(receiver, t1._eval$1("@<MapBase.K>")._bind$1(t1._eval$1("MapBase.V"))._eval$1("_MapBaseValueIterable<1,2>"));
    },
    toString$0(receiver) {
      return A.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  A.MapBase_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = A.instanceType(t1);
      t2._eval$1("MapBase.K")._as(key);
      t1 = J.$index$asx(t1, key);
      if (t1 == null)
        t1 = t2._eval$1("MapBase.V")._as(t1);
      return new A.MapEntry(key, t1, t2._eval$1("@<MapBase.K>")._bind$1(t2._eval$1("MapBase.V"))._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return A.instanceType(this.$this)._eval$1("MapEntry<MapBase.K,MapBase.V>(MapBase.K)");
    }
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = A.S(k);
      t2 = t1._contents += t2;
      t1._contents = t2 + ": ";
      t2 = A.S(v);
      t1._contents += t2;
    },
    $signature: 42
  };
  A._MapBaseValueIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$iterator(_) {
      var t1 = this._collection$_map,
        t2 = this.$ti;
      return new A._MapBaseValueIterator(J.get$iterator$ax(J.get$keys$x(t1)), t1, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("_MapBaseValueIterator<1,2>"));
    }
  };
  A._MapBaseValueIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._collection$_keys;
      if (t1.moveNext$0()) {
        _this.set$_collection$_current(J.$index$asx(_this._collection$_map, t1.get$current(t1)));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A._UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    remove$1(_, key) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  A.MapView.prototype = {
    $index(_, key) {
      return J.$index$asx(this._collection$_map, key);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      J.$indexSet$ax(this._collection$_map, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(_, key) {
      return J.containsKey$1$x(this._collection$_map, key);
    },
    forEach$1(_, action) {
      J.forEach$1$ax(this._collection$_map, A._instanceType(this)._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$length(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$keys(_) {
      return J.get$keys$x(this._collection$_map);
    },
    remove$1(_, key) {
      return J.remove$1$ax(this._collection$_map, key);
    },
    toString$0(_) {
      return J.toString$0$(this._collection$_map);
    },
    get$values(_) {
      return J.get$values$x(this._collection$_map);
    },
    map$2$1(_, transform, K2, V2) {
      return J.map$2$1$ax(this._collection$_map, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), K2, V2);
    },
    map$1(_, transform) {
      var t1 = type$.dynamic;
      return this.map$2$1(0, transform, t1, t1);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A.ListQueue.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A._ListQueueIterator(_this, _this._collection$_tail, _this._modificationCount, _this._collection$_head, _this.$ti._eval$1("_ListQueueIterator<1>"));
    },
    get$isEmpty(_) {
      return this._collection$_head === this._collection$_tail;
    },
    get$length(_) {
      return (this._collection$_tail - this._collection$_head & this._collection$_table.length - 1) >>> 0;
    },
    get$first(_) {
      var t2, _this = this,
        t1 = _this._collection$_head;
      if (t1 === _this._collection$_tail)
        throw A.wrapException(A.IterableElementError_noElement());
      t2 = _this._collection$_table;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      t1 = t2[t1];
      return t1 == null ? _this.$ti._precomputed1._as(t1) : t1;
    },
    elementAt$1(_, index) {
      var t1, t2, t3, _this = this;
      A.IndexError_check(index, _this.get$length(0), _this);
      t1 = _this._collection$_table;
      t2 = t1.length;
      t3 = (_this._collection$_head + index & t2 - 1) >>> 0;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      return t3 == null ? _this.$ti._precomputed1._as(t3) : t3;
    },
    toList$1$growable(_, growable) {
      var t1, list, i, t2, t3, _this = this,
        mask = _this._collection$_table.length - 1,
        $length = (_this._collection$_tail - _this._collection$_head & mask) >>> 0;
      if ($length === 0) {
        t1 = J.JSArray_JSArray$growable(0, _this.$ti._precomputed1);
        return t1;
      }
      t1 = _this.$ti._precomputed1;
      list = A.List_List$filled($length, _this.get$first(0), true, t1);
      for (i = 0; i < $length; ++i) {
        t2 = _this._collection$_table;
        t3 = (_this._collection$_head + i & mask) >>> 0;
        if (!(t3 < t2.length))
          return A.ioore(t2, t3);
        t3 = t2[t3];
        B.JSArray_methods.$indexSet(list, i, t3 == null ? t1._as(t3) : t3);
      }
      return list;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    _filterWhere$2(test, removeMatching) {
      var modificationCount, i, t2, element, _this = this,
        t1 = _this.$ti;
      t1._eval$1("bool(1)")._as(test);
      modificationCount = _this._modificationCount;
      i = _this._collection$_head;
      for (t1 = t1._precomputed1; i !== _this._collection$_tail;) {
        t2 = _this._collection$_table;
        if (!(i >= 0 && i < t2.length))
          return A.ioore(t2, i);
        element = t2[i];
        t2 = test.call$1(element == null ? t1._as(element) : element);
        if (modificationCount !== _this._modificationCount)
          A.throwExpression(A.ConcurrentModificationError$(_this));
        if (true === t2) {
          i = _this._remove$1(0, i);
          modificationCount = ++_this._modificationCount;
        } else
          i = (i + 1 & _this._collection$_table.length - 1) >>> 0;
      }
    },
    clear$0(_) {
      var _this = this,
        i = _this._collection$_head;
      if (i !== _this._collection$_tail) {
        for (; i !== _this._collection$_tail; i = (i + 1 & _this._collection$_table.length - 1) >>> 0)
          B.JSArray_methods.$indexSet(_this._collection$_table, i, null);
        _this._collection$_head = _this._collection$_tail = 0;
        ++_this._modificationCount;
      }
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    removeFirst$0() {
      var t2, result, _this = this,
        t1 = _this._collection$_head;
      if (t1 === _this._collection$_tail)
        throw A.wrapException(A.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._collection$_table;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      result = t2[t1];
      if (result == null)
        result = _this.$ti._precomputed1._as(result);
      B.JSArray_methods.$indexSet(t2, t1, null);
      _this._collection$_head = (_this._collection$_head + 1 & _this._collection$_table.length - 1) >>> 0;
      return result;
    },
    _add$1(_, element) {
      var t2, t3, newTable, split, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(element);
      B.JSArray_methods.$indexSet(_this._collection$_table, _this._collection$_tail, element);
      t2 = _this._collection$_tail;
      t3 = _this._collection$_table.length;
      t2 = (t2 + 1 & t3 - 1) >>> 0;
      _this._collection$_tail = t2;
      if (_this._collection$_head === t2) {
        newTable = A.List_List$filled(t3 * 2, null, false, t1._eval$1("1?"));
        t1 = _this._collection$_table;
        t2 = _this._collection$_head;
        split = t1.length - t2;
        B.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        B.JSArray_methods.setRange$4(newTable, split, split + _this._collection$_head, _this._collection$_table, 0);
        _this._collection$_head = 0;
        _this._collection$_tail = _this._collection$_table.length;
        _this.set$_collection$_table(newTable);
      }
      ++_this._modificationCount;
    },
    _remove$1(_, offset) {
      var i, prevOffset, nextOffset, _this = this,
        mask = _this._collection$_table.length - 1,
        t1 = _this._collection$_head,
        t2 = _this._collection$_tail;
      if ((offset - t1 & mask) >>> 0 < (t2 - offset & mask) >>> 0) {
        for (i = offset; t1 = _this._collection$_head, i !== t1; i = prevOffset) {
          prevOffset = (i - 1 & mask) >>> 0;
          t1 = _this._collection$_table;
          if (!(prevOffset >= 0 && prevOffset < t1.length))
            return A.ioore(t1, prevOffset);
          t2 = t1[prevOffset];
          if (!(i >= 0 && i < t1.length))
            return A.ioore(t1, i);
          t1[i] = t2;
        }
        B.JSArray_methods.$indexSet(_this._collection$_table, t1, null);
        _this._collection$_head = (_this._collection$_head + 1 & mask) >>> 0;
        return (offset + 1 & mask) >>> 0;
      } else {
        _this._collection$_tail = (t2 - 1 & mask) >>> 0;
        for (i = offset; t1 = _this._collection$_tail, i !== t1; i = nextOffset) {
          nextOffset = (i + 1 & mask) >>> 0;
          t1 = _this._collection$_table;
          if (!(nextOffset >= 0 && nextOffset < t1.length))
            return A.ioore(t1, nextOffset);
          t2 = t1[nextOffset];
          if (!(i >= 0 && i < t1.length))
            return A.ioore(t1, i);
          t1[i] = t2;
        }
        B.JSArray_methods.$indexSet(_this._collection$_table, t1, null);
        return offset;
      }
    },
    set$_collection$_table(_table) {
      this._collection$_table = this.$ti._eval$1("List<1?>")._as(_table);
    },
    $isQueue: 1
  };
  A._ListQueueIterator.prototype = {
    get$current(_) {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, t3, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        A.throwExpression(A.ConcurrentModificationError$(t1));
      t2 = _this._collection$_position;
      if (t2 === _this._end) {
        _this.set$_collection$_current(null);
        return false;
      }
      t3 = t1._collection$_table;
      if (!(t2 < t3.length))
        return A.ioore(t3, t2);
      _this.set$_collection$_current(t3[t2]);
      _this._collection$_position = (_this._collection$_position + 1 & t1._collection$_table.length - 1) >>> 0;
      return true;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.SetBase.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    addAll$1(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(A._instanceType(this)._eval$1("Iterable<1>")._as(elements)); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    union$1(other) {
      var t1;
      A._instanceType(this)._eval$1("Set<1>")._as(other);
      t1 = this.toSet$0(0);
      t1.addAll$1(0, other);
      return t1;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, true, A._instanceType(this)._precomputed1);
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    map$1$1(_, f, $T) {
      var t1 = A._instanceType(this);
      return new A.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    map$1(_, f) {
      return this.map$1$1(0, f, type$.dynamic);
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    where$1(_, f) {
      var t1 = A._instanceType(this);
      return new A.WhereIterable(this, t1._eval$1("bool(1)")._as(f), t1._eval$1("WhereIterable<1>"));
    },
    fold$1$2(_, initialValue, combine, $T) {
      var t1, value;
      $T._as(initialValue);
      A._instanceType(this)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current(t1));
      return value;
    },
    every$1(_, f) {
      var t1;
      A._instanceType(this)._eval$1("bool(1)")._as(f);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (!A.boolConversionCheck(f.call$1(t1.get$current(t1))))
          return false;
      return true;
    },
    any$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(1)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (A.boolConversionCheck(test.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, A._instanceType(this)._precomputed1);
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current(it);
      while (it.moveNext$0());
      return result;
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current(iterator);
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {
    toSet$0(_) {
      var t1 = this._newSet$0();
      t1.addAll$1(0, this);
      return t1;
    }
  };
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A._Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 43
  };
  A._Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 43
  };
  A.AsciiCodec.prototype = {
    encode$1(source) {
      return B.AsciiEncoder_127.convert$1(source);
    }
  };
  A._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
      var stringLength, $length, result, t1, i, codeUnit;
      A._asString(string);
      stringLength = string.length;
      $length = A.RangeError_checkValidRange(0, null, stringLength) - 0;
      result = new Uint8Array($length);
      for (t1 = ~this._subsetMask, i = 0; i < $length; ++i) {
        if (!(i < stringLength))
          return A.ioore(string, i);
        codeUnit = string.charCodeAt(i);
        if ((codeUnit & t1) !== 0)
          throw A.wrapException(A.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (!(i < $length))
          return A.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    }
  };
  A.AsciiEncoder.prototype = {};
  A.Base64Codec.prototype = {
    get$encoder() {
      return B.C_Base64Encoder;
    },
    normalize$3(_, source, start, end) {
      var inverseAlphabet, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, t3, digit2, char0, value, t4, endLength, $length,
        _s64_ = string$.ABCDEF,
        _s31_ = "Invalid base64 encoding length ",
        t1 = source.length;
      end = A.RangeError_checkValidRange(start, end, t1);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t2 = inverseAlphabet.length, i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            if (!(i0 < t1))
              return A.ioore(source, i0);
            digit1 = A.hexDigitValue(source.charCodeAt(i0));
            t3 = i0 + 1;
            if (!(t3 < t1))
              return A.ioore(source, t3);
            digit2 = A.hexDigitValue(source.charCodeAt(t3));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (!(char0 >= 0 && char0 < t2))
            return A.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            if (!(value < 64))
              return A.ioore(_s64_, value);
            char0 = _s64_.charCodeAt(value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t3 = buffer == null ? null : buffer._contents.length;
                if (t3 == null)
                  t3 = 0;
                firstPadding = t3 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t3 = buffer;
            } else
              t3 = buffer;
            t3._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t4 = A.Primitives_stringFromCharCode(char);
            t3._contents += t4;
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = B.JSString_methods.substring$2(source, sliceStart, end);
        t1 = buffer._contents += t1;
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {
    convert$1(input) {
      var t1;
      type$.List_int._as(input);
      t1 = J.getInterceptor$asx(input);
      if (t1.get$isEmpty(input))
        return "";
      t1 = new A._Base64Encoder(string$.ABCDEF).encode$4(input, 0, t1.get$length(input), true);
      t1.toString;
      return A.String_String$fromCharCodes(t1, 0, null);
    }
  };
  A._Base64Encoder.prototype = {
    encode$4(bytes, start, end, isLast) {
      var t1, byteCount, fullChunks, bufferLength, output;
      type$.List_int._as(bytes);
      t1 = this._convert$_state;
      byteCount = (t1 & 3) + (end - start);
      fullChunks = B.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = new Uint8Array(bufferLength);
      this._convert$_state = A._Base64Encoder_encodeChunk(this._alphabet, bytes, start, end, true, output, 0, t1);
      if (bufferLength > 0)
        return output;
      return null;
    }
  };
  A.ByteConversionSink.prototype = {$isSink: 1};
  A._ByteCallbackSink.prototype = {
    add$1(_, chunk) {
      var t1, t2, t3, v, grown, _this = this;
      type$.Iterable_int._as(chunk);
      t1 = _this._convert$_buffer;
      t2 = _this._bufferIndex;
      t3 = J.getInterceptor$asx(chunk);
      if (t3.get$length(chunk) > t1.length - t2) {
        t1 = _this._convert$_buffer;
        v = t3.get$length(chunk) + t1.length - 1;
        v |= B.JSInt_methods._shrOtherPositive$1(v, 1);
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        grown = new Uint8Array((((v | v >>> 16) >>> 0) + 1) * 2);
        t1 = _this._convert$_buffer;
        B.NativeUint8List_methods.setRange$3(grown, 0, t1.length, t1);
        _this.set$_convert$_buffer(grown);
      }
      t1 = _this._convert$_buffer;
      t2 = _this._bufferIndex;
      B.NativeUint8List_methods.setRange$3(t1, t2, t2 + t3.get$length(chunk), chunk);
      _this._bufferIndex = _this._bufferIndex + t3.get$length(chunk);
    },
    close$0(_) {
      this._convert$_callback.call$1(B.NativeUint8List_methods.sublist$2(this._convert$_buffer, 0, this._bufferIndex));
    },
    set$_convert$_buffer(_buffer) {
      this._convert$_buffer = type$.List_int._as(_buffer);
    }
  };
  A.Codec.prototype = {};
  A._FusedCodec.prototype = {};
  A.Converter.prototype = {};
  A.Encoding.prototype = {};
  A.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = A.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  A.JsonCyclicError.prototype = {
    toString$0(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  A.JsonCodec.prototype = {
    encode$2$toEncodable(value, toEncodable) {
      var t1 = this.get$encoder();
      t1 = A._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      return t1;
    },
    get$encoder() {
      return B.JsonEncoder_null_null;
    }
  };
  A.JsonEncoder.prototype = {};
  A._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var offset, i, charCode, t1, t2, _this = this,
        $length = s.length;
      for (offset = 0, i = 0; i < $length; ++i) {
        charCode = s.charCodeAt(i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t1 = charCode & 64512;
            if (t1 === 55296) {
              t2 = i + 1;
              t2 = !(t2 < $length && (s.charCodeAt(t2) & 64512) === 56320);
            } else
              t2 = false;
            if (!t2)
              if (t1 === 56320) {
                t1 = i - 1;
                t1 = !(t1 >= 0 && (s.charCodeAt(t1) & 64512) === 55296);
              } else
                t1 = false;
            else
              t1 = true;
            if (t1) {
              if (i > offset)
                _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              t1 = charCode >>> 8 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw A.wrapException(new A.JsonCyclicError(object, null));
      }
      B.JSArray_methods.add$1(t1, object);
    },
    writeObject$1(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = A.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw A.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw A.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object == "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1(list) {
      var t1, i, _this = this;
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1(map) {
      var t2, keyValueList, i, separator, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t2 = t1.get$length(map) * 2;
      keyValueList = A.List_List$filled(t2, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new A._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (separator = '"'; i < t2; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        _this.writeString$1('":');
        t1 = i + 1;
        if (!(t1 < t2))
          return A.ioore(keyValueList, t1);
        _this.writeObject$1(keyValueList[t1]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  A._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 42
  };
  A._JsonPrettyPrintMixin.prototype = {
    writeList$1(list) {
      var i, _this = this,
        t1 = J.getInterceptor$asx(list);
      if (t1.get$isEmpty(list))
        _this.writeString$1("[]");
      else {
        _this.writeString$1("[\n");
        _this.writeIndentation$1(++_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",\n");
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
        }
        _this.writeString$1("\n");
        _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1("]");
      }
    },
    writeMap$1(map) {
      var t2, keyValueList, i, separator, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t2 = t1.get$length(map) * 2;
      keyValueList = A.List_List$filled(t2, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new A._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{\n");
      ++_this._JsonPrettyPrintMixin__indentLevel;
      for (separator = ""; i < t2; i += 2, separator = ",\n") {
        _this.writeString$1(separator);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1('"');
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        _this.writeString$1('": ');
        t1 = i + 1;
        if (!(t1 < t2))
          return A.ioore(keyValueList, t1);
        _this.writeObject$1(keyValueList[t1]);
      }
      _this.writeString$1("\n");
      _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
      _this.writeString$1("}");
      return true;
    }
  };
  A._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 42
  };
  A._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._convert$_sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    writeNumber$1(number) {
      var t1 = this._convert$_sink,
        t2 = B.JSNumber_methods.toString$0(number);
      t1._contents += t2;
    },
    writeString$1(string) {
      this._convert$_sink._contents += string;
    },
    writeStringSlice$3(string, start, end) {
      this._convert$_sink._contents += B.JSString_methods.substring$2(string, start, end);
    },
    writeCharCode$1(charCode) {
      var t1 = this._convert$_sink,
        t2 = A.Primitives_stringFromCharCode(charCode);
      t1._contents += t2;
    }
  };
  A._JsonStringStringifierPretty.prototype = {
    writeIndentation$1(count) {
      var t1, t2, i;
      for (t1 = this._indent, t2 = this._convert$_sink, i = 0; i < count; ++i)
        t2._contents += t1;
    }
  };
  A.Utf8Codec.prototype = {
    encode$1(string) {
      return B.C_Utf8Encoder.convert$1(string);
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var stringLength, end, $length, t1, encoder, t2;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new A._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < stringLength))
          return A.ioore(string, t2);
        encoder._writeReplacementCharacter$0();
      }
      return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._convert$_buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._convert$_buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, t5, _this = this;
      if (start !== end) {
        t1 = end - 1;
        if (!(t1 >= 0 && t1 < str.length))
          return A.ioore(str, t1);
        t1 = (str.charCodeAt(t1) & 64512) === 55296;
      } else
        t1 = false;
      if (t1)
        --end;
      for (t1 = _this._convert$_buffer, t2 = t1.length, t3 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        if (!(stringIndex < t3))
          return A.ioore(str, stringIndex);
        codeUnit = str.charCodeAt(stringIndex);
        if (codeUnit <= 127) {
          t4 = _this._bufferIndex;
          if (t4 >= t2)
            break;
          _this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else {
          t4 = codeUnit & 64512;
          if (t4 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            t4 = stringIndex + 1;
            if (!(t4 < t3))
              return A.ioore(str, t4);
            if (_this._writeSurrogate$2(codeUnit, str.charCodeAt(t4)))
              stringIndex = t4;
          } else if (t4 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t4 = _this._bufferIndex;
            t5 = t4 + 1;
            if (t5 >= t2)
              break;
            _this._bufferIndex = t5;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t5 + 1;
            t1[t5] = codeUnit & 63 | 128;
          } else {
            t4 = _this._bufferIndex;
            if (t4 + 2 >= t2)
              break;
            t5 = _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 12 | 224;
            t4 = _this._bufferIndex = t5 + 1;
            if (!(t5 < t2))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      return new A._Utf8Decoder(this._allowMalformed)._convertGeneral$4(type$.List_int._as(codeUnits), 0, null, true);
    }
  };
  A._Utf8Decoder.prototype = {
    _convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, casted, bytes, errorOffset, t1, result, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        bytes = casted;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeNativeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      if (end - start >= 15) {
        t1 = _this.allowMalformed;
        result = A._Utf8Decoder__convertInterceptedUint8List(t1, bytes, start, end);
        if (result != null) {
          if (!t1)
            return result;
          if (result.indexOf("\ufffd") < 0)
            return result;
        }
      }
      result = _this._decodeRecursive$4(bytes, start, end, true);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _decodeRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._decodeRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._decodeRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this,
        _s256_ = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE",
        _s144_ = " \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA",
        _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            if (!(byte >= 0 && byte < 256))
              return A.ioore(_s256_, byte);
            type = _s256_.charCodeAt(byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            t3 = state + type;
            if (!(t3 >= 0 && t3 < 144))
              return A.ioore(_s144_, t3);
            state = _s144_.charCodeAt(t3);
            if (state === 0) {
              t3 = A.Primitives_stringFromCharCode(char);
              buffer._contents += t3;
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    break;
                  case 65:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    --i;
                    break;
                  default:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    t3 = buffer._contents += t3;
                    buffer._contents = t3 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                t3 = A.Primitives_stringFromCharCode(bytes[m]);
                buffer._contents += t3;
              }
            else {
              t3 = A.String_String$fromCharCodes(bytes, i, markEnd);
              buffer._contents += t3;
            }
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2) {
          t1 = A.Primitives_stringFromCharCode(_65533);
          buffer._contents += t1;
        } else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {};
  A._BigIntImpl.prototype = {
    $negate(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = A._BigIntImpl__normalize(t1, t3);
      return new A._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _dlShift$1(n) {
      var resultUsed, digits, resultDigits, i, t1, t2, t3,
        used = this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + n;
      digits = this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (i = used - 1, t1 = digits.length; i >= 0; --i) {
        t2 = i + n;
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 >= 0 && t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t1 = this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _drShift$1(n) {
      var resultUsed, digits, resultDigits, t1, i, t2, t3, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, i = n; i < used; ++i) {
        t2 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t2 = _this._isNegative;
      t3 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shl(_, shiftAmount) {
      var t1, digitShift, resultUsed, resultDigits, t2, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      if (B.JSInt_methods.$mod(shiftAmount, 16) === 0)
        return _this._dlShift$1(digitShift);
      resultUsed = t1 + digitShift + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__lsh(_this._digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    $shr(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) >>> 0 !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (t1 === other._isNegative) {
        result = A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var resultUsed, resultDigits, t1, _this = this,
        used = _this._used,
        otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2(other, isNegative) {
      var otherUsed, resultDigits, t1, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(used, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    $add(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other;
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other.$negate(0);
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var resultUsed, digits, otherDigits, resultDigits, t1, i, t2,
        used = this._used,
        otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== other._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _core$_div$1(other) {
      var lastQuo_used, quo_digits, t1, quo;
      if (this._used < other._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      lastQuo_used = $._BigIntImpl____lastQuoRemUsed._readField$0() - $._BigIntImpl____lastRemUsed._readField$0();
      quo_digits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastQuoRemUsed._readField$0(), lastQuo_used);
      t1 = A._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new A._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== other._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var remDigits, t1, rem, _this = this;
      if (_this._used < other._used)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), 0, $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastRemUsed._readField$0());
      t1 = A._BigIntImpl__normalize($._BigIntImpl____lastRemUsed._readField$0(), remDigits);
      rem = new A._BigIntImpl(false, remDigits, t1);
      if ($._BigIntImpl____lastRem_nsh._readField$0() > 0)
        rem = rem.$shr(0, $._BigIntImpl____lastRem_nsh._readField$0());
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, t2, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (!(t1 >= 0 && t1 < yDigits.length))
        return A.ioore(yDigits, t1);
      nsh = 16 - B.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = A._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = A._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = A._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (!(t1 >= 0 && t1 < yDigits0.length))
        return A.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.length;
      if (A._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      t2 = yUsed0 + 2;
      nyDigits = new Uint16Array(t2);
      if (!(yUsed0 >= 0 && yUsed0 < t2))
        return A.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (!(i >= 0 && i < t1))
          return A.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl____lastQuoRemDigits.__late_helper$_value = resultDigits;
      $._BigIntImpl____lastQuoRemUsed.__late_helper$_value = resultUsed1;
      $._BigIntImpl____lastRemUsed.__late_helper$_value = yUsed0;
      $._BigIntImpl____lastRem_nsh.__late_helper$_value = nsh;
    },
    get$hashCode(_) {
      var hash, t2, t3, i,
        combine = new A._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    $lt(_, other) {
      return this.compareTo$1(0, type$._BigIntImpl._as(other)) < 0;
    },
    $gt(_, other) {
      return this.compareTo$1(0, type$._BigIntImpl._as(other)) > 0;
    },
    toString$0(_) {
      var decimalDigitChunks, rest, t2, digits4, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return A.ioore(t1, 0);
          return B.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        return B.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (; rest._used > 1;) {
        t2 = $.$get$_BigIntImpl__bigInt10000();
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digits4 = rest._rem$1(t2).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t3 = digits4.length;
        if (t3 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t3 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t3 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest._core$_div$1(t2);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(t2[0]));
      if (t1)
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new A.ReversedListIterable(decimalDigitChunks, type$.ReversedListIterable_String).join$0(0);
    },
    $isBigInt: 1,
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 69
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 67
  };
  A.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t3 = t1._contents += t2.comma;
      t3 += key.__internal$_name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t3 = A.Error_safeToString(value);
      t1._contents += t3;
      t2.comma = ", ";
    },
    $signature: 162
  };
  A.DateTime.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._value === other._value && this.isUtc === other.isUtc;
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._value, type$.DateTime._as(other)._value);
    },
    get$hashCode(_) {
      var t1 = this._value;
      return (t1 ^ B.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toUtc$0() {
      if (this.isUtc)
        return this;
      return A.DateTime$_withValue(this._value, true);
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1
  };
  A.Duration.prototype = {
    $lt(_, other) {
      return this._duration < type$.Duration._as(other)._duration;
    },
    $gt(_, other) {
      return this._duration > type$.Duration._as(other)._duration;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var sign, minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000),
        microseconds0 = microseconds % 3600000000;
      if (microseconds < 0) {
        hours = 0 - hours;
        microseconds = 0 - microseconds0;
        sign = "-";
      } else {
        microseconds = microseconds0;
        sign = "";
      }
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.Primitives_extractStackTrace(this);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new A.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = A.Error_safeToString(argument);
        t2 = sb._contents += t2;
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new A.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = A.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      return "NoSuchMethodError: method not found: '" + _this._core$_memberName.__internal$_name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineEnd, lineNum, lineStart, previousCharWasCR, i, char, end, start, prefix, postfix,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineEnd = source.length, lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          if (!(i < lineEnd))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        for (i = offset; i < lineEnd; ++i) {
          if (!(i >= 0))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message(receiver) {
      return this.message;
    }
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1,
    $isException: 1
  };
  A.Iterable.prototype = {
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    },
    where$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.WhereIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("WhereIterable<Iterable.E>"));
    },
    whereType$1$0(_, $T) {
      return new A.WhereTypeIterable(this, $T._eval$1("WhereTypeIterable<0>"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(t1), element))
          return true;
      return false;
    },
    every$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (!A.boolConversionCheck(test.call$1(t1.get$current(t1))))
          return false;
      return true;
    },
    join$1(_, separator) {
      var first, t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      first = J.toString$0$(iterator.get$current(iterator));
      if (!iterator.moveNext$0())
        return first;
      if (separator.length === 0) {
        t1 = first;
        do
          t1 += J.toString$0$(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        t1 = first;
        do
          t1 = t1 + separator + J.toString$0$(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    any$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (A.boolConversionCheck(test.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, growable, A._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      return A.LinkedHashSet_LinkedHashSet$of(this, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    take$1(_, count) {
      return A.TakeIterable_TakeIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    skipWhile$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.SkipWhileIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("SkipWhileIterable<Iterable.E>"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current(it);
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current(it);
      while (it.moveNext$0());
      return result;
    },
    get$single(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      result = it.get$current(it);
      if (it.moveNext$0())
        throw A.wrapException(A.IterableElementError_tooMany());
      return result;
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current(iterator);
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A._GeneratorIterable.prototype = {
    elementAt$1(_, index) {
      A.IndexError_check(index, this.length, this);
      return this._generator.call$1(index);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      throw A.wrapException(A.NoSuchMethodError_NoSuchMethodError$withInvocation(this, type$.Invocation._as(invocation)));
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return this._stackTrace;
    },
    $isStackTrace: 1
  };
  A.Stopwatch.prototype = {
    get$elapsedMicroseconds() {
      var ticks,
        t1 = this._stop;
      if (t1 == null)
        t1 = $.Primitives_timerTicks.call$0();
      ticks = t1 - this._start;
      if ($.$get$Stopwatch__frequency() === 1000000)
        return ticks;
      return ticks * 1000;
    },
    start$0(_) {
      var _this = this,
        $stop = _this._stop;
      if ($stop != null) {
        _this._start = _this._start + ($.Primitives_timerTicks.call$0() - $stop);
        _this._stop = null;
      }
    }
  };
  A.Runes.prototype = {
    get$iterator(_) {
      return new A.RuneIterator(this.string);
    }
  };
  A.RuneIterator.prototype = {
    get$current(_) {
      return this._currentCodePoint;
    },
    moveNext$0() {
      var codeUnit, nextPosition, nextCodeUnit, _this = this,
        t1 = _this._core$_position = _this._nextPosition,
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      if (!(t1 < t3))
        return A.ioore(t2, t1);
      codeUnit = t2.charCodeAt(t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        if (!(nextPosition < t3))
          return A.ioore(t2, nextPosition);
        nextCodeUnit = t2.charCodeAt(nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = A._combineSurrogatePair(codeUnit, nextCodeUnit);
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    },
    $isIterator: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$isEmpty(_) {
      return this._contents.length === 0;
    },
    get$isNotEmpty(_) {
      return this._contents.length !== 0;
    },
    $isStringSink: 1
  };
  A.Uri_splitQueryString_closure.prototype = {
    call$2(map, element) {
      var index, key, value, t1;
      type$.Map_String_String._as(map);
      A._asString(element);
      index = B.JSString_methods.indexOf$1(element, "=");
      if (index === -1) {
        if (element !== "")
          J.$indexSet$ax(map, A._Uri__uriDecode(element, 0, element.length, this.encoding, true), "");
      } else if (index !== 0) {
        key = B.JSString_methods.substring$2(element, 0, index);
        value = B.JSString_methods.substring$1(element, index + 1);
        t1 = this.encoding;
        J.$indexSet$ax(map, A._Uri__uriDecode(key, 0, key.length, t1, true), A._Uri__uriDecode(value, 0, value.length, t1, true));
      }
      return map;
    },
    $signature: 173
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 175
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    $signature: 176
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 69
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text_FI;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        value !== $ && A.throwLateFieldADI("_text");
        value = _this.___Uri__text_FI = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$pathSegments() {
      var pathToSplit, t1, result, _this = this,
        value = _this.___Uri_pathSegments_FI;
      if (value === $) {
        pathToSplit = _this.path;
        t1 = pathToSplit.length;
        if (t1 !== 0) {
          if (0 >= t1)
            return A.ioore(pathToSplit, 0);
          t1 = pathToSplit.charCodeAt(0) === 47;
        } else
          t1 = false;
        if (t1)
          pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit.length === 0 ? B.List_empty : A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), type$.dynamic_Function_String._as(A.core_Uri_decodeComponent$closure()), type$.MappedListIterable_String_dynamic), type$.String);
        _this.___Uri_pathSegments_FI !== $ && A.throwLateFieldADI("pathSegments");
        _this.set$___Uri_pathSegments_FI(result);
        value = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode_FI;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        _this.___Uri_hashCode_FI !== $ && A.throwLateFieldADI("hashCode");
        _this.___Uri_hashCode_FI = result;
        value = result;
      }
      return value;
    },
    get$queryParameters() {
      var t1, result, _this = this,
        value = _this.___Uri_queryParameters_FI;
      if (value === $) {
        t1 = _this._query;
        result = new A.UnmodifiableMapView(A.Uri_splitQueryString(t1 == null ? "" : t1), type$.UnmodifiableMapView_String_String);
        _this.___Uri_queryParameters_FI !== $ && A.throwLateFieldADI("queryParameters");
        _this.set$___Uri_queryParameters_FI(result);
        value = result;
      }
      return value;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host(_) {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "["))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port(_) {
      var t1 = this._port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query(_) {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return A._caseInsensitiveCompareStart(scheme, thisScheme, 0) >= 0;
    },
    replace$2$path$scheme(_, path, scheme) {
      var schemeChanged, isFile, userInfo, port, host, hasAuthority, t1, currentPath, _this = this,
        scheme0 = _this.scheme;
      if (scheme != null) {
        scheme = A._Uri__makeScheme(scheme, 0, scheme.length);
        schemeChanged = scheme !== scheme0;
      } else {
        scheme = scheme0;
        schemeChanged = false;
      }
      isFile = scheme === "file";
      userInfo = _this._userInfo;
      port = _this._port;
      if (schemeChanged)
        port = A._Uri__makePort(port, scheme);
      host = _this._host;
      if (!(host != null))
        host = userInfo.length !== 0 || port != null || isFile ? "" : null;
      hasAuthority = host != null;
      if (path != null) {
        t1 = path.length;
        path = A._Uri__makePath(path, 0, t1, null, scheme, hasAuthority);
      } else {
        currentPath = _this.path;
        if (!isFile)
          t1 = hasAuthority && currentPath.length !== 0;
        else
          t1 = true;
        if (t1 && !B.JSString_methods.startsWith$1(currentPath, "/"))
          currentPath = "/" + currentPath;
        path = currentPath;
      }
      return A._Uri$_internal(scheme, userInfo, host, port, path, _this._query, _this._fragment);
    },
    replace$1$scheme(_, scheme) {
      return this.replace$2$path$scheme(0, null, scheme);
    },
    replace$1$path(_, path) {
      return this.replace$2$path$scheme(0, path, null);
    },
    normalizePath$0() {
      var _this = this,
        t1 = _this.path,
        path = A._Uri__normalizePath(t1, _this.scheme, _this._host != null);
      if (path === t1)
        return _this;
      return _this.replace$1$path(0, path);
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, t1, newEnd, delta, t2, t3;
      for (backCount = 0, refStart = 0; B.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = B.JSString_methods.lastIndexOf$1(base, "/");
      t1 = base.length;
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = B.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t2 = delta !== 2;
        if (!t2 || delta === 3) {
          t3 = newEnd + 1;
          if (!(t3 < t1))
            return A.ioore(base, t3);
          if (base.charCodeAt(t3) === 46)
            if (t2) {
              t2 = newEnd + 2;
              if (!(t2 < t1))
                return A.ioore(base, t2);
              t2 = base.charCodeAt(t2) === 46;
            } else
              t2 = true;
          else
            t2 = false;
        } else
          t2 = false;
        if (t2)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return B.JSString_methods.replaceRange$3(base, baseEnd + 1, null, B.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      var targetScheme, t1, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, packageNameEnd, packageName, mergedPath, fragment, _this = this;
      if (reference.get$scheme().length !== 0)
        return reference;
      else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          t1 = reference.replace$1$scheme(0, targetScheme);
          return t1;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          targetPath = _this.path;
          if (reference.get$hasEmptyPath())
            targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : _this._query;
          else {
            packageNameEnd = A._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = B.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = reference.get$hasAbsolutePath() ? packageName + A._Uri__removeDotSegments(reference.get$path(reference)) : packageName + A._Uri__removeDotSegments(_this._mergePaths$2(B.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path(reference)));
            } else if (reference.get$hasAbsolutePath())
              targetPath = A._Uri__removeDotSegments(reference.get$path(reference));
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath = targetScheme.length === 0 ? reference.get$path(reference) : A._Uri__removeDotSegments(reference.get$path(reference));
              else
                targetPath = A._Uri__removeDotSegments("/" + reference.get$path(reference));
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path(reference));
              t1 = targetScheme.length === 0;
              if (!t1 || targetHost != null || B.JSString_methods.startsWith$1(targetPath, "/"))
                targetPath = A._Uri__removeDotSegments(mergedPath);
              else
                targetPath = A._Uri__normalizeRelativePath(mergedPath, !t1 || targetHost != null);
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query(reference) : null;
          }
        }
      }
      fragment = reference.get$hasFragment() ? reference.get$fragment() : null;
      return A._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, fragment);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasEmptyPath() {
      return this.path.length === 0;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0() {
      var pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + t1 + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotefq));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannoteff));
      if (_this._host != null && _this.get$host(0) !== "")
        A.throwExpression(A.UnsupportedError$(string$.Cannoten));
      pathSegments = _this.get$pathSegments();
      A._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
      t1 = A.StringBuffer__writeAll(B.JSString_methods.startsWith$1(_this.path, "/") ? "" + "/" : "", pathSegments, "/");
      t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      return t1;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host(0) === other.get$host(other))
                if (_this.get$port(0) === other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query(other)) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    set$___Uri_pathSegments_FI(___Uri_pathSegments_FI) {
      this.___Uri_pathSegments_FI = type$.List_String._as(___Uri_pathSegments_FI);
    },
    set$___Uri_queryParameters_FI(___Uri_queryParameters_FI) {
      this.___Uri_queryParameters_FI = type$.Map_String_String._as(___Uri_queryParameters_FI);
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path(receiver) {
      return this.path;
    }
  };
  A._Uri__makePath_closure.prototype = {
    call$1(s) {
      return A._Uri__uriEncode(B.List_M2I0, A._asString(s), B.C_Utf8Codec, false);
    },
    $signature: 15
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = _this._text;
        t1 = t1[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, B.List_42A, false, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t2, t1, end, B.List_M2I, false, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  A._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = this.tables;
      if (!(state < t1.length))
        return A.ioore(t1, state);
      t1 = t1[state];
      B.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 91
  };
  A._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, i, t2;
      for (t1 = chars.length, i = 0; i < t1; ++i) {
        t2 = chars.charCodeAt(i) ^ 96;
        if (!(t2 < 96))
          return A.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 65
  };
  A._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var i, n,
        t1 = range.length;
      if (0 >= t1)
        return A.ioore(range, 0);
      i = range.charCodeAt(0);
      if (1 >= t1)
        return A.ioore(range, 1);
      n = range.charCodeAt(1);
      for (; i <= n; ++i) {
        t1 = (i ^ 96) >>> 0;
        if (!(t1 < 96))
          return A.ioore(target, t1);
        target[t1] = transition;
      }
    },
    $signature: 65
  };
  A._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$hasEmptyPath() {
      return this._pathStart === this._queryStart;
    },
    isScheme$1(scheme) {
      var t1 = scheme.length;
      if (t1 === 0)
        return this._schemeEnd < 0;
      if (t1 !== this._schemeEnd)
        return false;
      return A._caseInsensitiveCompareStart(scheme, this._uri, 0) >= 0;
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host(_) {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port(_) {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path(_) {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query(_) {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments() {
      var parts, t2, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (B.JSString_methods.startsWith$2(t1, "/", start))
        ++start;
      if (start === end)
        return B.List_empty;
      parts = A._setArrayType([], type$.JSArray_String);
      for (t2 = t1.length, i = start; i < end; ++i) {
        if (!(i >= 0 && i < t2))
          return A.ioore(t1, i);
        if (t1.charCodeAt(i) === 47) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
      }
      B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(t1, start, end));
      return A.List_List$unmodifiable(parts, type$.String);
    },
    get$queryParameters() {
      if (this._queryStart >= this._fragmentStart)
        return B.Map_empty4;
      return new A.UnmodifiableMapView(A.Uri_splitQueryString(this.get$query(0)), type$.UnmodifiableMapView_String_String);
    },
    _isPort$1(port) {
      var portDigitStart = this._portStart + 1;
      return portDigitStart + port.length === this._pathStart && B.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    normalizePath$0() {
      return this;
    },
    removeFragment$0() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new A._SimpleUri(B.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    replace$1$scheme(_, scheme) {
      var schemeChanged, isFile, t1, userInfo, port, host, t2, path, t3, query, fragment, _this = this, _null = null;
      scheme = A._Uri__makeScheme(scheme, 0, scheme.length);
      schemeChanged = !(_this._schemeEnd === scheme.length && B.JSString_methods.startsWith$1(_this._uri, scheme));
      isFile = scheme === "file";
      t1 = _this._hostStart;
      userInfo = t1 > 0 ? B.JSString_methods.substring$2(_this._uri, _this._schemeEnd + 3, t1) : "";
      port = _this.get$hasPort() ? _this.get$port(0) : _null;
      if (schemeChanged)
        port = A._Uri__makePort(port, scheme);
      t1 = _this._hostStart;
      if (t1 > 0)
        host = B.JSString_methods.substring$2(_this._uri, t1, _this._portStart);
      else
        host = userInfo.length !== 0 || port != null || isFile ? "" : _null;
      t1 = _this._uri;
      t2 = _this._queryStart;
      path = B.JSString_methods.substring$2(t1, _this._pathStart, t2);
      if (!isFile)
        t3 = host != null && path.length !== 0;
      else
        t3 = true;
      if (t3 && !B.JSString_methods.startsWith$1(path, "/"))
        path = "/" + path;
      t3 = _this._fragmentStart;
      query = t2 < t3 ? B.JSString_methods.substring$2(t1, t2 + 1, t3) : _null;
      t2 = _this._fragmentStart;
      fragment = t2 < t1.length ? B.JSString_methods.substring$1(t1, t2 + 1) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragment);
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      if (reference instanceof A._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var t2, t3, t4, isSimple, delta, refStart, basePathStart, packageNameEnd, basePathStart0, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        t4 = t3 === 4;
        if (t4 && B.JSString_methods.startsWith$1(base._uri, "file"))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && B.JSString_methods.startsWith$1(base._uri, "http"))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !(t3 === 5 && B.JSString_methods.startsWith$1(base._uri, "https")) || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, delta) + B.JSString_methods.substring$1(ref._uri, t1 + 1), t3, t2 + delta, ref._portStart + delta, ref._pathStart + delta, ref._queryStart + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (B.JSString_methods.startsWith$2(t2, "/", refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = A._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, basePathStart0) + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; B.JSString_methods.startsWith$2(t2, "../", refStart);)
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      packageNameEnd = A._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; B.JSString_methods.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= t1 && B.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (t3 = baseUri.length, insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (!(baseEnd >= 0 && baseEnd < t3))
          return A.ioore(baseUri, baseEnd);
        if (baseUri.charCodeAt(baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !B.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new A._SimpleUri(B.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 >= 0) {
        t2 = !(t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "file"));
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + _this.get$scheme() + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw A.wrapException(A.UnsupportedError$(string$.Cannotefq));
        throw A.wrapException(A.UnsupportedError$(string$.Cannoteff));
      }
      if (_this._hostStart < _this._portStart)
        A.throwExpression(A.UnsupportedError$(string$.Cannoten));
      t1 = B.JSString_methods.substring$2(t2, _this._pathStart, t1);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host(0) : _null,
        t4 = _this.get$hasPort() ? _this.get$port(0) : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = B.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query(0) : _null;
      return A._Uri$_internal(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A.Expando.prototype = {};
  A.HtmlElement.prototype = {};
  A.AccessibleNodeList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.AnchorElement.prototype = {
    set$href(receiver, value) {
      receiver.href = value;
    },
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    },
    $isAnchorElement: 1
  };
  A.AreaElement.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    }
  };
  A.BaseElement.prototype = {$isBaseElement: 1};
  A.Blob.prototype = {$isBlob: 1};
  A.BodyElement.prototype = {$isBodyElement: 1};
  A.CharacterData.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssPerspective.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssRule.prototype = {$isCssRule: 1};
  A.CssStyleDeclaration.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    }
  };
  A.CssStyleDeclarationBase.prototype = {};
  A.CssStyleValue.prototype = {};
  A.CssTransformComponent.prototype = {};
  A.CssTransformValue.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssUnparsedValue.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.DataTransferItemList.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      var t1 = receiver[A._asInt(index)];
      t1.toString;
      return t1;
    }
  };
  A.DivElement.prototype = {$isDivElement: 1};
  A.Document.prototype = {};
  A.DomException.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    }
  };
  A.DomImplementation.prototype = {
    createHtmlDocument$1(receiver, title) {
      var t1 = receiver.createHTMLDocument(title);
      t1.toString;
      return t1;
    }
  };
  A.DomRectList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Rectangle_num._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.DomRectReadOnly.prototype = {
    toString$0(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      return "Rectangle (" + A.S(t1) + ", " + A.S(t2) + ") " + A.S(this.get$width(receiver)) + " x " + A.S(this.get$height(receiver));
    },
    $eq(receiver, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (type$.Rectangle_num._is(other)) {
        t1 = receiver.left;
        t1.toString;
        t2 = other.left;
        t2.toString;
        if (t1 === t2) {
          t1 = receiver.top;
          t1.toString;
          t2 = other.top;
          t2.toString;
          if (t1 === t2) {
            t1 = J.getInterceptor$x(other);
            t1 = this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(receiver) {
      var t2,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      return A.Object_hash(t1, t2, this.get$width(receiver), this.get$height(receiver));
    },
    get$_height(receiver) {
      return receiver.height;
    },
    get$height(receiver) {
      var t1 = this.get$_height(receiver);
      t1.toString;
      return t1;
    },
    get$_width(receiver) {
      return receiver.width;
    },
    get$width(receiver) {
      var t1 = this.get$_width(receiver);
      t1.toString;
      return t1;
    },
    $isRectangle: 1
  };
  A.DomStringList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      A._asString(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.DomTokenList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    }
  };
  A._FrozenElementList.prototype = {
    get$length(_) {
      return this._nodeList.length;
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this._nodeList;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return this.$ti._precomputed1._as(t1[index]);
    },
    $indexSet(_, index, value) {
      this.$ti._precomputed1._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify list"));
    }
  };
  A.Element.prototype = {
    get$attributes(receiver) {
      return new A._ElementAttributeMap(receiver);
    },
    toString$0(receiver) {
      var t1 = receiver.localName;
      t1.toString;
      return t1;
    },
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var t1, t2, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = A._setArrayType([], type$.JSArray_NodeValidator);
          t2 = new A.NodeValidatorBuilder(t1);
          B.JSArray_methods.add$1(t1, A._Html5NodeValidator$(null));
          B.JSArray_methods.add$1(t1, A._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          validator.toString;
          t1 = new A._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          validator.toString;
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document;
        t2 = t1.implementation;
        t2.toString;
        t2 = B.DomImplementation_methods.createHtmlDocument$1(t2, "");
        $.Element__parseDocument = t2;
        t2 = t2.createRange();
        t2.toString;
        $.Element__parseRange = t2;
        t2 = $.Element__parseDocument.createElement("base");
        type$.BaseElement._as(t2);
        t1 = t1.baseURI;
        t1.toString;
        t2.href = t1;
        $.Element__parseDocument.head.appendChild(t2).toString;
      }
      t1 = $.Element__parseDocument;
      if (t1.body == null) {
        t2 = t1.createElement("body");
        B.HtmlDocument_methods.set$body(t1, type$.BodyElement._as(t2));
      }
      t1 = $.Element__parseDocument;
      if (type$.BodyElement._is(receiver)) {
        t1 = t1.body;
        t1.toString;
        contextElement = t1;
      } else {
        t1.toString;
        t2 = receiver.tagName;
        t2.toString;
        contextElement = t1.createElement(t2);
        $.Element__parseDocument.body.appendChild(contextElement).toString;
      }
      t1 = "createContextualFragment" in window.Range.prototype;
      t1.toString;
      if (t1) {
        t1 = receiver.tagName;
        t1.toString;
        t1 = !B.JSArray_methods.contains$1(B.List_Vet, t1);
      } else
        t1 = false;
      if (t1) {
        $.Element__parseRange.selectNodeContents(contextElement);
        t1 = $.Element__parseRange;
        t1 = t1.createContextualFragment(html);
        t1.toString;
        fragment = t1;
      } else {
        J.set$_innerHtml$x(contextElement, html);
        t1 = $.Element__parseDocument.createDocumentFragment();
        t1.toString;
        for (; t2 = contextElement.firstChild, t2 != null;)
          t1.appendChild(t2).toString;
        fragment = t1;
      }
      if (contextElement !== $.Element__parseDocument.body)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment).toString;
      return fragment;
    },
    createFragment$2$treeSanitizer(receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, null);
    },
    set$innerHtml(receiver, html) {
      this.setInnerHtml$1(receiver, html);
    },
    setInnerHtml$1(receiver, html) {
      this.set$text(receiver, null);
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, null, null)).toString;
    },
    set$_innerHtml(receiver, value) {
      receiver.innerHTML = value;
    },
    get$outerHtml(receiver) {
      return receiver.outerHTML;
    },
    scrollTo$2(receiver, options_OR_x, y) {
      this._scrollTo_3$2(receiver, options_OR_x, y);
      return;
    },
    _scrollTo_3$2(receiver, x, y) {
      return receiver.scrollTo(x, y);
    },
    $isElement: 1
  };
  A.Element_Element$html_closure.prototype = {
    call$1(e) {
      return type$.Element._is(type$.Node._as(e));
    },
    $signature: 97
  };
  A.ErrorEvent.prototype = {$isErrorEvent: 1};
  A.Event.prototype = {$isEvent: 1};
  A.EventTarget.prototype = {
    addEventListener$3(receiver, type, listener, useCapture) {
      type$.nullable_dynamic_Function_Event._as(listener);
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, false);
    },
    _addEventListener$3(receiver, type, listener, options) {
      return receiver.addEventListener(type, A.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    _removeEventListener$3(receiver, type, listener, options) {
      return receiver.removeEventListener(type, A.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    $isEventTarget: 1
  };
  A.File.prototype = {$isFile: 1};
  A.FileList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.File._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1,
    $isFileList: 1
  };
  A.FileWriter.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.FormElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Gamepad.prototype = {$isGamepad: 1};
  A.History.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    }
  };
  A.HtmlCollection.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Node._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.HtmlDocument.prototype = {
    set$body(receiver, value) {
      receiver.body = value;
    }
  };
  A.ImageData.prototype = {$isImageData: 1};
  A.Location.prototype = {
    get$origin(receiver) {
      var t2,
        t1 = "origin" in receiver;
      t1.toString;
      if (t1) {
        t1 = receiver.origin;
        t1.toString;
        return t1;
      }
      t1 = receiver.protocol;
      t1.toString;
      t2 = receiver.host;
      t2.toString;
      return t1 + "//" + t2;
    },
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    },
    $isLocation: 1
  };
  A.MediaList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.MessageEvent.prototype = {$isMessageEvent: 1};
  A.MessagePort.prototype = {$isMessagePort: 1};
  A.MidiInputMap.prototype = {
    containsKey$1(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key))) != null;
    },
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry, t1;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        t1 = entry.done;
        t1.toString;
        if (t1)
          return;
        t1 = entry.value[0];
        t1.toString;
        f.call$2(t1, A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$values(receiver) {
      var values = A._setArrayType([], type$.JSArray_Map_dynamic_dynamic);
      this.forEach$1(receiver, new A.MidiInputMap_values_closure(values));
      return values;
    },
    get$length(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1;
    },
    get$isEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 === 0;
    },
    get$isNotEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 !== 0;
    },
    $indexSet(receiver, key, value) {
      A._asString(key);
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    remove$1(receiver, key) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  A.MidiInputMap_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 10
  };
  A.MidiInputMap_values_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.values, type$.Map_dynamic_dynamic._as(v));
    },
    $signature: 10
  };
  A.MidiOutputMap.prototype = {
    containsKey$1(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key))) != null;
    },
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry, t1;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        t1 = entry.done;
        t1.toString;
        if (t1)
          return;
        t1 = entry.value[0];
        t1.toString;
        f.call$2(t1, A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$values(receiver) {
      var values = A._setArrayType([], type$.JSArray_Map_dynamic_dynamic);
      this.forEach$1(receiver, new A.MidiOutputMap_values_closure(values));
      return values;
    },
    get$length(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1;
    },
    get$isEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 === 0;
    },
    get$isNotEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 !== 0;
    },
    $indexSet(receiver, key, value) {
      A._asString(key);
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    remove$1(receiver, key) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  A.MidiOutputMap_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 10
  };
  A.MidiOutputMap_values_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.values, type$.Map_dynamic_dynamic._as(v));
    },
    $signature: 10
  };
  A.MimeType.prototype = {$isMimeType: 1};
  A.MimeTypeArray.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.MimeType._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._ChildNodeListLazy.prototype = {
    get$single(_) {
      var t1 = this._this,
        l = t1.childNodes.length;
      if (l === 0)
        throw A.wrapException(A.StateError$("No elements"));
      if (l > 1)
        throw A.wrapException(A.StateError$("More than one element"));
      t1 = t1.firstChild;
      t1.toString;
      return t1;
    },
    add$1(_, value) {
      this._this.appendChild(type$.Node._as(value)).toString;
    },
    addAll$1(_, iterable) {
      var t1, t2, len, i, t3;
      type$.Iterable_Node._as(iterable);
      if (iterable instanceof A._ChildNodeListLazy) {
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i) {
            t3 = t1.firstChild;
            t3.toString;
            t2.appendChild(t3).toString;
          }
        return;
      }
      for (t1 = iterable.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current(t1)).toString;
    },
    $indexSet(_, index, value) {
      var t1, t2;
      type$.Node._as(value);
      t1 = this._this;
      t2 = t1.childNodes;
      if (!(index >= 0 && index < t2.length))
        return A.ioore(t2, index);
      t1.replaceChild(value, t2[index]).toString;
    },
    get$iterator(_) {
      var t1 = this._this.childNodes;
      return new A.FixedSizeListIterator(t1, t1.length, A.instanceType(t1)._eval$1("FixedSizeListIterator<ImmutableListMixin.E>"));
    },
    get$length(_) {
      return this._this.childNodes.length;
    },
    set$length(_, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this._this.childNodes;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    }
  };
  A.Node.prototype = {
    remove$0(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver).toString;
    },
    _clearChildren$0(receiver) {
      var t1;
      for (; t1 = receiver.firstChild, t1 != null;)
        receiver.removeChild(t1).toString;
    },
    toString$0(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    set$text(receiver, value) {
      receiver.textContent = value;
    },
    clone$1(receiver, deep) {
      var t1 = receiver.cloneNode(true);
      t1.toString;
      return t1;
    },
    $isNode: 1
  };
  A.NodeList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Node._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Plugin.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isPlugin: 1
  };
  A.PluginArray.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Plugin._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.RtcStatsReport.prototype = {
    containsKey$1(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key))) != null;
    },
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry, t1;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        t1 = entry.done;
        t1.toString;
        if (t1)
          return;
        t1 = entry.value[0];
        t1.toString;
        f.call$2(t1, A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$values(receiver) {
      var values = A._setArrayType([], type$.JSArray_Map_dynamic_dynamic);
      this.forEach$1(receiver, new A.RtcStatsReport_values_closure(values));
      return values;
    },
    get$length(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1;
    },
    get$isEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 === 0;
    },
    get$isNotEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 !== 0;
    },
    $indexSet(receiver, key, value) {
      A._asString(key);
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    remove$1(receiver, key) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  A.RtcStatsReport_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 10
  };
  A.RtcStatsReport_values_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.values, type$.Map_dynamic_dynamic._as(v));
    },
    $signature: 10
  };
  A.SelectElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.SharedArrayBuffer.prototype = {$isSharedArrayBuffer: 1};
  A.SourceBuffer.prototype = {$isSourceBuffer: 1};
  A.SourceBufferList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.SourceBuffer._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  A.SpeechGrammarList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.SpeechGrammar._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SpeechRecognitionResult.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isSpeechRecognitionResult: 1
  };
  A.Storage.prototype = {
    containsKey$1(receiver, key) {
      return receiver.getItem(A._asString(key)) != null;
    },
    $index(receiver, key) {
      return receiver.getItem(A._asString(key));
    },
    $indexSet(receiver, key, value) {
      receiver.setItem(A._asString(key), A._asString(value));
    },
    remove$1(receiver, key) {
      var value = receiver.getItem(key);
      receiver.removeItem(key);
      return value;
    },
    forEach$1(receiver, f) {
      var i, key, t1;
      type$.void_Function_String_String._as(f);
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        t1 = receiver.getItem(key);
        t1.toString;
        f.call$2(key, t1);
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.Storage_keys_closure(keys));
      return keys;
    },
    get$values(receiver) {
      var values = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.Storage_values_closure(values));
      return values;
    },
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    get$isEmpty(receiver) {
      return receiver.key(0) == null;
    },
    get$isNotEmpty(receiver) {
      return receiver.key(0) != null;
    },
    $isMap: 1
  };
  A.Storage_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 64
  };
  A.Storage_values_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.values, v);
    },
    $signature: 64
  };
  A.StyleSheet.prototype = {$isStyleSheet: 1};
  A.TableElement.prototype = {
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var table,
        t1 = "createContextualFragment" in window.Range.prototype;
      t1.toString;
      if (t1)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      table = A.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      t1 = document.createDocumentFragment();
      t1.toString;
      new A._ChildNodeListLazy(t1).addAll$1(0, new A._ChildNodeListLazy(table));
      return t1;
    }
  };
  A.TableRowElement.prototype = {
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var t2,
        t1 = "createContextualFragment" in window.Range.prototype;
      t1.toString;
      if (t1)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      t2 = t1.createDocumentFragment();
      t2.toString;
      t1 = t1.createElement("table");
      t1.toString;
      new A._ChildNodeListLazy(t2).addAll$1(0, new A._ChildNodeListLazy(new A._ChildNodeListLazy(new A._ChildNodeListLazy(B.TableElement_methods.createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator)).get$single(0)).get$single(0)));
      return t2;
    }
  };
  A.TableSectionElement.prototype = {
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var t2,
        t1 = "createContextualFragment" in window.Range.prototype;
      t1.toString;
      if (t1)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      t2 = t1.createDocumentFragment();
      t2.toString;
      t1 = t1.createElement("table");
      t1.toString;
      new A._ChildNodeListLazy(t2).addAll$1(0, new A._ChildNodeListLazy(new A._ChildNodeListLazy(B.TableElement_methods.createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator)).get$single(0)));
      return t2;
    }
  };
  A.TemplateElement.prototype = {
    setInnerHtml$1(receiver, html) {
      var t1, fragment;
      this.set$text(receiver, null);
      t1 = receiver.content;
      t1.toString;
      J._clearChildren$0$x(t1);
      fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, null, null);
      receiver.content.appendChild(fragment).toString;
    },
    $isTemplateElement: 1
  };
  A.TextTrack.prototype = {$isTextTrack: 1};
  A.TextTrackCue.prototype = {$isTextTrackCue: 1};
  A.TextTrackCueList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.TextTrackCue._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TextTrackList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.TextTrack._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TimeRanges.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    }
  };
  A.Touch.prototype = {$isTouch: 1};
  A.TouchList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Touch._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.TrackDefaultList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Url.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    }
  };
  A.VideoTrackList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.Window.prototype = {
    postMessage$2(receiver, message, targetOrigin) {
      receiver.postMessage(new A._StructuredCloneDart2Js([], []).walk$1(message), targetOrigin);
      return;
    },
    $isWindowBase: 1
  };
  A.Worker.prototype = {
    postMessage$1(receiver, message) {
      receiver.postMessage(new A._StructuredCloneDart2Js([], []).walk$1(message));
      return;
    },
    terminate$0(receiver) {
      return receiver.terminate();
    }
  };
  A._Attr.prototype = {$is_Attr: 1};
  A._CssRuleList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.CssRule._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._DomRect.prototype = {
    toString$0(receiver) {
      var t2, t3, t4,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      t3 = receiver.width;
      t3.toString;
      t4 = receiver.height;
      t4.toString;
      return "Rectangle (" + A.S(t1) + ", " + A.S(t2) + ") " + A.S(t3) + " x " + A.S(t4);
    },
    $eq(receiver, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (type$.Rectangle_num._is(other)) {
        t1 = receiver.left;
        t1.toString;
        t2 = other.left;
        t2.toString;
        if (t1 === t2) {
          t1 = receiver.top;
          t1.toString;
          t2 = other.top;
          t2.toString;
          if (t1 === t2) {
            t1 = receiver.width;
            t1.toString;
            t2 = J.getInterceptor$x(other);
            if (t1 === t2.get$width(other)) {
              t1 = receiver.height;
              t1.toString;
              t2 = t1 === t2.get$height(other);
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(receiver) {
      var t2, t3, t4,
        t1 = receiver.left;
      t1.toString;
      t2 = receiver.top;
      t2.toString;
      t3 = receiver.width;
      t3.toString;
      t4 = receiver.height;
      t4.toString;
      return A.Object_hash(t1, t2, t3, t4);
    },
    get$_height(receiver) {
      return receiver.height;
    },
    get$height(receiver) {
      var t1 = receiver.height;
      t1.toString;
      return t1;
    },
    get$_width(receiver) {
      return receiver.width;
    },
    get$width(receiver) {
      var t1 = receiver.width;
      t1.toString;
      return t1;
    }
  };
  A._GamepadList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      type$.nullable_Gamepad._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._NamedNodeMap.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Node._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._SpeechRecognitionResultList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.SpeechRecognitionResult._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._StyleSheetList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1, t2;
      A._asInt(index);
      t1 = receiver.length;
      t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.StyleSheet._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._AttributeMap.prototype = {
    forEach$1(_, f) {
      var t1, t2, t3, _i, t4, value;
      type$.void_Function_String_String._as(f);
      for (t1 = this.get$keys(0), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        t4 = A._asString(t1[_i]);
        value = t3.getAttribute(t4);
        f.call$2(t4, value == null ? A._asString(value) : value);
      }
    },
    get$keys(_) {
      var keys, len, t2, i, attr, t3,
        t1 = this._html$_element.attributes;
      t1.toString;
      keys = A._setArrayType([], type$.JSArray_String);
      for (len = t1.length, t2 = type$._Attr, i = 0; i < len; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        attr = t2._as(t1[i]);
        if (attr.namespaceURI == null) {
          t3 = attr.name;
          t3.toString;
          B.JSArray_methods.add$1(keys, t3);
        }
      }
      return keys;
    },
    get$values(_) {
      var values, len, t2, i, attr, t3,
        t1 = this._html$_element.attributes;
      t1.toString;
      values = A._setArrayType([], type$.JSArray_String);
      for (len = t1.length, t2 = type$._Attr, i = 0; i < len; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        attr = t2._as(t1[i]);
        if (attr.namespaceURI == null) {
          t3 = attr.value;
          t3.toString;
          B.JSArray_methods.add$1(values, t3);
        }
      }
      return values;
    },
    get$isEmpty(_) {
      return this.get$keys(0).length === 0;
    },
    get$isNotEmpty(_) {
      return this.get$keys(0).length !== 0;
    }
  };
  A._ElementAttributeMap.prototype = {
    containsKey$1(_, key) {
      var t1;
      if (typeof key == "string") {
        t1 = this._html$_element.hasAttribute(key);
        t1.toString;
      } else
        t1 = false;
      return t1;
    },
    $index(_, key) {
      return this._html$_element.getAttribute(A._asString(key));
    },
    $indexSet(_, key, value) {
      this._html$_element.setAttribute(A._asString(key), A._asString(value));
    },
    remove$1(_, key) {
      var t1, value;
      if (typeof key == "string") {
        t1 = this._html$_element;
        value = t1.getAttribute(key);
        t1.removeAttribute(key);
        t1 = value;
      } else
        t1 = null;
      return t1;
    },
    get$length(_) {
      return this.get$keys(0).length;
    }
  };
  A.EventStreamProvider.prototype = {};
  A._EventStream0.prototype = {
    get$isBroadcast() {
      return true;
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = A._instanceType(this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return A._EventStreamSubscription$(this._target, this._eventType, onData, false, t1._precomputed1);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._ElementEventStreamImpl.prototype = {};
  A._EventStreamSubscription0.prototype = {
    cancel$0(_) {
      var _this = this;
      if (_this._target == null)
        return $.$get$nullFuture();
      _this._unlisten$0();
      _this._target = null;
      _this.set$_onData(null);
      return $.$get$nullFuture();
    },
    onData$1(handleData) {
      var t1, _this = this;
      _this.$ti._eval$1("~(1)?")._as(handleData);
      if (_this._target == null)
        throw A.wrapException(A.StateError$("Subscription has been canceled."));
      _this._unlisten$0();
      t1 = A._wrapZone0(new A._EventStreamSubscription_onData_closure0(handleData), type$.Event);
      _this.set$_onData(t1);
      _this._tryResume$0();
    },
    pause$0(_) {
      if (this._target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    resume$0(_) {
      var _this = this;
      if (_this._target == null || _this._pauseCount <= 0)
        return;
      --_this._pauseCount;
      _this._tryResume$0();
    },
    _tryResume$0() {
      var t2, _this = this,
        t1 = _this._onData;
      if (t1 != null && _this._pauseCount <= 0) {
        t2 = _this._target;
        t2.toString;
        J.addEventListener$3$x(t2, _this._eventType, t1, false);
      }
    },
    _unlisten$0() {
      var t2,
        t1 = this._onData;
      if (t1 != null) {
        t2 = this._target;
        t2.toString;
        J._removeEventListener$3$x(t2, this._eventType, type$.nullable_dynamic_Function_Event._as(t1), false);
      }
    },
    set$_onData(_onData) {
      this._onData = type$.nullable_dynamic_Function_Event._as(_onData);
    },
    $isStreamSubscription: 1
  };
  A._EventStreamSubscription_closure0.prototype = {
    call$1(e) {
      return this.onData.call$1(type$.Event._as(e));
    },
    $signature: 14
  };
  A._EventStreamSubscription_onData_closure0.prototype = {
    call$1(e) {
      return this.handleData.call$1(type$.Event._as(e));
    },
    $signature: 14
  };
  A._Html5NodeValidator.prototype = {
    _Html5NodeValidator$1$uriPolicy(uriPolicy) {
      var _i;
      if ($._Html5NodeValidator__attributeValidators._length === 0) {
        for (_i = 0; _i < 262; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, B.List_AOY[_i], A.html__Html5NodeValidator__standardAttributeValidator$closure());
        for (_i = 0; _i < 12; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, B.List_4Jt[_i], A.html__Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    allowsElement$1(element) {
      return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, A.Element__safeTagName(element));
    },
    allowsAttribute$3(element, attributeName, value) {
      var validator = $._Html5NodeValidator__attributeValidators.$index(0, A.Element__safeTagName(element) + "::" + attributeName);
      if (validator == null)
        validator = $._Html5NodeValidator__attributeValidators.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return A._asBool(validator.call$4(element, attributeName, value, this));
    },
    $isNodeValidator: 1
  };
  A.ImmutableListMixin.prototype = {
    get$iterator(receiver) {
      return new A.FixedSizeListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("FixedSizeListIterator<ImmutableListMixin.E>"));
    },
    add$1(receiver, value) {
      A.instanceType(receiver)._eval$1("ImmutableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to immutable List."));
    }
  };
  A.NodeValidatorBuilder.prototype = {
    allowsElement$1(element) {
      return B.JSArray_methods.any$1(this._validators, new A.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3(element, attributeName, value) {
      return B.JSArray_methods.any$1(this._validators, new A.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: 1
  };
  A.NodeValidatorBuilder_allowsElement_closure.prototype = {
    call$1(v) {
      return type$.NodeValidator._as(v).allowsElement$1(this.element);
    },
    $signature: 63
  };
  A.NodeValidatorBuilder_allowsAttribute_closure.prototype = {
    call$1(v) {
      return type$.NodeValidator._as(v).allowsAttribute$3(this.element, this.attributeName, this.value);
    },
    $signature: 63
  };
  A._SimpleNodeValidator.prototype = {
    _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
      var legalAttributes, extraUriAttributes, t1;
      this.allowedElements.addAll$1(0, allowedElements);
      legalAttributes = allowedAttributes.where$1(0, new A._SimpleNodeValidator_closure());
      extraUriAttributes = allowedAttributes.where$1(0, new A._SimpleNodeValidator_closure0());
      this.allowedAttributes.addAll$1(0, legalAttributes);
      t1 = this.allowedUriAttributes;
      t1.addAll$1(0, B.List_empty);
      t1.addAll$1(0, extraUriAttributes);
    },
    allowsElement$1(element) {
      return this.allowedElements.contains$1(0, A.Element__safeTagName(element));
    },
    allowsAttribute$3(element, attributeName, value) {
      var t3, _this = this,
        tagName = A.Element__safeTagName(element),
        t1 = _this.allowedUriAttributes,
        t2 = tagName + "::" + attributeName;
      if (t1.contains$1(0, t2))
        return _this.uriPolicy.allowsUri$1(value);
      else {
        t3 = "*::" + attributeName;
        if (t1.contains$1(0, t3))
          return _this.uriPolicy.allowsUri$1(value);
        else {
          t1 = _this.allowedAttributes;
          if (t1.contains$1(0, t2))
            return true;
          else if (t1.contains$1(0, t3))
            return true;
          else if (t1.contains$1(0, tagName + "::*"))
            return true;
          else if (t1.contains$1(0, "*::*"))
            return true;
        }
      }
      return false;
    },
    $isNodeValidator: 1
  };
  A._SimpleNodeValidator_closure.prototype = {
    call$1(x) {
      return !B.JSArray_methods.contains$1(B.List_4Jt, A._asString(x));
    },
    $signature: 3
  };
  A._SimpleNodeValidator_closure0.prototype = {
    call$1(x) {
      return B.JSArray_methods.contains$1(B.List_4Jt, A._asString(x));
    },
    $signature: 3
  };
  A._TemplatingNodeValidator.prototype = {
    allowsAttribute$3(element, attributeName, value) {
      if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    }
  };
  A._TemplatingNodeValidator_closure.prototype = {
    call$1(attr) {
      return "TEMPLATE::" + A._asString(attr);
    },
    $signature: 15
  };
  A._SvgNodeValidator.prototype = {
    allowsElement$1(element) {
      var t1;
      if (type$.ScriptElement._is(element))
        return false;
      t1 = type$.SvgElement._is(element);
      if (t1 && A.Element__safeTagName(element) === "foreignObject")
        return false;
      if (t1)
        return true;
      return false;
    },
    allowsAttribute$3(element, attributeName, value) {
      if (attributeName === "is" || B.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: 1
  };
  A.FixedSizeListIterator.prototype = {
    moveNext$0() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._html$_length;
      if (nextPosition < t1) {
        _this.set$_html$_current(J.$index$asx(_this._array, nextPosition));
        _this._position = nextPosition;
        return true;
      }
      _this.set$_html$_current(null);
      _this._position = t1;
      return false;
    },
    get$current(_) {
      var t1 = this._html$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    set$_html$_current(_current) {
      this._html$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A._DOMWindowCrossFrame.prototype = {
    get$_window() {
      return this.__window;
    },
    postMessage$2(_, message, targetOrigin) {
      this.get$_window().postMessage(new A._StructuredCloneDart2Js([], []).walk$1(message), targetOrigin);
    },
    $isJSObject: 1,
    $isEventTarget: 1,
    $isWindowBase: 1
  };
  A._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  A._ValidatingTreeSanitizer.prototype = {
    sanitizeTree$1(node) {
      var previousTreeModifications,
        walk = new A._ValidatingTreeSanitizer_sanitizeTree_walk(this);
      do {
        previousTreeModifications = this.numTreeModifications;
        walk.call$2(node, null);
      } while (previousTreeModifications !== this.numTreeModifications);
    },
    _removeNode$2(node, $parent) {
      ++this.numTreeModifications;
      if ($parent == null || $parent !== node.parentNode)
        J.remove$0$ax(node);
      else
        $parent.removeChild(node).toString;
    },
    _sanitizeUntrustedElement$2(element, $parent) {
      var corruptedTest1, elementText, elementTagName, t1, corrupted0, exception, t2,
        corrupted = true,
        attrs = null, isAttr = null;
      try {
        attrs = J.get$attributes$x(element);
        isAttr = attrs._html$_element.getAttribute("is");
        type$.Element._as(element);
        t1 = function(element) {
          if (!(element.attributes instanceof NamedNodeMap)) {
            return true;
          }
          if (element.id == "lastChild" || element.name == "lastChild" || element.id == "previousSibling" || element.name == "previousSibling" || element.id == "children" || element.name == "children") {
            return true;
          }
          var childNodes = element.childNodes;
          if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1]) {
            return true;
          }
          if (element.children) {
            if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList)) {
              return true;
            }
          }
          var length = 0;
          if (element.children) {
            length = element.children.length;
          }
          for (var i = 0; i < length; i++) {
            var child = element.children[i];
            if (child.id == "attributes" || child.name == "attributes" || child.id == "lastChild" || child.name == "lastChild" || child.id == "previousSibling" || child.name == "previousSibling" || child.id == "children" || child.name == "children") {
              return true;
            }
          }
          return false;
        }(element);
        t1.toString;
        corruptedTest1 = t1;
        if (A.boolConversionCheck(corruptedTest1))
          corrupted0 = true;
        else {
          t1 = !(element.attributes instanceof NamedNodeMap);
          t1.toString;
          corrupted0 = t1;
        }
        corrupted = corrupted0;
      } catch (exception) {
      }
      elementText = "element unprintable";
      try {
        elementText = J.toString$0$(element);
      } catch (exception) {
      }
      try {
        type$.Element._as(element);
        elementTagName = A.Element__safeTagName(element);
        this._sanitizeElement$7(element, $parent, corrupted, elementText, elementTagName, type$.Map_dynamic_dynamic._as(attrs), A._asStringQ(isAttr));
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.ArgumentError)
          throw exception;
        else {
          this._removeNode$2(element, $parent);
          window.toString;
          t1 = A.S(elementText);
          t2 = typeof console != "undefined";
          t2.toString;
          if (t2)
            window.console.warn("Removing corrupted element " + t1);
        }
      }
    },
    _sanitizeElement$7(element, $parent, corrupted, text, tag, attrs, isAttr) {
      var t1, t2, keys, i, $name, t3, t4, _this = this;
      if (corrupted) {
        _this._removeNode$2(element, $parent);
        window.toString;
        t1 = typeof console != "undefined";
        t1.toString;
        if (t1)
          window.console.warn("Removing element due to corrupted attributes on <" + text + ">");
        return;
      }
      if (!_this.validator.allowsElement$1(element)) {
        _this._removeNode$2(element, $parent);
        window.toString;
        t1 = A.S($parent);
        t2 = typeof console != "undefined";
        t2.toString;
        if (t2)
          window.console.warn("Removing disallowed element <" + tag + "> from " + t1);
        return;
      }
      if (isAttr != null)
        if (!_this.validator.allowsAttribute$3(element, "is", isAttr)) {
          _this._removeNode$2(element, $parent);
          window.toString;
          t1 = typeof console != "undefined";
          t1.toString;
          if (t1)
            window.console.warn("Removing disallowed type extension <" + tag + ' is="' + isAttr + '">');
          return;
        }
      t1 = attrs.get$keys(0);
      keys = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
      for (i = attrs.get$keys(0).length - 1, t1 = attrs._html$_element, t2 = "Removing disallowed attribute <" + tag + " "; i >= 0; --i) {
        if (!(i < keys.length))
          return A.ioore(keys, i);
        $name = keys[i];
        t3 = _this.validator;
        t4 = J.toLowerCase$0$s($name);
        A._asString($name);
        if (!t3.allowsAttribute$3(element, t4, A._asString(t1.getAttribute($name)))) {
          window.toString;
          t3 = t1.getAttribute($name);
          t4 = typeof console != "undefined";
          t4.toString;
          if (t4)
            window.console.warn(t2 + $name + '="' + A.S(t3) + '">');
          t1.removeAttribute($name);
        }
      }
      if (type$.TemplateElement._is(element)) {
        t1 = element.content;
        t1.toString;
        _this.sanitizeTree$1(t1);
      }
    },
    sanitizeNode$2(node, $parent) {
      var t1 = node.nodeType;
      t1.toString;
      switch (t1) {
        case 1:
          this._sanitizeUntrustedElement$2(node, $parent);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          this._removeNode$2(node, $parent);
      }
    },
    $isNodeTreeSanitizer: 1
  };
  A._ValidatingTreeSanitizer_sanitizeTree_walk.prototype = {
    call$2(node, $parent) {
      var child, nextChild, t2, t3, t4, exception,
        t1 = this.$this;
      t1.sanitizeNode$2(node, $parent);
      child = node.lastChild;
      for (t2 = type$.Node; child != null;) {
        nextChild = null;
        try {
          nextChild = child.previousSibling;
          if (nextChild != null) {
            t3 = nextChild.nextSibling;
            t4 = child;
            t4 = t3 == null ? t4 != null : t3 !== t4;
            t3 = t4;
          } else
            t3 = false;
          if (t3) {
            t3 = A.StateError$("Corrupt HTML");
            throw A.wrapException(t3);
          }
        } catch (exception) {
          t3 = t2._as(child);
          ++t1.numTreeModifications;
          t4 = t3.parentNode;
          if (node !== t4) {
            if (t4 != null)
              t4.removeChild(t3).toString;
          } else
            node.removeChild(t3).toString;
          child = null;
          nextChild = node.lastChild;
        }
        if (child != null)
          this.call$2(child, node);
        child = nextChild;
      }
    },
    $signature: 107
  };
  A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase.prototype = {};
  A._DomRectList_JavaScriptObject_ListMixin.prototype = {};
  A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._DomStringList_JavaScriptObject_ListMixin.prototype = {};
  A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._FileList_JavaScriptObject_ListMixin.prototype = {};
  A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._HtmlCollection_JavaScriptObject_ListMixin.prototype = {};
  A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._MidiInputMap_JavaScriptObject_MapMixin.prototype = {};
  A._MidiOutputMap_JavaScriptObject_MapMixin.prototype = {};
  A._MimeTypeArray_JavaScriptObject_ListMixin.prototype = {};
  A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._NodeList_JavaScriptObject_ListMixin.prototype = {};
  A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._PluginArray_JavaScriptObject_ListMixin.prototype = {};
  A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._RtcStatsReport_JavaScriptObject_MapMixin.prototype = {};
  A._SourceBufferList_EventTarget_ListMixin.prototype = {};
  A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  A._SpeechGrammarList_JavaScriptObject_ListMixin.prototype = {};
  A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._Storage_JavaScriptObject_MapMixin.prototype = {};
  A._TextTrackCueList_JavaScriptObject_ListMixin.prototype = {};
  A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._TextTrackList_EventTarget_ListMixin.prototype = {};
  A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  A._TouchList_JavaScriptObject_ListMixin.prototype = {};
  A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__CssRuleList_JavaScriptObject_ListMixin.prototype = {};
  A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__GamepadList_JavaScriptObject_ListMixin.prototype = {};
  A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__NamedNodeMap_JavaScriptObject_ListMixin.prototype = {};
  A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin.prototype = {};
  A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__StyleSheetList_JavaScriptObject_ListMixin.prototype = {};
  A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._StructuredClone.prototype = {
    findSlot$1(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      B.JSArray_methods.add$1(t1, value);
      B.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1(e) {
      var slot, t2, copy, t3, _this = this, t1 = {};
      if (e == null)
        return e;
      if (A._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof A.DateTime)
        return new Date(e._value);
      if (e instanceof A.JSSyntaxRegExp)
        throw A.wrapException(A.UnimplementedError$("structured clone of RegExp"));
      if (type$.File._is(e))
        return e;
      if (type$.Blob._is(e))
        return e;
      if (type$.FileList._is(e))
        return e;
      if (type$.ImageData._is(e))
        return e;
      if (type$.NativeByteBuffer._is(e) || type$.NativeTypedData._is(e) || type$.MessagePort._is(e) || type$.SharedArrayBuffer._is(e))
        return e;
      if (type$.Map_dynamic_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (!(slot < t2.length))
          return A.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        B.JSArray_methods.$indexSet(t2, slot, copy);
        J.forEach$1$ax(e, new A._StructuredClone_walk_closure(t1, _this));
        return t1.copy;
      }
      if (type$.List_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (!(slot < t1.length))
          return A.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        return _this.copyList$2(e, slot);
      }
      if (type$.JSObject._is(e)) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (!(slot < t2.length))
          return A.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        t3 = {};
        t3.toString;
        t1.copy = t3;
        B.JSArray_methods.$indexSet(t2, slot, t3);
        _this.forEachObjectKey$2(e, new A._StructuredClone_walk_closure0(t1, _this));
        return t1.copy;
      }
      throw A.wrapException(A.UnimplementedError$("structured clone of other type"));
    },
    copyList$2(e, slot) {
      var i,
        t1 = J.getInterceptor$asx(e),
        $length = t1.get$length(e),
        t2 = new Array($length);
      t2.toString;
      B.JSArray_methods.$indexSet(this.copies, slot, t2);
      for (i = 0; i < $length; ++i)
        B.JSArray_methods.$indexSet(t2, i, this.walk$1(t1.$index(e, i)));
      return t2;
    }
  };
  A._StructuredClone_walk_closure.prototype = {
    call$2(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 29
  };
  A._StructuredClone_walk_closure0.prototype = {
    call$2(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 35
  };
  A._AcceptStructuredClone.prototype = {
    findSlot$1(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      B.JSArray_methods.add$1(t1, value);
      B.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1(e) {
      var t1, slot, copy, t2, map, t3, $length, t4, i, _this = this;
      if (e == null)
        return e;
      if (A._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      t1 = e instanceof Date;
      t1.toString;
      if (t1) {
        t1 = e.getTime();
        t1.toString;
        return A.DateTime$fromMillisecondsSinceEpoch(t1, true);
      }
      t1 = e instanceof RegExp;
      t1.toString;
      if (t1)
        throw A.wrapException(A.UnimplementedError$("structured clone of RegExp"));
      t1 = typeof Promise != "undefined" && e instanceof Promise;
      t1.toString;
      if (t1)
        return A.promiseToFuture(e, type$.dynamic);
      if (A.isJavaScriptSimpleObject(e)) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (!(slot < t1.length))
          return A.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = type$.dynamic;
        map = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        B.JSArray_methods.$indexSet(t1, slot, map);
        _this.forEachJsField$2(e, new A._AcceptStructuredClone_walk_closure(_this, map));
        return map;
      }
      t1 = e instanceof Array;
      t1.toString;
      if (t1) {
        t1 = e;
        t1.toString;
        slot = _this.findSlot$1(t1);
        t2 = _this.copies;
        if (!(slot < t2.length))
          return A.ioore(t2, slot);
        copy = t2[slot];
        if (copy != null)
          return copy;
        t3 = J.getInterceptor$asx(t1);
        $length = t3.get$length(t1);
        if (_this.mustCopy) {
          t4 = new Array($length);
          t4.toString;
          copy = t4;
        } else
          copy = t1;
        B.JSArray_methods.$indexSet(t2, slot, copy);
        for (t2 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
          t2.$indexSet(copy, i, _this.walk$1(t3.$index(t1, i)));
        return copy;
      }
      return e;
    },
    convertNativeToDart_AcceptStructuredClone$2$mustCopy(object, mustCopy) {
      this.mustCopy = true;
      return this.walk$1(object);
    }
  };
  A._AcceptStructuredClone_walk_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this.walk$1(value);
      this.map.$indexSet(0, key, t1);
      return t1;
    },
    $signature: 108
  };
  A._StructuredCloneDart2Js.prototype = {
    forEachObjectKey$2(object, action) {
      var t1, t2, _i, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  A._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2(object, action) {
      var t1, t2, _i, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  A.jsify__convert.prototype = {
    call$1(o) {
      var t1, convertedMap, t2, key, convertedList;
      if (A._noJsifyRequired(o))
        return o;
      t1 = this._convertedObjects;
      if (t1.containsKey$1(0, o))
        return t1.$index(0, o);
      if (type$.Map_of_nullable_Object_and_nullable_Object._is(o)) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.getInterceptor$x(o), t2 = J.get$iterator$ax(t1.get$keys(o)); t2.moveNext$0();) {
          key = t2.get$current(t2);
          convertedMap[key] = this.call$1(t1.$index(o, key));
        }
        return convertedMap;
      } else if (type$.Iterable_nullable_Object._is(o)) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        B.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return o;
    },
    $signature: 62
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(0, this.T._eval$1("0/?")._as(r));
    },
    $signature: 5
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(new A.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 5
  };
  A.dartify_convert.prototype = {
    call$1(o) {
      var t1, proto, t2, dartObject, originalKeys, dartKeys, i, jsKey, dartKey, l, $length;
      if (A._noDartifyRequired(o))
        return o;
      t1 = this._convertedObjects;
      o.toString;
      if (t1.containsKey$1(0, o))
        return t1.$index(0, o);
      if (o instanceof Date)
        return A.DateTime$fromMillisecondsSinceEpoch(o.getTime(), true);
      if (o instanceof RegExp)
        throw A.wrapException(A.ArgumentError$("structured clone of RegExp", null));
      if (typeof Promise != "undefined" && o instanceof Promise)
        return A.promiseToFuture(o, type$.nullable_Object);
      proto = Object.getPrototypeOf(o);
      if (proto === Object.prototype || proto === null) {
        t2 = type$.nullable_Object;
        dartObject = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        t1.$indexSet(0, o, dartObject);
        originalKeys = Object.keys(o);
        dartKeys = [];
        for (t1 = J.getInterceptor$ax(originalKeys), t2 = t1.get$iterator(originalKeys); t2.moveNext$0();)
          dartKeys.push(A.dartify(t2.get$current(t2)));
        for (i = 0; i < t1.get$length(originalKeys); ++i) {
          jsKey = t1.$index(originalKeys, i);
          if (!(i < dartKeys.length))
            return A.ioore(dartKeys, i);
          dartKey = dartKeys[i];
          if (jsKey != null)
            dartObject.$indexSet(0, dartKey, this.call$1(o[jsKey]));
        }
        return dartObject;
      }
      if (o instanceof Array) {
        l = o;
        dartObject = [];
        t1.$indexSet(0, o, dartObject);
        $length = A._asInt(o.length);
        for (t1 = J.getInterceptor$asx(l), i = 0; i < $length; ++i)
          dartObject.push(this.call$1(t1.$index(l, i)));
        return dartObject;
      }
      return o;
    },
    $signature: 62
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    },
    $isException: 1
  };
  A.Length.prototype = {$isLength: 1};
  A.LengthList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1;
      A._asInt(index);
      t1 = receiver.length;
      t1.toString;
      t1 = index >>> 0 !== index || index >= t1;
      t1.toString;
      if (t1)
        throw A.wrapException(A.IndexError$withLength(index, this.get$length(receiver), receiver, null, null));
      t1 = receiver.getItem(index);
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Length._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.Number.prototype = {$isNumber: 1};
  A.NumberList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1;
      A._asInt(index);
      t1 = receiver.length;
      t1.toString;
      t1 = index >>> 0 !== index || index >= t1;
      t1.toString;
      if (t1)
        throw A.wrapException(A.IndexError$withLength(index, this.get$length(receiver), receiver, null, null));
      t1 = receiver.getItem(index);
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Number._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.PointList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.ScriptElement0.prototype = {$isScriptElement0: 1};
  A.StringList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1;
      A._asInt(index);
      t1 = receiver.length;
      t1.toString;
      t1 = index >>> 0 !== index || index >= t1;
      t1.toString;
      if (t1)
        throw A.wrapException(A.IndexError$withLength(index, this.get$length(receiver), receiver, null, null));
      t1 = receiver.getItem(index);
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      A._asString(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SvgElement.prototype = {
    get$outerHtml(receiver) {
      var cloned,
        t1 = document.createElement("div");
      t1.toString;
      cloned = type$.SvgElement._as(this.clone$1(receiver, true));
      t1.children.toString;
      t1.appendChild(cloned).toString;
      return t1.innerHTML;
    },
    set$innerHtml(receiver, value) {
      this.setInnerHtml$1(receiver, value);
    },
    createFragment$3$treeSanitizer$validator(receiver, svg, treeSanitizer, validator) {
      var t2, fragment, root,
        t1 = A._setArrayType([], type$.JSArray_NodeValidator);
      B.JSArray_methods.add$1(t1, A._Html5NodeValidator$(null));
      B.JSArray_methods.add$1(t1, A._TemplatingNodeValidator$());
      B.JSArray_methods.add$1(t1, new A._SvgNodeValidator());
      treeSanitizer = new A._ValidatingTreeSanitizer(new A.NodeValidatorBuilder(t1));
      t1 = document;
      t2 = t1.body;
      t2.toString;
      fragment = B.BodyElement_methods.createFragment$2$treeSanitizer(t2, '<svg version="1.1">' + svg + "</svg>", treeSanitizer);
      t1 = t1.createDocumentFragment();
      t1.toString;
      root = new A._ChildNodeListLazy(fragment).get$single(0);
      for (; t2 = root.firstChild, t2 != null;)
        t1.appendChild(t2).toString;
      return t1;
    },
    $isSvgElement: 1
  };
  A.Transform.prototype = {$isTransform: 1};
  A.TransformList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1;
      A._asInt(index);
      t1 = receiver.length;
      t1.toString;
      t1 = index >>> 0 !== index || index >= t1;
      t1.toString;
      if (t1)
        throw A.wrapException(A.IndexError$withLength(index, this.get$length(receiver), receiver, null, null));
      t1 = receiver.getItem(index);
      t1.toString;
      return t1;
    },
    $indexSet(receiver, index, value) {
      type$.Transform._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length(receiver, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._LengthList_JavaScriptObject_ListMixin.prototype = {};
  A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._NumberList_JavaScriptObject_ListMixin.prototype = {};
  A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._StringList_JavaScriptObject_ListMixin.prototype = {};
  A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._TransformList_JavaScriptObject_ListMixin.prototype = {};
  A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.AudioBuffer.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.AudioParamMap.prototype = {
    containsKey$1(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key))) != null;
    },
    $index(receiver, key) {
      return A.convertNativeToDart_Dictionary(receiver.get(A._asString(key)));
    },
    forEach$1(receiver, f) {
      var entries, entry, t1;
      type$.void_Function_String_dynamic._as(f);
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        t1 = entry.done;
        t1.toString;
        if (t1)
          return;
        t1 = entry.value[0];
        t1.toString;
        f.call$2(t1, A.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys(receiver) {
      var keys = A._setArrayType([], type$.JSArray_String);
      this.forEach$1(receiver, new A.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$values(receiver) {
      var values = A._setArrayType([], type$.JSArray_Map_dynamic_dynamic);
      this.forEach$1(receiver, new A.AudioParamMap_values_closure(values));
      return values;
    },
    get$length(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1;
    },
    get$isEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 === 0;
    },
    get$isNotEmpty(receiver) {
      var t1 = receiver.size;
      t1.toString;
      return t1 !== 0;
    },
    $indexSet(receiver, key, value) {
      A._asString(key);
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    remove$1(receiver, key) {
      throw A.wrapException(A.UnsupportedError$("Not supported"));
    },
    $isMap: 1
  };
  A.AudioParamMap_keys_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 10
  };
  A.AudioParamMap_values_closure.prototype = {
    call$2(k, v) {
      return B.JSArray_methods.add$1(this.values, type$.Map_dynamic_dynamic._as(v));
    },
    $signature: 10
  };
  A.AudioTrackList.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.BaseAudioContext.prototype = {};
  A.OfflineAudioContext.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A._AudioParamMap_JavaScriptObject_MapMixin.prototype = {};
  A.AsyncMemoizer.prototype = {
    runOnce$1(computation) {
      var t2, t3,
        t1 = this.$ti;
      t1._eval$1("1/()")._as(computation);
      t2 = this._async_memoizer$_completer;
      t3 = t2.future;
      if ((t3._state & 30) === 0)
        t2.complete$1(0, A.Future_Future$sync(computation, t1._precomputed1));
      return t3;
    }
  };
  A.DelegatingSink.prototype = {$isSink: 1};
  A.FutureGroup.prototype = {
    add$1(_, task) {
      var t1, index, _this = this;
      _this.$ti._eval$1("Future<1>")._as(task);
      if (_this._future_group$_closed)
        throw A.wrapException(A.StateError$("The FutureGroup is closed."));
      t1 = _this._future_group$_values;
      index = t1.length;
      B.JSArray_methods.add$1(t1, null);
      ++_this._future_group$_pending;
      task.then$1$1(new A.FutureGroup_add_closure(_this, index), type$.Null).catchError$1(new A.FutureGroup_add_closure0(_this));
    },
    close$0(_) {
      var t1, t2, _this = this;
      _this._future_group$_closed = true;
      if (_this._future_group$_pending !== 0)
        return;
      t1 = _this._future_group$_completer;
      if ((t1.future._state & 30) !== 0)
        return;
      t2 = _this.$ti._eval$1("WhereTypeIterable<1>");
      t1.complete$1(0, A.List_List$of(new A.WhereTypeIterable(_this._future_group$_values, t2), true, t2._eval$1("Iterable.E")));
    },
    $isSink: 1
  };
  A.FutureGroup_add_closure.prototype = {
    call$1(value) {
      var t3, t4,
        t1 = this.$this,
        t2 = t1.$ti;
      t2._precomputed1._as(value);
      t3 = t1._future_group$_completer;
      if ((t3.future._state & 30) !== 0)
        return null;
      --t1._future_group$_pending;
      t4 = t1._future_group$_values;
      B.JSArray_methods.$indexSet(t4, this.index, value);
      if (t1._future_group$_pending !== 0)
        return null;
      if (!t1._future_group$_closed)
        return null;
      t1 = t2._eval$1("WhereTypeIterable<1>");
      t3.complete$1(0, A.List_List$of(new A.WhereTypeIterable(t4, t1), true, t1._eval$1("Iterable.E")));
    },
    $signature() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  A.FutureGroup_add_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this.$this._future_group$_completer;
      if ((t1.future._state & 30) !== 0)
        return null;
      t1.completeError$2(error, stackTrace);
    },
    $signature: 28
  };
  A.StreamGroup.prototype = {
    add$1(_, stream) {
      var t1, _this = this;
      _this.$ti._eval$1("Stream<1>")._as(stream);
      if (_this._stream_group$_closed)
        throw A.wrapException(A.StateError$("Can't add a Stream to a closed StreamGroup."));
      t1 = _this._stream_group$_state;
      if (t1 === B._StreamGroupState_dormant)
        _this._stream_group$_subscriptions.putIfAbsent$2(0, stream, new A.StreamGroup_add_closure());
      else if (t1 === B._StreamGroupState_canceled)
        return stream.listen$1(null).cancel$0(0);
      else
        _this._stream_group$_subscriptions.putIfAbsent$2(0, stream, new A.StreamGroup_add_closure0(_this, stream));
      return null;
    },
    _onListen$0() {
      var stream, t1, t2, t3, _i, entry, exception, _this = this;
      _this._stream_group$_state = B._StreamGroupState_listening;
      for (t1 = _this._stream_group$_subscriptions, t2 = A.List_List$of(t1.get$entries(t1), true, _this.$ti._eval$1("MapEntry<Stream<1>,StreamSubscription<1>?>")), t3 = t2.length, _i = 0; _i < t3; ++_i) {
        entry = t2[_i];
        if (entry.value != null)
          continue;
        stream = entry.key;
        try {
          t1.$indexSet(0, stream, _this._listenToStream$1(stream));
        } catch (exception) {
          t1 = _this._stream_group$_onCancel$0();
          if (t1 != null)
            t1.catchError$1(new A.StreamGroup__onListen_closure());
          throw exception;
        }
      }
    },
    _stream_group$_onCancel$0() {
      var t1, t2, futures;
      this._stream_group$_state = B._StreamGroupState_canceled;
      t1 = this._stream_group$_subscriptions;
      t2 = A.IterableNullableExtension_whereNotNull(t1.get$entries(t1).map$1$1(0, new A.StreamGroup__onCancel_closure(this), type$.nullable_Future_void), type$.Future_void);
      futures = A.List_List$of(t2, true, t2.$ti._eval$1("Iterable.E"));
      t1.clear$0(0);
      return futures.length === 0 ? null : A.Future_wait(futures, false, type$.void);
    },
    _onCancelBroadcast$0() {
      this._stream_group$_state = B._StreamGroupState_dormant;
      this._stream_group$_subscriptions.forEach$1(0, new A.StreamGroup__onCancelBroadcast_closure(this));
    },
    _listenToStream$1(stream) {
      var t2, subscription, _this = this,
        t1 = _this.$ti;
      t1._eval$1("Stream<1>")._as(stream);
      t2 = _this.__StreamGroup__controller_A;
      t2 === $ && A.throwLateFieldNI("_controller");
      subscription = stream.listen$3$onDone$onError(t1._eval$1("~(1)")._as(t2.get$add(t2)), new A.StreamGroup__listenToStream_closure(_this, stream), t2.get$addError());
      if (_this._stream_group$_state === B._StreamGroupState_paused)
        subscription.pause$0(0);
      return subscription;
    },
    close$0(_) {
      var t1, _this = this,
        _s11_ = "_controller";
      if (_this._stream_group$_closed) {
        t1 = _this.__StreamGroup__controller_A;
        t1 === $ && A.throwLateFieldNI(_s11_);
        return t1._ensureDoneFuture$0();
      }
      _this._stream_group$_closed = true;
      if (_this._stream_group$_subscriptions._length === 0) {
        t1 = _this.__StreamGroup__controller_A;
        t1 === $ && A.throwLateFieldNI(_s11_);
        t1.close$0(0);
      }
      t1 = _this.__StreamGroup__controller_A;
      t1 === $ && A.throwLateFieldNI(_s11_);
      return t1._ensureDoneFuture$0();
    },
    set$__StreamGroup__controller_A(__StreamGroup__controller_A) {
      this.__StreamGroup__controller_A = this.$ti._eval$1("StreamController<1>")._as(__StreamGroup__controller_A);
    },
    $isSink: 1
  };
  A.StreamGroup_add_closure.prototype = {
    call$0() {
      return null;
    },
    $signature: 2
  };
  A.StreamGroup_add_closure0.prototype = {
    call$0() {
      return this.$this._listenToStream$1(this.stream);
    },
    $signature() {
      return this.$this.$ti._eval$1("StreamSubscription<1>()");
    }
  };
  A.StreamGroup__onListen_closure.prototype = {
    call$1(_) {
    },
    $signature: 6
  };
  A.StreamGroup__onCancel_closure.prototype = {
    call$1(entry) {
      var subscription, t1, exception;
      this.$this.$ti._eval$1("MapEntry<Stream<1>,StreamSubscription<1>?>")._as(entry);
      subscription = entry.value;
      try {
        if (subscription != null) {
          t1 = J.cancel$0$z(subscription);
          return t1;
        }
        t1 = entry.key.listen$1(null).cancel$0(0);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    $signature() {
      return this.$this.$ti._eval$1("Future<~>?(MapEntry<Stream<1>,StreamSubscription<1>?>)");
    }
  };
  A.StreamGroup__onCancelBroadcast_closure.prototype = {
    call$2(stream, subscription) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t2._eval$1("Stream<1>")._as(stream);
      t2._eval$1("StreamSubscription<1>?")._as(subscription);
      if (!stream.get$isBroadcast())
        return;
      subscription.cancel$0(0);
      t1._stream_group$_subscriptions.$indexSet(0, stream, null);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(Stream<1>,StreamSubscription<1>?)");
    }
  };
  A.StreamGroup__listenToStream_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._stream_group$_subscriptions,
        subscription = t2.remove$1(0, t1.$ti._eval$1("Stream<1>")._as(this.stream)),
        future = subscription == null ? null : subscription.cancel$0(0);
      if (t2._length === 0)
        if (t1._stream_group$_closed) {
          t1 = t1.__StreamGroup__controller_A;
          t1 === $ && A.throwLateFieldNI("_controller");
          A.scheduleMicrotask(t1.get$close(t1));
        }
      return future;
    },
    $signature: 1
  };
  A._StreamGroupState.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.All.prototype = {
    evaluate$1(_, semantics) {
      type$.bool_Function_String._as(semantics);
      return true;
    },
    intersection$1(_, other) {
      return other;
    },
    validate$1(isDefined) {
      type$.bool_Function_String._as(isDefined);
    },
    toString$0(_) {
      return "<all>";
    },
    $isBooleanSelector: 1
  };
  A.CancelationToken.prototype = {
    get$isCanceled() {
      return this.get$exception() != null;
    }
  };
  A.CanceledException.prototype = {
    toString$0(_) {
      var t1 = this.message;
      return B.JSString_methods.trim$0(t1).length === 0 ? A.getRuntimeTypeOfDartObject(this).toString$0(0) : A.getRuntimeTypeOfDartObject(this).toString$0(0) + ": " + t1;
    },
    $isException: 1,
    get$message(receiver) {
      return this.message;
    },
    get$stackTrace() {
      return null;
    }
  };
  A.CanceledExceptions.prototype = {
    get$innerExceptions() {
      var t1 = this._canceled_exceptions$_exceptions,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("CanceledException(1)")._as(B.CONSTANT0), t2._eval$1("MappedListIterable<1,CanceledException>"));
    },
    get$message(_) {
      var t1 = this._canceled_exceptions$_exceptions,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.CanceledExceptions_message_closure()), t2._eval$1("MappedListIterable<1,String>")).join$1(0, "\n");
    },
    get$stackTrace() {
      return null;
    },
    $isException: 1,
    $isCanceledException: 1
  };
  A.CanceledExceptions_message_closure.prototype = {
    call$1(e) {
      type$.CanceledException._as(e);
      return e.get$message(e);
    },
    $signature: 113
  };
  A.TimeoutCanceledException.prototype = {$isTimeoutException: 1,
    get$duration() {
      return null;
    }
  };
  A.CancelableToken.prototype = {
    get$exception() {
      return this._cancelable_token$_exception;
    },
    get$onCanceled() {
      return this._cancelable_token$_canceler.future;
    },
    ensureStarted$0() {
    },
    cancel$1(_, exception) {
      var t1, t2;
      type$.nullable_CanceledException._as(exception);
      t1 = this._cancelable_token$_exception;
      if (t1 == null)
        t1 = this._cancelable_token$_exception = exception == null ? new A.CanceledException("Operation was canceled.") : exception;
      t2 = this._cancelable_token$_canceler;
      if ((t2.future._state & 30) === 0)
        t2.complete$1(0, t1);
      return $.$get$CancelableToken__canceledFuture();
    },
    cancel$0(_) {
      return this.cancel$1(0, null);
    }
  };
  A._Mode.prototype = {
    _enumToString$0() {
      return "_Mode." + this._name;
    }
  };
  A.CompositeToken.prototype = {
    CompositeToken$_$2(tokens, _mode) {
      var t1, t2, idx;
      this._checkTokens$0();
      for (t1 = this._tokens, t2 = type$.void, idx = 0; idx < t1.length; ++idx)
        t1[idx].get$onCanceled().then$1$1(new A.CompositeToken$__closure(this, idx), t2);
    },
    get$onCanceled() {
      return this._canceler.future;
    },
    get$exception() {
      return this._composite_token$_exception;
    },
    ensureStarted$0() {
      var t1, t2, _i;
      for (t1 = this._tokens, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].ensureStarted$0();
    },
    _checkTokens$1(idx) {
      var t1, pending, first, i, t2, ex, t3, _this = this;
      if (_this._composite_token$_exception == null) {
        t1 = _this._tokens;
        pending = t1.length;
        for (first = null, i = 0; t2 = t1.length, i < t2; ++i) {
          ex = t1[i].get$exception();
          if (ex != null) {
            --pending;
            if (first == null)
              first = ex;
          }
        }
        switch (_this._mode) {
          case B._Mode_0:
            if (_this._composite_token$_exception == null) {
              if (idx != null) {
                if (idx >>> 0 !== idx || idx >= t2)
                  return A.ioore(t1, idx);
                t1 = t1[idx].get$exception();
              } else
                t1 = first;
              _this._composite_token$_exception = t1;
            }
            break;
          case B._Mode_1:
            if (_this._composite_token$_exception == null) {
              if (pending === 0) {
                t2 = A._arrayInstanceType(t1);
                t3 = type$.WhereTypeIterable_CanceledException;
                t3 = new A.CanceledExceptions(A.List_List$of(new A.WhereTypeIterable(new A.MappedListIterable(t1, t2._eval$1("CanceledException?(1)")._as(new A.CompositeToken__checkTokens_closure()), t2._eval$1("MappedListIterable<1,CanceledException?>")), t3), true, t3._eval$1("Iterable.E")));
                t1 = t3;
              } else
                t1 = null;
              _this._composite_token$_exception = t1;
            }
            break;
        }
        t1 = _this._canceler;
        if ((t1.future._state & 30) === 0 && _this._composite_token$_exception != null)
          t1.complete$1(0, _this._composite_token$_exception);
      }
    },
    _checkTokens$0() {
      return this._checkTokens$1(null);
    }
  };
  A.CompositeToken$__closure.prototype = {
    call$1(_) {
      type$.CanceledException._as(_);
      return this.$this._checkTokens$1(this.idx);
    },
    $signature: 61
  };
  A.CompositeToken__checkTokens_closure.prototype = {
    call$1(e) {
      return type$.CancelationToken._as(e).get$exception();
    },
    $signature: 128
  };
  A.TimeoutToken.prototype = {
    get$exception() {
      return (this._timeout_token$_canceler.future._state & 30) !== 0 ? this._timeout_token$_exception : null;
    },
    get$onCanceled() {
      return this._timeout_token$_canceler.future;
    },
    ensureStarted$0() {
      var _this = this,
        t1 = _this.timeout;
      if (t1._duration === 0)
        _this._timeout_token$_cancel$0();
      else if (_this._timeout_token$_timer == null)
        _this._timeout_token$_timer = A.Timer_Timer$periodic(t1, new A.TimeoutToken_ensureStarted_closure(_this));
    },
    _timeout_token$_cancel$0() {
      var t2,
        t1 = this._timeout_token$_exception;
      if (t1 == null)
        t1 = this._timeout_token$_exception = new A.TimeoutCanceledException("Operation timed out.");
      t2 = this._timeout_token$_canceler;
      if ((t2.future._state & 30) === 0)
        t2.complete$1(0, t1);
    }
  };
  A.TimeoutToken_ensureStarted_closure.prototype = {
    call$1(t) {
      type$.Timer._as(t);
      this.$this._timeout_token$_cancel$0();
      t.cancel$0(0);
    },
    $signature: 41
  };
  A.EmptyUnmodifiableSet.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$length(_) {
      return 0;
    },
    contains$1(_, element) {
      return false;
    },
    toSet$0(_) {
      return A.LinkedHashSet_LinkedHashSet$_empty(this.$ti._precomputed1);
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1
  };
  A._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin.prototype = {};
  A.mergeMaps_closure.prototype = {
    call$2(key, mapValue) {
      var t1, t2, t3, _this = this;
      _this.K._as(key);
      t1 = _this.V;
      t1._as(mapValue);
      t2 = _this.result;
      if (t2.containsKey$1(0, key)) {
        t3 = t2.$index(0, key);
        t1 = t3 == null ? t1._as(t3) : t3;
        t1 = _this.value.call$2(t1, mapValue);
      } else
        t1 = mapValue;
      t2.$indexSet(0, key, t1);
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("~(1,2)");
    }
  };
  A.QueueList.prototype = {
    add$1(_, element) {
      this._queue_list$_add$1(0, A._instanceType(this)._eval$1("QueueList.E")._as(element));
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    get$length(_) {
      var _this = this;
      return (_this.get$_tail() - _this.get$_head(_this) & J.get$length$asx(_this._table) - 1) >>> 0;
    },
    set$length(_, value) {
      var delta, newTail, t1, t2, _this = this;
      if (value < 0)
        throw A.wrapException(A.RangeError$("Length " + value + " may not be negative."));
      if (value > _this.get$length(0) && !A._instanceType(_this)._eval$1("QueueList.E")._is(null))
        throw A.wrapException(A.UnsupportedError$("The length can only be increased when the element type is nullable, but the current element type is `" + A.createRuntimeType(A._instanceType(_this)._eval$1("QueueList.E")).toString$0(0) + "`."));
      delta = value - _this.get$length(0);
      if (delta >= 0) {
        if (J.get$length$asx(_this._table) <= value)
          _this._preGrow$1(value);
        _this.set$_tail((_this.get$_tail() + delta & J.get$length$asx(_this._table) - 1) >>> 0);
        return;
      }
      newTail = _this.get$_tail() + delta;
      t1 = _this._table;
      if (newTail >= 0)
        J.fillRange$3$ax(t1, newTail, _this.get$_tail(), null);
      else {
        newTail += J.get$length$asx(t1);
        J.fillRange$3$ax(_this._table, 0, _this.get$_tail(), null);
        t1 = _this._table;
        t2 = J.getInterceptor$asx(t1);
        t2.fillRange$3(t1, newTail, t2.get$length(t1), null);
      }
      _this.set$_tail(newTail);
    },
    $index(_, index) {
      var t1, _this = this;
      A._asInt(index);
      if (index < 0 || index >= _this.get$length(0))
        throw A.wrapException(A.RangeError$("Index " + index + " must be in the range [0.." + _this.get$length(0) + ")."));
      t1 = J.$index$asx(_this._table, (_this.get$_head(_this) + index & J.get$length$asx(_this._table) - 1) >>> 0);
      return t1 == null ? A._instanceType(_this)._eval$1("QueueList.E")._as(t1) : t1;
    },
    $indexSet(_, index, value) {
      var _this = this;
      A._instanceType(_this)._eval$1("QueueList.E")._as(value);
      if (index < 0 || index >= _this.get$length(0))
        throw A.wrapException(A.RangeError$("Index " + index + " must be in the range [0.." + _this.get$length(0) + ")."));
      J.$indexSet$ax(_this._table, (_this.get$_head(_this) + index & J.get$length$asx(_this._table) - 1) >>> 0, value);
    },
    _queue_list$_add$1(_, element) {
      var newTable, split, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("QueueList.E")._as(element);
      J.$indexSet$ax(_this._table, _this.get$_tail(), element);
      _this.set$_tail((_this.get$_tail() + 1 & J.get$length$asx(_this._table) - 1) >>> 0);
      if (_this.get$_head(_this) === _this.get$_tail()) {
        newTable = A.List_List$filled(J.get$length$asx(_this._table) * 2, null, false, t1._eval$1("QueueList.E?"));
        split = J.get$length$asx(_this._table) - _this.get$_head(_this);
        B.JSArray_methods.setRange$4(newTable, 0, split, _this._table, _this.get$_head(_this));
        B.JSArray_methods.setRange$4(newTable, split, split + _this.get$_head(_this), _this._table, 0);
        _this.set$_head(0, 0);
        _this.set$_tail(J.get$length$asx(_this._table));
        _this.set$_table(newTable);
      }
    },
    _writeToList$1(target) {
      var $length, firstPartSize, _this = this;
      A._instanceType(_this)._eval$1("List<QueueList.E?>")._as(target);
      if (_this.get$_head(_this) <= _this.get$_tail()) {
        $length = _this.get$_tail() - _this.get$_head(_this);
        B.JSArray_methods.setRange$4(target, 0, $length, _this._table, _this.get$_head(_this));
        return $length;
      } else {
        firstPartSize = J.get$length$asx(_this._table) - _this.get$_head(_this);
        B.JSArray_methods.setRange$4(target, 0, firstPartSize, _this._table, _this.get$_head(_this));
        B.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + _this.get$_tail(), _this._table, 0);
        return _this.get$_tail() + firstPartSize;
      }
    },
    _preGrow$1(newElementCount) {
      var _this = this,
        newTable = A.List_List$filled(A.QueueList__nextPowerOf2(newElementCount + B.JSInt_methods._shrOtherPositive$1(newElementCount, 1)), null, false, A._instanceType(_this)._eval$1("QueueList.E?"));
      _this.set$_tail(_this._writeToList$1(newTable));
      _this.set$_table(newTable);
      _this.set$_head(0, 0);
    },
    set$_table(_table) {
      this._table = A._instanceType(this)._eval$1("List<QueueList.E?>")._as(_table);
    },
    set$_head(_, _head) {
      this._head = A._asInt(_head);
    },
    set$_tail(_tail) {
      this._tail = A._asInt(_tail);
    },
    $isEfficientLengthIterable: 1,
    $isQueue: 1,
    $isIterable: 1,
    $isList: 1,
    get$_head(receiver) {
      return this._head;
    },
    get$_tail() {
      return this._tail;
    }
  };
  A._QueueList_Object_ListMixin.prototype = {};
  A.UnionSet.prototype = {
    get$length(_) {
      var t1 = this._sets.fold$1$2(0, 0, new A.UnionSet_length_closure(this), type$.int);
      return t1;
    },
    get$iterator(_) {
      var t1 = this.get$_union_set$_iterable();
      return t1.get$iterator(t1);
    },
    get$_union_set$_iterable() {
      var t1 = this._sets,
        t2 = this.$ti._precomputed1,
        t3 = A._instanceType(t1),
        t4 = t3._bind$1(t2)._eval$1("Iterable<1>(2)")._as(new A.UnionSet__iterable_closure(this));
      return new A.ExpandIterable(t1, t4, t3._eval$1("@<1>")._bind$1(t2)._eval$1("ExpandIterable<1,2>"));
    },
    contains$1(_, element) {
      return this._sets.any$1(0, new A.UnionSet_contains_closure(this, element));
    },
    toSet$0(_) {
      var t2, t3, t4,
        t1 = A.LinkedHashSet_LinkedHashSet$_empty(this.$ti._precomputed1);
      for (t2 = this._sets, t2 = A._LinkedHashSetIterator$(t2, t2._collection$_modifications, A._instanceType(t2)._precomputed1), t3 = t2.$ti._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        t1.addAll$1(0, t4 == null ? t3._as(t4) : t4);
      }
      return t1;
    }
  };
  A.UnionSet_length_closure.prototype = {
    call$2($length, set) {
      A._asInt($length);
      this.$this.$ti._eval$1("Set<1>")._as(set);
      return $length + set.get$length(set);
    },
    $signature() {
      return this.$this.$ti._eval$1("int(int,Set<1>)");
    }
  };
  A.UnionSet__iterable_closure.prototype = {
    call$1(set) {
      return this.$this.$ti._eval$1("Set<1>")._as(set);
    },
    $signature() {
      return this.$this.$ti._eval$1("Set<1>(Set<1>)");
    }
  };
  A.UnionSet_contains_closure.prototype = {
    call$1(set) {
      return this.$this.$ti._eval$1("Set<1>")._as(set).contains$1(0, this.element);
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(Set<1>)");
    }
  };
  A._UnionSet_SetBase_UnmodifiableSetMixin.prototype = {};
  A.UnionSetController.prototype = {};
  A.UnmodifiableSetView.prototype = {};
  A.UnmodifiableSetMixin.prototype = {
    add$1(_, value) {
      A._instanceType(this)._precomputed1._as(value);
      return A.UnmodifiableSetMixin__throw();
    }
  };
  A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin.prototype = {};
  A._DelegatingIterableBase.prototype = {
    any$1(_, test) {
      A._instanceType(this)._eval$1("bool(1)")._as(test);
      return this.get$_base().any$1(0, test);
    },
    contains$1(_, element) {
      return this.get$_base().contains$1(0, element);
    },
    every$1(_, test) {
      A._instanceType(this)._eval$1("bool(1)")._as(test);
      return this.get$_base().every$1(0, test);
    },
    get$isEmpty(_) {
      var t1 = this.get$_base();
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this.get$_base();
      return t1.get$isNotEmpty(t1);
    },
    get$iterator(_) {
      var t1 = this.get$_base();
      return t1.get$iterator(t1);
    },
    get$length(_) {
      var t1 = this.get$_base();
      return t1.get$length(t1);
    },
    map$1$1(_, f, $T) {
      A._instanceType(this)._bind$1($T)._eval$1("1(2)")._as(f);
      return this.get$_base().map$1$1(0, f, $T);
    },
    map$1(_, f) {
      return this.map$1$1(0, f, type$.dynamic);
    },
    skip$1(_, n) {
      return this.get$_base().skip$1(0, n);
    },
    toList$1$growable(_, growable) {
      return this.get$_base().toList$1$growable(0, true);
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      return this.get$_base().toSet$0(0);
    },
    where$1(_, test) {
      A._instanceType(this)._eval$1("bool(1)")._as(test);
      return this.get$_base().where$1(0, test);
    },
    toString$0(_) {
      return this.get$_base().toString$0(0);
    },
    $isIterable: 1
  };
  A.DelegatingSet.prototype = {
    union$1(other) {
      return this._base.union$1(A._instanceType(this)._eval$1("Set<1>")._as(other));
    },
    toSet$0(_) {
      return new A.DelegatingSet(this._base.toSet$0(0), A._instanceType(this)._eval$1("DelegatingSet<1>"));
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1,
    get$_base() {
      return this._base;
    }
  };
  A.head_closure.prototype = {
    call$1(client) {
      return client._sendUnstreamed$3("HEAD", this.url, this.headers);
    },
    $signature: 130
  };
  A.BaseClient.prototype = {
    _sendUnstreamed$3(method, url, headers) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, request, $async$temp1;
      var $async$_sendUnstreamed$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request = A.Request$(method, url);
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self.send$1(0, request), $async$_sendUnstreamed$3);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Response_fromStream($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_sendUnstreamed$3, $async$completer);
    },
    $isClient0: 1
  };
  A.BaseRequest.prototype = {
    finalize$0() {
      if (this._finalized)
        throw A.wrapException(A.StateError$("Can't finalize a finalized Request."));
      this._finalized = true;
      return B.ByteStream__EmptyStream;
    },
    toString$0(_) {
      return this.method + " " + this.url.toString$0(0);
    }
  };
  A.BaseRequest_closure.prototype = {
    call$2(key1, key2) {
      return A._asString(key1).toLowerCase() === A._asString(key2).toLowerCase();
    },
    $signature: 133
  };
  A.BaseRequest_closure0.prototype = {
    call$1(key) {
      return B.JSString_methods.get$hashCode(A._asString(key).toLowerCase());
    },
    $signature: 134
  };
  A.BaseResponse.prototype = {
    BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(statusCode, contentLength, headers, isRedirect, persistentConnection, reasonPhrase, request) {
      var t1 = this.statusCode;
      if (t1 < 100)
        throw A.wrapException(A.ArgumentError$("Invalid status code " + t1 + ".", null));
    }
  };
  A.BrowserClient.prototype = {
    send$1(_, request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.StreamedResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, xhr, completer, bytes, t1, t2, t3;
      var $async$send$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._isClosed)
                throw A.wrapException(A.ClientException$("HTTP request failed. Client is already closed.", request.url));
              request.super$BaseRequest$finalize();
              $async$goto = 3;
              return A._asyncAwait(new A.ByteStream(A.Stream_Stream$value(request._bodyBytes, type$.List_int)).toBytes$0(), $async$send$1);
            case 3:
              // returning from await.
              bytes = $async$result;
              xhr = type$.JSObject._as(new self.XMLHttpRequest());
              t1 = $async$self._xhrs;
              t1.add$1(0, xhr);
              t2 = xhr;
              t2.open(request.method, request.url.toString$0(0), true);
              t2.responseType = "arraybuffer";
              t2.withCredentials = false;
              for (t2 = request.headers, t2 = t2.get$entries(t2), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
                t3 = t2.get$current(t2);
                xhr.setRequestHeader(t3.key, t3.value);
              }
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_StreamedResponse), type$._AsyncCompleter_StreamedResponse);
              t2 = type$._EventStream_JSObject;
              t3 = type$.void;
              new A._EventStream(xhr, "load", false, t2).get$first(0).then$1$1(new A.BrowserClient_send_closure(xhr, completer, request), t3);
              new A._EventStream(xhr, "error", false, t2).get$first(0).then$1$1(new A.BrowserClient_send_closure0(completer, request), t3);
              xhr.send(bytes);
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(completer.future, $async$send$1);
            case 7:
              // returning from await.
              t2 = $async$result;
              $async$returnValue = t2;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t1.remove$1(0, xhr);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$send$1, $async$completer);
    },
    close$0(_) {
      var t1, t2, t3, t4;
      this._isClosed = true;
      for (t1 = this._xhrs, t2 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t3 = t2.$ti._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        t4.abort();
      }
      t1.clear$0(0);
    }
  };
  A.BrowserClient_send_closure.prototype = {
    call$1(_) {
      var t1, _0_0, t2, body, responseUrl, t3, t4, t5, t6, _this = this;
      type$.JSObject._as(_);
      t1 = _this.xhr;
      _0_0 = A._extension_0_get_responseHeaders(t1).$index(0, "content-length");
      if (_0_0 != null) {
        t2 = $.$get$_digitRegex();
        t2 = !t2._nativeRegExp.test(_0_0);
      } else
        t2 = false;
      if (t2) {
        _this.completer.completeError$1(new A.ClientException("Invalid content-length header [" + A.S(_0_0) + "].", _this.request.url));
        return;
      }
      body = A.NativeUint8List_NativeUint8List$view(type$.NativeByteBuffer._as(t1.response), 0, null);
      responseUrl = A._asString(t1.responseURL);
      if (responseUrl.length !== 0)
        A.Uri_parse(responseUrl);
      t2 = A.Stream_Stream$value(body, type$.List_int);
      t3 = A._asInt(t1.status);
      t4 = body.length;
      t5 = _this.request;
      t6 = A._extension_0_get_responseHeaders(t1);
      t1 = A._asString(t1.statusText);
      t2 = new A.StreamedResponseV2(A.toByteStream(new A.ByteStream(t2)), t5, t3, t1, t4, t6, false, true);
      t2.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t3, t4, t6, false, true, t1, t5);
      _this.completer.complete$1(0, t2);
    },
    $signature: 24
  };
  A.BrowserClient_send_closure0.prototype = {
    call$1(_) {
      type$.JSObject._as(_);
      this.completer.completeError$2(new A.ClientException("XMLHttpRequest error.", this.request.url), A.StackTrace_current());
    },
    $signature: 24
  };
  A.ByteStream.prototype = {
    toBytes$0() {
      var t1 = new A._Future($.Zone__current, type$._Future_Uint8List),
        completer = new A._AsyncCompleter(t1, type$._AsyncCompleter_Uint8List),
        sink = new A._ByteCallbackSink(new A.ByteStream_toBytes_closure(completer), new Uint8Array(1024));
      this.listen$4$cancelOnError$onDone$onError(type$.void_Function_List_int._as(sink.get$add(sink)), true, sink.get$close(sink), completer.get$completeError());
      return t1;
    }
  };
  A.ByteStream_toBytes_closure.prototype = {
    call$1(bytes) {
      return this.completer.complete$1(0, new Uint8Array(A._ensureNativeList(type$.List_int._as(bytes))));
    },
    $signature: 136
  };
  A.ClientException.prototype = {
    toString$0(_) {
      var t1 = this.uri.toString$0(0);
      return "ClientException: " + this.message + ", uri=" + t1;
    },
    $isException: 1
  };
  A.Request.prototype = {};
  A.Response.prototype = {};
  A.StreamedResponse.prototype = {};
  A.StreamedResponseV2.prototype = {};
  A.AnsiColor.prototype = {
    toString$0(_) {
      var t1 = this.fg;
      if (t1 != null)
        return "\x1b[38;5;" + A.S(t1) + "m";
      else
        return "";
    },
    call$1(msg) {
      A._asString(msg);
      if (this.color)
        return this.toString$0(0) + msg + "\x1b[0m";
      else
        return msg;
    }
  };
  A.DevelopmentFilter.prototype = {
    shouldLog$1($event) {
      return false;
    }
  };
  A.LogEvent.prototype = {};
  A.LogFilter.prototype = {
    init$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$init$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$init$0, $async$completer);
    }
  };
  A.Level.prototype = {
    _enumToString$0() {
      return "Level." + this._name;
    }
  };
  A.LogOutput.prototype = {
    init$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$init$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$init$0, $async$completer);
    }
  };
  A.LogPrinter.prototype = {
    init$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$init$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$init$0, $async$completer);
    }
  };
  A.Logger.prototype = {
    Logger$4$filter$level$output$printer(filter, level, output, printer) {
      var _this = this,
        t1 = _this._filter,
        filterInit = t1.init$0();
      if (level != null)
        t1._level = level;
      t1 = A.Future_wait(A._setArrayType([filterInit, _this._printer.init$0(), _this._output.init$0()], type$.JSArray_Future_void), false, type$.void);
      _this.__Logger__initialization_F !== $ && A.throwLateFieldAI("_initialization");
      _this.__Logger__initialization_F = t1;
    },
    t$1(message) {
      this.log$5$error$stackTrace$time(B.Level_1000_trace, message, null, null, null);
    },
    d$1(_, message) {
      this.log$5$error$stackTrace$time(B.Level_2000_debug, message, null, null, null);
    },
    e$1(_, message) {
      this.log$5$error$stackTrace$time(B.Level_5000_error, message, null, null, null);
    },
    log$5$error$stackTrace$time(level, message, error, stackTrace, time) {
      var outputEvent, callback, e, s, logEvent, t1, t2, callback0, output, exception;
      if (error != null && type$.StackTrace._is(error))
        throw A.wrapException(A.ArgumentError$("Error parameter cannot take a StackTrace!", null));
      else if (level === B.Level_0_all)
        throw A.wrapException(A.ArgumentError$("Log events cannot have Level.all", null));
      else if (level === B.Level_10000_off || level === B.Level_9999_nothing)
        throw A.wrapException(A.ArgumentError$("Log events cannot have Level.off", null));
      logEvent = new A.LogEvent(level, message, error, stackTrace, time == null ? new A.DateTime(Date.now(), false) : time);
      for (t1 = A._LinkedHashSetIterator$($.Logger__logCallbacks, $.Logger__logCallbacks._collection$_modifications, A._instanceType($.Logger__logCallbacks)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        callback0 = t1._collection$_current;
        (callback0 == null ? t2._as(callback0) : callback0).call$1(logEvent);
      }
      if (this._filter.shouldLog$1(logEvent)) {
        output = this._printer.log$1(logEvent);
        if (output.length !== 0) {
          outputEvent = new A.OutputEvent(output);
          try {
            for (t1 = A._LinkedHashSetIterator$($.Logger__outputCallbacks, $.Logger__outputCallbacks._collection$_modifications, A._instanceType($.Logger__outputCallbacks)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
              callback0 = t1._collection$_current;
              callback = callback0 == null ? t2._as(callback0) : callback0;
              callback.call$1(outputEvent);
            }
            this._output.output$1(outputEvent);
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            A.print(e);
            A.print(s);
          }
        }
      }
    }
  };
  A.Logger_defaultFilter_closure.prototype = {
    call$0() {
      return new A.DevelopmentFilter();
    },
    $signature: 137
  };
  A.Logger_defaultPrinter_closure.prototype = {
    call$0() {
      return A.PrettyPrinter$();
    },
    $signature: 150
  };
  A.Logger_defaultOutput_closure.prototype = {
    call$0() {
      return new A.ConsoleOutput();
    },
    $signature: 151
  };
  A.OutputEvent.prototype = {};
  A.ConsoleOutput.prototype = {
    output$1($event) {
      B.JSArray_methods.forEach$1($event.lines, A.core__print$closure());
    }
  };
  A.PrettyPrinter.prototype = {
    PrettyPrinter$12$colors$errorMethodCount$excludeBox$excludePaths$levelColors$levelEmojis$lineLength$methodCount$noBoxingByDefault$printEmojis$printTime$stackTraceBeginIndex(colors, errorMethodCount, excludeBox, excludePaths, levelColors, levelEmojis, lineLength, methodCount, noBoxingByDefault, printEmojis, printTime, stackTraceBeginIndex) {
      var doubleDividerLine, singleDividerLine, i, t1, t2, _i, l, _this = this,
        _s11_ = "_includeBox";
      if ($.PrettyPrinter__startTime == null)
        $.PrettyPrinter__startTime = new A.DateTime(Date.now(), false);
      doubleDividerLine = new A.StringBuffer("");
      singleDividerLine = new A.StringBuffer("");
      for (i = 0, t1 = "", t2 = ""; i < 119; ++i) {
        t1 += "\u2500";
        doubleDividerLine._contents = t1;
        t2 += "\u2504";
        singleDividerLine._contents = t2;
      }
      _this._topBorder = "\u250c" + doubleDividerLine.toString$0(0);
      _this._middleBorder = "\u251c" + singleDividerLine.toString$0(0);
      _this._bottomBorder = "\u2514" + doubleDividerLine.toString$0(0);
      t1 = type$.Map_Level_bool._as(A.LinkedHashMap_LinkedHashMap$_empty(type$.Level, type$.bool));
      _this.__PrettyPrinter__includeBox_F !== $ && A.throwLateFieldAI(_s11_);
      _this.set$__PrettyPrinter__includeBox_F(t1);
      for (_i = 0; _i < 11; ++_i) {
        l = B.List_Ah0[_i];
        t1 = _this.__PrettyPrinter__includeBox_F;
        t1 === $ && A.throwLateFieldNI(_s11_);
        t1.$indexSet(0, l, true);
      }
      B.Map_empty3.forEach$1(0, new A.PrettyPrinter_closure(_this));
    },
    log$1($event) {
      var t3, stackTraceStr, errorStr, _this = this, _null = null,
        messageStr = _this.stringifyMessage$1($event.message),
        t1 = $event.error,
        t2 = t1 == null;
      if (!t2) {
        t3 = $event.stackTrace;
        stackTraceStr = _this.formatStackTrace$2(t3 == null ? A.StackTrace_current() : t3, 8);
      } else {
        t3 = $event.stackTrace;
        stackTraceStr = _this.formatStackTrace$2(t3 == null ? A.StackTrace_current() : t3, 2);
      }
      errorStr = t2 ? _null : J.toString$0$(t1);
      return _this._formatAndPrint$5($event.level, messageStr, _null, errorStr, stackTraceStr);
    },
    formatStackTrace$2(stackTrace, methodCount) {
      var stackTraceLength, count, line,
        t1 = type$.JSArray_String,
        t2 = type$.WhereIterable_String,
        lines = A.List_List$of(new A.WhereIterable(A._setArrayType(stackTrace.toString$0(0).split("\n"), t1), type$.bool_Function_String._as(new A.PrettyPrinter_formatStackTrace_closure(this)), t2), true, t2._eval$1("Iterable.E")),
        formatted = A._setArrayType([], t1);
      t1 = lines.length;
      stackTraceLength = Math.min(t1, methodCount);
      for (count = 0; count < stackTraceLength; ++count) {
        if (!(count < t1))
          return A.ioore(lines, count);
        line = lines[count];
        t2 = A.RegExp_RegExp("#\\d+\\s+", true, false);
        B.JSArray_methods.add$1(formatted, "#" + count + "   " + A.stringReplaceFirstUnchecked(line, t2, "", 0));
      }
      if (formatted.length === 0)
        return null;
      else
        return B.JSArray_methods.join$1(formatted, "\n");
    },
    _isInExcludePaths$1(segment) {
      var _i;
      for (_i = 0; false; ++_i)
        if (B.JSString_methods.startsWith$1(segment, B.List_empty[_i]))
          return true;
      return false;
    },
    _discardDeviceStacktraceLine$1(line) {
      var t1,
        match = $.$get$PrettyPrinter__deviceStackTraceRegex().matchAsPrefix$1(0, line);
      if (match == null)
        return false;
      t1 = match._match;
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t1 = t1[2];
      t1.toString;
      if (B.JSString_methods.startsWith$1(t1, "package:logger"))
        return true;
      return this._isInExcludePaths$1(t1);
    },
    _discardWebStacktraceLine$1(line) {
      var t1,
        match = $.$get$PrettyPrinter__webStackTraceRegex().matchAsPrefix$1(0, line);
      if (match == null)
        return false;
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t1 = t1[1];
      t1.toString;
      if (B.JSString_methods.startsWith$1(t1, "packages/logger") || B.JSString_methods.startsWith$1(t1, "dart-sdk/lib"))
        return true;
      return this._isInExcludePaths$1(t1);
    },
    _discardBrowserStacktraceLine$1(line) {
      var t1,
        match = $.$get$PrettyPrinter__browserStackTraceRegex().matchAsPrefix$1(0, line);
      if (match == null)
        return false;
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t1 = t1[1];
      t1.toString;
      if (B.JSString_methods.startsWith$1(t1, "package:logger") || B.JSString_methods.startsWith$1(t1, "dart:"))
        return true;
      return this._isInExcludePaths$1(t1);
    },
    toEncodableFallback$1(object) {
      return J.toString$0$(object);
    },
    stringifyMessage$1(message) {
      var finalMessage = type$.Function._is(message) ? message.call$0() : message;
      if (type$.Map_dynamic_dynamic._is(finalMessage) || type$.Iterable_dynamic._is(finalMessage))
        return A._JsonStringStringifier_stringify(finalMessage, this.get$toEncodableFallback(), "  ");
      else
        return J.toString$0$(finalMessage);
    },
    _getEmoji$1(level) {
      var emoji = $.$get$PrettyPrinter_defaultLevelEmojis().$index(0, level);
      if (emoji != null)
        return emoji + " ";
      return "";
    },
    _formatAndPrint$5(level, message, time, error, stacktrace) {
      var t2, verticalLineAtLevel, color, t3, _i, emoji, t4, _this = this,
        buffer = A._setArrayType([], type$.JSArray_String),
        t1 = _this.__PrettyPrinter__includeBox_F;
      t1 === $ && A.throwLateFieldNI("_includeBox");
      t2 = t1.$index(0, level);
      t2.toString;
      verticalLineAtLevel = t2 ? "\u2502 " : "";
      color = $.$get$PrettyPrinter_defaultLevelColors().$index(0, level);
      if (color == null)
        color = B.AnsiColor_null_false;
      t2 = t1.$index(0, level);
      t2.toString;
      if (t2)
        B.JSArray_methods.add$1(buffer, color.call$1(_this._topBorder));
      if (error != null) {
        for (t2 = error.split("\n"), t3 = t2.length, _i = 0; _i < t3; ++_i)
          B.JSArray_methods.add$1(buffer, color.call$1(verticalLineAtLevel + A.S(t2[_i])));
        t2 = t1.$index(0, level);
        t2.toString;
        if (t2)
          B.JSArray_methods.add$1(buffer, color.call$1(_this._middleBorder));
      }
      if (stacktrace != null) {
        for (t2 = stacktrace.split("\n"), t3 = t2.length, _i = 0; _i < t3; ++_i)
          B.JSArray_methods.add$1(buffer, color.call$1(verticalLineAtLevel + A.S(t2[_i])));
        t2 = t1.$index(0, level);
        t2.toString;
        if (t2)
          B.JSArray_methods.add$1(buffer, color.call$1(_this._middleBorder));
      }
      if (time != null) {
        B.JSArray_methods.add$1(buffer, color.call$1(verticalLineAtLevel + time));
        t2 = t1.$index(0, level);
        t2.toString;
        if (t2)
          B.JSArray_methods.add$1(buffer, color.call$1(_this._middleBorder));
      }
      emoji = _this._getEmoji$1(level);
      for (t2 = message.split("\n"), t3 = t2.length, t4 = verticalLineAtLevel + emoji, _i = 0; _i < t3; ++_i)
        B.JSArray_methods.add$1(buffer, color.call$1(t4 + A.S(t2[_i])));
      t1 = t1.$index(0, level);
      t1.toString;
      if (t1)
        B.JSArray_methods.add$1(buffer, color.call$1(_this._bottomBorder));
      return buffer;
    },
    set$__PrettyPrinter__includeBox_F(__PrettyPrinter__includeBox_F) {
      this.__PrettyPrinter__includeBox_F = type$.Map_Level_bool._as(__PrettyPrinter__includeBox_F);
    }
  };
  A.PrettyPrinter_closure.prototype = {
    call$2(k, v) {
      var t1, t2;
      type$.Level._as(k);
      A._asBool(v);
      t1 = this.$this.__PrettyPrinter__includeBox_F;
      t1 === $ && A.throwLateFieldNI("_includeBox");
      t2 = !v;
      t1.$indexSet(0, k, t2);
      return t2;
    },
    $signature: 159
  };
  A.PrettyPrinter_formatStackTrace_closure.prototype = {
    call$1(line) {
      var t1;
      A._asString(line);
      t1 = this.$this;
      return !t1._discardDeviceStacktraceLine$1(line) && !t1._discardWebStacktraceLine$1(line) && !t1._discardBrowserStacktraceLine$1(line) && line.length !== 0;
    },
    $signature: 3
  };
  A._Empty.prototype = {
    matches$2(_, item, matchState) {
      return A._asBool(J.get$isEmpty$asx(item));
    },
    describe$1(description) {
      description._out._contents += "empty";
      return description;
    }
  };
  A._NotEmpty.prototype = {
    matches$2(_, item, matchState) {
      return J.get$isNotEmpty$asx(item);
    },
    describe$1(description) {
      description._out._contents += "non-empty";
      return description;
    }
  };
  A._IsNull.prototype = {
    matches$2(_, item, matchState) {
      return item == null;
    },
    describe$1(description) {
      description._out._contents += "null";
      return description;
    }
  };
  A._IsNotNull.prototype = {
    matches$2(_, item, matchState) {
      return item != null;
    },
    describe$1(description) {
      description._out._contents += "not null";
      return description;
    }
  };
  A._IsTrue.prototype = {
    matches$2(_, item, matchState) {
      return J.$eq$(item, true);
    },
    describe$1(description) {
      description._out._contents += "true";
      return description;
    }
  };
  A._IsFalse.prototype = {
    matches$2(_, item, matchState) {
      return J.$eq$(item, false);
    },
    describe$1(description) {
      description._out._contents += "false";
      return description;
    }
  };
  A._Contains.prototype = {
    matches$2(_, item, matchState) {
      var t1,
        expected = this._core_matchers$_expected;
      if (typeof item == "string")
        return type$.Pattern._is(expected) && B.JSString_methods.contains$1(item, expected);
      else if (type$.Iterable_dynamic._is(item)) {
        t1 = J.getInterceptor$asx(item);
        if (expected instanceof A.Matcher)
          return t1.any$1(item, new A._Contains_matches_closure(expected, matchState));
        else
          return t1.contains$1(item, expected);
      } else if (type$.Map_dynamic_dynamic._is(item))
        return J.containsKey$1$x(item, expected);
      return false;
    },
    describe$1(description) {
      description._out._contents += "contains ";
      return description.addDescriptionOf$1(this._core_matchers$_expected);
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      var t1 = typeof item == "string" || type$.Iterable_dynamic._is(item) || type$.Map_dynamic_dynamic._is(item),
        t2 = mismatchDescription._out;
      if (t1) {
        this.super$Matcher$describeMismatch(item, mismatchDescription, matchState, false);
        t2._contents += "does not contain ";
        mismatchDescription.addDescriptionOf$1(this._core_matchers$_expected);
        return mismatchDescription;
      } else {
        t2._contents += "is not a string, map or iterable";
        return mismatchDescription;
      }
    }
  };
  A._Contains_matches_closure.prototype = {
    call$1(e) {
      return this.expected.matches$2(0, e, this.matchState);
    },
    $signature: 9
  };
  A._Predicate.prototype = {
    typedMatches$2(item, matchState) {
      return this._matcher.call$1(this.$ti._precomputed1._as(item));
    },
    describe$1(description) {
      description._out._contents += this._core_matchers$_description;
      return description;
    }
  };
  A.StringDescription.prototype = {
    get$length(_) {
      return this._out._contents.length;
    },
    toString$0(_) {
      var t1 = this._out._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    addDescriptionOf$1(value) {
      var t1, t2;
      if (value instanceof A.Matcher)
        value.describe$1(this);
      else {
        t1 = A.prettyPrint(value, 25, 80);
        t2 = this._out;
        t2._contents += t1;
      }
      return this;
    },
    $isDescription: 1
  };
  A._StringEqualsMatcher.prototype = {
    typedMatches$2(item, matchState) {
      return this._equals_matcher$_value === A._asString(item);
    },
    describe$1(description) {
      return description.addDescriptionOf$1(this._equals_matcher$_value);
    },
    describeTypedMismatch$4(item, mismatchDescription, matchState, verbose) {
      var buff, escapedItem, escapedValue, minLength, minLength0, minLength1, start, t1, i;
      A._asString(item);
      buff = new A.StringBuffer("");
      buff._contents = "" + "is different.";
      escapedItem = A.escape(item);
      escapedValue = A.escape(this._equals_matcher$_value);
      minLength = escapedItem.length;
      minLength0 = escapedValue.length;
      minLength1 = minLength < minLength0 ? minLength : minLength0;
      for (start = 0; start < minLength1; ++start) {
        if (!(start < minLength0))
          return A.ioore(escapedValue, start);
        if (!(start < minLength))
          return A.ioore(escapedItem, start);
        if (escapedValue.charCodeAt(start) !== escapedItem.charCodeAt(start))
          break;
      }
      if (start === minLength1) {
        t1 = buff._contents;
        if (minLength0 < minLength) {
          buff._contents = t1 + " Both strings start the same, but the actual value also has the following trailing characters: ";
          A._StringEqualsMatcher__writeTrailing(buff, escapedItem, minLength0);
        } else {
          buff._contents = t1 + " Both strings start the same, but the actual value is missing the following trailing characters: ";
          A._StringEqualsMatcher__writeTrailing(buff, escapedValue, minLength);
        }
      } else {
        buff._contents += "\nExpected: ";
        A._StringEqualsMatcher__writeLeading(buff, escapedValue, start);
        A._StringEqualsMatcher__writeTrailing(buff, escapedValue, start);
        buff._contents += "\n  Actual: ";
        A._StringEqualsMatcher__writeLeading(buff, escapedItem, start);
        A._StringEqualsMatcher__writeTrailing(buff, escapedItem, start);
        t1 = buff._contents += "\n          ";
        i = start > 10 ? 14 : start;
        for (; i > 0; --i) {
          t1 += " ";
          buff._contents = t1;
        }
        buff._contents = t1 + ("^\n Differ at offset " + start);
      }
      t1 = buff._contents;
      mismatchDescription._out._contents += t1.charCodeAt(0) == 0 ? t1 : t1;
      return mismatchDescription;
    }
  };
  A._DeepMatcher.prototype = {
    _compareIterables$5(expected, actual, matcher, depth, $location) {
      var expectedIterator, actualIterator, t1, index, expectedNext, actualNext, t2, newLocation, rp;
      type$.nullable__Mismatch_Function_4_nullable_Object_and_nullable_Object_and_String_and_int._as(matcher);
      if (type$.Iterable_dynamic._is(actual)) {
        expectedIterator = J.get$iterator$ax(expected);
        actualIterator = J.get$iterator$ax(actual);
        for (t1 = $location + "[", index = 0; true; ++index) {
          expectedNext = expectedIterator.moveNext$0();
          actualNext = actualIterator.moveNext$0();
          t2 = !expectedNext;
          if (t2 && !actualNext)
            return null;
          newLocation = t1 + index + "]";
          if (t2)
            return A._Mismatch$simple(newLocation, actual, "longer than expected");
          if (!actualNext)
            return A._Mismatch$simple(newLocation, actual, "shorter than expected");
          rp = matcher.call$4(expectedIterator.get$current(expectedIterator), actualIterator.get$current(actualIterator), newLocation, depth);
          if (rp != null)
            return rp;
        }
      } else
        return A._Mismatch$simple($location, actual, "is not Iterable");
    },
    _compareSets$5(expected, actual, matcher, depth, $location) {
      var other, t1, expectedElement;
      type$.nullable__Mismatch_Function_4_nullable_Object_and_nullable_Object_and_String_and_int._as(matcher);
      if (type$.Iterable_dynamic._is(actual)) {
        other = J.toSet$0$ax(actual);
        for (t1 = expected.get$iterator(expected); t1.moveNext$0();) {
          expectedElement = t1.get$current(t1);
          if (other.every$1(0, new A._DeepMatcher__compareSets_closure(matcher, expectedElement, $location, depth)))
            return new A._Mismatch($location, actual, new A._DeepMatcher__compareSets_closure0(expectedElement), false);
        }
        if (other.get$length(other) > expected.get$length(expected))
          return A._Mismatch$simple($location, actual, "larger than expected");
        else if (other.get$length(other) < expected.get$length(expected))
          return A._Mismatch$simple($location, actual, "smaller than expected");
        else
          return null;
      } else
        return A._Mismatch$simple($location, actual, "is not Iterable");
    },
    _recursiveMatch$4(expected, actual, $location, depth) {
      var e, t1, matchState, exception, t2, err, t3, key, t4, t5, rp, _this = this, _null = null;
      if (expected instanceof A.Matcher) {
        t1 = type$.dynamic;
        matchState = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        if (expected.matches$2(0, actual, matchState))
          return _null;
        return new A._Mismatch($location, actual, new A._DeepMatcher__recursiveMatch_closure(expected, actual, matchState, depth), false);
      } else
        try {
          if (J.$eq$(expected, actual))
            return _null;
        } catch (exception) {
          e = A.unwrapException(exception);
          return new A._Mismatch($location, actual, new A._DeepMatcher__recursiveMatch_closure0(e), false);
        }
      t1 = _this._limit;
      if (depth > t1)
        return A._Mismatch$simple($location, actual, "recursion depth limit exceeded");
      if (depth === 0 || t1 > 1)
        if (type$.Set_dynamic._is(expected))
          return _this._compareSets$5(expected, actual, _this.get$_recursiveMatch(), depth + 1, $location);
        else if (type$.Iterable_dynamic._is(expected))
          return _this._compareIterables$5(expected, actual, _this.get$_recursiveMatch(), depth + 1, $location);
        else {
          t1 = type$.Map_dynamic_dynamic;
          if (t1._is(expected)) {
            if (!t1._is(actual))
              return A._Mismatch$simple($location, actual, "expected a map");
            t1 = J.getInterceptor$asx(expected);
            t2 = J.getInterceptor$asx(actual);
            err = t1.get$length(expected) === t2.get$length(actual) ? "" : "has different length and ";
            for (t3 = J.get$iterator$ax(t1.get$keys(expected)); t3.moveNext$0();) {
              key = t3.get$current(t3);
              if (!t2.containsKey$1(actual, key))
                return new A._Mismatch($location, actual, new A._DeepMatcher__recursiveMatch_closure1(err, key), false);
            }
            for (t3 = J.get$iterator$ax(t2.get$keys(actual)); t3.moveNext$0();) {
              key = t3.get$current(t3);
              if (!t1.containsKey$1(expected, key))
                return new A._Mismatch($location, actual, new A._DeepMatcher__recursiveMatch_closure2(err, key), false);
            }
            for (t3 = J.get$iterator$ax(t1.get$keys(expected)), t4 = $location + "['", t5 = depth + 1; t3.moveNext$0();) {
              key = t3.get$current(t3);
              rp = _this._recursiveMatch$4(t1.$index(expected, key), t2.$index(actual, key), t4 + A.S(key) + "']", t5);
              if (rp != null)
                return rp;
            }
            return _null;
          }
        }
      if (depth > 0)
        return new A._Mismatch($location, actual, new A._DeepMatcher__recursiveMatch_closure3(expected), true);
      else
        return new A._Mismatch($location, actual, _null, false);
    },
    matches$2(_, actual, matchState) {
      var t1, t2, innerState,
        mismatch = this._recursiveMatch$4(this._expected, actual, "", 0);
      if (mismatch == null)
        return true;
      t1 = type$.dynamic;
      t2 = A.LinkedHashMap_LinkedHashMap$_literal(["mismatch", mismatch], t1, t1);
      innerState = A.LinkedHashMap_LinkedHashMap$of(matchState, t1, t1);
      matchState.clear$0(0);
      matchState.$indexSet(0, "state", innerState);
      matchState.addAll$1(0, t2);
      return false;
    },
    describe$1(description) {
      return description.addDescriptionOf$1(this._expected);
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      var t2, t3,
        mismatch = type$._Mismatch._as(matchState.$index(0, "mismatch")),
        describeProblem = mismatch.describeProblem,
        t1 = mismatch.location;
      if (t1.length !== 0) {
        t2 = mismatchDescription._out;
        t3 = t2._contents += "at location ";
        t1 = t3 + t1;
        t2._contents = t1;
        t2._contents = t1 + " is ";
        mismatchDescription.addDescriptionOf$1(mismatch.actual);
        if (describeProblem != null) {
          t1 = " " + (mismatch.instead ? "instead of" : "which") + " ";
          t2._contents += t1;
          describeProblem.call$2(mismatchDescription, false);
        }
      } else if (describeProblem == null) {
        t1 = mismatchDescription._out;
        t2 = t1._contents;
        if (t2.length > 0) {
          t1._contents = t2 + "is ";
          mismatchDescription.addDescriptionOf$1(item);
        }
      } else
        describeProblem.call$2(mismatchDescription, false);
      return mismatchDescription;
    }
  };
  A._DeepMatcher__compareSets_closure.prototype = {
    call$1(actualElement) {
      var _this = this;
      return _this.matcher.call$4(_this.expectedElement, actualElement, _this.location, _this.depth) != null;
    },
    $signature: 9
  };
  A._DeepMatcher__compareSets_closure0.prototype = {
    call$2(description, verbose) {
      description._out._contents += "does not contain ";
      return description.addDescriptionOf$1(this.expectedElement);
    },
    $signature: 21
  };
  A._DeepMatcher__recursiveMatch_closure.prototype = {
    call$2(description, verbose) {
      var _this = this,
        t1 = description._out,
        t2 = t1._contents,
        t3 = _this.expected;
      t3.describeMismatch$4(_this.actual, description, _this.matchState, false);
      if (_this.depth > 0 && t1._contents.length === t2.length) {
        t1._contents += "does not match ";
        t3.describe$1(description);
      }
    },
    $signature: 21
  };
  A._DeepMatcher__recursiveMatch_closure0.prototype = {
    call$2(description, verbose) {
      description._out._contents += "== threw ";
      return description.addDescriptionOf$1(this.e);
    },
    $signature: 21
  };
  A._DeepMatcher__recursiveMatch_closure1.prototype = {
    call$2(description, verbose) {
      description._out._contents += this.err + "is missing map key ";
      return description.addDescriptionOf$1(this.key);
    },
    $signature: 21
  };
  A._DeepMatcher__recursiveMatch_closure2.prototype = {
    call$2(description, verbose) {
      description._out._contents += this.err + "has extra map key ";
      return description.addDescriptionOf$1(this.key);
    },
    $signature: 21
  };
  A._DeepMatcher__recursiveMatch_closure3.prototype = {
    call$2(description, verbose) {
      return description.addDescriptionOf$1(this.expected);
    },
    $signature: 21
  };
  A._Mismatch.prototype = {};
  A._Mismatch$simple_closure.prototype = {
    call$2(description, verbose) {
      description._out._contents += this.problem;
      return description;
    },
    $signature: 21
  };
  A._expect_closure0.prototype = {
    call$5(actual, matcher, reason, matchState, verbose) {
      var t1,
        mismatchDescription = A.StringDescription$();
      matcher.describeMismatch$4(actual, mismatchDescription, matchState, false);
      t1 = mismatchDescription._out._contents;
      return A.formatFailure(matcher, actual, t1.charCodeAt(0) == 0 ? t1 : t1, reason);
    },
    $signature: 164
  };
  A._expect_closure.prototype = {
    call$0() {
    },
    $signature: 2
  };
  A.FeatureMatcher.prototype = {
    matches$2(_, item, matchState) {
      return this.super$TypeMatcher$matches(0, item, matchState) && this.typedMatches$2(A._instanceType(this)._eval$1("FeatureMatcher.T")._as(item), matchState);
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      if (A._instanceType(this)._eval$1("FeatureMatcher.T")._is(item))
        return this.describeTypedMismatch$4(item, mismatchDescription, matchState, false);
      mismatchDescription._out._contents += "not an ";
      return this.super$TypeMatcher$describe(mismatchDescription);
    },
    describeTypedMismatch$4(item, mismatchDescription, matchState, verbose) {
      A._instanceType(this)._eval$1("FeatureMatcher.T")._as(item);
      return mismatchDescription;
    }
  };
  A.Matcher.prototype = {
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      return mismatchDescription;
    }
  };
  A._IsNot.prototype = {
    matches$2(_, item, matchState) {
      return !this._operator_matchers$_matcher.matches$2(0, item, matchState);
    },
    describe$1(description) {
      description._out._contents += "not ";
      return description.addDescriptionOf$1(this._operator_matchers$_matcher);
    }
  };
  A._OrderingMatcher.prototype = {
    matches$2(_, item, matchState) {
      var _this = this,
        t1 = _this._order_matchers$_value,
        t2 = J.getInterceptor$(item);
      if (t2.$eq(item, t1))
        return _this._equalValue;
      else if (t2.$lt(item, t1))
        return _this._lessThanValue;
      else if (t2.$gt(item, t1))
        return _this._greaterThanValue;
      else
        return false;
    },
    describe$1(description) {
      var t1 = this._comparisonDescription,
        t2 = description._out,
        t3 = t2._contents;
      if (this._valueInDescription) {
        t1 = t3 + t1;
        t2._contents = t1;
        t2._contents = t1 + " ";
        return description.addDescriptionOf$1(this._order_matchers$_value);
      } else {
        t2._contents = t3 + t1;
        return description;
      }
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      mismatchDescription._out._contents += "is not ";
      return this.describe$1(mismatchDescription);
    }
  };
  A.prettyPrint_prettyPrintImpl.prototype = {
    call$4(object, indent, seen, $top) {
      var description, type, t2, strings, t3, singleLine, value, defaultToString, _this = this, t1 = {};
      t1.seen = seen;
      if (object instanceof A.Matcher) {
        description = A.StringDescription$();
        object.describe$1(description);
        return "<" + description.toString$0(0) + ">";
      }
      if (seen.contains$1(0, object))
        return "(recursive)";
      t1.seen = seen.union$1(A.LinkedHashSet_LinkedHashSet$_literal([object], type$.nullable_Object));
      t1 = new A.prettyPrint_prettyPrintImpl_pp(t1, _this, indent);
      if (type$.Iterable_dynamic._is(object)) {
        type = type$.List_dynamic._is(object) ? "" : A._typeName(object) + ":";
        t2 = type$.String;
        strings = J.map$1$1$ax(object, t1, t2).toList$0(0);
        t1 = strings.length;
        t3 = _this.maxItems;
        if (t1 > t3)
          B.JSArray_methods.replaceRange$3(strings, t3 - 1, t1, A._setArrayType(["..."], type$.JSArray_String));
        singleLine = type + "[" + B.JSArray_methods.join$1(strings, ", ") + "]";
        if (singleLine.length + indent <= _this.maxLineLength && !B.JSString_methods.contains$1(singleLine, "\n"))
          return singleLine;
        t1 = A._arrayInstanceType(strings);
        return type + "[\n" + new A.MappedListIterable(strings, t1._eval$1("String(1)")._as(new A.prettyPrint_prettyPrintImpl_closure(indent)), t1._eval$1("MappedListIterable<1,String>")).join$1(0, ",\n") + "\n" + B.JSArray_methods.join$1(A.List_List$filled(indent, " ", false, t2), "") + "]";
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        t2 = type$.String;
        strings = J.map$1$1$ax(J.get$keys$x(object), new A.prettyPrint_prettyPrintImpl_closure0(t1, object), t2).toList$0(0);
        t1 = strings.length;
        t3 = _this.maxItems;
        if (t1 > t3)
          B.JSArray_methods.replaceRange$3(strings, t3 - 1, t1, A._setArrayType(["..."], type$.JSArray_String));
        singleLine = "{" + B.JSArray_methods.join$1(strings, ", ") + "}";
        if (singleLine.length + indent <= _this.maxLineLength && !B.JSString_methods.contains$1(singleLine, "\n"))
          return singleLine;
        t1 = A._arrayInstanceType(strings);
        return "{\n" + new A.MappedListIterable(strings, t1._eval$1("String(1)")._as(new A.prettyPrint_prettyPrintImpl_closure1(indent)), t1._eval$1("MappedListIterable<1,String>")).join$1(0, ",\n") + "\n" + B.JSArray_methods.join$1(A.List_List$filled(indent, " ", false, t2), "") + "}";
      } else {
        t1 = type$.String;
        if (typeof object == "string")
          return "'" + new A.MappedListIterable(A._setArrayType(object.split("\n"), type$.JSArray_String), type$.String_Function_String._as(A.pretty_print___escapeString$closure()), type$.MappedListIterable_String_String).join$1(0, "\\n'\n" + B.JSArray_methods.join$1(A.List_List$filled(indent + 2, " ", false, t1), "") + "'") + "'";
        else {
          t2 = J.toString$0$(object);
          t1 = B.JSArray_methods.join$1(A.List_List$filled(indent, " ", false, t1), "");
          value = A.stringReplaceAllUnchecked(t2, "\n", t1 + "\n");
          defaultToString = B.JSString_methods.startsWith$1(value, "Instance of ");
          if ($top)
            value = "<" + value + ">";
          if (typeof object == "number" || A._isBool(object) || type$.Function._is(object) || object instanceof A.JSSyntaxRegExp || object instanceof A.MapEntry || object instanceof A.Expando || object == null || defaultToString)
            return value;
          else
            return A._typeName(object) + ":" + value;
        }
      }
    },
    $signature: 166
  };
  A.prettyPrint_prettyPrintImpl_pp.prototype = {
    call$1(child) {
      return this.prettyPrintImpl.call$4(child, this.indent + 2, this._box_0.seen, false);
    },
    $signature: 168
  };
  A.prettyPrint_prettyPrintImpl_closure.prototype = {
    call$1(string) {
      A._asString(string);
      return B.JSArray_methods.join$1(A.List_List$filled(this.indent + 2, " ", false, type$.String), "") + string;
    },
    $signature: 15
  };
  A.prettyPrint_prettyPrintImpl_closure0.prototype = {
    call$1(key) {
      var t1 = this.pp;
      return A.S(t1.call$1(key)) + ": " + A.S(t1.call$1(J.$index$asx(this.object, key)));
    },
    $signature: 170
  };
  A.prettyPrint_prettyPrintImpl_closure1.prototype = {
    call$1(string) {
      A._asString(string);
      return B.JSArray_methods.join$1(A.List_List$filled(this.indent + 2, " ", false, type$.String), "") + string;
    },
    $signature: 15
  };
  A._MatchesRegExp.prototype = {
    typedMatches$2(item, matchState) {
      A._asString(item);
      return this._regexp._nativeRegExp.test(item);
    },
    describe$1(description) {
      description._out._contents += "match '" + this._regexp.pattern + "'";
      return description;
    }
  };
  A.TypeMatcher.prototype = {
    describe$1(description) {
      var t1 = A._rtiToString(A.createRuntimeType(A._instanceType(this)._eval$1("TypeMatcher.T"))._rti, null),
        t2 = $.$get$_dart2DynamicArgs(),
        $name = A.stringReplaceAllUnchecked(t1, t2, "");
      t1 = "<Instance of '" + $name + "'>";
      t2 = description._out;
      t2._contents += t1;
      return description;
    },
    matches$2(_, item, matchState) {
      return A._instanceType(this)._eval$1("TypeMatcher.T")._is(item);
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      var t1 = A._rtiToString(A.createRuntimeType(A._instanceType(this)._eval$1("TypeMatcher.T"))._rti, null),
        t2 = $.$get$_dart2DynamicArgs(),
        $name = A.stringReplaceAllUnchecked(t1, t2, "");
      t1 = "is not an instance of '" + $name + "'";
      t2 = mismatchDescription._out;
      t2._contents += t1;
      return mismatchDescription;
    }
  };
  A.wrapMatcher_closure.prototype = {
    call$1(a) {
      return A._asBool(this.valueOrMatcher.call$1(a));
    },
    $signature: 19
  };
  A.escape_closure.prototype = {
    call$1(match) {
      var t1,
        mapped = B.Map_grgg4.$index(0, match.$index(0, 0));
      if (mapped != null)
        return mapped;
      t1 = match.$index(0, 0);
      t1.toString;
      return A._getHexLiteral(t1);
    },
    $signature: 171
  };
  A.Context.prototype = {
    absolute$15(_, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15) {
      var t1;
      A._validateArgList("absolute", A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15], type$.JSArray_nullable_String));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = this._context$_current;
      return this.join$16(0, t1 == null ? A.current() : t1, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15);
    },
    absolute$1(_, part1) {
      var _null = null;
      return this.absolute$15(0, part1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    join$16(_, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16) {
      var parts = A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16], type$.JSArray_nullable_String);
      A._validateArgList("join", parts);
      return this.joinAll$1(new A.WhereTypeIterable(parts, type$.WhereTypeIterable_String));
    },
    join$2(_, part1, part2) {
      var _null = null;
      return this.join$16(0, part1, part2, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    joinAll$1(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      type$.Iterable_String._as(parts);
      for (t1 = parts.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new A.Context_joinAll_closure()), t3 = parts.get$iterator(0), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current(0);
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = A.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = B.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            B.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = "" + parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = "" + t5;
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return A.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += t5;
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1(_, path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>");
      parsed.set$parts(A.List_List$of(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Context_split_closure()), t3), true, t3._eval$1("Iterable.E")));
      t1 = parsed.root;
      if (t1 != null)
        B.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1(_, path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0(0);
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var t2, i, start, previous, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (t2 = path.length, i = 0; i < root; ++i) {
            if (!(i < t2))
              return A.ioore(path, i);
            if (path.charCodeAt(i) === 47)
              return true;
          }
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new A.CodeUnits(path)._string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        if (!(i >= 0))
          return A.ioore(t2, i);
        codeUnit = t2.charCodeAt(i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1(path) {
      var from, fromParsed, pathParsed, t3, t4, t5, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = _this.style,
        t2 = t1.rootLength$1(path);
      if (t2 <= 0)
        return _this.normalize$1(0, path);
      t2 = _this._context$_current;
      from = t2 == null ? A.current() : t2;
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(0, path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(0, path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      fromParsed = A.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0(0);
      pathParsed = A.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0(0);
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = J.$eq$(t2[0], ".");
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        if (t3 !== 0) {
          t4 = pathParsed.parts;
          t5 = t4.length;
          if (t5 !== 0) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t5)
              return A.ioore(t4, 0);
            t4 = t1.pathsEqual$2(t2, t4[0]);
            t2 = t4;
          } else
            t2 = false;
        } else
          t2 = false;
        if (!t2)
          break;
        B.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        B.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        B.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        B.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = J.$eq$(t2[0], "..");
      } else
        t2 = false;
      if (t2)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      t2 = type$.String;
      B.JSArray_methods.insertAll$2(pathParsed.parts, 0, A.List_List$filled(fromParsed.parts.length, "..", false, t2));
      B.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      B.JSArray_methods.insertAll$2(pathParsed.separators, 1, A.List_List$filled(fromParsed.parts.length, t1.get$separator(), false, t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(B.JSArray_methods.get$last(t1), ".")) {
        B.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        B.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    toUri$1(path) {
      var t2,
        t1 = this.style;
      if (t1.rootLength$1(path) <= 0)
        return t1.relativePathToUri$1(path);
      else {
        t2 = this._context$_current;
        return t1.absolutePathToUri$1(this.join$2(0, t2 == null ? A.current() : t2, path));
      }
    },
    prettyUri$1(uri) {
      var path, rel, _this = this,
        typedUri = A._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style === $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style !== $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(0, _this.style.pathFromUri$1(A._parseUri(typedUri)));
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  A.Context_joinAll_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 3
  };
  A.Context_split_closure.prototype = {
    call$1(part) {
      return A._asString(part).length !== 0;
    },
    $signature: 3
  };
  A._validateArgList_closure.prototype = {
    call$1(arg) {
      A._asStringQ(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 172
  };
  A.InternalStyle.prototype = {
    getRoot$1(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return B.JSString_methods.substring$2(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    relativePathToUri$1(path) {
      var segments, t2, _null = null,
        t1 = path.length;
      if (t1 === 0)
        return A._Uri__Uri(_null, _null, _null, _null);
      segments = A.Context_Context(this).split$1(0, path);
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      if (this.isSeparator$1(path.charCodeAt(t2)))
        B.JSArray_methods.add$1(segments, "");
      return A._Uri__Uri(_null, _null, segments, _null);
    },
    pathsEqual$2(path1, path2) {
      return path1 === path2;
    }
  };
  A.ParsedPath.prototype = {
    get$hasTrailingSeparator() {
      var t1 = this.parts;
      if (t1.length !== 0)
        t1 = J.$eq$(B.JSArray_methods.get$last(t1), "") || !J.$eq$(B.JSArray_methods.get$last(this.separators), "");
      else
        t1 = false;
      return t1;
    },
    removeTrailingSeparators$0() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(B.JSArray_methods.get$last(t1), "")))
          break;
        B.JSArray_methods.removeLast$0(_this.parts);
        t1 = _this.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        B.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0(_) {
      var t1, t2, leadingDoubles, _i, part, t3, _this = this,
        newParts = A._setArrayType([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        t3 = J.getInterceptor$(part);
        if (!(t3.$eq(part, ".") || t3.$eq(part, "")))
          if (t3.$eq(part, "..")) {
            t3 = newParts.length;
            if (t3 !== 0) {
              if (0 >= t3)
                return A.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            B.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        B.JSArray_methods.insertAll$2(newParts, 0, A.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (newParts.length === 0 && _this.root == null)
        B.JSArray_methods.add$1(newParts, ".");
      _this.set$parts(newParts);
      t1 = _this.style;
      _this.set$separators(A.List_List$filled(newParts.length + 1, t1.get$separator(), true, type$.String));
      t2 = _this.root;
      if (t2 == null || newParts.length === 0 || !t1.needsSeparator$1(t2))
        B.JSArray_methods.$indexSet(_this.separators, 0, "");
      t2 = _this.root;
      if (t2 != null && t1 === $.$get$Style_windows()) {
        t2.toString;
        _this.root = A.stringReplaceAllUnchecked(t2, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    toString$0(_) {
      var i, t2, t3, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? "" + t1 : "";
      for (i = 0; i < _this.parts.length; ++i, t1 = t3) {
        t2 = _this.separators;
        if (!(i < t2.length))
          return A.ioore(t2, i);
        t2 = A.S(t2[i]);
        t3 = _this.parts;
        if (!(i < t3.length))
          return A.ioore(t3, i);
        t3 = t1 + t2 + A.S(t3[i]);
      }
      t1 += A.S(B.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts(parts) {
      this.parts = type$.List_String._as(parts);
    },
    set$separators(separators) {
      this.separators = type$.List_String._as(separators);
    }
  };
  A.PathException.prototype = {
    toString$0(_) {
      return "PathException: " + this.message;
    },
    $isException: 1
  };
  A.Style.prototype = {
    toString$0(_) {
      return this.get$name(this);
    }
  };
  A.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 !== 0) {
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(path, t2);
        t2 = path.charCodeAt(t2) !== 47;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      if (t1)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    pathFromUri$1(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path(uri);
        return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
      }
      throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
    },
    absolutePathToUri$1(path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.parts;
      if (t1.length === 0)
        B.JSArray_methods.addAll$1(t1, A._setArrayType(["", ""], type$.JSArray_String));
      else if (parsed.get$hasTrailingSeparator())
        B.JSArray_methods.add$1(parsed.parts, "");
      return A._Uri__Uri(null, null, parsed.parts, "file");
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  A.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return true;
      return B.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var i, codeUnit, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = path.charCodeAt(i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = B.JSString_methods.indexOf$2(path, "/", B.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!B.JSString_methods.startsWith$1(path, "file://"))
            return index;
          t1 = A.driveLetterEnd(path, index + 1);
          return t1 == null ? index : t1;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      return t1;
    },
    pathFromUri$1(uri) {
      return uri.toString$0(0);
    },
    relativePathToUri$1(path) {
      return A.Uri_parse(path);
    },
    absolutePathToUri$1(path) {
      return A.Uri_parse(path);
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  A.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      t2 = path.charCodeAt(t2);
      return !(t2 === 47 || t2 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      if (path.charCodeAt(0) === 92) {
        if (t1 >= 2) {
          if (1 >= t1)
            return A.ioore(path, 1);
          t2 = path.charCodeAt(1) !== 92;
        } else
          t2 = true;
        if (t2)
          return 1;
        index = B.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = B.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!A.isAlphabetic(path.charCodeAt(0)))
        return 0;
      if (path.charCodeAt(1) !== 58)
        return 0;
      t1 = path.charCodeAt(2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
      path = uri.get$path(uri);
      if (uri.get$host(uri) === "") {
        if (path.length >= 3 && B.JSString_methods.startsWith$1(path, "/") && A.driveLetterEnd(path, 1) != null)
          path = B.JSString_methods.replaceFirst$2(path, "/", "");
      } else
        path = "\\\\" + uri.get$host(uri) + path;
      t1 = A.stringReplaceAllUnchecked(path, "/", "\\");
      return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
    },
    absolutePathToUri$1(path) {
      var rootParts, t2,
        parsed = A.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.root;
      t1.toString;
      if (B.JSString_methods.startsWith$1(t1, "\\\\")) {
        rootParts = new A.WhereIterable(A._setArrayType(t1.split("\\"), type$.JSArray_String), type$.bool_Function_String._as(new A.WindowsStyle_absolutePathToUri_closure()), type$.WhereIterable_String);
        B.JSArray_methods.insert$2(parsed.parts, 0, rootParts.get$last(0));
        if (parsed.get$hasTrailingSeparator())
          B.JSArray_methods.add$1(parsed.parts, "");
        return A._Uri__Uri(rootParts.get$first(0), null, parsed.parts, "file");
      } else {
        if (parsed.parts.length === 0 || parsed.get$hasTrailingSeparator())
          B.JSArray_methods.add$1(parsed.parts, "");
        t1 = parsed.parts;
        t2 = parsed.root;
        t2.toString;
        t2 = A.stringReplaceAllUnchecked(t2, "/", "");
        B.JSArray_methods.insert$2(t1, 0, A.stringReplaceAllUnchecked(t2, "\\", ""));
        return A._Uri__Uri(null, null, parsed.parts, "file");
      }
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, t2, i;
      if (path1 === path2)
        return true;
      t1 = path1.length;
      t2 = path2.length;
      if (t1 !== t2)
        return false;
      for (i = 0; i < t1; ++i) {
        if (!(i < t2))
          return A.ioore(path2, i);
        if (!this.codeUnitsEqual$2(path1.charCodeAt(i), path2.charCodeAt(i)))
          return false;
      }
      return true;
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  A.WindowsStyle_absolutePathToUri_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 3
  };
  A.Pool.prototype = {
    request$0(_) {
      var t1, t2, _this = this;
      if ((_this._pool$_closeMemo._async_memoizer$_completer.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("request() may not be called on a closed Pool."));
      t1 = _this._allocatedResources;
      if (t1 < _this._maxAllocatedResources) {
        _this._allocatedResources = t1 + 1;
        return A.Future_Future$value(new A.PoolResource(_this), type$.PoolResource);
      } else {
        t1 = _this._onReleaseCallbacks;
        if (!t1.get$isEmpty(0))
          return _this._runOnRelease$1(t1.removeFirst$0());
        else {
          t1 = new A._Future($.Zone__current, type$._Future_PoolResource);
          t2 = _this._requestedResources;
          t2._add$1(0, t2.$ti._precomputed1._as(new A._AsyncCompleter(t1, type$._AsyncCompleter_PoolResource)));
          _this._resetTimer$0();
          return t1;
        }
      }
    },
    close$0(_) {
      return this._pool$_closeMemo.runOnce$1(new A.Pool_close_closure(this));
    },
    _onResourceReleaseAllowed$1(onRelease) {
      var t1, t2, zone, _this = this;
      type$.dynamic_Function._as(onRelease);
      _this._resetTimer$0();
      t1 = _this._requestedResources;
      if (!t1.get$isEmpty(0))
        t1.removeFirst$0().complete$1(0, _this._runOnRelease$1(onRelease));
      else {
        t1 = type$.dynamic;
        if ((_this._pool$_closeMemo._async_memoizer$_completer.future._state & 30) !== 0) {
          t2 = _this._closeGroup;
          t2.toString;
          t2.add$1(0, A.Future_Future$sync(onRelease, t1));
          if (--_this._allocatedResources === 0)
            _this._closeGroup.close$0(0);
        } else {
          zone = $.Zone__current;
          t2 = _this._onReleaseCallbacks;
          t2._add$1(0, t2.$ti._precomputed1._as(new A.Pool__onResourceReleaseAllowed_closure(zone, zone.registerCallback$1$1(onRelease, t1))));
        }
      }
    },
    _runOnRelease$1(onRelease) {
      var t1, t2;
      A.Future_Future$sync(type$.dynamic_Function._as(onRelease), type$.dynamic).then$1$1(new A.Pool__runOnRelease_closure(this), type$.Null).catchError$1(new A.Pool__runOnRelease_closure0(this));
      t1 = new A._Future($.Zone__current, type$._Future_PoolResource);
      t2 = this._onReleaseCompleters;
      t2._add$1(0, t2.$ti._precomputed1._as(new A._SyncCompleter(t1, type$._SyncCompleter_PoolResource)));
      return t1;
    },
    _resetTimer$0() {
      var t2,
        t1 = this._timer;
      if (t1 == null)
        return;
      t2 = this._requestedResources;
      if (t2._collection$_head === t2._collection$_tail)
        t1._restartable_timer$_timer.cancel$0(0);
      else {
        t1._restartable_timer$_timer.cancel$0(0);
        t1._restartable_timer$_timer = A.Timer_Timer(t1._restartable_timer$_duration, t1._callback);
      }
    }
  };
  A.Pool_close_closure.prototype = {
    call$0() {
      var t3, t4, t5, callback, t6,
        t1 = this.$this,
        t2 = t1._closeGroup;
      if (t2 != null)
        return t2._future_group$_completer.future;
      t1._resetTimer$0();
      t1._closeGroup = new A.FutureGroup(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_List_dynamic), type$._AsyncCompleter_List_dynamic), [], type$.FutureGroup_dynamic);
      for (t2 = t1._onReleaseCallbacks, t3 = A._ListQueueIterator$(t2, t2.$ti._precomputed1), t4 = type$.dynamic, t5 = t3.$ti._precomputed1; t3.moveNext$0();) {
        callback = t3._collection$_current;
        if (callback == null)
          callback = t5._as(callback);
        t6 = t1._closeGroup;
        t6.toString;
        t6.add$1(0, A.Future_Future$sync(callback, t4));
      }
      t1._allocatedResources = t1._allocatedResources - t2.get$length(0);
      t2.clear$0(0);
      if (t1._allocatedResources === 0)
        t1._closeGroup.close$0(0);
      return t1._closeGroup._future_group$_completer.future;
    },
    $signature: 80
  };
  A.Pool__onResourceReleaseAllowed_closure.prototype = {
    call$0() {
      return this.zone.run$1$1(this.registered, type$.void);
    },
    $signature: 1
  };
  A.Pool__runOnRelease_closure.prototype = {
    call$1(value) {
      var t1 = this.$this;
      J.complete$1$z(t1._onReleaseCompleters.removeFirst$0(), new A.PoolResource(t1));
    },
    $signature: 6
  };
  A.Pool__runOnRelease_closure0.prototype = {
    call$2(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      this.$this._onReleaseCompleters.removeFirst$0().completeError$2(error, stackTrace);
    },
    $signature: 28
  };
  A.PoolResource.prototype = {};
  A._BaseWebChannel.prototype = {
    _postRequest$1(req) {
      var data, msg, transfer, jsTransfer, ex, st, t1, t2, t3, exception,
        _s11_ = "postMessage";
      type$.List_dynamic._as(req);
      try {
        t1 = J.getInterceptor$asx(req);
        t2 = type$.nullable_SquadronCancelationToken._as(t1.$index(req, 4));
        if (t2 != null)
          t2.ensureStarted$0();
        data = A.WorkerRequestExt_wrapInPlace(req);
        msg = A.jsify(data);
        transfer = A.Transferables_get([type$.nullable_JSObject._as(t1.$index(req, 1))]);
        t1 = transfer == null || J.get$length$asx(transfer) === 0;
        t2 = type$.void;
        t3 = this._sendPort;
        if (t1)
          A.callMethod(t3, _s11_, [msg], t2);
        else {
          jsTransfer = type$.JSArray_nullable_Object._as(A.jsify(transfer));
          A.callMethod(t3, _s11_, [msg, jsTransfer], t2);
        }
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = this._logger;
        if (t1 != null)
          t1.e$1(0, new A._BaseWebChannel__postRequest_closure(req, ex));
        throw A.wrapException(A.SquadronError$_("Failed to post message: " + A.S(ex), st));
      }
    },
    _inspectAndPostRequest$1(req) {
      var data, msg, transfer, jsTransfer, ex, st, t1, t2, t3, exception,
        _s11_ = "postMessage";
      type$.List_dynamic._as(req);
      try {
        t1 = type$.nullable_SquadronCancelationToken._as(J.$index$asx(req, 4));
        if (t1 != null)
          t1.ensureStarted$0();
        data = A.WorkerRequestExt_wrapInPlace(req);
        msg = A.jsify(data);
        transfer = A.Transferables_get(data);
        t1 = transfer == null || J.get$length$asx(transfer) === 0;
        t2 = type$.void;
        t3 = this._sendPort;
        if (t1)
          A.callMethod(t3, _s11_, [msg], t2);
        else {
          jsTransfer = type$.JSArray_nullable_Object._as(A.jsify(transfer));
          A.callMethod(t3, _s11_, [msg, jsTransfer], t2);
        }
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = this._logger;
        if (t1 != null)
          t1.e$1(0, new A._BaseWebChannel__inspectAndPostRequest_closure(req, ex));
        throw A.wrapException(A.SquadronError$_("Failed to post message: " + A.S(ex), st));
      }
    },
    _postResponse$1(res) {
      var data, msg, ex, st, exception, t1;
      try {
        data = A.WorkerResponseExt_wrapInPlace(res);
        msg = A.jsify(data);
        A.callMethod(this._sendPort, "postMessage", [msg], type$.void);
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = this._logger;
        if (t1 != null)
          t1.e$1(0, new A._BaseWebChannel__postResponse_closure(res, ex));
        throw A.wrapException(A.SquadronError$_("Failed to post message: " + A.S(ex), st));
      }
    },
    _inspectAndPostResponse$1(res) {
      var data, msg, transfer, jsTransfer, ex, st, t1, t2, t3, exception,
        _s11_ = "postMessage";
      try {
        data = A.WorkerResponseExt_wrapInPlace(res);
        msg = A.jsify(data);
        transfer = A.Transferables_get(data);
        t1 = transfer == null || J.get$length$asx(transfer) === 0;
        t2 = type$.void;
        t3 = this._sendPort;
        if (t1)
          A.callMethod(t3, _s11_, [msg], t2);
        else {
          jsTransfer = type$.JSArray_nullable_Object._as(A.jsify(transfer));
          A.callMethod(t3, _s11_, [msg, jsTransfer], t2);
        }
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = this._logger;
        if (t1 != null)
          t1.e$1(0, new A._BaseWebChannel__inspectAndPostResponse_closure(res, ex));
        throw A.wrapException(A.SquadronError$_("Failed to post message: " + A.S(ex), st));
      }
    }
  };
  A._BaseWebChannel__postRequest_closure.prototype = {
    call$0() {
      return "failed to post message " + A.S(this.req) + ": " + A.S(this.ex);
    },
    $signature: 8
  };
  A._BaseWebChannel__inspectAndPostRequest_closure.prototype = {
    call$0() {
      return "failed to post message " + A.S(this.req) + ": " + A.S(this.ex);
    },
    $signature: 8
  };
  A._BaseWebChannel__postResponse_closure.prototype = {
    call$0() {
      return "failed to post message " + A.S(this.res) + ": " + A.S(this.ex);
    },
    $signature: 8
  };
  A._BaseWebChannel__inspectAndPostResponse_closure.prototype = {
    call$0() {
      return "failed to post message " + A.S(this.res) + ": " + A.S(this.ex);
    },
    $signature: 8
  };
  A._WebChannel.prototype = {
    share$0(_) {
      var t1 = type$.JSObject,
        t2 = t1._as(new self.MessageChannel()),
        t3 = new A._WebForwardChannel(this._sendPort, t2, this.exceptionManager, t1._as(t2.port2), this._logger);
      t1._as(t2.port1).onmessage = type$.JavaScriptFunction._as(A.allowInterop(t3.get$_forward(), type$.Function));
      return t3;
    },
    close$0(_) {
      if (!this.__channel$_closed) {
        this._postRequest$1([A.microsecTimeStamp(), null, -4, null, null, null, null]);
        this.__channel$_closed = true;
      }
    },
    sendRequest$1$5$inspectRequest$inspectResponse$token(command, args, inspectRequest, inspectResponse, token, $T) {
      var controller, t1, com, t2, t3, squadronToken, wrapper, _this = this, _null = null;
      if (_this.__channel$_closed)
        throw A.wrapException(A.SquadronError$_("Channel is closed", _null));
      controller = A.StreamController_StreamController(_null, _null, _null, _null, type$.List_dynamic);
      t1 = type$.JSObject;
      com = t1._as(new self.MessageChannel());
      t2 = type$.Function;
      t3 = type$.JavaScriptFunction;
      t1._as(com.port1).onmessageerror = t3._as(A.allowInterop(new A._WebChannel_sendRequest_closure(controller), t2));
      t1._as(com.port1).onmessage = t3._as(A.allowInterop(new A._WebChannel_sendRequest_closure0(controller), t2));
      squadronToken = A.SquadronCancelationTokenExt_wrap(token);
      t1 = t1._as(com.port2);
      t2 = A.microsecTimeStamp();
      t3 = inspectRequest ? _this.get$_inspectAndPostRequest() : _this.get$_postRequest();
      wrapper = A.ValueWrapper$([t2, t1, command, args, squadronToken, null, inspectResponse], _this.exceptionManager, _this._logger, A.Cast_get($T), new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>")), t3, squadronToken, $T);
      wrapper.__value_wrapper$_postRequest.call$1(wrapper._request);
      t3 = wrapper.__ValueWrapper__sub_F;
      t3 === $ && A.throwLateFieldNI("_sub");
      return wrapper.__value_wrapper$_completer.future.whenComplete$1(t3.get$cancel(t3)).whenComplete$1(new A._WebChannel_sendRequest_closure1(com, controller));
    },
    sendRequest$1$2(command, args, $T) {
      return this.sendRequest$1$5$inspectRequest$inspectResponse$token(command, args, false, false, null, $T);
    },
    sendStreamingRequest$1$6$inspectRequest$inspectResponse$onDone$token(command, args, inspectRequest, inspectResponse, onDone, token, $T) {
      var controller, t1, com, squadronToken, t2, _this = this, _null = null;
      type$.void_Function._as(onDone);
      if (_this.__channel$_closed)
        throw A.wrapException(A.SquadronError$_("Channel is closed", _null));
      controller = A.StreamController_StreamController(_null, _null, _null, _null, type$.List_dynamic);
      t1 = type$.JSObject;
      com = t1._as(new self.MessageChannel());
      t1._as(com.port1).onmessage = type$.JavaScriptFunction._as(A.allowInterop(new A._WebChannel_sendStreamingRequest_closure(controller), type$.Function));
      squadronToken = A.SquadronCancelationTokenExt_wrap(token);
      t1 = t1._as(com.port2);
      t2 = A.microsecTimeStamp();
      t1 = A.StreamWrapper$([t2, t1, command, args, squadronToken, null, false], _this.exceptionManager, _this._logger, A.Cast_get($T), new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>")), new A._WebChannel_sendStreamingRequest_closure0(com, controller, onDone), _this.get$_postRequest(), squadronToken, $T).__StreamWrapper__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      return new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    sendStreamingRequest$1$2(command, args, $T) {
      return this.sendStreamingRequest$1$6$inspectRequest$inspectResponse$onDone$token(command, args, false, false, A.channel_Channel_noop$closure(), null, $T);
    },
    $isChannel: 1
  };
  A._WebChannel_sendRequest_closure.prototype = {
    call$1(e) {
      var err, t1;
      type$.JSObject._as(e);
      err = A.getErrorEventError(e);
      t1 = err == null ? null : J.toString$0$(err);
      this.controller.addError$1(A.SquadronError$_(t1 == null ? A.getErrorEventMessage(e) : t1, null));
    },
    $signature: 24
  };
  A._WebChannel_sendRequest_closure0.prototype = {
    call$1(e) {
      var data = A.getMessageEventData(type$.JSObject._as(e));
      this.controller.add$1(0, A.WorkerResponseExt_from(data == null ? type$.List_dynamic._as(data) : data));
    },
    $signature: 24
  };
  A._WebChannel_sendRequest_closure1.prototype = {
    call$0() {
      var t1 = this.com,
        t2 = type$.JSObject;
      t2._as(t1.port1).close();
      t2._as(t1.port2).close();
      this.controller.close$0(0);
    },
    $signature: 2
  };
  A._WebChannel_sendStreamingRequest_closure.prototype = {
    call$1(e) {
      var msg = A.getMessageEventData(type$.JSObject._as(e));
      this.controller.add$1(0, A.WorkerResponseExt_from(msg == null ? type$.List_dynamic._as(msg) : msg));
    },
    $signature: 24
  };
  A._WebChannel_sendStreamingRequest_closure0.prototype = {
    call$0() {
      type$.JSObject._as(this.com.port1).close();
      this.controller.close$0(0);
      this.onDone.call$0();
    },
    $signature: 1
  };
  A._WebWorkerChannel.prototype = {
    reply$1(_, data) {
      return this._postResponse$1([A.microsecTimeStamp(), data, null, null, null]);
    },
    inspectAndReply$1(data) {
      return this._inspectAndPostResponse$1([A.microsecTimeStamp(), data, null, null, null]);
    },
    error$1(_, error) {
      var t1 = this._logger;
      if (t1 != null)
        t1.t$1(new A._WebWorkerChannel_error_closure(error));
      this._postResponse$1([A.microsecTimeStamp(), null, error, null, null]);
    },
    $isWorkerChannel: 1
  };
  A._WebWorkerChannel_error_closure.prototype = {
    call$0() {
      var t1 = this.error;
      return "replying with error: " + A.getRuntimeTypeOfDartObject(t1).toString$0(0) + " " + t1.toString$0(0);
    },
    $signature: 8
  };
  A._WebForwardChannel.prototype = {
    _forward$1(e) {
      var data, transfer, jsTransfer, ex, st, data0, t1, t2, t3, exception,
        _s11_ = "postMessage";
      type$.JSObject._as(e);
      if (this.__channel$_closed)
        throw A.wrapException(A.SquadronError$_("Channel is closed", null));
      try {
        data0 = A.getMessageEventData(e);
        data = data0 == null ? type$.List_dynamic._as(data0) : data0;
        transfer = A.Transferables_get(data);
        t1 = transfer == null || J.get$length$asx(transfer) === 0;
        t2 = type$.void;
        t3 = this._remote;
        if (t1)
          A.callMethod(t3, _s11_, [e.data], t2);
        else {
          jsTransfer = type$.JSArray_nullable_Object._as(A.jsify(transfer));
          A.callMethod(t3, _s11_, [e.data, jsTransfer], t2);
        }
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = this._logger;
        if (t1 != null)
          t1.e$1(0, new A._WebForwardChannel__forward_closure(e, ex));
        throw A.wrapException(A.SquadronError$_("Failed to post message: " + A.S(ex), st));
      }
    },
    close$0(_) {
      if (!this.__channel$_closed) {
        type$.JSObject._as(this._com.port1).close();
        this.__channel$_closed = true;
      }
    }
  };
  A._WebForwardChannel__forward_closure.prototype = {
    call$0() {
      return "failed to post message " + A.S(this.e) + ": " + A.S(this.ex);
    },
    $signature: 8
  };
  A.openChannel_fail.prototype = {
    call$1(ex) {
      var t1 = this.ready;
      if ((t1.future._state & 30) === 0)
        t1.completeError$1(ex);
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.completeError$1(ex);
    },
    $signature: 193
  };
  A.openChannel_success.prototype = {
    call$1(channel) {
      var t1;
      if ((this.ready.future._state & 30) === 0)
        throw A.wrapException(A.SquadronError$_("Invalid state: worker is not ready", null));
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.complete$1(0, channel);
    },
    $signature: 194
  };
  A.openChannel_closure.prototype = {
    call$1(e) {
      var err, error, t1, t2, _this = this;
      type$.nullable_JSObject._as(e);
      err = A.getErrorEventError(e);
      if (type$.List_dynamic._is(err))
        err = _this.exceptionManager.deserialize$1(err);
      error = err != null ? A.SquadronException_from(err, null, null) : A.SquadronError$_("Unexpected error", null);
      t1 = _this.logger;
      if (t1 != null)
        t1.e$1(0, new A.openChannel__closure2(error));
      _this.fail.call$1(error);
      t2 = _this.entryPoint;
      A.UriChecker_exists(t2).then$1$1(new A.openChannel__closure3(e, t2, t1), type$.Null);
    },
    $signature: 195
  };
  A.openChannel__closure2.prototype = {
    call$0() {
      return "connection to Web Worker failed: " + this.error.toString$0(0);
    },
    $signature: 8
  };
  A.openChannel__closure3.prototype = {
    call$1(found) {
      var t2, t3, t4, t5, t1 = {};
      A._asBool(found);
      t1.msg = null;
      t2 = this.e;
      t3 = this.entryPoint;
      t4 = J.getInterceptor$(t2);
      t2 = t2 != null ? t1.msg = t3.toString$0(0) + " => " + t4.get$runtimeType(t2).toString$0(0) + " " + A.S(t2) + " [" + A._asString(t2.filename) + "(" + A._asInt(t2.lineno) + ")]" : t1.msg = t3.toString$0(0) + ": " + t4.get$runtimeType(t2).toString$0(0) + " " + A.S(t2);
      t4 = !found;
      if (t4)
        t1.msg = "!! WARNING: it seems no Web Worker lives at " + t2;
      t2 = this.logger;
      t5 = t2 == null;
      if (!t5)
        t2.e$1(0, new A.openChannel___closure(t1));
      if (t4)
        if (!t5)
          t2.e$1(0, new A.openChannel___closure0(t3));
    },
    $signature: 205
  };
  A.openChannel___closure.prototype = {
    call$0() {
      return "unhandled error from Web Worker: " + this._box_0.msg + ".";
    },
    $signature: 8
  };
  A.openChannel___closure0.prototype = {
    call$0() {
      return "it seems no Web Worker lives at " + this.entryPoint.toString$0(0) + ".";
    },
    $signature: 8
  };
  A.openChannel_closure0.prototype = {
    call$1(e) {
      var msg, response, error, ex, st, msg0, t1, exception, _this = this;
      type$.nullable_JSObject._as(e);
      try {
        msg0 = A.getMessageEventData(e);
        msg = msg0 == null ? type$.List_dynamic._as(msg0) : msg0;
        response = A.WorkerResponseExt_from(msg);
        t1 = _this.logger;
        if (!A.WorkerResponseExt_unwrapInPlace(response, _this.exceptionManager, t1))
          return;
        error = type$.nullable_SquadronException._as(J.$index$asx(response, 2));
        if (error != null) {
          if (t1 != null)
            t1.e$1(0, new A.openChannel__closure1(error));
          t1 = _this.fail.call$1(error);
          return t1;
        } else {
          t1 = _this.ready;
          if ((t1.future._state & 30) === 0)
            t1.complete$0(0);
        }
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = J.toString$0$(ex);
        return _this.fail.call$1(A.SquadronError$_(t1, st));
      }
    },
    $signature: 206
  };
  A.openChannel__closure1.prototype = {
    call$0() {
      return "connection to Web Worker failed: " + this.error.toString$0(0);
    },
    $signature: 8
  };
  A.openChannel_closure1.prototype = {
    call$1(e) {
      var error, channel, _this = this,
        t1 = type$.JSObject,
        msg0 = A.getMessageEventData(t1._as(e)),
        msg = msg0 == null ? type$.List_dynamic._as(msg0) : msg0,
        response = A.WorkerResponseExt_from(msg),
        t2 = _this.exceptionManager,
        t3 = _this.logger;
      if (!A.WorkerResponseExt_unwrapInPlace(response, t2, t3))
        return;
      if ((_this.completer.future._state & 30) === 0) {
        error = type$.nullable_SquadronException._as(J.$index$asx(response, 2));
        if (error != null) {
          if (t3 != null)
            t3.e$1(0, new A.openChannel__closure(error));
          _this.fail.call$1(error);
        } else {
          if (t3 != null)
            t3.t$1("connected to Web Worker");
          channel = new A._WebChannel(t2, t1._as(A.WorkerResponse_get_result(response)), t3);
          _this.success.call$1(channel);
        }
      } else if (t3 != null)
        t3.d$1(0, new A.openChannel__closure0(response));
    },
    $signature: 24
  };
  A.openChannel__closure.prototype = {
    call$0() {
      return "connection to Web Worker failed: " + this.error.toString$0(0);
    },
    $signature: 8
  };
  A.openChannel__closure0.prototype = {
    call$0() {
      return "unexpected response: " + A.S(this.response);
    },
    $signature: 8
  };
  A.openChannel_closure2.prototype = {
    call$0() {
      return "failed to post message " + A.S(this.startRequest) + ": " + A.S(this.ex);
    },
    $signature: 8
  };
  A.openChannel_closure3.prototype = {
    call$0() {
      return this.hook.call$1(this.worker._readLocal$0());
    },
    $signature: 1
  };
  A._WebLocalWorker.prototype = {};
  A.JsWorkerRunnerExt_get_handle_closure.prototype = {
    call$1($event) {
      var msg = A.getMessageEventData(type$.JSObject._as($event));
      if (msg == null)
        msg = type$.List_dynamic._as(msg);
      if (J.get$length$asx(msg) !== 7)
        A.throwExpression(A.SquadronError$_("Invalid worker request", null));
      this._this.processMessage$1(msg);
      return null;
    },
    $signature: 26
  };
  A.InternalLogger.prototype = {};
  A._NoLogOutput.prototype = {
    output$1($event) {
    }
  };
  A._DummyPrinter.prototype = {
    log$1($event) {
      return B.List_2No;
    }
  };
  A._LogAllFilter.prototype = {
    shouldLog$1($event) {
      return true;
    }
  };
  A.PoolWorker.prototype = {
    run$1(task) {
      var _this = this;
      type$.WorkerTask_dynamic_Worker._as(task);
      _this._lastStart = Date.now();
      --_this._capacity;
      return task.run$1(_this.worker).whenComplete$1(new A.PoolWorker_run_closure(_this));
    }
  };
  A.PoolWorker_run_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (++t1._capacity === t1.__pool_worker$_maxWorkload)
        t1._lastStart = null;
    },
    $signature: 2
  };
  A.StreamWrapper.prototype = {
    StreamWrapper$8$cast$messages$onDone$postRequest$token(streamRequest, exceptionManager, logger, cast, messages, onDone, postRequest, token, $T) {
      var t1, _this = this,
        _s11_ = "_controller";
      _this.set$__StreamWrapper__handle_A(type$.void_Function_List_dynamic._as(_this.get$_process()));
      t1 = _this.$ti._eval$1("StreamController<1>")._as(A.StreamController_StreamController(_this.get$__stream_wrapper$_onCancel(), _this.get$__stream_wrapper$_onListen(), _this.get$__stream_wrapper$_onPause(), _this.get$__stream_wrapper$_onResume(), $T));
      _this.__StreamWrapper__controller_F !== $ && A.throwLateFieldAI(_s11_);
      _this.set$__StreamWrapper__controller_F(t1);
      t1 = _this._token;
      if (t1 != null)
        t1.__squadron_cancelation_token$_completer.future.then$1$1(new A.StreamWrapper_closure(_this), type$.void);
      t1 = _this.__StreamWrapper__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      t1._ensureDoneFuture$0().then$1$1(new A.StreamWrapper_closure0(onDone), type$.void);
    },
    __stream_wrapper$_addError$2(error, st) {
      var t1 = this.__StreamWrapper__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      if ((t1._state & 4) === 0)
        t1.addError$2(error, st);
    },
    __stream_wrapper$_close$0() {
      var t1 = this.__StreamWrapper__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      return (t1._state & 4) !== 0 ? t1._ensureDoneFuture$0() : t1.close$0(0);
    },
    get$__stream_wrapper$_handle() {
      var t1 = this.__StreamWrapper__handle_A;
      t1 === $ && A.throwLateFieldNI("_handle");
      return t1;
    },
    _bufferize$1(res) {
      var t1 = this.__stream_wrapper$_buffer;
      if (t1 == null) {
        t1 = A._setArrayType([], type$.JSArray_List_dynamic);
        this.set$__stream_wrapper$_buffer(t1);
      }
      B.JSArray_methods.add$1(t1, res);
    },
    _process$1(res) {
      var error, t1, t2, _this = this;
      type$.List_dynamic._as(res);
      error = type$.nullable_SquadronException._as(J.$index$asx(res, 2));
      if (error != null)
        _this.__stream_wrapper$_addError$2(error, error.get$stackTrace());
      else {
        t1 = _this.$ti._precomputed1._as(_this._cast.call$1(A.WorkerResponse_get_result(res)));
        t2 = _this.__StreamWrapper__controller_F;
        t2 === $ && A.throwLateFieldNI("_controller");
        if ((t2._state & 4) === 0)
          t2.add$1(0, t1);
      }
    },
    __stream_wrapper$_onListen$0() {
      var _this = this;
      _this._messages.listen$2$cancelOnError(new A.StreamWrapper__onListen_closure(_this), false);
      _this.__stream_wrapper$_postRequest.call$1(_this._streamRequest);
    },
    __stream_wrapper$_onCancel$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1, streamId;
      var $async$__stream_wrapper$_onCancel$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self._streamId.future, $async$__stream_wrapper$_onCancel$0);
            case 2:
              // returning from await.
              streamId = $async$result;
              $async$self.__stream_wrapper$_postRequest.call$1([A.microsecTimeStamp(), null, -2, null, null, streamId, null]);
              t1 = $async$self.__stream_wrapper$_buffer;
              if (t1 != null)
                B.JSArray_methods.clear$0(t1);
              $async$self.__stream_wrapper$_close$0();
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$__stream_wrapper$_onCancel$0, $async$completer);
    },
    __stream_wrapper$_onPause$0() {
      var _this = this;
      if (_this.__stream_wrapper$_paused === 0)
        _this.set$__StreamWrapper__handle_A(type$.void_Function_List_dynamic._as(_this.get$_bufferize()));
      ++_this.__stream_wrapper$_paused;
    },
    __stream_wrapper$_onResume$0() {
      var buffer, _this = this,
        t1 = _this.__stream_wrapper$_paused;
      if (t1 === 0)
        return;
      --t1;
      _this.__stream_wrapper$_paused = t1;
      if (t1 === 0) {
        t1 = type$.void_Function_List_dynamic._as(_this.get$_process());
        _this.set$__StreamWrapper__handle_A(t1);
        buffer = _this.__stream_wrapper$_buffer;
        if (buffer != null) {
          B.JSArray_methods.forEach$1(buffer, t1);
          B.JSArray_methods.clear$0(buffer);
        }
      }
    },
    set$__StreamWrapper__controller_F(__StreamWrapper__controller_F) {
      this.__StreamWrapper__controller_F = this.$ti._eval$1("StreamController<1>")._as(__StreamWrapper__controller_F);
    },
    set$__StreamWrapper__handle_A(__StreamWrapper__handle_A) {
      this.__StreamWrapper__handle_A = type$.void_Function_List_dynamic._as(__StreamWrapper__handle_A);
    },
    set$__stream_wrapper$_buffer(_buffer) {
      this.__stream_wrapper$_buffer = type$.nullable_List_List_dynamic._as(_buffer);
    },
    __stream_wrapper$_handle$1(arg0) {
      return this.get$__stream_wrapper$_handle().call$1(arg0);
    }
  };
  A.StreamWrapper_closure.prototype = {
    call$1(ex) {
      var t1, t2;
      type$.CanceledException._as(ex);
      t1 = this.$this;
      t2 = t1._token;
      t2.toString;
      return t1.__stream_wrapper$_postRequest.call$1([A.microsecTimeStamp(), null, -3, null, t2, null, null]);
    },
    $signature: 61
  };
  A.StreamWrapper_closure0.prototype = {
    call$1(_) {
      return this.onDone.call$0();
    },
    $signature: 5
  };
  A.StreamWrapper__onListen_closure.prototype = {
    call$1(res) {
      var t1, t2, cancelException;
      type$.List_dynamic._as(res);
      t1 = this.$this;
      if (A.WorkerResponseExt_unwrapInPlace(res, t1.__stream_wrapper$_exceptionManager, t1.__stream_wrapper$_logger)) {
        t2 = t1.__StreamWrapper__controller_F;
        t2 === $ && A.throwLateFieldNI("_controller");
        t2 = (t2._state & 4) !== 0;
      } else
        t2 = true;
      if (t2)
        return;
      t2 = t1._token;
      cancelException = t2 == null ? null : t2.__squadron_cancelation_token$_exception;
      if (cancelException != null) {
        t2 = t1._streamId;
        if ((t2.future._state & 30) === 0)
          t2.complete$1(0, -1);
        t1.__stream_wrapper$_addError$2(cancelException, cancelException.get$stackTrace());
        t2 = t1.__stream_wrapper$_buffer;
        if (t2 != null)
          B.JSArray_methods.clear$0(t2);
        t1.__stream_wrapper$_close$0();
      } else if (A._asBool(J.$index$asx(res, 3)))
        t1.__stream_wrapper$_close$0();
      else {
        t2 = t1._streamId;
        if ((t2.future._state & 30) === 0)
          t2.complete$1(0, B.JSNumber_methods.toInt$0(A._asNum(A.WorkerResponse_get_result(res))));
        else
          t1.__stream_wrapper$_handle$1(res);
      }
    },
    $signature: 25
  };
  A.TokenId.prototype = {};
  A.UserCode_run_closure.prototype = {
    call$1(ex) {
      return A.UserCode__log(this.logger, this.logContext, ex);
    },
    $signature: 5
  };
  A.ValueWrapper.prototype = {
    ValueWrapper$7$cast$messages$postRequest$token(request, exceptionManager, logger, cast, messages, postRequest, token, $T) {
      var t1, _this = this;
      if (token != null)
        token.__squadron_cancelation_token$_completer.future.then$1$1(new A.ValueWrapper_closure(_this, token), type$.Null);
      t1 = messages.listen$3$cancelOnError$onError(new A.ValueWrapper_closure0(_this, exceptionManager, logger), false, new A.ValueWrapper_closure1(_this));
      _this.__ValueWrapper__sub_F !== $ && A.throwLateFieldAI("_sub");
      _this.__ValueWrapper__sub_F = t1;
    }
  };
  A.ValueWrapper_closure.prototype = {
    call$1(_) {
      type$.CanceledException._as(_);
      this.$this.__value_wrapper$_postRequest.call$1([A.microsecTimeStamp(), null, -3, null, this.token, null, null]);
    },
    $signature: 207
  };
  A.ValueWrapper_closure0.prototype = {
    call$1(res) {
      var t1, t2, error;
      type$.List_dynamic._as(res);
      t1 = this.$this;
      t2 = t1.__value_wrapper$_completer;
      if ((t2.future._state & 30) === 0) {
        if (!A.WorkerResponseExt_unwrapInPlace(res, this.exceptionManager, this.logger))
          return;
        error = type$.nullable_SquadronException._as(J.$index$asx(res, 2));
        if (error != null)
          t2.completeError$2(error, error.get$stackTrace());
        else
          t2.complete$1(0, t1.__value_wrapper$_cast.call$1(A.WorkerResponse_get_result(res)));
      }
    },
    $signature: 25
  };
  A.ValueWrapper_closure1.prototype = {
    call$2(e, st) {
      var t2, error,
        t1 = this.$this.__value_wrapper$_completer;
      if ((t1.future._state & 30) === 0) {
        t2 = e == null ? type$.Object._as(e) : e;
        error = A.SquadronException_from(t2, type$.nullable_StackTrace._as(st), null);
        t1.completeError$2(error, error.get$stackTrace());
      }
    },
    $signature: 35
  };
  A.WorkerRunner.prototype = {
    processMessage$1(request) {
      return this.processMessage$body$WorkerRunner(request);
    },
    processMessage$body$WorkerRunner(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, client, tokenRef, op, result, reply, ex, st, t1, t2, t3, token, exception, $async$exception;
      var $async$processMessage$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.WorkerMessageExt_unwrapTravelTime(request);
              t1 = J.getInterceptor$asx(request);
              t2 = A._asNumQ(t1.$index(request, 2));
              t1.$indexSet(request, 2, t2 == null ? null : B.JSNumber_methods.toInt$0(t2));
              t2 = A._asNumQ(t1.$index(request, 5));
              t1.$indexSet(request, 5, t2 == null ? null : B.JSNumber_methods.toInt$0(t2));
              t2 = type$.nullable_JSObject._as(t1.$index(request, 1));
              t1.$indexSet(request, 1, t2 == null ? null : new A._WebWorkerChannel(t2, $async$self.internalLogger));
              t1.$indexSet(request, 4, A.SquadronCancelationToken_deserialize(type$.nullable_List_dynamic._as(t1.$index(request, 4))));
              if (t1.$index(request, 6) == null)
                t1.$indexSet(request, 6, false);
              if (t1.$index(request, 3) == null)
                t1.$indexSet(request, 3, B.List_empty0);
              t2 = type$.nullable_WorkerChannel;
              client = t2._as(t1.$index(request, 1));
              if (A._asInt(t1.$index(request, 2)) === -4) {
                if ($async$self.__worker_runner$_executing === 0)
                  $async$self._unmount$0();
                else
                  $async$self._terminationRequested = true;
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              } else if (A._asInt(t1.$index(request, 2)) === -3) {
                t1 = type$.nullable_SquadronCancelationToken._as(t1.$index(request, 4));
                t1.toString;
                t2 = $async$self._getTokenRef$1(t1);
                ex = t1.get$exception();
                if (ex != null && (t2.__cancelation_token_ref$_completer.future._state & 30) === 0) {
                  t2.__cancelation_token_ref$_exception = ex;
                  t2.__cancelation_token_ref$_completer.complete$1(0, ex);
                }
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              } else if (A._asInt(t1.$index(request, 2)) === -2) {
                t2 = $async$self._streamCancelers;
                if (t2 == null)
                  t1 = null;
                else {
                  t1 = t2.$index(0, A._asIntQ(t1.$index(request, 5)));
                  t1 = t1 == null ? null : t1.call$0();
                }
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              } else if (client == null)
                throw A.wrapException(A.SquadronError$_("missing client for request: " + A.S(request), null));
              ++$async$self.__worker_runner$_executing;
              t3 = type$.nullable_SquadronCancelationToken;
              token = $async$self._getTokenRef$1(t3._as(t1.$index(request, 4)));
              if (token._hasRef) {
                ++token._refCount;
                if (t3._as(t1.$index(request, 4)) != null) {
                  t3 = t3._as(t1.$index(request, 4));
                  t3 = t3.get$id(t3) !== token.id;
                } else
                  t3 = true;
                if (t3)
                  A.throwExpression(A.SquadronError$_("cancelation token mismatch", null));
                t1.$indexSet(request, 4, token);
              } else if (t3._as(t1.$index(request, 4)) != null)
                A.throwExpression(A.SquadronError$_("Token reference mismatch", null));
              tokenRef = token;
              $async$handler = 4;
              if (A._asInt(t1.$index(request, 2)) === -1) {
                t1 = A.SquadronError$_("unexpected connection request: " + A.S(request), null);
                throw A.wrapException(t1);
              } else {
                t3 = $async$self._operations;
                if (t3 == null) {
                  t1 = A.SquadronError$_("worker service is not ready", null);
                  throw A.wrapException(t1);
                }
              }
              op = t3.$index(0, A._asInt(t1.$index(request, 2)));
              if (op == null) {
                t1 = A.SquadronError$_("unknown command: " + A.WorkerRequest_get_command(request), null);
                throw A.wrapException(t1);
              }
              result = op.call$1(request);
              $async$goto = result instanceof A._Future ? 7 : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return A._asyncAwait(result, $async$processMessage$1);
            case 9:
              // returning from await.
              result = $async$result;
            case 8:
              // join
              if (A._asBool(t1.$index(request, 6))) {
                t1 = t2._as(t1.$index(request, 1));
                t1 = t1 == null ? null : t1.get$inspectAndReply();
              } else {
                t1 = t2._as(t1.$index(request, 1));
                t1 = t1 == null ? null : t1.get$reply(t1);
              }
              t1.toString;
              reply = t1;
              t1 = result instanceof A.Stream;
              if (t1)
                type$.Stream_dynamic._as(result);
              $async$goto = t1 ? 10 : 12;
              break;
            case 10:
              // then
              $async$goto = 13;
              return A._asyncAwait($async$self._pipe$3(result, client, reply), $async$processMessage$1);
            case 13:
              // returning from await.
              // goto join
              $async$goto = 11;
              break;
            case 12:
              // else
              reply.call$1(result);
            case 11:
              // join
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              J.error$1$x(client, A.SquadronException_from(ex, st, null));
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t1 = type$.CancelationTokenReference._as(tokenRef);
              if (t1._hasRef)
                --t1._refCount;
              if (t1._refCount === 0)
                $async$self._cancelTokens.remove$1(0, t1.id);
              t1 = --$async$self.__worker_runner$_executing;
              if ($async$self._terminationRequested && t1 === 0)
                $async$self._unmount$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$processMessage$1, $async$completer);
    },
    _getTokenRef$1(token) {
      return token == null ? $.$get$CancelationTokenReference_noToken() : this._cancelTokens.putIfAbsent$2(0, token.get$id(token), new A.WorkerRunner__getTokenRef_closure(token));
    },
    _pipe$3(stream, client, reply) {
      var t2, t3, t4, t5, t6, _this = this, t1 = {};
      type$.void_Function_dynamic._as(reply);
      t1.subscription = null;
      t2 = new A._Future($.Zone__current, type$._Future_dynamic);
      t3 = new A.WorkerRunner__pipe_onDone(t1, client, new A._AsyncCompleter(t2, type$._AsyncCompleter_dynamic));
      t4 = type$.void_Function;
      t4._as(t3);
      t5 = ++_this.__worker_runner$_streamId;
      t6 = _this._streamCancelers;
      if (t6 == null) {
        t4 = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, t4);
        _this.set$_streamCancelers(t4);
      } else
        t4 = t6;
      t4.$indexSet(0, t5, t3);
      reply.call$1(t5);
      t1.subscription = stream.listen$4$cancelOnError$onDone$onError(new A.WorkerRunner__pipe_closure(reply), false, t3, new A.WorkerRunner__pipe_closure0(client));
      return t2.whenComplete$1(new A.WorkerRunner__pipe_closure1(_this, t5));
    },
    _unmount$0() {
      this._exit$0();
    },
    _exit$0() {
      this._terminate.call$1(this);
    },
    set$_operations(_operations) {
      this._operations = type$.nullable_Map_of_int_and_dynamic_Function_List_dynamic._as(_operations);
    },
    set$_streamCancelers(_streamCancelers) {
      this._streamCancelers = type$.nullable_Map_of_int_and_void_Function._as(_streamCancelers);
    }
  };
  A.WorkerRunner_WorkerRunner$use_closure.prototype = {
    call$1(r) {
      var t1 = r._operations;
      return t1 == null ? null : t1.clear$0(0);
    },
    $signature: 81
  };
  A.WorkerRunner__getTokenRef_closure.prototype = {
    call$0() {
      var t1 = this.token;
      return new A.CancelationTokenReference(t1.get$id(t1), new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_SquadronCanceledException), type$._AsyncCompleter_SquadronCanceledException), true);
    },
    $signature: 82
  };
  A.WorkerRunner__pipe_onDone.prototype = {
    call$0() {
      this.client._postResponse$1([A.microsecTimeStamp(), null, null, true, null]);
      var t1 = this._box_0.subscription;
      if (t1 != null)
        t1.cancel$0(0);
      this.done.complete$0(0);
    },
    $signature: 1
  };
  A.WorkerRunner__pipe_closure.prototype = {
    call$1(data) {
      return this.reply.call$1(data);
    },
    $signature: 5
  };
  A.WorkerRunner__pipe_closure0.prototype = {
    call$2(ex, st) {
      var t1 = ex == null ? type$.Object._as(ex) : ex;
      return this.client.error$1(0, A.SquadronException_from(t1, type$.nullable_StackTrace._as(st), null));
    },
    $signature: 29
  };
  A.WorkerRunner__pipe_closure1.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.streamId,
        t3 = t1._streamCancelers;
      if ((t3 == null ? null : t3.$index(0, t2)) != null) {
        t1 = t1._streamCancelers;
        if (t1 != null)
          t1.remove$1(0, t2);
      }
      return null;
    },
    $signature: 1
  };
  A.WorkerStreamTask.prototype = {
    __worker_stream_task$_onPause$0() {
      var t1, _this = this;
      if (_this._paused === 0) {
        t1 = _this.__worker_stream_task$_subscription;
        if (t1 != null && !_this._isPaused) {
          t1.pause$0(0);
          _this._isPaused = true;
        }
      }
      ++_this._paused;
    },
    __worker_stream_task$_onResume$0() {
      var _this = this,
        t1 = _this._paused;
      if (t1 === 0)
        return;
      --t1;
      _this._paused = t1;
      if (t1 === 0) {
        t1 = _this.__worker_stream_task$_subscription;
        if (t1 != null && _this._isPaused) {
          t1.resume$0(0);
          _this._isPaused = false;
        }
      }
    },
    __worker_stream_task$_onCancel$0() {
      var t1 = this.__worker_stream_task$_subscription;
      return t1 == null ? null : t1.cancel$0(0);
    },
    __worker_stream_task$_close$1(exception) {
      var t1 = this.__worker_stream_task$_subscription;
      if (t1 != null)
        t1.cancel$0(0);
      t1 = this.__WorkerStreamTask__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      if ((t1._state & 4) !== 0)
        return t1._ensureDoneFuture$0();
      if (exception != null)
        this.__worker_stream_task$_onError$2(exception, exception.get$stackTrace());
      return t1.close$0(0);
    },
    _done$1(exception) {
      type$.nullable_SquadronException._as(exception);
      return this.wrapUp$2(new A.WorkerStreamTask__done_closure(this, exception), exception == null);
    },
    _done$0() {
      return this._done$1(null);
    },
    cancel$1(_, message) {
      this.super$WorkerTask$cancel(0, message);
      this._done$1(this._canceledException);
    },
    __worker_stream_task$_onError$2(ex, st) {
      var t2,
        t1 = this.__WorkerStreamTask__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      if ((t1._state & 4) === 0) {
        t2 = ex == null ? type$.Object._as(ex) : ex;
        type$.nullable_StackTrace._as(st);
        t1.addError$2(A.SquadronException_from(t2, st, null), st);
      }
    },
    __worker_stream_task$_onData$1(data) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(data);
      if (_this.__worker_task$_canceled != null)
        _this._done$1(_this._canceledException);
      else {
        t1 = _this.__WorkerStreamTask__controller_F;
        t1 === $ && A.throwLateFieldNI("_controller");
        if ((t1._state & 4) !== 0)
          _this._done$0();
        else
          t1.add$1(0, data);
      }
    },
    __worker_stream_task$_onListen$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, stream, ex, st, exception, t1, $async$exception;
      var $async$__worker_stream_task$_onListen$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.__WorkerStreamTask__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              if ((t1._state & 4) !== 0) {
                $async$returnValue = $async$self._done$0();
                // goto return
                $async$goto = 1;
                break;
              }
              if ($async$self.__worker_task$_canceled != null) {
                $async$returnValue = $async$self._done$1($async$self._canceledException);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait($async$self._streamer.future, $async$__worker_stream_task$_onListen$0);
            case 7:
              // returning from await.
              stream = $async$result;
              $async$self.set$__worker_stream_task$_subscription(stream.listen$3$onDone$onError($async$self.get$__worker_stream_task$_onData(), $async$self.get$_done(), $async$self.get$__worker_stream_task$_onError()));
              if ($async$self._paused > 0 && !$async$self._isPaused) {
                $async$self.__worker_stream_task$_subscription.pause$0(0);
                $async$self._isPaused = true;
              }
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              $async$self._done$1(A.SquadronException_from(ex, st, null));
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$__worker_stream_task$_onListen$0, $async$completer);
    },
    run$1(worker) {
      this.$ti._rest[1]._as(worker);
      return this.super$WorkerTask$run(worker).then$1$1(new A.WorkerStreamTask_run_closure(this, worker), type$.void);
    },
    set$__WorkerStreamTask__controller_F(__WorkerStreamTask__controller_F) {
      this.__WorkerStreamTask__controller_F = this.$ti._eval$1("StreamController<1>")._as(__WorkerStreamTask__controller_F);
    },
    set$__worker_stream_task$_subscription(_subscription) {
      this.__worker_stream_task$_subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    },
    $isStreamTask: 1
  };
  A.WorkerStreamTask__done_closure.prototype = {
    call$0() {
      return this.$this.__worker_stream_task$_close$1(this.exception);
    },
    $signature: 1
  };
  A.WorkerStreamTask_run_closure.prototype = {
    call$1(_) {
      var t1 = this.$this;
      t1._streamer.complete$1(0, t1._producer.call$1(this.worker));
      t1 = t1.__WorkerStreamTask__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      return t1._ensureDoneFuture$0();
    },
    $signature: 84
  };
  A.WorkerTask.prototype = {
    get$isFinished() {
      return this._executed != null && this._finished != null && this.__worker_task$_canceled == null;
    },
    get$isRunning() {
      return this._executed != null && this._finished == null && this.__worker_task$_canceled == null;
    },
    cancel$1(_, message) {
      var _this = this;
      if (_this.__worker_task$_canceled == null)
        _this.__worker_task$_canceled = A.microsecTimeStamp();
      if (_this._canceledException == null)
        _this._canceledException = new A.TaskCanceledException(message == null ? "Task canceled" : message);
    },
    run$1(worker) {
      var t1, _this = this;
      A._instanceType(_this)._rest[1]._as(worker);
      if (_this._executed == null)
        _this._executed = A.microsecTimeStamp();
      t1 = _this._canceledException;
      return t1 == null ? $.$get$WorkerTask__ready() : A.Future_Future$error(t1, null, type$.void);
    },
    wrapUp$2(callback, success) {
      return this.wrapUp$body$WorkerTask(type$.void_Function._as(callback), success);
    },
    wrapUp$body$WorkerTask(callback, success) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3;
      var $async$wrapUp$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._finished == null) {
                t1 = A.microsecTimeStamp();
                $async$self._finished = t1;
                t2 = $async$self._counter;
                if (t2 != null) {
                  t3 = $async$self._executed;
                  t3.toString;
                  t3 = t1 - t3;
                  if (t3 > t2._maxTimeInMicroseconds)
                    t2._maxTimeInMicroseconds = t3;
                  t2._totalTimeInMicroseconds += t3;
                  if (success)
                    ++t2._totalCount;
                  else
                    ++t2._perf_counter$_totalErrors;
                }
                callback.call$0();
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$wrapUp$2, $async$completer);
    },
    $isTask: 1
  };
  A.WorkerValueTask.prototype = {
    _completeWithError$2(exception, stackTrace) {
      type$.Object._as(exception);
      type$.nullable_StackTrace._as(stackTrace);
      this.wrapUp$2(new A.WorkerValueTask__completeWithError_closure(this, type$.SquadronException._is(exception) ? exception : A.SquadronException_from(exception, stackTrace, null)), false);
    },
    _completeWithResult$1(data) {
      this.wrapUp$2(new A.WorkerValueTask__completeWithResult_closure(this, data), true);
    },
    cancel$1(_, message) {
      var t1, _this = this;
      _this.super$WorkerTask$cancel(0, message);
      if (!_this.get$isRunning() && !_this.get$isFinished()) {
        t1 = _this._canceledException;
        t1.toString;
        _this._completeWithError$2(t1, null);
      }
    },
    cancel$0(_) {
      return this.cancel$1(0, null);
    },
    run$1(worker) {
      var _this = this;
      _this.$ti._rest[1]._as(worker);
      return _this.super$WorkerTask$run(worker).then$1$2$onError(new A.WorkerValueTask_run_closure(_this, worker), _this.get$_completeWithError(), type$.void);
    },
    $isValueTask: 1
  };
  A.WorkerValueTask__completeWithError_closure.prototype = {
    call$0() {
      var t2,
        t1 = this.$this.__worker_value_task$_completer;
      if ((t1.future._state & 30) === 0) {
        t2 = this.ex;
        t1.completeError$2(t2, t2.get$stackTrace());
      }
    },
    $signature: 1
  };
  A.WorkerValueTask__completeWithResult_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.__worker_value_task$_completer;
      if ((t2.future._state & 30) === 0)
        t2.complete$1(0, t1.$ti._eval$1("1/?")._as(this.data));
    },
    $signature: 1
  };
  A.WorkerValueTask_run_closure.prototype = {
    call$1(_) {
      var t1 = this.$this;
      return t1._computer.call$1(this.worker).then$1$2$onError(t1.get$_completeWithResult(), t1.get$_completeWithError(), type$.void);
    },
    $signature: 86
  };
  A.ConcurrencySettings.prototype = {};
  A.ExceptionManager.prototype = {
    register$2(_, exceptionTypeId, deserializer) {
      type$.nullable_WorkerException_Function_List_dynamic._as(deserializer);
      if (B.Set_zHPI1.contains$1(0, exceptionTypeId))
        throw A.wrapException(A.SquadronError$_("Invalid exception type ID: " + exceptionTypeId + " is reserved.", null));
      this._deserializers.$indexSet(0, exceptionTypeId, deserializer);
    },
    unregister$1(_, exceptionTypeId) {
      if (B.Set_zHPI1.contains$1(0, exceptionTypeId))
        throw A.wrapException(A.SquadronError$_("Invalid exception type ID: " + exceptionTypeId + " is reserved.", null));
      this._deserializers.remove$1(0, exceptionTypeId);
    },
    deserialize$1(data) {
      var exceptionType, deserializer, ex, st, t1, exception,
        _s45_ = "failed to deserialize exception information: ";
      if (data == null || J.get$isEmpty$asx(data))
        return null;
      exceptionType = J.$index$asx(data, 0);
      try {
        deserializer = this._deserializers.$index(0, exceptionType);
        t1 = deserializer;
        t1 = t1 == null ? null : t1.call$1(data);
        if (t1 == null)
          t1 = A.SquadronError$_(_s45_ + A.S(data), null);
        return t1;
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = A.S(ex);
        return A.SquadronError$_(_s45_ + t1, st);
      }
    }
  };
  A.SquadronCanceledException.prototype = {
    serialize$0() {
      var t1 = this._squadron_exception$_stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      return A.List_List$unmodifiable(["$cncld", this.tokenId, this.message, t1], type$.dynamic);
    },
    $isCanceledException: 1
  };
  A.SquadronCanceledException_SquadronCanceledException$from_closure.prototype = {
    call$1(e) {
      type$.CanceledException._as(e);
      return A.SquadronCanceledException_SquadronCanceledException$from(this.tokenId, e, e.get$stackTrace());
    },
    $signature: 87
  };
  A.SquadronCanceledExceptions.prototype = {
    get$innerExceptions() {
      return this._exceptions;
    },
    get$message(_) {
      var t1 = this._exceptions,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.SquadronCanceledExceptions_message_closure()), t2._eval$1("MappedListIterable<1,String>")).join$1(0, "\n");
    },
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return B.C_JsonCodec.encode$2$toEncodable(this.serialize$0(), null);
    },
    serialize$0() {
      var t1 = this._exceptions,
        t2 = A._arrayInstanceType(t1);
      return A.List_List$unmodifiable(["$cncld*", this.tokenId, new A.MappedListIterable(t1, t2._eval$1("List<@>(1)")._as(new A.SquadronCanceledExceptions_serialize_closure()), t2._eval$1("MappedListIterable<1,List<@>>"))], type$.dynamic);
    },
    $isException: 1,
    $isCanceledException: 1,
    $isCanceledExceptions: 1,
    $isSquadronCanceledException: 1,
    $isSquadronException: 1
  };
  A.SquadronCanceledExceptions_message_closure.prototype = {
    call$1(e) {
      type$.SquadronCanceledException._as(e);
      return e.get$message(e);
    },
    $signature: 88
  };
  A.SquadronCanceledExceptions_serialize_closure.prototype = {
    call$1(e) {
      return type$.SquadronCanceledException._as(e).serialize$0();
    },
    $signature: 89
  };
  A.SquadronError.prototype = {
    serialize$0() {
      var t1 = this._squadron_exception$_stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      return A.List_List$unmodifiable(["$sqdrn", this.message, t1], type$.dynamic);
    }
  };
  A.SquadronException.prototype = {
    SquadronException$init$2(message, _stackTrace) {
      var st, exception;
      if (this._squadron_exception$_stackTrace == null)
        try {
          this._squadron_exception$_stackTrace = A.StackTrace_current();
        } catch (exception) {
          st = A.getTraceFromException(exception);
          this.set$_squadron_exception$_stackTrace(st);
        }
    },
    get$stackTrace() {
      return this._squadron_exception$_stackTrace;
    },
    toString$0(_) {
      return B.C_JsonCodec.encode$2$toEncodable(this.serialize$0(), null);
    },
    set$_squadron_exception$_stackTrace(_stackTrace) {
      this._squadron_exception$_stackTrace = type$.nullable_StackTrace._as(_stackTrace);
    },
    $isException: 1,
    get$message(receiver) {
      return this.message;
    }
  };
  A.SquadronTimeoutException.prototype = {
    serialize$0() {
      var t2, _this = this,
        t1 = _this._squadron_exception$_stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      t2 = _this.duration;
      t2 = t2 == null ? null : t2._duration;
      return A.List_List$unmodifiable(["$tmt", _this.tokenId, _this.message, t1, t2], type$.dynamic);
    },
    $isTimeoutException: 1,
    $isTimeoutCanceledException: 1,
    get$duration(receiver) {
      return this.duration;
    }
  };
  A.TaskCanceledException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      this.serialize$0();
      return void 1;
    },
    serialize$0() {
      return A.throwExpression(A.UnimplementedError$(null));
    },
    $isException: 1,
    $isCanceledException: 1,
    $isSquadronError: 1,
    $isSquadronException: 1,
    get$message(receiver) {
      return this.message;
    }
  };
  A.WorkerException.prototype = {
    serialize$0() {
      var t1 = this._squadron_exception$_stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      return A.List_List$unmodifiable(["$wrkr", this.message, t1, this._command], type$.dynamic);
    }
  };
  A.LocalWorker.prototype = {
    release$0(_) {
      var _this = this,
        t1 = _this.__local_worker$_port,
        t2 = type$.JSObject;
      t2._as(t1.port1).close();
      t2._as(t1.port2).close();
      t1 = _this.___WebLocalWorker__channel_A;
      t1 === $ && A.throwLateFieldNI("_channel");
      if (t1 != null)
        t1.close$0(0);
      _this.___WebLocalWorker__channel_A = null;
      _this.super$Releasable$release(0);
    }
  };
  A._LocalWorker_Object_Releasable.prototype = {};
  A.WorkerPool.prototype = {
    release$0(_) {
      this.stop$0(0);
      this.super$Releasable$release(0);
    },
    get$exceptionManager() {
      var t1 = this._exceptionManager;
      return t1;
    },
    _getProvisionNeeds$1(workload) {
      var t1 = this.concurrencySettings,
        workload0 = t1.minWorkers;
      if (workload < workload0)
        workload = workload0;
      workload0 = t1.maxWorkers;
      if (workload0 > 0 && workload > workload0)
        workload = workload0;
      return workload - this._workers.length - this._startingWorkers;
    },
    _provisionWorkers$1(workload) {
      var worker, poolWorker, ex, st, t1, t2, t3, t4, i, t5, t6, exception, _this = this,
        tasks = A._setArrayType([], type$.JSArray_Future_dynamic),
        errors = [];
      for (t1 = _this.concurrencySettings.maxParallel, t2 = A._instanceType(_this)._eval$1("PoolWorker<WorkerPool.W>"), t3 = type$.Null, t4 = _this._workerFactory, i = 0; i < workload; ++i)
        try {
          worker = t4.call$0();
          worker.channelLogger = _this.channelLogger;
          t5 = worker;
          t6 = _this._exceptionManager;
          if (t5._worker$_exceptionManager == null)
            t5._worker$_exceptionManager = t6;
          poolWorker = new A.PoolWorker(worker, t1, t1, t2);
          ++_this._startingWorkers;
          J.add$1$ax(tasks, poolWorker.worker.start$0(0).whenComplete$1(new A.WorkerPool__provisionWorkers_closure(_this)).then$1$1(new A.WorkerPool__provisionWorkers_closure0(_this, poolWorker), t3).catchError$1(new A.WorkerPool__provisionWorkers_closure1(poolWorker, errors)));
        } catch (exception) {
          ex = A.unwrapException(exception);
          st = A.getTraceFromException(exception);
          J.add$1$ax(errors, A.SquadronException_from(ex, st, null));
        }
      return A.Future_wait(tasks, false, type$.dynamic).whenComplete$1(new A.WorkerPool__provisionWorkers_closure2(_this, errors, tasks));
    },
    start$0(_) {
      var t1, needs, _this = this;
      _this._stopped = false;
      t1 = _this._worker_pool$_queue;
      needs = _this._getProvisionNeeds$1(t1._collection$_head === t1._collection$_tail ? 1 : t1.get$length(0));
      if (needs > 0)
        return _this._provisionWorkers$1(needs);
    },
    _notify$2$removed(worker, removed) {
      var listener, t1, t2, listener0, exception;
      A._instanceType(this)._eval$1("WorkerPool.W")._as(worker);
      for (t1 = this._workerPoolListeners.get$values(0), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1]; t1.moveNext$0();) {
        listener0 = t1.__internal$_current;
        listener = listener0 == null ? t2._as(listener0) : listener0;
        try {
          listener.call$2(worker, removed);
        } catch (exception) {
        }
      }
    },
    _removeWorkerAndNotify$1(poolWorker) {
      A._instanceType(this)._eval$1("PoolWorker<WorkerPool.W>")._as(poolWorker);
      B.JSArray_methods.remove$1(this._workers, poolWorker);
      this._notify$2$removed(poolWorker.worker, true);
    },
    _removeWorker$2(poolWorker, force) {
      var worker, _this = this;
      A._instanceType(_this)._eval$1("PoolWorker<WorkerPool.W>")._as(poolWorker);
      if (force || _this._workers.length > _this.concurrencySettings.minWorkers) {
        worker = poolWorker.worker;
        worker.stop$0(0);
        B.JSArray_methods.add$1(_this._deadWorkerStats, worker.get$stats());
        _this._removeWorkerAndNotify$1(poolWorker);
        return 1;
      } else
        return 0;
    },
    stop$1(_, predicate) {
      var force, t1, t2, targets, t3, stopped, _i, _this = this;
      A._instanceType(_this)._eval$1("bool(WorkerPool.W)?")._as(predicate);
      force = predicate == null;
      t1 = _this._workers;
      t2 = A._arrayInstanceType(t1);
      if (force) {
        targets = A.SubListIterable$(t1, _this._worker_pool$_queue.get$length(0), null, t2._precomputed1).toList$0(0);
        _this._stopped = true;
      } else {
        t3 = t2._eval$1("WhereIterable<1>");
        targets = A.List_List$of(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.WorkerPool_stop_closure(_this, predicate)), t3), true, t3._eval$1("Iterable.E"));
      }
      for (t1 = targets.length, stopped = 0, _i = 0; _i < targets.length; targets.length === t1 || (0, A.throwConcurrentModificationError)(targets), ++_i)
        stopped += _this._removeWorker$2(targets[_i], force);
      return stopped;
    },
    stop$0(_) {
      return this.stop$1(0, null);
    },
    _enqueue$1$1(task, $T) {
      var t1, _this = this;
      A._instanceType(_this)._bind$1($T)._eval$1("WorkerTask<1,WorkerPool.W>")._as(task);
      if (_this._stopped)
        throw A.wrapException(A.SquadronError$_("the pool cannot accept new requests because it is stopped", null));
      t1 = _this._worker_pool$_queue;
      t1._add$1(0, t1.$ti._precomputed1._as(task));
      _this._schedule$0();
      return task;
    },
    execute$1$2$counter(task, counter, $T) {
      return this.scheduleTask$1$2$counter(A._instanceType(this)._bind$1($T)._eval$1("Future<1>(WorkerPool.W)")._as(task), counter, $T).__worker_value_task$_completer.future;
    },
    execute$1$1(task, $T) {
      return this.execute$1$2$counter(task, null, $T);
    },
    stream$1$2$counter(_, task, counter, $T) {
      var t1 = this.scheduleStream$1$2$counter(A._instanceType(this)._bind$1($T)._eval$1("Stream<1>(WorkerPool.W)")._as(task), counter, $T).__WorkerStreamTask__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      return new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    stream$1$1(_, task, $T) {
      return this.stream$1$2$counter(0, task, null, $T);
    },
    scheduleTask$1$2$counter(task, counter, $T) {
      var t2,
        t1 = A._instanceType(this);
      t1._bind$1($T)._eval$1("Future<1>(WorkerPool.W)")._as(task);
      t2 = $.Zone__current;
      A.microsecTimeStamp();
      return $T._eval$1("ValueTask<0>")._as(this._enqueue$1$1(new A.WorkerValueTask(task, new A._AsyncCompleter(new A._Future(t2, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncCompleter<0>")), counter, $T._eval$1("@<0>")._bind$1(t1._eval$1("WorkerPool.W"))._eval$1("WorkerValueTask<1,2>")), $T));
    },
    scheduleTask$1$1(task, $T) {
      return this.scheduleTask$1$2$counter(task, null, $T);
    },
    scheduleStream$1$2$counter(task, counter, $T) {
      var t2,
        t1 = A._instanceType(this);
      t1._bind$1($T)._eval$1("Stream<1>(WorkerPool.W)")._as(task);
      t2 = $.Zone__current;
      A.microsecTimeStamp();
      t1 = $T._eval$1("@<0>")._bind$1(t1._eval$1("WorkerPool.W"));
      t2 = new A.WorkerStreamTask(task, new A._AsyncCompleter(new A._Future(t2, $T._eval$1("_Future<Stream<0>>")), $T._eval$1("_AsyncCompleter<Stream<0>>")), counter, t1._eval$1("WorkerStreamTask<1,2>"));
      t2.set$__WorkerStreamTask__controller_F(t1._eval$1("StreamController<1>")._as(A.StreamController_StreamController(t2.get$__worker_stream_task$_onCancel(), t2.get$__worker_stream_task$_onListen(), t2.get$__worker_stream_task$_onPause(), t2.get$__worker_stream_task$_onResume(), $T)));
      return $T._eval$1("StreamTask<0>")._as(this._enqueue$1$1(t2, $T));
    },
    scheduleStream$1$1(task, $T) {
      return this.scheduleStream$1$2$counter(task, null, $T);
    },
    _schedule$0() {
      var t2, t3, needs, _this = this,
        t1 = _this._workers;
      if (t1.length === 0 && _this._startingWorkers > 0) {
        A.Future_Future(_this.get$_schedule(), type$.void);
        return;
      }
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("WhereIterable<1>");
      B.JSArray_methods.forEach$1(A.List_List$of(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(A._pool_worker_PoolWorker_isStopped$closure()), t3), true, t3._eval$1("Iterable.E")), _this.get$_removeWorkerAndNotify());
      t3 = _this._worker_pool$_queue;
      t3._filterWhere$2(t3.$ti._eval$1("bool(1)")._as(new A.WorkerPool__schedule_closure()), true);
      if (t3._collection$_head === t3._collection$_tail) {
        if (_this._stopped && _this._executing._collection$_length === 0)
          _this.stop$0(0);
        return;
      }
      _this._dispatchTasks$0();
      needs = _this._getProvisionNeeds$1(t3.get$length(0));
      if (needs > 0)
        _this._provisionWorkers$1(needs).then$1$2$onError(new A.WorkerPool__schedule_closure0(_this), new A.WorkerPool__schedule_closure1(_this), type$.void);
    },
    _dispatchTasks$0() {
      var t4, idx, w, task, _this = this,
        t1 = _this._workers,
        t2 = _this._worker_pool$_queue,
        t3 = _this._executing,
        maxCapacity = null;
      while (true) {
        if (!t2.get$isEmpty(0)) {
          B.JSArray_methods.sort$1(t1, A._pool_worker_PoolWorker_compareCapacityDesc$closure());
          maxCapacity = t1.length === 0 ? 0 : B.JSArray_methods.get$first(t1)._capacity;
          t4 = maxCapacity > 0;
        } else
          t4 = false;
        if (!t4)
          break;
        if (typeof maxCapacity !== "number")
          return maxCapacity.$sub();
        --maxCapacity;
        for (idx = 0; idx < t1.length; ++idx) {
          w = t1[idx];
          if (t2._collection$_head !== t2._collection$_tail) {
            t4 = w._capacity;
            t4 = t4 === 0 || t4 < maxCapacity;
          } else
            t4 = true;
          if (t4)
            break;
          task = t2.removeFirst$0();
          t3.add$1(0, task);
          w.run$1(task).whenComplete$1(new A.WorkerPool__dispatchTasks_closure(_this, task));
        }
      }
    },
    cancel$2(_, task, message) {
      var t3, toBeCanceled, _i,
        t1 = this._executing,
        t2 = this._worker_pool$_queue;
      if (task != null) {
        t1.remove$1(0, task);
        t2._filterWhere$2(t2.$ti._eval$1("bool(1)")._as(new A.WorkerPool_cancel_closure(task)), true);
        task.cancel$1(0, message);
      } else {
        t3 = A._instanceType(t1);
        t3._eval$1("Iterable<1>")._as(t2);
        t3 = A.FollowedByIterable_FollowedByIterable$firstEfficient(t1, t2, t3._precomputed1);
        toBeCanceled = A.List_List$of(t3, true, A._instanceType(t3)._eval$1("Iterable.E"));
        t1.clear$0(0);
        t2.clear$0(0);
        for (t1 = toBeCanceled.length, _i = 0; _i < t1; ++_i)
          J.cancel$1$z(toBeCanceled[_i], message);
      }
    },
    cancel$0(_) {
      return this.cancel$2(0, null, null);
    },
    cancel$1(_, task) {
      return this.cancel$2(0, task, null);
    }
  };
  A.WorkerPool__provisionWorkers_closure.prototype = {
    call$0() {
      --this.$this._startingWorkers;
    },
    $signature: 2
  };
  A.WorkerPool__provisionWorkers_closure0.prototype = {
    call$1(_) {
      var t1, t2;
      type$.Channel._as(_);
      t1 = this.$this;
      t2 = A._instanceType(t1)._eval$1("PoolWorker<WorkerPool.W>")._as(this.poolWorker);
      B.JSArray_methods.add$1(t1._workers, t2);
      t1._notify$2$removed(t2.worker, false);
    },
    $signature: 90
  };
  A.WorkerPool__provisionWorkers_closure1.prototype = {
    call$2(ex, st) {
      var t1;
      this.poolWorker.worker.stop$0(0);
      t1 = ex == null ? type$.Object._as(ex) : ex;
      B.JSArray_methods.add$1(this.errors, A.SquadronException_from(t1, type$.nullable_StackTrace._as(st), null));
    },
    $signature: 35
  };
  A.WorkerPool__provisionWorkers_closure2.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._workers.length;
      if (t2 > t1._maxSize)
        t1._maxSize = t2;
      t1 = this.errors;
      t2 = t1.length;
      if (t2 !== 0)
        if (!(t2 < this.tasks.length)) {
          t2 = B.JSArray_methods.firstWhere$2$orElse(t1, new A.WorkerPool__provisionWorkers__closure(), new A.WorkerPool__provisionWorkers__closure0());
          if (t2 == null)
            t2 = B.JSArray_methods.firstWhere$2$orElse(t1, new A.WorkerPool__provisionWorkers__closure1(), new A.WorkerPool__provisionWorkers__closure2());
          t1 = t2 == null ? B.JSArray_methods.get$first(t1) : t2;
          throw A.wrapException(t1);
        }
    },
    $signature: 2
  };
  A.WorkerPool__provisionWorkers__closure.prototype = {
    call$1(e) {
      return type$.SquadronError._is(e);
    },
    $signature: 9
  };
  A.WorkerPool__provisionWorkers__closure0.prototype = {
    call$0() {
      return null;
    },
    $signature: 2
  };
  A.WorkerPool__provisionWorkers__closure1.prototype = {
    call$1(e) {
      return e instanceof A.WorkerException;
    },
    $signature: 9
  };
  A.WorkerPool__provisionWorkers__closure2.prototype = {
    call$0() {
      return null;
    },
    $signature: 2
  };
  A.WorkerPool_stop_closure.prototype = {
    call$1(w) {
      var t1;
      A._instanceType(this.$this)._eval$1("PoolWorker<WorkerPool.W>")._as(w);
      t1 = w.worker;
      return (t1._worker$_stopped != null || w._capacity === w.__pool_worker$_maxWorkload) && A.boolConversionCheck(this.predicate.call$1(t1));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(PoolWorker<WorkerPool.W>)");
    }
  };
  A.WorkerPool__schedule_closure.prototype = {
    call$1(t) {
      return type$.WorkerTask_dynamic_Worker._as(t).__worker_task$_canceled != null;
    },
    $signature: 60
  };
  A.WorkerPool__schedule_closure0.prototype = {
    call$1(_) {
      return this.$this._dispatchTasks$0();
    },
    $signature: 66
  };
  A.WorkerPool__schedule_closure1.prototype = {
    call$1(ex) {
      var t1;
      for (t1 = this.$this._worker_pool$_queue; !t1.get$isEmpty(0);)
        J.cancel$1$z(t1.removeFirst$0(), "provisionning workers failed");
    },
    $signature: 6
  };
  A.WorkerPool__dispatchTasks_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._executing.remove$1(0, this.task);
      t1._schedule$0();
    },
    $signature: 2
  };
  A.WorkerPool_cancel_closure.prototype = {
    call$1(t) {
      return type$.WorkerTask_dynamic_Worker._as(t) === this.task;
    },
    $signature: 60
  };
  A._WorkerPool_Object_Releasable.prototype = {};
  A.PerfCounter.prototype = {};
  A.PerfCounterSnapshot.prototype = {};
  A.WorkerStat.prototype = {};
  A.CancelationTokenReference.prototype = {
    get$exception() {
      return this.__cancelation_token_ref$_exception;
    },
    get$onCanceled() {
      return this.__cancelation_token_ref$_completer.future;
    },
    ensureStarted$0() {
    },
    serialize$0() {
      return A.throwExpression(A.UnimplementedError$(null));
    },
    $isCancelationToken: 1,
    $isSquadronCancelationToken: 1,
    get$id(receiver) {
      return this.id;
    }
  };
  A.SquadronCancelationToken.prototype = {
    serialize$0() {
      this._checkToken$0();
      var t1 = this.__squadron_cancelation_token$_exception;
      t1 = t1 == null ? null : t1.serialize$0();
      return A.List_List$unmodifiable([this.id, t1], type$.dynamic);
    },
    get$exception() {
      return this.__squadron_cancelation_token$_exception;
    },
    ensureStarted$0() {
      var t1 = this.token;
      if (t1 != null)
        t1.ensureStarted$0();
    },
    get$onCanceled() {
      return this.__squadron_cancelation_token$_completer.future;
    },
    _checkToken$1(_) {
      var t2, _this = this,
        t1 = _this.token,
        ex = t1 == null ? null : t1.get$exception();
      if (ex != null) {
        t1 = _this.__squadron_cancelation_token$_exception;
        if (t1 == null)
          t1 = _this.__squadron_cancelation_token$_exception = A.SquadronCanceledException_SquadronCanceledException$from(_this.id, ex, null);
        t2 = _this.__squadron_cancelation_token$_completer;
        if ((t2.future._state & 30) === 0)
          t2.complete$1(0, t1);
      }
    },
    _checkToken$0() {
      return this._checkToken$1(null);
    },
    get$id(receiver) {
      return this.id;
    }
  };
  A.Worker0.prototype = {
    release$0(_) {
      this.stop$0(0);
      this.super$Releasable$release(0);
    },
    get$exceptionManager() {
      var t1 = this._worker$_exceptionManager;
      return t1 == null ? this._worker$_exceptionManager = A.ExceptionManager$() : t1;
    },
    get$upTime() {
      var t1, t2;
      if (this._started == null)
        t1 = B.Duration_0;
      else {
        t1 = this._worker$_stopped;
        if (t1 == null)
          t1 = A.microsecTimeStamp();
        t2 = this._started;
        t2.toString;
        t2 = A.Duration$(t1 - t2, 0, 0);
        t1 = t2;
      }
      return t1;
    },
    get$idleTime() {
      var t1, t2;
      if (this._workload > 0 || this._idle == null)
        t1 = B.Duration_0;
      else {
        t1 = A.microsecTimeStamp();
        t2 = this._idle;
        t2.toString;
        t2 = A.Duration$(t1 - t2, 0, 0);
        t1 = t2;
      }
      return t1;
    },
    get$status(_) {
      var t1;
      if (this._worker$_stopped != null)
        return "STOPPED";
      else {
        t1 = this._workload;
        if (t1 === 0)
          return "IDLE";
        else
          return "WORKING(" + t1 + ")";
      }
    },
    get$stats() {
      var t1, t2, t3, _this = this;
      A.getRuntimeTypeOfDartObject(_this);
      A.Primitives_objectHashCode(_this);
      t1 = _this._worker$_stopped;
      _this.get$status(0);
      t2 = _this._maxWorkload;
      t3 = _this._totalErrors;
      _this.get$upTime();
      _this.get$idleTime();
      return new A.WorkerStat(t1 != null, t2, t3);
    },
    send$1$4$args$inspectRequest$inspectResponse(_, command, args, inspectRequest, inspectResponse, $T) {
      var t1 = new A.Worker_send_sendReq(this, command, args, A.SquadronCancelationTokenExt_wrap(null), inspectRequest, inspectResponse, $T),
        t2 = this._channel;
      return t2 != null ? t1.call$1(t2) : this.start$0(0).then$1$1(t1, $T);
    },
    send$1$2$args(_, command, args, $T) {
      return this.send$1$4$args$inspectRequest$inspectResponse(0, command, args, false, false, $T);
    },
    send$1$1(_, command, $T) {
      return this.send$1$4$args$inspectRequest$inspectResponse(0, command, B.List_empty0, false, false, $T);
    },
    stream$1$3$args$token(_, command, args, token, $T) {
      var squadronToken, controller, _this = this, t1 = {},
        t2 = ++_this._workload;
      if (t2 > _this._maxWorkload)
        _this._maxWorkload = t2;
      t1.done = false;
      t1 = new A.Worker_stream_onDone(t1, _this);
      if (_this._channel != null) {
        squadronToken = A.SquadronCancelationTokenExt_wrap(token);
        return _this._channel.sendStreamingRequest$1$6$inspectRequest$inspectResponse$onDone$token(command, args, false, false, t1, squadronToken, $T);
      }
      controller = A._Cell$named("controller");
      controller.set$finalLocalValue(A.StreamController_StreamController(null, new A.Worker_stream_closure(_this, token, controller, command, args, t1, false, false, $T), null, null, $T));
      return J.get$stream$z(controller._readLocal$0());
    },
    stream$1$2$args(_, command, args, $T) {
      return this.stream$1$3$args$token(0, command, args, null, $T);
    },
    stream$1$2$token(_, command, token, $T) {
      return this.stream$1$3$args$token(0, command, B.List_empty0, token, $T);
    },
    start$0(_) {
      var channel, t1, _this = this;
      if (_this._worker$_stopped != null)
        throw A.wrapException(A.WorkerException$("worker is stopped", null, null));
      channel = _this._channel;
      if (channel != null)
        return A.Future_Future$value(channel, type$.Channel);
      else {
        if (_this._openChannel == null)
          _this.set$_openChannel(A.openChannel(_this._entryPoint, _this.get$exceptionManager(), _this.channelLogger, _this.args, _this._threadHook).then$1$1(new A.Worker_start_closure(_this), type$.Channel));
        t1 = _this._openChannel;
        t1.toString;
        return t1;
      }
    },
    stop$0(_) {
      var t1, _this = this;
      if (_this._worker$_stopped == null) {
        _this._worker$_stopped = A.microsecTimeStamp();
        _this.set$_openChannel(null);
        t1 = _this._channel;
        if (t1 != null)
          t1.close$0(0);
        _this._channel = null;
      }
    },
    set$_openChannel(_openChannel) {
      this._openChannel = type$.nullable_Future_Channel._as(_openChannel);
    }
  };
  A.Worker_send_sendReq.prototype = {
    call$1(channel) {
      var t1, t2, _this = this;
      type$.Channel._as(channel);
      t1 = _this.$this;
      t2 = ++t1._workload;
      if (t2 > t1._maxWorkload)
        t1._maxWorkload = t2;
      t2 = _this.command;
      return channel.sendRequest$1$5$inspectRequest$inspectResponse$token(t2, _this.args, _this.inspectRequest, _this.inspectResponse, _this.squadronToken, _this.T).catchError$1(new A.Worker_send_sendReq_closure(t1, t2)).whenComplete$1(new A.Worker_send_sendReq_closure0(t1));
    },
    $signature() {
      return this.T._eval$1("Future<0>(Channel)");
    }
  };
  A.Worker_send_sendReq_closure.prototype = {
    call$2(ex, st) {
      var t1;
      ++this.$this._totalErrors;
      t1 = ex == null ? type$.Object._as(ex) : ex;
      throw A.wrapException(A.SquadronException_from(t1, type$.nullable_StackTrace._as(st), this.command));
    },
    $signature: 94
  };
  A.Worker_send_sendReq_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      --t1._workload;
      ++t1._totalWorkload;
      t1._idle = A.microsecTimeStamp();
    },
    $signature: 2
  };
  A.Worker_stream_onDone.prototype = {
    call$0() {
      var t1 = this._box_0;
      if (!t1.done) {
        t1.done = true;
        t1 = this.$this;
        --t1._workload;
        ++t1._totalWorkload;
        t1._idle = A.microsecTimeStamp();
      }
    },
    $signature: 1
  };
  A.Worker_stream_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, channel, squadronToken, ex, st, exception, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.$this.start$0(0), $async$call$0);
            case 6:
              // returning from await.
              channel = $async$result;
              squadronToken = A.SquadronCancelationTokenExt_wrap($async$self.token);
              $async$goto = 7;
              return A._asyncAwait(J.addStream$2$cancelOnError$z($async$self.controller._readLocal$0(), channel.sendStreamingRequest$1$6$inspectRequest$inspectResponse$onDone$token($async$self.command, $async$self.args, $async$self.inspectRequest, $async$self.inspectResponse, $async$self.onDone, squadronToken, $async$self.T), false), $async$call$0);
            case 7:
              // returning from await.
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              $async$self.controller._readLocal$0().addError$2(A.SquadronException_from(ex, st, null), st);
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              J.close$0$z($async$self.controller._readLocal$0());
              $async$self.onDone.call$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 13
  };
  A.Worker_start_closure.prototype = {
    call$1(channel) {
      var t1;
      type$.Channel._as(channel);
      t1 = this.$this;
      if (t1._channel == null) {
        t1._channel = channel;
        t1._idle = t1._started = A.microsecTimeStamp();
      }
      t1 = t1._channel;
      t1.toString;
      return t1;
    },
    $signature: 95
  };
  A._Worker_Object_Releasable.prototype = {};
  A.LogEventSerialization__getLevel_closure.prototype = {
    call$1(l) {
      return type$.Level._as(l).value === this.value;
    },
    $signature: 96
  };
  A.Chain.prototype = {
    toTrace$0() {
      var t1 = this.traces,
        t2 = A._arrayInstanceType(t1);
      return A.Trace$(new A.ExpandIterable(t1, t2._eval$1("Iterable<Frame>(1)")._as(new A.Chain_toTrace_closure()), t2._eval$1("ExpandIterable<1,Frame>")), null);
    },
    toString$0(_) {
      var t1 = this.traces,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Chain_toString_closure(new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Chain_toString_closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT, type$.int))), t2._eval$1("MappedListIterable<1,String>")).join$1(0, string$.______);
    },
    $isStackTrace: 1,
    get$traces() {
      return this.traces;
    }
  };
  A.Chain_Chain$current_closure.prototype = {
    call$0() {
      var t1 = this.chain,
        t2 = B.JSArray_methods.get$first(t1.get$traces()).get$frames();
      t2 = A._setArrayType([A.Trace$(A.SubListIterable$(t2, this.level + 2, null, A._arrayInstanceType(t2)._precomputed1), B.JSArray_methods.get$first(t1.get$traces()).get$original()._stackTrace)], type$.JSArray_Trace);
      t1 = t1.get$traces();
      B.JSArray_methods.addAll$1(t2, A.SubListIterable$(t1, 1, null, A._arrayInstanceType(t1)._precomputed1));
      return new A.Chain(A.List_List$unmodifiable(t2, type$.Trace));
    },
    $signature: 46
  };
  A.Chain_Chain$forTrace_closure.prototype = {
    call$0() {
      return A.Chain_Chain$parse(this.trace.toString$0(0));
    },
    $signature: 46
  };
  A.Chain_Chain$parse_closure.prototype = {
    call$1(line) {
      return A._asString(line).length !== 0;
    },
    $signature: 3
  };
  A.Chain_toTrace_closure.prototype = {
    call$1(trace) {
      return type$.Trace._as(trace).get$frames();
    },
    $signature: 99
  };
  A.Chain_toString_closure0.prototype = {
    call$1(trace) {
      var t1 = type$.Trace._as(trace).get$frames(),
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Chain_toString__closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT, type$.int);
    },
    $signature: 100
  };
  A.Chain_toString__closure0.prototype = {
    call$1(frame) {
      type$.Frame._as(frame);
      return frame.get$location(frame).length;
    },
    $signature: 59
  };
  A.Chain_toString_closure.prototype = {
    call$1(trace) {
      var t1 = type$.Trace._as(trace).get$frames(),
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Chain_toString__closure(this.longest)), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $signature: 102
  };
  A.Chain_toString__closure.prototype = {
    call$1(frame) {
      type$.Frame._as(frame);
      return B.JSString_methods.padRight$1(frame.get$location(frame), this.longest) + "  " + A.S(frame.get$member()) + "\n";
    },
    $signature: 58
  };
  A.Frame.prototype = {
    get$library() {
      var t1 = this.uri;
      if (t1.get$scheme() === "data")
        return "data:...";
      return $.$get$context().prettyUri$1(t1);
    },
    get$location(_) {
      var t2, _this = this,
        t1 = _this.line;
      if (t1 == null)
        return _this.get$library();
      t2 = _this.column;
      if (t2 == null)
        return _this.get$library() + " " + A.S(t1);
      return _this.get$library() + " " + A.S(t1) + ":" + A.S(t2);
    },
    toString$0(_) {
      return this.get$location(0) + " in " + A.S(this.member);
    },
    get$member() {
      return this.member;
    }
  };
  A.Frame_Frame$parseVM_closure.prototype = {
    call$0() {
      var match, t2, t3, member, uri, lineAndColumn, line, _null = null,
        t1 = this.frame;
      if (t1 === "...")
        return new A.Frame(A._Uri__Uri(_null, _null, _null, _null), _null, _null, "...");
      match = $.$get$_vmFrame().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null), t1);
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      t3 = $.$get$_asyncBody();
      t2 = A.stringReplaceAllUnchecked(t2, t3, "<async>");
      member = A.stringReplaceAllUnchecked(t2, "<anonymous closure>", "<fn>");
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t3 = t2;
      t3.toString;
      if (B.JSString_methods.startsWith$1(t3, "<data:"))
        uri = A.Uri_Uri$dataFromString("");
      else {
        t2 = t2;
        t2.toString;
        uri = A.Uri_parse(t2);
      }
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      lineAndColumn = t1[3].split(":");
      t1 = lineAndColumn.length;
      line = t1 > 1 ? A.int_parse(lineAndColumn[1], _null) : _null;
      return new A.Frame(uri, line, t1 > 2 ? A.int_parse(lineAndColumn[2], _null) : _null, member);
    },
    $signature: 32
  };
  A.Frame_Frame$parseV8_closure.prototype = {
    call$0() {
      var t2, t3, t4, _s4_ = "<fn>",
        t1 = this.frame,
        match = $.$get$_v8Frame().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(null, "unparsed", null, null), t1);
      t1 = new A.Frame_Frame$parseV8_closure_parseLocation(t1);
      t2 = match._match;
      t3 = t2.length;
      if (2 >= t3)
        return A.ioore(t2, 2);
      t4 = t2[2];
      if (t4 != null) {
        t3 = t4;
        t3.toString;
        t2 = t2[1];
        t2.toString;
        t2 = A.stringReplaceAllUnchecked(t2, "<anonymous>", _s4_);
        t2 = A.stringReplaceAllUnchecked(t2, "Anonymous function", _s4_);
        return t1.call$2(t3, A.stringReplaceAllUnchecked(t2, "(anonymous function)", _s4_));
      } else {
        if (3 >= t3)
          return A.ioore(t2, 3);
        t2 = t2[3];
        t2.toString;
        return t1.call$2(t2, _s4_);
      }
    },
    $signature: 32
  };
  A.Frame_Frame$parseV8_closure_parseLocation.prototype = {
    call$2($location, member) {
      var t2, urlMatch, uri, line, columnMatch, _null = null,
        t1 = $.$get$_v8EvalLocation(),
        evalMatch = t1.firstMatch$1($location);
      for (; evalMatch != null; $location = t2) {
        t2 = evalMatch._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        t2 = t2[1];
        t2.toString;
        evalMatch = t1.firstMatch$1(t2);
      }
      if ($location === "native")
        return new A.Frame(A.Uri_parse("native"), _null, _null, member);
      urlMatch = $.$get$_v8UrlLocation().firstMatch$1($location);
      if (urlMatch == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null), this.frame);
      t1 = urlMatch._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      uri = A.Frame__uriOrPathToUri(t2);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t2.toString;
      line = A.int_parse(t2, _null);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      columnMatch = t1[3];
      return new A.Frame(uri, line, columnMatch != null ? A.int_parse(columnMatch, _null) : _null, member);
    },
    $signature: 105
  };
  A.Frame_Frame$_parseFirefoxEval_closure.prototype = {
    call$0() {
      var t2, member, uri, line, _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxEvalLocation().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null), t1);
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      member = A.stringReplaceAllUnchecked(t2, "/<", "");
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t2.toString;
      uri = A.Frame__uriOrPathToUri(t2);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      t1 = t1[3];
      t1.toString;
      line = A.int_parse(t1, _null);
      return new A.Frame(uri, line, _null, member.length === 0 || member === "anonymous" ? "<fn>" : member);
    },
    $signature: 32
  };
  A.Frame_Frame$parseFirefox_closure.prototype = {
    call$0() {
      var t2, t3, t4, uri, member, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxSafariFrame().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null), t1);
      t2 = match._match;
      if (3 >= t2.length)
        return A.ioore(t2, 3);
      t3 = t2[3];
      t4 = t3;
      t4.toString;
      if (B.JSString_methods.contains$1(t4, " line "))
        return A.Frame_Frame$_parseFirefoxEval(t1);
      t1 = t3;
      t1.toString;
      uri = A.Frame__uriOrPathToUri(t1);
      t1 = t2.length;
      if (1 >= t1)
        return A.ioore(t2, 1);
      member = t2[1];
      if (member != null) {
        if (2 >= t1)
          return A.ioore(t2, 2);
        t1 = t2[2];
        t1.toString;
        member += B.JSArray_methods.join$0(A.List_List$filled(B.JSString_methods.allMatches$1("/", t1).get$length(0), ".<fn>", false, type$.String));
        if (member === "")
          member = "<fn>";
        member = B.JSString_methods.replaceFirst$2(member, $.$get$_initialDot(), "");
      } else
        member = "<fn>";
      if (4 >= t2.length)
        return A.ioore(t2, 4);
      t1 = t2[4];
      if (t1 === "")
        line = _null;
      else {
        t1 = t1;
        t1.toString;
        line = A.int_parse(t1, _null);
      }
      if (5 >= t2.length)
        return A.ioore(t2, 5);
      t1 = t2[5];
      if (t1 == null || t1 === "")
        column = _null;
      else {
        t1 = t1;
        t1.toString;
        column = A.int_parse(t1, _null);
      }
      return new A.Frame(uri, line, column, member);
    },
    $signature: 32
  };
  A.Frame_Frame$parseFriendly_closure.prototype = {
    call$0() {
      var t2, uri, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_friendlyFrame().firstMatch$1(t1);
      if (match == null)
        throw A.wrapException(A.FormatException$("Couldn't parse package:stack_trace stack trace line '" + t1 + "'.", _null, _null));
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      if (t2 === "data:...")
        uri = A.Uri_Uri$dataFromString("");
      else {
        t2 = t2;
        t2.toString;
        uri = A.Uri_parse(t2);
      }
      if (uri.get$scheme() === "") {
        t2 = $.$get$context();
        uri = t2.toUri$1(t2.absolute$15(0, t2.style.pathFromUri$1(A._parseUri(uri)), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null));
      }
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      if (t2 == null)
        line = _null;
      else {
        t2 = t2;
        t2.toString;
        line = A.int_parse(t2, _null);
      }
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      t2 = t1[3];
      if (t2 == null)
        column = _null;
      else {
        t2 = t2;
        t2.toString;
        column = A.int_parse(t2, _null);
      }
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      return new A.Frame(uri, line, column, t1[4]);
    },
    $signature: 32
  };
  A.LazyChain.prototype = {
    get$_chain() {
      var result, _this = this,
        value = _this.__LazyChain__chain_FI;
      if (value === $) {
        result = _this._thunk.call$0();
        _this.__LazyChain__chain_FI !== $ && A.throwLateFieldADI("_chain");
        _this.__LazyChain__chain_FI = result;
        value = result;
      }
      return value;
    },
    get$traces() {
      return this.get$_chain().get$traces();
    },
    toTrace$0() {
      return new A.LazyTrace(this.get$_chain().get$toTrace());
    },
    toString$0(_) {
      return this.get$_chain().toString$0(0);
    },
    $isStackTrace: 1,
    $isChain: 1
  };
  A.LazyTrace.prototype = {
    get$_lazy_trace$_trace() {
      var result, _this = this,
        value = _this.__LazyTrace__trace_FI;
      if (value === $) {
        result = _this._lazy_trace$_thunk.call$0();
        _this.__LazyTrace__trace_FI !== $ && A.throwLateFieldADI("_trace");
        _this.__LazyTrace__trace_FI = result;
        value = result;
      }
      return value;
    },
    get$frames() {
      return this.get$_lazy_trace$_trace().get$frames();
    },
    get$original() {
      return this.get$_lazy_trace$_trace().get$original();
    },
    toString$0(_) {
      return this.get$_lazy_trace$_trace().toString$0(0);
    },
    $isStackTrace: 1,
    $isTrace: 1
  };
  A.StackZoneSpecification_chainFor_closure.prototype = {
    call$0() {
      return A.Chain_Chain$parse(this._box_0.trace.toString$0(0));
    },
    $signature: 46
  };
  A.StackZoneSpecification_chainFor_closure0.prototype = {
    call$0() {
      return A.Trace_Trace$parse(this.$this._trimVMChain$1(this.original));
    },
    $signature: 31
  };
  A.StackZoneSpecification__currentTrace_closure.prototype = {
    call$0() {
      var text = this.$this._trimVMChain$1(this.stackTrace),
        t1 = A.Trace_Trace$parse(text).frames;
      return A.Trace$(A.SubListIterable$(t1, this.level + 2, null, A._arrayInstanceType(t1)._precomputed1), text);
    },
    $signature: 31
  };
  A._Node.prototype = {
    toChain$0() {
      var node,
        nodes = A._setArrayType([], type$.JSArray_Trace);
      for (node = this; node != null;) {
        B.JSArray_methods.add$1(nodes, node.trace);
        node = node.previous;
      }
      return new A.Chain(A.List_List$unmodifiable(nodes, type$.Trace));
    }
  };
  A.Trace.prototype = {
    toString$0(_) {
      var t1 = this.frames,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Trace_toString_closure(new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Trace_toString_closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT, type$.int))), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $isStackTrace: 1,
    get$frames() {
      return this.frames;
    },
    get$original() {
      return this.original;
    }
  };
  A.Trace_Trace$from_closure.prototype = {
    call$0() {
      return A.Trace_Trace$parse(this.trace.toString$0(0));
    },
    $signature: 31
  };
  A.Trace__parseVM_closure.prototype = {
    call$1(line) {
      return A._asString(line).length !== 0;
    },
    $signature: 3
  };
  A.Trace$parseV8_closure.prototype = {
    call$1(line) {
      return !B.JSString_methods.startsWith$1(A._asString(line), $.$get$_v8TraceLine());
    },
    $signature: 3
  };
  A.Trace$parseJSCore_closure.prototype = {
    call$1(line) {
      return A._asString(line) !== "\tat ";
    },
    $signature: 3
  };
  A.Trace$parseFirefox_closure.prototype = {
    call$1(line) {
      A._asString(line);
      return line.length !== 0 && line !== "[native code]";
    },
    $signature: 3
  };
  A.Trace$parseFriendly_closure.prototype = {
    call$1(line) {
      return !B.JSString_methods.startsWith$1(A._asString(line), "=====");
    },
    $signature: 3
  };
  A.Trace_toString_closure0.prototype = {
    call$1(frame) {
      type$.Frame._as(frame);
      return frame.get$location(frame).length;
    },
    $signature: 59
  };
  A.Trace_toString_closure.prototype = {
    call$1(frame) {
      type$.Frame._as(frame);
      if (frame instanceof A.UnparsedFrame)
        return frame.toString$0(0) + "\n";
      return B.JSString_methods.padRight$1(frame.get$location(frame), this.longest) + "  " + A.S(frame.get$member()) + "\n";
    },
    $signature: 58
  };
  A.UnparsedFrame.prototype = {
    toString$0(_) {
      return this.member;
    },
    $isFrame: 1,
    get$location() {
      return "unparsed";
    },
    get$member() {
      return this.member;
    }
  };
  A.OutsideTestException.prototype = {$isException: 1};
  A.ClosedException.prototype = {
    toString$0(_) {
      return "This test has been closed.";
    },
    $isException: 1
  };
  A.Compiler.prototype = {
    _enumToString$0() {
      return "Compiler." + this._name;
    },
    toString$0(_) {
      return this.name;
    }
  };
  A.Timeout.prototype = {
    merge$1(other) {
      var t1, t2;
      if (this.$eq(0, B.Timeout_null_null) || other.$eq(0, B.Timeout_null_null))
        return B.Timeout_null_null;
      t1 = other.duration;
      if (t1 != null)
        return new A.Timeout(t1, null);
      t1 = this.duration;
      if (t1 != null) {
        t2 = other.scaleFactor;
        t2.toString;
        return new A.Timeout(new A.Duration(B.JSInt_methods.round$0(t1._duration * t2)), null);
      }
      t1 = this.scaleFactor;
      t1.toString;
      t2 = other.scaleFactor;
      t2.toString;
      return new A.Timeout(null, t1 * t2);
    },
    apply$1(base) {
      var t1;
      if (this.$eq(0, B.Timeout_null_null))
        return null;
      t1 = this.duration;
      if (t1 == null) {
        t1 = this.scaleFactor;
        t1.toString;
        t1 = new A.Duration(B.JSInt_methods.round$0(base._duration * t1));
      }
      return t1;
    },
    get$hashCode(_) {
      return (J.get$hashCode$(this.duration) ^ 5 * J.get$hashCode$(this.scaleFactor)) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Timeout && J.$eq$(other.duration, this.duration) && other.scaleFactor == this.scaleFactor;
    },
    toString$0(_) {
      var t1 = this.duration;
      if (t1 != null)
        return t1.toString$0(0);
      t1 = this.scaleFactor;
      if (t1 != null)
        return A.S(t1) + "x";
      return "none";
    }
  };
  A.Declarer.prototype = {
    test$9$onPlatform$retry$skip$solo$tags$testOn$timeout($name, body, onPlatform, retry, skip, solo, tags, testOn, timeout) {
      var t1, fullName, newMetadata, metadata, _this = this;
      type$.dynamic_Function._as(body);
      _this._checkNotBuilt$1("test");
      t1 = _this._declarer$_name;
      if (t1 == null)
        fullName = $name;
      else
        fullName = t1 + " " + $name;
      newMetadata = A.Metadata$parse(onPlatform, retry, skip, tags, testOn, timeout);
      newMetadata.validatePlatformSelectors$1(_this._platformVariables);
      metadata = _this._metadata.merge$1(newMetadata);
      _this._addEntry$1(new A.LocalTest(fullName, metadata, null, false, new A.Declarer_test_closure(_this, body), false));
    },
    group$9$onPlatform$retry$skip$solo$tags$testOn$timeout($name, body, onPlatform, retry, skip, solo, tags, testOn, timeout) {
      var t1, fullTestPrefix, newMetadata, metadata, declarer, _this = this;
      type$.void_Function._as(body);
      _this._checkNotBuilt$1("group");
      t1 = _this._declarer$_name;
      if (t1 == null)
        fullTestPrefix = $name;
      else
        fullTestPrefix = t1 + " " + $name;
      newMetadata = A.Metadata$parse(onPlatform, retry, skip, tags, testOn, timeout);
      t1 = _this._platformVariables;
      newMetadata.validatePlatformSelectors$1(t1);
      metadata = _this._metadata.merge$1(newMetadata);
      declarer = A.Declarer$_(_this, fullTestPrefix, metadata, t1, false, null, false, _this._fullTestName, _this._seenNames);
      t1 = type$.nullable_Object;
      A.runZoned(type$.Null_Function._as(new A.Declarer_group_closure(body)), null, A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_yzu, declarer], t1, t1), type$.Null);
      _this._addEntry$1(declarer.build$0());
      t1 = declarer._soloEntries.length;
      if (t1 !== 0)
        B.JSArray_methods.add$1(_this._soloEntries, B.JSArray_methods.get$last(_this._entries));
    },
    setUpAll$1(callback) {
      type$.dynamic_Function._as(callback);
      this._checkNotBuilt$1("setUpAll");
      B.JSArray_methods.add$1(this._setUpAlls, callback);
    },
    tearDownAll$1(callback) {
      type$.dynamic_Function._as(callback);
      this._checkNotBuilt$1("tearDownAll");
      B.JSArray_methods.add$1(this._tearDownAlls, callback);
    },
    build$0() {
      var t1, t2, t3, entries, _this = this;
      _this._checkNotBuilt$1("build");
      _this._built = true;
      t1 = _this._entries;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,GroupEntry>");
      entries = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("GroupEntry(1)")._as(new A.Declarer_build_closure(_this)), t3), true, t3._eval$1("ListIterable.E"));
      t3 = _this._declarer$_name;
      t1 = t3 == null ? "" : t3;
      return A.Group$(t1, entries, _this._metadata, _this.get$_setUpAll(), _this.get$_tearDownAll(), _this._declarer$_trace);
    },
    _checkNotBuilt$1($name) {
      if (!this._built)
        return;
      throw A.wrapException(A.StateError$("Can't call " + $name + "() once tests have begun running."));
    },
    _runSetUps$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1;
      var $async$_runSetUps$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._parent;
              $async$goto = t1 != null ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return A._asyncAwait(t1._runSetUps$0(), $async$_runSetUps$0);
            case 4:
              // returning from await.
            case 3:
              // join
              $async$goto = 5;
              return A._asyncAwait(A.Future_forEach($async$self._setUps, new A.Declarer__runSetUps_closure(), type$.Function), $async$_runSetUps$0);
            case 5:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_runSetUps$0, $async$completer);
    },
    get$_setUpAll() {
      var t1, _this = this;
      if (_this._setUpAlls.length === 0)
        return null;
      t1 = _this._declarer$_name;
      if (t1 == null)
        t1 = "(setUpAll)";
      else
        t1 += " (setUpAll)";
      return new A.LocalTest(t1, _this._metadata.change$1$timeout(B.Timeout_Duration_720000000_null), _this._setUpAllTrace, true, new A.Declarer__setUpAll_closure(_this), false);
    },
    get$_tearDownAll() {
      var t1, _this = this;
      if (_this._setUpAlls.length === 0 && _this._tearDownAlls.length === 0)
        return null;
      t1 = _this._declarer$_name;
      if (t1 == null)
        t1 = "(tearDownAll)";
      else
        t1 += " (tearDownAll)";
      return new A.LocalTest(t1, _this._metadata.change$1$timeout(B.Timeout_Duration_720000000_null), _this._tearDownAllTrace, true, new A.Declarer__tearDownAll_closure(_this), false);
    },
    _addEntry$1(entry) {
      var t1 = this._seenNames;
      if ((t1 == null ? null : t1.add$1(0, entry.get$name(entry))) === false)
        throw A.wrapException(new A.DuplicateTestNameException(entry.get$name(entry)));
      B.JSArray_methods.add$1(this._entries, entry);
    }
  };
  A.Declarer_test_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, declarer, declarer0, t1, t2, t3, t4, t5, t6, t7, _i, tearDown, t8, t9, parents;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              parents = A._setArrayType([], type$.JSArray_Declarer);
              for (declarer = $async$self.$this, declarer0 = declarer; declarer0 != null; declarer0 = declarer0._parent)
                B.JSArray_methods.add$1(parents, declarer0);
              for (t1 = type$.ReversedListIterable_Declarer, t2 = new A.ReversedListIterable(parents, t1), t2 = new A.ListIterator(t2, t2.get$length(0), t1._eval$1("ListIterator<ListIterable.E>")), t3 = type$.nullable_Invoker, t4 = type$.dynamic_Function, t5 = type$.nullable_Declarer, t1 = t1._eval$1("ListIterable.E"); t2.moveNext$0();) {
                t6 = t2.__internal$_current;
                for (t6 = (t6 == null ? t1._as(t6) : t6)._tearDowns, t7 = t6.length, _i = 0; _i < t6.length; t6.length === t7 || (0, A.throwConcurrentModificationError)(t6), ++_i) {
                  tearDown = t6[_i];
                  t8 = t3._as($.Zone__current.$index(0, B.Symbol_EY8));
                  t8.toString;
                  t4._as(tearDown);
                  if (!A._asBool($.Zone__current.$index(0, t8._forceOpenForTearDownKey)) && (t8._onCloseCompleter.future._state & 30) !== 0)
                    A.throwExpression(new A.ClosedException());
                  t9 = t8.__Invoker__controller_F;
                  t9 === $ && A.throwLateFieldNI("_controller");
                  if (t9.test.isScaffoldAll)
                    B.JSArray_methods.add$1(t5._as($.Zone__current.$index(0, B.Symbol_yzu))._tearDownAlls, tearDown);
                  else
                    B.JSArray_methods.add$1(t8._invoker$_tearDowns, tearDown);
                }
              }
              t1 = type$.nullable_Object;
              $async$goto = 2;
              return A._asyncAwait(A.runZoned(new A.Declarer_test__closure(declarer, $async$self.body), null, A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_yzu, declarer], t1, t1), type$.Future_Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 13
  };
  A.Declarer_test__closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.$this._runSetUps$0(), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.body.call$0();
              $async$goto = 3;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.dynamic), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.Declarer_group_closure.prototype = {
    call$0() {
      if (!(this.body.call$0() instanceof A._Future))
        return;
      throw A.wrapException(A.ArgumentError$("Groups may not be async.", null));
    },
    $signature: 2
  };
  A.Declarer_build_closure.prototype = {
    call$1(entry) {
      var t1;
      type$.GroupEntry._as(entry);
      t1 = this.$this._soloEntries;
      return t1.length !== 0 && !B.JSArray_methods.contains$1(t1, entry) ? new A.LocalTest(entry.get$name(entry), entry.get$metadata(entry).change$2$skip$skipReason(true, 'does not have "solo"'), null, false, new A.Declarer_build__closure(), true) : entry;
    },
    $signature: 106
  };
  A.Declarer_build__closure.prototype = {
    call$0() {
    },
    $signature: 1
  };
  A.Declarer__runSetUps_closure.prototype = {
    call$1(setUp) {
      return type$.Function._as(setUp).call$0();
    },
    $signature: 57
  };
  A.Declarer__setUpAll_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = type$.nullable_Object;
      return A.runZoned(new A.Declarer__setUpAll__closure(t1), null, A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_yzu, t1], t2, t2), type$.void);
    },
    $signature: 1
  };
  A.Declarer__setUpAll__closure.prototype = {
    call$0() {
      return A.Future_forEach(this.$this._setUpAlls, new A.Declarer__setUpAll___closure(), type$.Function);
    },
    $signature: 1
  };
  A.Declarer__setUpAll___closure.prototype = {
    call$1(setUp) {
      return type$.Function._as(setUp).call$0();
    },
    $signature: 57
  };
  A.Declarer__tearDownAll_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = type$.nullable_Object;
      return A.runZoned(new A.Declarer__tearDownAll__closure(t1), null, A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_yzu, t1], t2, t2), type$.void);
    },
    $signature: 1
  };
  A.Declarer__tearDownAll__closure.prototype = {
    call$0() {
      return type$.nullable_Invoker._as($.Zone__current.$index(0, B.Symbol_EY8)).runTearDowns$1(this.$this._tearDownAlls);
    },
    $signature: 1
  };
  A.DuplicateTestNameException.prototype = {
    toString$0(_) {
      return 'A test with the name "' + this.name + '" was already declared. Test cases must have unique names.\n\nSee https://github.com/dart-lang/test/blob/master/pkgs/test/doc/configuration.md#allow_test_randomization for info on enabling this.';
    },
    $isException: 1
  };
  A.Group.prototype = {
    forPlatform$1(platform) {
      var newMetadata, filtered, _this = this,
        t1 = _this.metadata;
      if (!t1.testOn.evaluate$1(0, platform))
        return null;
      newMetadata = t1.forPlatform$1(platform);
      filtered = _this._group$_map$1(new A.Group_forPlatform_closure(platform));
      if (filtered.length === 0 && _this.entries.length !== 0)
        return null;
      return A.Group$(_this.name, filtered, newMetadata, _this.setUpAll, _this.tearDownAll, _this.trace);
    },
    _group$_map$1(callback) {
      var t1 = this.entries,
        t2 = A._arrayInstanceType(t1),
        t3 = type$.WhereTypeIterable_GroupEntry;
      return A.List_List$of(new A.WhereTypeIterable(new A.MappedListIterable(t1, t2._eval$1("GroupEntry?(1)")._as(new A.Group__map_closure(type$.nullable_GroupEntry_Function_GroupEntry._as(callback))), t2._eval$1("MappedListIterable<1,GroupEntry?>")), t3), true, t3._eval$1("Iterable.E"));
    },
    $isGroupEntry: 1,
    get$name(receiver) {
      return this.name;
    },
    get$metadata(receiver) {
      return this.metadata;
    }
  };
  A.Group_forPlatform_closure.prototype = {
    call$1(entry) {
      return entry.forPlatform$1(this.platform);
    },
    $signature: 56
  };
  A.Group__map_closure.prototype = {
    call$1(entry) {
      return this.callback.call$1(type$.GroupEntry._as(entry));
    },
    $signature: 56
  };
  A.LocalTest.prototype = {
    load$2$groups(_, suite, groups) {
      var t1, invoker;
      type$.nullable_Iterable_Group._as(groups);
      t1 = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
      invoker = new A.Invoker(this._guarded, new A.Object(), t1, A._setArrayType([], type$.JSArray_Zone), new A.Object(), A._setArrayType([], type$.JSArray_of_void_Function), A._setArrayType([], type$.JSArray_String));
      t1 = A.LiveTestController$(suite, this, invoker.get$_onRun(), type$.void_Function_$opt_void._as(t1.get$complete(t1)), groups);
      invoker.__Invoker__controller_F !== $ && A.throwLateFieldAI("_controller");
      return invoker.__Invoker__controller_F = t1;
    },
    forPlatform$1(platform) {
      var _this = this,
        t1 = _this.metadata;
      if (!t1.testOn.evaluate$1(0, platform))
        return null;
      return new A.LocalTest(_this.name, t1.forPlatform$1(platform), _this.trace, _this.isScaffoldAll, _this._body, _this._guarded);
    },
    get$name(receiver) {
      return this.name;
    },
    get$metadata(receiver) {
      return this.metadata;
    }
  };
  A.Invoker.prototype = {
    get$_outstandingCallbacks() {
      var counter = type$.nullable__AsyncCounter._as($.Zone__current.$index(0, this._counterKey));
      if (counter != null)
        return counter;
      throw A.wrapException(A.StateError$("Can't add or remove outstanding callbacks outside of a test body."));
    },
    runTearDowns$1(tearDowns) {
      var t1;
      type$.List_of_void_Function._as(tearDowns);
      this.heartbeat$0();
      t1 = type$.nullable_Object;
      return A.runZoned(new A.Invoker_runTearDowns_closure(this, tearDowns), null, A.LinkedHashMap_LinkedHashMap$_literal([this._forceOpenForTearDownKey, true], t1, t1), type$.Future_void);
    },
    _waitForOutstandingCallbacks$1(fn) {
      var t2, counter, t3, _this = this, t1 = {};
      type$.void_Function._as(fn);
      _this.heartbeat$0();
      t1.zone = null;
      t2 = new A._Future($.Zone__current, type$._Future_void);
      counter = new A._AsyncCounter(new A._AsyncCompleter(t2, type$._AsyncCompleter_void));
      t3 = type$.nullable_Object;
      A.runZoned(new A.Invoker__waitForOutstandingCallbacks_closure(t1, _this, fn, counter), null, A.LinkedHashMap_LinkedHashMap$_literal([_this._counterKey, counter], t3, t3), type$.Future_Null);
      return t2.whenComplete$1(new A.Invoker__waitForOutstandingCallbacks_closure0(t1, _this));
    },
    heartbeat$0() {
      var t2, timeout, _this = this,
        t1 = _this.__Invoker__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      if (t1.state.status === B.Status_2)
        return;
      t2 = _this._timeoutTimer;
      if (t2 != null)
        t2.cancel$0(0);
      timeout = t1.test.metadata.timeout.apply$1(B.Duration_30000000);
      if (timeout == null)
        return;
      _this._timeoutTimer = A.Timer__createTimer(timeout, type$.void_Function._as(new A.Invoker_heartbeat_closure(_this, new A.Invoker_heartbeat_message(timeout), timeout)));
    },
    _handleError$3(zone, error, stackTrace) {
      var t2, t3, t4, shouldBeDone, _this = this, t1 = {};
      t1.stackTrace = stackTrace;
      if (_this._runCount !== zone.$index(0, B.Symbol_runCount))
        return;
      zone.run$1$1(new A.Invoker__handleError_closure(t1), type$.Null);
      t2 = _this.__Invoker__controller_F;
      t2 === $ && A.throwLateFieldNI("_controller");
      t3 = t2.state;
      if (t3.status === B.Status_2) {
        t4 = t3.result;
        shouldBeDone = t4 === B.Result_0 || t4 === B.Result_1;
      } else
        shouldBeDone = false;
      if (!(error instanceof A.TestFailure))
        t2.setState$1(B.State_Status_2_Result_3);
      else if (t3.result !== B.Result_3)
        t2.setState$1(B.State_Status_2_Result_2);
      t3 = t1.stackTrace;
      t3.toString;
      t2.addError$2(error, t3);
      t3 = _this._printsOnFailure;
      if (t3.length !== 0) {
        t2.message$1(0, new A.Message(B.MessageType_print, B.JSArray_methods.join$1(t3, "\n\n")));
        B.JSArray_methods.clear$0(t3);
      }
      if (!shouldBeDone)
        return;
      _this._handleError$3(zone, "This test failed after it had already completed.\nMake sure to use a matching library which informs the test runner\nof pending async work.", t1.stackTrace);
    },
    _handleError$2(zone, error) {
      return this._handleError$3(zone, error, null);
    },
    _onRun$0() {
      var t1 = this.__Invoker__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      t1.setState$1(B.State_Status_1_Result_0);
      ++this._runCount;
      t1.test.metadata.get$chainStackTraces();
      A.Chain_capture(new A.Invoker__onRun_closure(this), false, false, type$.Null);
    }
  };
  A.Invoker_guard_closure.prototype = {
    call$5($self, _, zone, error, stackTrace) {
      var invoker;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      invoker = type$.nullable_Invoker._as(zone.$index(0, B.Symbol_EY8));
      if (invoker != null)
        $self.get$parent($self).run$1$1(new A.Invoker_guard__closure(invoker, zone, error, stackTrace), type$.void);
      else
        $self.get$parent($self).handleUncaughtError$2(error, stackTrace);
    },
    $signature: 109
  };
  A.Invoker_guard__closure.prototype = {
    call$0() {
      var _this = this;
      return _this.invoker._handleError$3(_this.zone, _this.error, _this.stackTrace);
    },
    $signature: 1
  };
  A.Invoker_runTearDowns_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, t4, t5, t6, t7, t8;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tearDowns, t2 = $async$self.$this, t3 = type$.void, t4 = type$._Future_void, t5 = type$._AsyncCompleter_void, t6 = t2._onCloseCompleter.future;
            case 2:
              // for condition
              if (!(t1.length !== 0)) {
                // goto after for
                $async$goto = 3;
                break;
              }
              t7 = $.Zone__current;
              t8 = new A._Future(t7, t4);
              if (!A._asBool(t7.$index(0, t2._forceOpenForTearDownKey)) && (t6._state & 30) !== 0)
                A.throwExpression(new A.ClosedException());
              ++t2.get$_outstandingCallbacks()._count;
              t2._waitForOutstandingCallbacks$1(new A.Invoker_runTearDowns__closure(t1, new A._AsyncCompleter(t8, t5))).then$1$1(new A.Invoker_runTearDowns__closure0(t2), t3);
              $async$goto = 4;
              return A._asyncAwait(t8, $async$call$0);
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 13
  };
  A.Invoker_runTearDowns__closure.prototype = {
    call$0() {
      var t2,
        t1 = this.tearDowns;
      if (0 >= t1.length)
        return A.ioore(t1, -1);
      t2 = this.completer;
      A.Future_Future$sync(t1.pop(), type$.void).whenComplete$1(type$.void_Function_$opt_void._as(t2.get$complete(t2)));
    },
    $signature: 2
  };
  A.Invoker_runTearDowns__closure0.prototype = {
    call$1(_) {
      var t1 = this.$this;
      t1.heartbeat$0();
      t1.get$_outstandingCallbacks().decrement$0();
      return null;
    },
    $signature: 66
  };
  A.Invoker__waitForOutstandingCallbacks_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, t1, zone;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              zone = $.Zone__current;
              $async$self._box_0.zone = zone;
              B.JSArray_methods.add$1($async$self.$this._outstandingCallbackZones, zone);
              $async$handler = 2;
              t1 = $async$self.fn.call$0();
              $async$goto = 5;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$0);
            case 5:
              // returning from await.
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              $async$self.counter.decrement$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.Invoker__waitForOutstandingCallbacks_closure0.prototype = {
    call$0() {
      var t1 = this._box_0.zone;
      t1.toString;
      B.JSArray_methods.remove$1(this.$this._outstandingCallbackZones, t1);
    },
    $signature: 2
  };
  A.Invoker_heartbeat_message.prototype = {
    call$0() {
      var message,
        t1 = this.timeout._duration,
        minutes = B.JSInt_methods._tdivFast$1(t1, 60000000),
        seconds = B.JSInt_methods.$mod(B.JSInt_methods._tdivFast$1(t1, 1000000), 60),
        decaseconds = B.JSInt_methods._tdivFast$1(B.JSInt_methods.$mod(B.JSInt_methods._tdivFast$1(t1, 1000), 1000), 100),
        t2 = minutes !== 0,
        t3 = t2 ? "" + ("" + minutes + " minutes") : "";
      if (!t2 || seconds !== 0) {
        t2 = t2 ? t3 + ", " : t3;
        t2 += seconds;
        t2 = (decaseconds !== 0 ? t2 + ("." + decaseconds) : t2) + " seconds";
      } else
        t2 = t3;
      message = "Test timed out after " + (t2.charCodeAt(0) == 0 ? t2 : t2) + ".";
      return t1 === 30000000 ? message + " See https://pub.dev/packages/test#timeouts" : message;
    },
    $signature: 8
  };
  A.Invoker_heartbeat_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      B.JSArray_methods.get$last(t1._outstandingCallbackZones).run$1$1(new A.Invoker_heartbeat__closure(t1, this.message, this.timeout), type$.Null);
    },
    $signature: 1
  };
  A.Invoker_heartbeat__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._handleError$2($.Zone__current, new A.TimeoutException(this.message.call$0(), this.timeout));
      t1 = t1.get$_outstandingCallbacks()._invoker$_completer;
      if ((t1.future._state & 30) === 0)
        t1.complete$0(0);
    },
    $signature: 2
  };
  A.Invoker__handleError_closure.prototype = {
    call$0() {
      var t1 = this._box_0,
        t2 = t1.stackTrace;
      if (t2 == null)
        t1.stackTrace = A.Chain_Chain$current();
      else
        t1.stackTrace = A.Chain_Chain$forTrace(t2);
    },
    $signature: 2
  };
  A.Invoker__onRun_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = type$.void_Function._as(new A.Invoker__onRun__closure(t1));
      if (t1._guarded)
        A.Invoker_guard(t2, type$.void);
      else
        t2.call$0();
    },
    $signature: 2
  };
  A.Invoker__onRun__closure.prototype = {
    call$0() {
      var _null = null,
        t1 = this.$this,
        t2 = type$.nullable_Object;
      A.runZoned(new A.Invoker__onRun___closure(t1), new A._ZoneSpecification(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, new A.Invoker__onRun___closure0(t1), _null), A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_EY8, t1, t1._forceOpenForTearDownKey, false, B.Symbol_runCount, t1._runCount], t2, t2), type$.Future_Null);
    },
    $signature: 1
  };
  A.Invoker__onRun___closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, t5;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future(new A.Invoker__onRun____closure(), type$.Null), $async$call$0);
            case 3:
              // returning from await.
              t1 = $async$self.$this;
              t2 = t1.__Invoker__controller_F;
              t2 === $ && A.throwLateFieldNI("_controller");
              $async$goto = 4;
              return A._asyncAwait(t1._waitForOutstandingCallbacks$1(t2.test._body), $async$call$0);
            case 4:
              // returning from await.
              $async$goto = 5;
              return A._asyncAwait(t1._waitForOutstandingCallbacks$1(new A.Invoker__onRun____closure0(t1)), $async$call$0);
            case 5:
              // returning from await.
              t3 = t1._timeoutTimer;
              if (t3 != null)
                t3.cancel$0(0);
              t3 = t2.state.result;
              if (t3 !== B.Result_0) {
                t4 = t1._runCount;
                t5 = t2.test.metadata._retry;
                t4 = t4 < (t5 == null ? 0 : t5) + 1;
              } else
                t4 = false;
              if (t4) {
                t2.message$1(0, new A.Message(B.MessageType_print, "Retry: " + t2.test.name));
                t1._onRun$0();
                // goto return
                $async$goto = 1;
                break;
              }
              t2.setState$1(new A.State(B.Status_2, t3));
              t2.completer.complete$0(0);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.Invoker__onRun____closure.prototype = {
    call$0() {
    },
    $signature: 2
  };
  A.Invoker__onRun____closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1.runTearDowns$1(t1._invoker$_tearDowns);
    },
    $signature: 13
  };
  A.Invoker__onRun___closure0.prototype = {
    call$4(_, __, ___, line) {
      var t1;
      A._asString(line);
      t1 = this.$this.__Invoker__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      return t1.message$1(0, new A.Message(B.MessageType_print, line));
    },
    $signature: 55
  };
  A._AsyncCounter.prototype = {
    decrement$0() {
      if (--this._count !== 0)
        return;
      var t1 = this._invoker$_completer;
      if ((t1.future._state & 30) !== 0)
        return;
      t1.complete$0(0);
    }
  };
  A.LiveTest.prototype = {};
  A.LiveTestController.prototype = {
    addError$2(error, stackTrace) {
      var asyncError,
        t1 = this._live_test_controller$_onError;
      if ((t1._state & 4) !== 0)
        return;
      asyncError = A.AsyncError$(error, A.Chain_Chain$forTrace(stackTrace));
      B.JSArray_methods.add$1(this._errors, asyncError);
      t1.add$1(0, asyncError);
    },
    setState$1(newState) {
      var _this = this;
      if ((_this._live_test_controller$_onError._state & 4) !== 0)
        return;
      if (_this.state.$eq(0, newState))
        return;
      _this.state = newState;
      _this._onStateChange.add$1(0, newState);
    },
    message$1(_, message) {
      var t1 = this._onMessage;
      if (t1._firstSubscription != null)
        t1.add$1(0, message);
      else
        A.printString(message.text);
    },
    run$0() {
      var _this = this;
      if (_this._live_test_controller$_runCalled)
        throw A.wrapException(A.StateError$("LiveTest.run() may not be called more than once."));
      else if ((_this._live_test_controller$_onError._state & 4) !== 0)
        throw A.wrapException(A.StateError$("LiveTest.run() may not be called for a closed test."));
      _this._live_test_controller$_runCalled = true;
      _this._live_test_controller$_onRun.call$0();
      return _this.completer.future;
    },
    close$0(_) {
      var _this = this,
        t1 = _this._live_test_controller$_onError;
      if ((t1._state & 4) !== 0)
        return _this.completer.future;
      _this._onStateChange.close$0(0);
      t1.close$0(0);
      if (_this._live_test_controller$_runCalled)
        _this._live_test_controller$_onClose.call$0();
      else
        _this.completer.complete$0(0);
      return _this.completer.future;
    }
  };
  A.Message.prototype = {};
  A.MessageType.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.Metadata.prototype = {
    get$chainStackTraces() {
      return false;
    },
    _validateTags$0() {
      var t1 = this.tags.where$1(0, new A.Metadata__validateTags_closure()),
        t2 = t1.$ti,
        t3 = t2._eval$1("MappedIterable<1,String>"),
        invalidTags = A.List_List$of(new A.MappedIterable(t1, t2._eval$1("String(1)")._as(new A.Metadata__validateTags_closure0()), t3), true, t3._eval$1("Iterable.E"));
      t1 = invalidTags.length;
      if (t1 === 0)
        return;
      throw A.wrapException(A.ArgumentError$("Invalid " + A.pluralize("tag", t1) + " " + A.toSentence(invalidTags) + ". Tags must be (optionally hyphenated) Dart identifiers.", null));
    },
    validatePlatformSelectors$1(validVariables) {
      type$.Set_String._as(validVariables);
      this.testOn.validate$1(validVariables);
      this.onPlatform.forEach$1(0, new A.Metadata_validatePlatformSelectors_closure(validVariables));
    },
    merge$1(other) {
      var t4, t5, t6, t7, t8, _this = this,
        t1 = _this.testOn.intersection$1(0, other.testOn),
        t2 = _this.timeout.merge$1(other.timeout),
        t3 = other._skip;
      if (t3 == null)
        t3 = _this._skip;
      t4 = other.skipReason;
      if (t4 == null)
        t4 = _this.skipReason;
      t5 = other._retry;
      if (t5 == null)
        t5 = _this._retry;
      t6 = _this.tags.union$1(other.tags);
      t7 = type$.Metadata;
      t8 = A.mergeMaps(_this.onPlatform, other.onPlatform, new A.Metadata_merge_closure(), type$.PlatformSelector, t7);
      t7 = A.mergeMaps(_this.forTag, other.forTag, new A.Metadata_merge_closure0(), type$.BooleanSelector, t7);
      return A.Metadata_Metadata(_this._chainStackTraces, t7, _this.languageVersionComment, t8, t5, t3, t4, t6, t1, t2, _this._verboseTrace);
    },
    change$4$onPlatform$skip$skipReason$timeout(onPlatform, skip, skipReason, timeout) {
      var _this = this;
      type$.nullable_Map_PlatformSelector_Metadata._as(onPlatform);
      if (timeout == null)
        timeout = _this.timeout;
      if (skip == null)
        skip = _this._skip;
      if (skipReason == null)
        skipReason = _this.skipReason;
      if (onPlatform == null)
        onPlatform = _this.onPlatform;
      return A.Metadata_Metadata(_this._chainStackTraces, _this.forTag, _this.languageVersionComment, onPlatform, _this._retry, skip, skipReason, _this.tags, _this.testOn, timeout, _this._verboseTrace);
    },
    change$1$timeout(timeout) {
      return this.change$4$onPlatform$skip$skipReason$timeout(null, null, null, timeout);
    },
    change$2$skip$skipReason(skip, skipReason) {
      return this.change$4$onPlatform$skip$skipReason$timeout(null, skip, skipReason, null);
    },
    change$1$onPlatform(onPlatform) {
      return this.change$4$onPlatform$skip$skipReason$timeout(onPlatform, null, null, null);
    },
    forPlatform$1(platform) {
      var t1 = {},
        t2 = this.onPlatform;
      if (t2.get$isEmpty(t2))
        return this;
      t1.metadata = this;
      t2.forEach$1(0, new A.Metadata_forPlatform_closure(t1, platform));
      return t1.metadata.change$1$onPlatform(A.LinkedHashMap_LinkedHashMap$_empty(type$.PlatformSelector, type$.Metadata));
    }
  };
  A.Metadata_Metadata_unresolved.prototype = {
    call$0() {
      var _this = this,
        t1 = _this._box_0,
        t2 = t1.tags;
      return A.Metadata$_(_this.chainStackTraces, t1.forTag, _this.languageVersionComment, _this.onPlatform, _this.retry, _this.skip, _this.skipReason, t2, _this.testOn, _this.timeout, _this.verboseTrace);
    },
    $signature: 111
  };
  A.Metadata_Metadata_closure.prototype = {
    call$2(merged, selector) {
      var t1, t2;
      type$.Metadata._as(merged);
      type$.BooleanSelector._as(selector);
      t1 = this._box_0;
      t2 = t1.tags;
      if (!selector.evaluate$1(0, t2.get$contains(t2)))
        return merged;
      t1 = t1.forTag.remove$1(0, selector);
      t1.toString;
      return merged.merge$1(t1);
    },
    $signature: 112
  };
  A.Metadata__validateTags_closure.prototype = {
    call$1(tag) {
      return !B.JSString_methods.contains$1(A._asString(tag), $.$get$anchoredHyphenatedIdentifier());
    },
    $signature: 3
  };
  A.Metadata__validateTags_closure0.prototype = {
    call$1(tag) {
      return '"' + A._asString(tag) + '"';
    },
    $signature: 15
  };
  A.Metadata_validatePlatformSelectors_closure.prototype = {
    call$2(selector, metadata) {
      var t1;
      type$.PlatformSelector._as(selector);
      type$.Metadata._as(metadata);
      t1 = this.validVariables;
      selector.validate$1(t1);
      metadata.validatePlatformSelectors$1(t1);
    },
    $signature: 54
  };
  A.Metadata_merge_closure.prototype = {
    call$2(metadata1, metadata2) {
      var t1 = type$.Metadata;
      return t1._as(metadata1).merge$1(t1._as(metadata2));
    },
    $signature: 53
  };
  A.Metadata_merge_closure0.prototype = {
    call$2(metadata1, metadata2) {
      var t1 = type$.Metadata;
      return t1._as(metadata1).merge$1(t1._as(metadata2));
    },
    $signature: 53
  };
  A.Metadata_forPlatform_closure.prototype = {
    call$2(platformSelector, platformMetadata) {
      var t1;
      type$.PlatformSelector._as(platformSelector);
      type$.Metadata._as(platformMetadata);
      if (!platformSelector.evaluate$1(0, this.platform))
        return;
      t1 = this._box_0;
      t1.metadata = t1.metadata.merge$1(platformMetadata);
    },
    $signature: 54
  };
  A.OperatingSystem.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.PlatformSelector.prototype = {
    validate$1(validVariables) {
      type$.Set_String._as(validVariables);
      if (this === B.PlatformSelector_All)
        return;
      A.PlatformSelector__wrapFormatException(new A.PlatformSelector_validate_closure(this, validVariables), null, type$.void);
    },
    evaluate$1(_, platform) {
      return this._inner.evaluate$1(0, new A.PlatformSelector_evaluate_closure(platform));
    },
    intersection$1(_, other) {
      var t1 = other._inner,
        t2 = t1.$eq(0, B.C_All);
      if (t2)
        return this;
      return new A.PlatformSelector(this._inner.intersection$1(0, t1));
    },
    toString$0(_) {
      return this._inner.toString$0(0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.PlatformSelector && this._inner.$eq(0, other._inner);
    },
    get$hashCode(_) {
      var t1 = this._inner;
      return t1.get$hashCode(t1);
    }
  };
  A.PlatformSelector_validate_closure.prototype = {
    call$0() {
      return this.$this._inner.validate$1(new A.PlatformSelector_validate__closure(this.validVariables));
    },
    $signature: 1
  };
  A.PlatformSelector_validate__closure.prototype = {
    call$1($name) {
      var t1 = $.$get$_universalValidVariables().contains$1(0, $name);
      return t1;
    },
    $signature: 3
  };
  A.PlatformSelector_evaluate_closure.prototype = {
    call$1(variable) {
      var t1, _this = this;
      A._asString(variable);
      $label0$0: {
        t1 = _this.platform;
        if (variable !== t1.runtime.identifier)
          t1 = variable === t1.os.identifier || variable === t1.compiler.identifier;
        else
          t1 = true;
        if (t1) {
          t1 = true;
          break $label0$0;
        }
        if ("dart-vm" === variable) {
          t1 = _this.platform.runtime.isDartVM;
          break $label0$0;
        }
        if ("browser" === variable) {
          t1 = _this.platform.runtime.isBrowser;
          break $label0$0;
        }
        if ("js" === variable) {
          t1 = _this.platform.compiler === B.Compiler_Dart2Js_dart2js_dart2js;
          break $label0$0;
        }
        if ("blink" === variable) {
          t1 = _this.platform.runtime.isBlink;
          break $label0$0;
        }
        if ("posix" === variable) {
          t1 = _this.platform.os;
          t1 = t1 !== B.OperatingSystem_Windows_windows && t1 !== B.OperatingSystem_none_none;
          break $label0$0;
        }
        if ("google" === variable) {
          t1 = false;
          break $label0$0;
        }
        if ("wasm" === variable) {
          t1 = _this.platform.compiler === B.Compiler_Dart2Wasm_dart2wasm_dart2wasm;
          break $label0$0;
        }
        t1 = false;
        break $label0$0;
      }
      return t1;
    },
    $signature: 3
  };
  A.Runtime.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.StackTraceFormatter.prototype = {};
  A.State.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.State && this.status === other.status && this.result === other.result;
    },
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this.status) ^ 7 * A.Primitives_objectHashCode(this.result)) >>> 0;
    },
    toString$0(_) {
      var t1 = this.status;
      if (t1 === B.Status_0)
        return "pending";
      if (t1 === B.Status_2)
        return this.result._name;
      t1 = this.result;
      if (t1 === B.Result_0)
        return "running";
      return "running with " + t1.toString$0(0);
    }
  };
  A.Status.prototype = {
    _enumToString$0() {
      return "Status." + this._name;
    },
    toString$0(_) {
      return this._name;
    }
  };
  A.Result.prototype = {
    _enumToString$0() {
      return "Result." + this._name;
    },
    toString$0(_) {
      return this._name;
    }
  };
  A.Suite.prototype = {};
  A.SuitePlatform.prototype = {};
  A.Test.prototype = {$isGroupEntry: 1};
  A.TestFailure.prototype = {
    toString$0(_) {
      return this.message;
    },
    $isException: 1
  };
  A.pumpEventQueue_closure.prototype = {
    call$0() {
      return A.pumpEventQueue(this.times - 1);
    },
    $signature: 37
  };
  A.Engine.prototype = {
    get$_onUnpaused() {
      var t1 = A.Future_Future$value(null, type$.dynamic);
      return t1;
    },
    get$success() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_bool),
        $async$returnValue, $async$self = this, t1;
      var $async$get$success = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(A._setArrayType([$async$self._group._future_group$_completer.future, $async$self._runPool._pool$_closeMemo._async_memoizer$_completer.future], type$.JSArray_Future_dynamic), true, type$.dynamic), $async$get$success);
            case 3:
              // returning from await.
              t1 = $async$self._closedBeforeDone;
              t1.toString;
              if (t1) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = $async$self.get$liveTests().every$1(0, new A.Engine_success_closure());
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$get$success, $async$completer);
    },
    get$liveTests() {
      var _this = this;
      return new A.UnionSet(A.LinkedHashSet_LinkedHashSet$from(A._setArrayType([_this._passedGroup.set, _this._skippedGroup.set, _this._failedGroup.set, new A.IterableSet(new A.UnmodifiableListView(_this._active, type$.UnmodifiableListView_LiveTest), type$.IterableSet_LiveTest)], type$.JSArray_Set_LiveTest), type$.Set_LiveTest), true, type$.UnionSet_LiveTest);
    },
    Engine$4$concurrency$coverage$stopOnFirstFailure$testRandomizeOrderingSeed(concurrency, coverage, stopOnFirstFailure, testRandomizeOrderingSeed) {
      var t1 = type$.Null;
      A.FutureExtensions_onError(this._group._future_group$_completer.future.then$1$1(new A.Engine_closure(this), t1), new A.Engine_closure0(), t1, type$.Object);
    },
    run$0() {
      var t1, subscription, _this = this;
      if (_this._runCalled)
        throw A.wrapException(A.StateError$("Engine.run() may not be called more than once."));
      _this._runCalled = true;
      t1 = _this._suiteController;
      subscription = new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$1(null);
      subscription.onData$1(new A.Engine_run_closure(_this));
      subscription.onDone$1(new A.Engine_run_closure0(_this, subscription));
      _this._engine$_subscriptions.add$1(0, subscription);
      return _this.get$success();
    },
    _runGroup$3(suiteController, group, parents) {
      return this._runGroup$body$Engine(type$.LiveSuiteController._as(suiteController), group, type$.List_Group._as(parents));
    },
    _runGroup$body$Engine(suiteController, group, parents) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, suiteConfig, skipGroup, setUpAllSucceeded, liveTest, entries, entry, test, liveTest0, skipGroup0, t1, t2, t3, t4, _i, t5, value;
      var $async$_runGroup$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              B.JSArray_methods.add$1(parents, group);
              $async$handler = 3;
              suiteConfig = suiteController.get$liveSuite()._live_suite_controller$_controller._suite._runner_suite$_controller._config;
              suiteConfig.toString;
              skipGroup0 = group.metadata._skip === true;
              skipGroup = skipGroup0;
              setUpAllSucceeded = true;
              $async$goto = !A.boolConversionCheck(skipGroup) && group.setUpAll != null ? 6 : 7;
              break;
            case 6:
              // then
              t1 = group.setUpAll;
              t1.toString;
              liveTest = t1.load$2$groups(0, suiteController.get$liveSuite()._live_suite_controller$_controller._suite, parents);
              $async$goto = 8;
              return A._asyncAwait($async$self._runLiveTest$3$countSuccess(suiteController, liveTest, false), $async$_runGroup$3);
            case 8:
              // returning from await.
              t1 = liveTest.state.result;
              setUpAllSucceeded = t1 === B.Result_0 || t1 === B.Result_1;
            case 7:
              // join
              $async$goto = !$async$self._closed && A.boolConversionCheck(setUpAllSucceeded) ? 9 : 10;
              break;
            case 9:
              // then
              t1 = group.entries;
              t1 = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
              entries = t1;
              suiteConfig.toString;
              t1 = entries, t2 = t1.length, t3 = type$.nullable_Iterable_Group, t4 = type$.Test, _i = 0;
            case 11:
              // for condition
              if (!(_i < t1.length)) {
                // goto after for
                $async$goto = 13;
                break;
              }
              entry = t1[_i];
              if ($async$self._closed) {
                $async$next = [1];
                // goto finally
                $async$goto = 4;
                break;
              }
              $async$goto = entry instanceof A.Group ? 14 : 16;
              break;
            case 14:
              // then
              $async$goto = 17;
              return A._asyncAwait($async$self._runGroup$3(suiteController, entry, parents), $async$_runGroup$3);
            case 17:
              // returning from await.
              // goto join
              $async$goto = 15;
              break;
            case 16:
              // else
              suiteConfig.toString;
              t5 = J.get$metadata$z(entry);
              t5 = t5._skip === true;
              $async$goto = t5 ? 18 : 20;
              break;
            case 18:
              // then
              $async$goto = 21;
              return A._asyncAwait($async$self._runSkippedTest$3(suiteController, t4._as(entry), parents), $async$_runGroup$3);
            case 21:
              // returning from await.
              // goto join
              $async$goto = 19;
              break;
            case 20:
              // else
              test = t4._as(entry);
              t5 = test;
              value = suiteController.__LiveSuiteController_liveSuite_FI;
              if (value === $) {
                value !== $ && A.throwLateFieldADI("liveSuite");
                value = suiteController.__LiveSuiteController_liveSuite_FI = new A._LiveSuite(suiteController);
              }
              t5 = A.Invoker$_(value._live_suite_controller$_controller._suite, t5, t3._as(parents), t5._guarded).__Invoker__controller_F;
              t5 === $ && A.throwLateFieldNI("_controller");
              $async$goto = 22;
              return A._asyncAwait($async$self._runLiveTest$2(suiteController, t5), $async$_runGroup$3);
            case 22:
              // returning from await.
            case 19:
              // join
            case 15:
              // join
            case 12:
              // for update
              t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i;
              // goto for condition
              $async$goto = 11;
              break;
            case 13:
              // after for
            case 10:
              // join
              $async$goto = !A.boolConversionCheck(skipGroup) && group.tearDownAll != null ? 23 : 24;
              break;
            case 23:
              // then
              t1 = group.tearDownAll;
              t1.toString;
              liveTest0 = t1.load$2$groups(0, suiteController.get$liveSuite()._live_suite_controller$_controller._suite, parents);
              $async$goto = 25;
              return A._asyncAwait($async$self._runLiveTest$3$countSuccess(suiteController, liveTest0, false), $async$_runGroup$3);
            case 25:
              // returning from await.
              $async$goto = $async$self._closed ? 26 : 27;
              break;
            case 26:
              // then
              $async$goto = 28;
              return A._asyncAwait(J.close$0$z(liveTest0), $async$_runGroup$3);
            case 28:
              // returning from await.
            case 27:
              // join
            case 24:
              // join
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              B.JSArray_methods.remove$1(parents, group);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_runGroup$3, $async$completer);
    },
    _runLiveTest$3$countSuccess(suiteController, liveTest, countSuccess) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t1, subscription;
      var $async$_runLiveTest$3$countSuccess = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.get$_onUnpaused(), $async$_runLiveTest$3$countSuccess);
            case 3:
              // returning from await.
              t1 = $async$self._active;
              t1._queue_list$_add$1(0, t1.$ti._eval$1("QueueList.E")._as(liveTest));
              t1 = liveTest._onStateChange;
              subscription = new A._BroadcastStream(t1, A._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(null);
              subscription.onData$1(new A.Engine__runLiveTest_closure($async$self, liveTest));
              subscription.onDone$1(new A.Engine__runLiveTest_closure0($async$self, subscription));
              $async$self._engine$_subscriptions.add$1(0, subscription);
              suiteController.reportLiveTest$2$countSuccess(liveTest, countSuccess);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$microtask(liveTest.get$run(), type$.dynamic), $async$_runLiveTest$3$countSuccess);
            case 4:
              // returning from await.
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future(new A.Engine__runLiveTest_closure1(), type$.Null), $async$_runLiveTest$3$countSuccess);
            case 5:
              // returning from await.
              t1 = $async$self._restarted;
              if (!t1.contains$1(0, liveTest)) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 6;
              return A._asyncAwait($async$self._runLiveTest$3$countSuccess(suiteController, liveTest.test.load$2$groups(0, liveTest.suite, liveTest.groups), countSuccess), $async$_runLiveTest$3$countSuccess);
            case 6:
              // returning from await.
              t1.remove$1(0, liveTest);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_runLiveTest$3$countSuccess, $async$completer);
    },
    _runLiveTest$2(suiteController, liveTest) {
      return this._runLiveTest$3$countSuccess(suiteController, liveTest, true);
    },
    _runSkippedTest$3(suiteController, test, parents) {
      return this._runSkippedTest$body$Engine(suiteController, test, type$.List_Group._as(parents));
    },
    _runSkippedTest$body$Engine(suiteController, test, parents) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, skipped, controller;
      var $async$_runSkippedTest$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.get$_onUnpaused(), $async$_runSkippedTest$3);
            case 3:
              // returning from await.
              skipped = new A.LocalTest(test.name, test.metadata, test.trace, false, new A.Engine__runSkippedTest_closure(), true);
              controller = A._Cell$named("controller");
              controller.__late_helper$_value = A.LiveTestController$(suiteController.get$liveSuite()._live_suite_controller$_controller._suite, skipped, new A.Engine__runSkippedTest_closure0(controller, skipped), new A.Engine__runSkippedTest_closure1(), parents);
              $async$goto = 4;
              return A._asyncAwait($async$self._runLiveTest$2(suiteController, controller._readLocal$0()), $async$_runSkippedTest$3);
            case 4:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_runSkippedTest$3, $async$completer);
    },
    _addLiveSuite$1(liveSuite) {
      var t1, t2, t3, _this = this;
      _this._onSuiteStartedController.add$1(0, liveSuite);
      t1 = liveSuite._live_suite_controller$_controller;
      t2 = t1._onTestStartedController;
      _this._onTestStartedGroup.add$1(0, new A._BroadcastStream(t2, A._instanceType(t2)._eval$1("_BroadcastStream<1>")));
      t2 = _this._passedGroup;
      t3 = type$.UnmodifiableSetView_LiveTest;
      t2._union_set_controller$_sets.add$1(0, t2.$ti._eval$1("Set<1>")._as(new A.UnmodifiableSetView(t1._passed, t3)));
      t2 = _this._skippedGroup;
      t2._union_set_controller$_sets.add$1(0, t2.$ti._eval$1("Set<1>")._as(new A.UnmodifiableSetView(t1._skipped, t3)));
      t2 = _this._failedGroup;
      t2._union_set_controller$_sets.add$1(0, t2.$ti._eval$1("Set<1>")._as(new A.UnmodifiableSetView(t1._failed, t3)));
    }
  };
  A.Engine_success_closure.prototype = {
    call$1(liveTest) {
      var t1 = type$.LiveTest._as(liveTest).state,
        t2 = t1.result;
      return (t2 === B.Result_0 || t2 === B.Result_1) && t1.status === B.Status_2;
    },
    $signature: 116
  };
  A.Engine_closure.prototype = {
    call$1(_) {
      var t1;
      type$.List_void._as(_);
      t1 = this.$this;
      t1._onTestStartedGroup.close$0(0);
      t1._onSuiteStartedController.close$0(0);
      if (t1._closedBeforeDone == null)
        t1._closedBeforeDone = false;
    },
    $signature: 117
  };
  A.Engine_closure0.prototype = {
    call$2(_, __) {
    },
    $signature: 118
  };
  A.Engine_run_closure.prototype = {
    call$1(suite) {
      var t1;
      type$.RunnerSuite._as(suite);
      t1 = this.$this;
      t1._addedSuites.add$1(0, suite);
      t1._onSuiteAddedController.add$1(0, suite);
      t1._group.add$1(0, new A.Engine_run__closure(t1, suite).call$0());
    },
    $signature: 119
  };
  A.Engine_run__closure.prototype = {
    call$0() {
      return this.$call$body$Engine_run__closure();
    },
    $call$body$Engine_run__closure() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, controller, t1, t2, resource;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = $async$self.$this;
              $async$goto = 3;
              return A._asyncAwait(t2._runPool.request$0(0), $async$call$0);
            case 3:
              // returning from await.
              resource = $async$result;
              t1.controller = null;
              $async$handler = 4;
              controller = t1.controller = A.LiveSuiteController$($async$self.suite);
              t2._addLiveSuite$1(controller.get$liveSuite());
              if (t2._closed) {
                $async$next = [1];
                // goto finally
                $async$goto = 5;
                break;
              }
              $async$goto = 7;
              return A._asyncAwait(t2._runGroup$3(controller, controller.get$liveSuite()._live_suite_controller$_controller._suite.group, A._setArrayType([], type$.JSArray_Group)), $async$call$0);
            case 7:
              // returning from await.
              controller._onTestStartedController.close$0(0);
              controller._onCompleteGroup.close$0(0);
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t2 = resource;
              t1 = type$.dynamic_Function._as(new A.Engine_run___closure(t1));
              if (t2._released)
                A.throwExpression(A.StateError$("A PoolResource may only be released once."));
              t2._released = true;
              t2._pool._onResourceReleaseAllowed$1(t1);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.Engine_run___closure.prototype = {
    call$0() {
      var t1 = this._box_0.controller;
      return t1 == null ? null : t1.close$0(0);
    },
    $signature: 120
  };
  A.Engine_run_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._engine$_subscriptions.remove$1(0, this.subscription);
      t1._onSuiteAddedController.close$0(0);
      t1._group.close$0(0);
      t1._runPool.close$0(0);
    },
    $signature: 1
  };
  A.Engine__runLiveTest_closure.prototype = {
    call$1(state) {
      var t1;
      if (type$.State._as(state).status !== B.Status_2)
        return;
      t1 = this.$this._active;
      t1.remove$1(t1, this.liveTest);
    },
    $signature: 50
  };
  A.Engine__runLiveTest_closure0.prototype = {
    call$0() {
      this.$this._engine$_subscriptions.remove$1(0, this.subscription);
    },
    $signature: 1
  };
  A.Engine__runLiveTest_closure1.prototype = {
    call$0() {
    },
    $signature: 2
  };
  A.Engine__runSkippedTest_closure.prototype = {
    call$0() {
    },
    $signature: 1
  };
  A.Engine__runSkippedTest_closure0.prototype = {
    call$0() {
      var t2,
        t1 = this.controller;
      t1._readLocal$0().setState$1(B.State_Status_1_Result_0);
      t1._readLocal$0().setState$1(B.State_Status_1_Result_1);
      t2 = this.skipped.metadata.skipReason;
      if (t2 != null)
        J.message$1$z(t1._readLocal$0(), new A.Message(B.MessageType_skip, "Skip: " + t2));
      t1._readLocal$0().setState$1(B.State_Status_2_Result_1);
      t1._readLocal$0().completer.complete$0(0);
    },
    $signature: 1
  };
  A.Engine__runSkippedTest_closure1.prototype = {
    call$0() {
    },
    $signature: 1
  };
  A.LiveSuite.prototype = {};
  A._LiveSuite.prototype = {};
  A.LiveSuiteController.prototype = {
    get$liveSuite() {
      var value = this.__LiveSuiteController_liveSuite_FI;
      if (value === $) {
        value !== $ && A.throwLateFieldADI("liveSuite");
        value = this.__LiveSuiteController_liveSuite_FI = new A._LiveSuite(this);
      }
      return value;
    },
    reportLiveTest$2$countSuccess(liveTest, countSuccess) {
      var t2, _this = this,
        t1 = _this._onTestStartedController;
      if ((t1._state & 4) !== 0)
        throw A.wrapException(A.StateError$("Can't call reportLiveTest() after noMoreTests()."));
      _this._live_suite_controller$_active = liveTest;
      t2 = liveTest._onStateChange;
      new A._BroadcastStream(t2, A._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new A.LiveSuiteController_reportLiveTest_closure(_this, liveTest, countSuccess));
      t1.add$1(0, liveTest);
      _this._onCompleteGroup.add$1(0, liveTest.completer.future);
    },
    close$0(_) {
      return this._live_suite_controller$_closeMemo.runOnce$1(new A.LiveSuiteController_close_closure(this));
    }
  };
  A.LiveSuiteController_reportLiveTest_closure.prototype = {
    call$1(state) {
      var t1, t2, _this = this;
      type$.State._as(state);
      if (state.status !== B.Status_2)
        return;
      t1 = _this.$this;
      t1._live_suite_controller$_active = null;
      t2 = state.result;
      if (t2 === B.Result_1)
        t1._skipped.add$1(0, _this.liveTest);
      else if (t2 !== B.Result_0) {
        t2 = _this.liveTest;
        t1._passed.remove$1(0, t2);
        t1._failed.add$1(0, t2);
      } else if (_this.countSuccess) {
        t2 = _this.liveTest;
        t1._passed.add$1(0, t2);
        t1._failed.remove$1(0, t2);
      }
    },
    $signature: 50
  };
  A.LiveSuiteController_close_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 2;
              $async$goto = 5;
              return A._asyncAwait($async$self.$this._suite._runner_suite$_controller._close$0(), $async$call$0);
            case 5:
              // returning from await.
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              $async$self.$this._live_suite_controller$_onCloseCompleter.complete$0(0);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 13
  };
  A.ExpandedReporter.prototype = {
    _cancel$0() {
      var t1, t2, t3, t4;
      for (t1 = this._subscriptions, t2 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t3 = t2.$ti._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        (t4 == null ? t3._as(t4) : t4).cancel$0(0);
      }
      t1.clear$0(0);
    },
    _onTestStarted$1(liveTest) {
      var t1, t2, _this = this;
      type$.LiveTest._as(liveTest);
      t1 = _this._stopwatch;
      if (t1._stop != null)
        t1.start$0(0);
      if (_this._engine._active.get$length(0) === 1)
        _this._progressLine$1(_this._description$1(liveTest));
      t1 = liveTest._onStateChange;
      _this._subscriptions.add$1(0, new A._BroadcastStream(t1, A._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new A.ExpandedReporter__onTestStarted_closure(_this, liveTest)));
      t1 = _this._subscriptions;
      t2 = liveTest._live_test_controller$_onError;
      t1.add$1(0, new A._BroadcastStream(t2, A._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new A.ExpandedReporter__onTestStarted_closure0(_this, liveTest)));
      t2 = liveTest._onMessage;
      t1.add$1(0, new A._BroadcastStream(t2, A._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new A.ExpandedReporter__onTestStarted_closure1(_this, liveTest)));
    },
    _expanded$_onStateChange$2(liveTest, state) {
      var t1, t2, t3;
      if (state.status !== B.Status_2)
        return;
      t1 = this._engine._active;
      t2 = type$.UnmodifiableListView_LiveTest;
      t3 = new A.UnmodifiableListView(t1, t2);
      if (!t3.get$isEmpty(t3)) {
        t1 = new A.UnmodifiableListView(t1, t2);
        this._progressLine$1(this._description$1(t1.get$first(t1)));
      }
    },
    _expanded$_onError$3(liveTest, error, stackTrace) {
      var t1, _this = this;
      liveTest.test.metadata.get$chainStackTraces();
      _this._shouldPrintStackTraceChainingNotice = true;
      if (liveTest.state.status !== B.Status_2)
        return;
      _this._progressLine$2$suffix(_this._description$1(liveTest), " " + _this._bold + _this._red + "[E]" + _this._noColor);
      t1 = _this._sink;
      t1.writeln$1(A.indent(A.S(error)));
      t1.writeln$1(A.indent(stackTrace.toString$0(0)));
      return;
    },
    _onDone$1(success) {
      var t1, t2, t3, t4, t5, _this = this;
      A._asBoolQ(success);
      _this._cancel$0();
      if (success == null)
        return;
      t1 = _this._engine;
      if (t1.get$liveTests().get$length(0) === 0)
        _this._sink.writeln$1("No tests ran.");
      else if (!success) {
        for (t2 = type$.UnmodifiableListView_LiveTest, t1 = new A.UnmodifiableListView(t1._active, t2), t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t3 = _this._red, t4 = " - did not complete " + _this._bold + t3 + "[E]" + _this._noColor, t2 = t2._eval$1("ListBase.E"); t1.moveNext$0();) {
          t5 = t1.__internal$_current;
          _this._progressLine$2$suffix(_this._description$1(t5 == null ? t2._as(t5) : t5), t4);
        }
        _this._progressLine$2$color("Some tests failed.", t3);
      } else if (t1._passedGroup.set.get$length(0) === 0)
        _this._progressLine$1("All tests skipped.");
      else
        _this._progressLine$1("All tests passed!");
      if (_this._shouldPrintStackTraceChainingNotice) {
        t1 = _this._sink;
        t1.writeln$1("");
        t1.writeln$1("Consider enabling the flag chain-stack-traces to receive more detailed exceptions.\nFor example, 'dart test --chain-stack-traces'.");
      }
    },
    _progressLine$3$color$suffix(message, color, suffix) {
      var t3, t4, t5, _this = this,
        t1 = _this._engine,
        t2 = t1._passedGroup.set;
      if (t2.get$length(0) === _this._lastProgressPassed)
        if (t1._skippedGroup.set.get$length(0) === _this._lastProgressSkipped)
          if (t1._failedGroup.set.get$length(0) === _this._lastProgressFailed)
            if (message === _this._lastProgressMessage)
              t3 = suffix == null || suffix === _this._lastProgressSuffix;
            else
              t3 = false;
          else
            t3 = false;
        else
          t3 = false;
      else
        t3 = false;
      if (t3)
        return;
      _this._lastProgressPassed = t2.get$length(0);
      t3 = t1._skippedGroup.set;
      _this._lastProgressSkipped = t3.get$length(0);
      t1 = t1._failedGroup.set;
      _this._lastProgressFailed = t1.get$length(0);
      _this._lastProgressMessage = message;
      _this._lastProgressSuffix = suffix;
      if (suffix != null)
        message += suffix;
      if (color == null)
        color = "";
      t4 = A.Duration$(_this._stopwatch.get$elapsedMicroseconds(), 0, 0)._duration;
      t5 = _this._noColor;
      t2 = "" + (B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(B.JSInt_methods._tdivFast$1(t4, 60000000)), 2, "0") + ":" + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(B.JSInt_methods.$mod(B.JSInt_methods._tdivFast$1(t4, 1000000), 60)), 2, "0") + " ") + _this._green + "+" + t2.get$length(0) + t5;
      if (t3.get$length(0) !== 0)
        t2 = t2 + _this._yellow + " ~" + t3.get$length(0) + t5;
      t1 = (t1.get$length(0) !== 0 ? t2 + _this._red + " -" + t1.get$length(0) + t5 : t2) + ": " + color + message + t5;
      _this._sink.writeln$1(t1.charCodeAt(0) == 0 ? t1 : t1);
    },
    _progressLine$2$suffix(message, suffix) {
      return this._progressLine$3$color$suffix(message, null, suffix);
    },
    _progressLine$2$color(message, color) {
      return this._progressLine$3$color$suffix(message, color, null);
    },
    _progressLine$1(message) {
      return this._progressLine$3$color$suffix(message, null, null);
    },
    _description$1(liveTest) {
      return liveTest.test.name;
    }
  };
  A.ExpandedReporter__onTestStarted_closure.prototype = {
    call$1(state) {
      return this.$this._expanded$_onStateChange$2(this.liveTest, type$.State._as(state));
    },
    $signature: 50
  };
  A.ExpandedReporter__onTestStarted_closure0.prototype = {
    call$1(error) {
      type$.AsyncError._as(error);
      return this.$this._expanded$_onError$3(this.liveTest, error.error, error.stackTrace);
    },
    $signature: 124
  };
  A.ExpandedReporter__onTestStarted_closure1.prototype = {
    call$1(message) {
      var t1, text;
      type$.Message._as(message);
      t1 = this.$this;
      t1._progressLine$1(t1._description$1(this.liveTest));
      text = message.text;
      if (message.type === B.MessageType_skip)
        text = "  " + t1._yellow + text + t1._noColor;
      t1._sink.writeln$1(text);
    },
    $signature: 125
  };
  A.RunnerSuite.prototype = {};
  A.RunnerSuiteController.prototype = {
    _close$0() {
      return this._closeMemo.runOnce$1(new A.RunnerSuiteController__close_closure(this));
    },
    set$__RunnerSuiteController__suite_F(__RunnerSuiteController__suite_F) {
      this.__RunnerSuiteController__suite_F = type$.Future_RunnerSuite._as(__RunnerSuiteController__suite_F);
    }
  };
  A.RunnerSuiteController__close_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.$this._onDebuggingController.close$0(0), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 13
  };
  A.SuiteConfiguration.prototype = {};
  A.IterableSet.prototype = {
    get$length(_) {
      var t1 = this._iterable_set$_base._collection$_source;
      return t1.get$length(t1);
    },
    get$iterator(_) {
      var t1 = this._iterable_set$_base;
      return new A.ListIterator(t1, t1.get$length(0), t1.$ti._eval$1("ListIterator<ListBase.E>"));
    },
    contains$1(_, element) {
      var t1 = this._iterable_set$_base;
      return t1.contains$1(t1, element);
    },
    toSet$0(_) {
      var t1 = this._iterable_set$_base;
      return t1.toSet$0(t1);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._IterableSet_Object_SetMixin.prototype = {};
  A._IterableSet_Object_SetMixin_UnmodifiableSetMixin.prototype = {};
  A._declarer_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, t1, t2, t3, t4, controller, suite, engine;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.pumpEventQueue(20), $async$call$0);
            case 3:
              // returning from await.
              t1 = $.$get$SuiteConfiguration_empty();
              t2 = $._globalDeclarer.build$0();
              t3 = $.$get$currentOSGuess();
              t3 = new A.SuitePlatform(B.Runtime_WrZ, t3, B.Compiler_Kernel_kernel_kernel);
              if (!B.JSArray_methods.contains$1(B.List_ib5, B.Compiler_Kernel_kernel_kernel))
                A.throwExpression(A.ArgumentError$("The platform " + B.Runtime_WrZ.toString$0(0) + " does not support the compiler " + B.Compiler_Kernel_kernel_kernel.toString$0(0), null));
              t4 = A.Uri_base();
              t4 = $.$get$context().prettyUri$1(t4);
              controller = new A.RunnerSuiteController(t1, null, new A._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_bool), A.LinkedHashSet_LinkedHashSet$_empty(type$.String), new A.AsyncMemoizer(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void), type$.AsyncMemoizer_void));
              suite = new A.RunnerSuite(controller, t3, t4, A.Suite__filterGroup(t2, t3), false);
              t1 = type$.Future_RunnerSuite._as(A.Future_Future$value(suite, type$.RunnerSuite));
              controller.__RunnerSuiteController__suite_F !== $ && A.throwLateFieldAI("_suite");
              controller.set$__RunnerSuiteController__suite_F(t1);
              engine = A.Engine$();
              t1 = engine._suiteController;
              t1.add$1(0, A._instanceType(t1)._precomputed1._as(suite));
              t1.close$0(0);
              $.$get$Stopwatch__frequency();
              t1 = A.LinkedHashSet_LinkedHashSet$_empty(type$.StreamSubscription_dynamic);
              t2 = new A.ExpandedReporter(true, "\x1b[32m", "\x1b[31m", "\x1b[33m", "\x1b[90m", "\x1b[1m", "\x1b[0m", engine, false, false, new A.Stopwatch(), t1, new A.PrintSink(new A.StringBuffer("")));
              t3 = engine._onTestStartedGroup.__StreamGroup__controller_A;
              t3 === $ && A.throwLateFieldNI("_controller");
              t1.add$1(0, new A._BroadcastStream(t3, A._instanceType(t3)._eval$1("_BroadcastStream<1>")).listen$1(t2.get$_onTestStarted()));
              t3 = engine.get$success();
              t1.add$1(0, A.Stream_Stream$fromFuture(t3, t3.$ti._precomputed1).listen$1(t2.get$_onDone()));
              t2 = type$.nullable_Object;
              t2 = A.runZoned(new A._declarer__closure(engine), null, A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_yzu, $._globalDeclarer], t2, t2), type$.nullable_Future_nullable_bool);
              $async$goto = 4;
              return A._asyncAwait(type$.Future_nullable_bool._is(t2) ? t2 : A._Future$value(A._asBoolQ(t2), type$.nullable_bool), $async$call$0);
            case 4:
              // returning from await.
              if ($async$result === true) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              A.print("");
              A.Future_Future$error("Dummy exception to set exit code.", null, type$.void);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A._declarer__closure.prototype = {
    call$0() {
      return A.Invoker_guard(this.engine.get$run(), type$.Future_nullable_bool);
    },
    $signature: 126
  };
  A.currentOSGuess_closure.prototype = {
    call$0() {
      var t1 = $.$get$context().style;
      if (t1 === $.$get$Style_url())
        return B.OperatingSystem_none_none;
      if (t1 === $.$get$Style_windows())
        return B.OperatingSystem_Windows_windows;
      if ($._macOSDirectories.any$1(0, B.JSString_methods.get$startsWith(A.current())))
        return B.OperatingSystem_elx;
      return B.OperatingSystem_Linux_linux;
    },
    $signature: 127
  };
  A.PrintSink.prototype = {
    writeln$1(obj) {
      this._buffer._contents += obj + "\n";
      this._flush$0();
    },
    _flush$0() {
      var t1 = this._buffer;
      if (B.JSString_methods.endsWith$1(t1.toString$0(0), "\n")) {
        A.print(t1);
        t1._contents = "";
      }
    },
    $isStringSink: 1
  };
  A.ReleasedException.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + ": Instance has been released.";
    },
    $isException: 1
  };
  A.Releasable.prototype = {
    release$0(_) {
      this.Releasable__released = true;
      this.Releasable__token = new A.Object();
      $.ReleasableTracker__releasables.remove$1(0, this);
    }
  };
  A.Using_useAsync_closure.prototype = {
    call$0() {
      return this.$call$body$Using_useAsync_closure(this.R);
    },
    $call$body$Using_useAsync_closure($async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, t2, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._this;
              if (t1.Releasable__released)
                throw A.wrapException(new A.ReleasedException());
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.asyncProcess.call$1(t1), $async$call$0);
            case 6:
              // returning from await.
              t2 = $async$result;
              $async$returnValue = t2;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              t1.release$0(0);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature() {
      return this.R._eval$1("Future<0>()");
    }
  };
  A.EventStreamProvider0.prototype = {};
  A._EventStream.prototype = {
    get$isBroadcast() {
      return true;
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return A._EventStreamSubscription$0(this._streams$_target, this._streams$_eventType, onData, false, t1._precomputed1);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._EventStreamSubscription.prototype = {
    cancel$0(_) {
      var _this = this,
        emptyFuture = A.Future_Future$value(null, type$.void);
      if (_this._streams$_target == null)
        return emptyFuture;
      _this._streams$_unlisten$0();
      _this._streams$_onData = _this._streams$_target = null;
      return emptyFuture;
    },
    onData$1(handleData) {
      var t1, _this = this;
      _this.$ti._eval$1("~(1)?")._as(handleData);
      if (_this._streams$_target == null)
        throw A.wrapException(A.StateError$("Subscription has been canceled."));
      _this._streams$_unlisten$0();
      t1 = A._wrapZone(new A._EventStreamSubscription_onData_closure(handleData), type$.JSObject);
      t1 = t1 == null ? null : type$.JavaScriptFunction._as(A.allowInterop(t1, type$.Function));
      _this._streams$_onData = t1;
      _this._streams$_tryResume$0();
    },
    pause$0(_) {
      if (this._streams$_target == null)
        return;
      ++this._streams$_pauseCount;
      this._streams$_unlisten$0();
    },
    resume$0(_) {
      var _this = this;
      if (_this._streams$_target == null || _this._streams$_pauseCount <= 0)
        return;
      --_this._streams$_pauseCount;
      _this._streams$_tryResume$0();
    },
    _streams$_tryResume$0() {
      var _this = this,
        t1 = _this._streams$_onData;
      if (t1 != null && _this._streams$_pauseCount <= 0)
        _this._streams$_target.addEventListener(_this._streams$_eventType, t1, false);
    },
    _streams$_unlisten$0() {
      var t1 = this._streams$_onData;
      if (t1 != null)
        this._streams$_target.removeEventListener(this._streams$_eventType, t1, false);
    },
    $isStreamSubscription: 1
  };
  A._EventStreamSubscription_closure.prototype = {
    call$1(e) {
      return this.onData.call$1(type$.JSObject._as(e));
    },
    $signature: 26
  };
  A._EventStreamSubscription_onData_closure.prototype = {
    call$1(e) {
      return this.handleData.call$1(type$.JSObject._as(e));
    },
    $signature: 26
  };
  A._checkWebWorkers_closure.prototype = {
    call$1(u) {
      return type$.Uri._as(u).normalizePath$0().toString$0(0) !== this.uri.toString$0(0);
    },
    $signature: 51
  };
  A._checkWebWorkers_closure0.prototype = {
    call$1(u) {
      return type$.Uri._as(u).get$scheme() !== "data";
    },
    $signature: 51
  };
  A._checkWebWorkers_closure1.prototype = {
    call$1(u) {
      return type$.Uri._as(u).toString$0(0) !== this.workerUrl.normalizePath$0().toString$0(0);
    },
    $signature: 51
  };
  A.CacheStat.prototype = {};
  A.CacheWorker.prototype = {
    getStats$0(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CacheStat),
        $async$returnValue, $async$self = this, t1, t2;
      var $async$getStats$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.send$1$1(0, 4, type$.List_dynamic), $async$getStats$0);
            case 3:
              // returning from await.
              t1 = $async$result;
              t2 = J.getInterceptor$asx(t1);
              $async$returnValue = new A.CacheStat(B.JSNumber_methods.toInt$0(A._asNum(t2.$index(t1, 0))), B.JSNumber_methods.toInt$0(A._asNum(t2.$index(t1, 1))), B.JSNumber_methods.toInt$0(A._asNum(t2.$index(t1, 2))), B.JSNumber_methods.toInt$0(A._asNum(t2.$index(t1, 3))), B.JSNumber_methods.toInt$0(A._asNum(t2.$index(t1, 4))));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getStats$0, $async$completer);
    }
  };
  A.execute_closure0.prototype = {
    call$0() {
      var pool = A._Cell$named("pool"),
        worker = A._Cell$named("worker"),
        t1 = this.tc;
      A._declarer().setUpAll$1(new A.execute__closure0(pool, t1, worker));
      A._declarer().tearDownAll$1(new A.execute__closure1(pool, worker));
      t1.group$2("- Cancelation", new A.execute__closure2(t1, pool, worker));
    },
    $signature: 1
  };
  A.execute__closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.pool;
              t2 = $async$self.tc;
              t1.__late_helper$_value = A.TestWorkerPool$(t2, B.ConcurrencySettings_2_2_2);
              t1 = J.start$0$x(t1._readLocal$0());
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.worker;
              t1.__late_helper$_value = A.TestWorker$(t2, null);
              $async$goto = 3;
              return A._asyncAwait(J.start$0$x(t1._readLocal$0()), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute__closure1.prototype = {
    call$0() {
      var t1 = this.pool._readLocal$0(),
        t2 = J.getInterceptor$x(t1);
      t2.stop$0(t1);
      t2.super$Releasable$release(t1);
      t1 = this.worker._readLocal$0();
      t2 = J.getInterceptor$x(t1);
      t2.stop$0(t1);
      t2.super$Releasable$release(t1);
    },
    $signature: 2
  };
  A.execute__closure2.prototype = {
    call$0() {
      var t3,
        t1 = this.tc,
        t2 = this.pool;
      t1.group$2("- ValueTask", new A.execute___closure0(t1, t2));
      t1.group$2("- StreamTask", new A.execute___closure1(t1, t2));
      t3 = this.worker;
      t1.group$2("- CancelationToken", new A.execute___closure2(t1, t3, t2));
      t1.group$2("- TimeoutToken", new A.execute___closure3(t1, t3, t2));
      t1.group$2("- CompositeToken", new A.execute___closure4(t1, t3, t2));
    },
    $signature: 2
  };
  A.execute___closure0.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.pool;
      t1.test$2("- immediate with pool.cancel()", new A.execute____closure16(t2));
      t1.test$2("- immediate with pool.cancel(task)", new A.execute____closure17(t2));
      t1.test$2("- immediate with task.cancel()", new A.execute____closure18(t2));
      t1.test$2("- with pool.cancel()", new A.execute____closure19(t2));
      t1.test$2("- with pool.cancel(task)", new A.execute____closure20(t2));
      t1.test$2("- with task.cancel()", new A.execute____closure21(t2));
    },
    $signature: 2
  };
  A.execute____closure16.prototype = {
    call$0() {
      return this.$call$body$execute____closure7();
    },
    $call$body$execute____closure7() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t4, t5, _box_0, digits, i, tasks, t1, t2, t3;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              digits = A._setArrayType([], type$.JSArray_int);
              i = _box_0.errors = 0;
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              t1 = $async$self.pool;
              t2 = type$.Null;
              t3 = t1.__late_helper$_name;
              while (true) {
                t4 = t1.__late_helper$_value;
                if (t4 === t1)
                  A.throwExpression(A.LateError$localNI(t3));
                t5 = t4.concurrencySettings;
                if (!(i < 2 * (t5.maxWorkers * t5.maxParallel) + 1))
                  break;
                B.JSArray_methods.add$1(tasks, t4.delayed$1(i).then$1$1(new A.execute_____closure47(digits), t2).catchError$1(new A.execute_____closure48(_box_0)));
                ++i;
              }
              J.cancel$0$z(t1._readLocal$0());
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(tasks, false, type$.dynamic), $async$call$0);
            case 2:
              // returning from await.
              A.expect(digits, B.C__Empty, null);
              A.expect(_box_0.errors, B._OrderingMatcher_g8g, null);
              t2 = digits.length;
              t3 = _box_0.errors;
              t1 = t1._readLocal$0().concurrencySettings;
              A.expect(t2 + t3, new A._DeepMatcher(2 * (t1.maxWorkers * t1.maxParallel) + 1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure47.prototype = {
    call$1(value) {
      B.JSArray_methods.add$1(this.digits, A._asInt(value));
    },
    $signature: 30
  };
  A.execute_____closure48.prototype = {
    call$1(e) {
      ++this._box_0.errors;
    },
    $signature: 6
  };
  A.execute____closure17.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, value, ex, exception, t1, task, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.pool;
              task = t1._readLocal$0().delayedIdentityTask$1(3);
              J.cancel$2$z(t1._readLocal$0(), task, "Immediate cancelation");
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(task.__worker_value_task$_completer.future, $async$call$0);
            case 6:
              // returning from await.
              value = $async$result;
              t1 = A.unexpectedSuccess("delayedIdentityTask()", value);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.CanceledException._is(t1)) {
                ex = t1;
                A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("immediate cancelation"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure18.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, task, value, ex, t1, exception, task0, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              task0 = $async$self.pool._readLocal$0().delayedIdentityTask$1(3);
              task0.cancel$1(0, "Immediate cancelation");
              task = task0;
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(task.__worker_value_task$_completer.future, $async$call$0);
            case 6:
              // returning from await.
              value = $async$result;
              t1 = A.unexpectedSuccess("delayedIdentityTask()", value);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.CanceledException._is(t1)) {
                ex = t1;
                A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("immediate cancelation"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure19.prototype = {
    call$0() {
      return this.$call$body$execute____closure6();
    },
    $call$body$execute____closure6() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t4, t5, _box_1, digits, i, tasks, t1, t2, t3;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_1 = {};
              digits = A._setArrayType([], type$.JSArray_int);
              i = _box_1.errors = 0;
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              t1 = $async$self.pool;
              t2 = type$.Null;
              t3 = t1.__late_helper$_name;
              while (true) {
                t4 = t1.__late_helper$_value;
                if (t4 === t1)
                  A.throwExpression(A.LateError$localNI(t3));
                t5 = t4.concurrencySettings;
                if (!(i < 2 * (t5.maxWorkers * t5.maxParallel) + 1))
                  break;
                B.JSArray_methods.add$1(tasks, t4.delayed$1(i).then$1$1(new A.execute_____closure45(digits), t2).catchError$1(new A.execute_____closure46(_box_1)));
                ++i;
              }
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(200000), null, t2), $async$call$0);
            case 2:
              // returning from await.
              J.cancel$0$z(t1._readLocal$0());
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t2), $async$call$0);
            case 3:
              // returning from await.
              A.expect(digits.length, B._OrderingMatcher_g8g, null);
              A.expect(_box_1.errors, B._OrderingMatcher_g8g, null);
              t2 = digits.length;
              t3 = _box_1.errors;
              t1 = t1._readLocal$0().concurrencySettings;
              A.expect(t2 + t3, new A._DeepMatcher(2 * (t1.maxWorkers * t1.maxParallel) + 1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure45.prototype = {
    call$1(value) {
      B.JSArray_methods.add$1(this.digits, A._asInt(value));
    },
    $signature: 30
  };
  A.execute_____closure46.prototype = {
    call$1(e) {
      ++this._box_1.errors;
    },
    $signature: 6
  };
  A.execute____closure20.prototype = {
    call$0() {
      return this.$call$body$execute____closure5();
    },
    $call$body$execute____closure5() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, tasks, futures, t1, t2, t3, i, t4, t5, task, firstTask, lastTask, canceled, _box_2, digits;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_2 = {};
              digits = A._setArrayType([], type$.JSArray_int);
              _box_2.errors = 0;
              tasks = A._setArrayType([], type$.JSArray_ValueTask_dynamic);
              futures = A._setArrayType([], type$.JSArray_Future_dynamic);
              t1 = $async$self.pool;
              t2 = type$.Null;
              t3 = t1.__late_helper$_name;
              i = 0;
              while (true) {
                t4 = t1.__late_helper$_value;
                if (t4 === t1)
                  A.throwExpression(A.LateError$localNI(t3));
                t5 = t4.concurrencySettings;
                if (!(i < 3 * (t5.maxWorkers * t5.maxParallel) + 1))
                  break;
                task = t4.delayedIdentityTask$1(i);
                B.JSArray_methods.add$1(tasks, task);
                B.JSArray_methods.add$1(futures, task.__worker_value_task$_completer.future.then$1$1(new A.execute_____closure40(digits), t2).catchError$1(new A.execute_____closure41(_box_2)));
                ++i;
              }
              if (0 >= tasks.length) {
                $async$returnValue = A.ioore(tasks, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              firstTask = tasks[0];
              J.cancel$1$z(t1._readLocal$0(), firstTask);
              A.expect(firstTask.__worker_task$_canceled != null, B.C__IsTrue, null);
              A.expect(firstTask.get$isRunning(), B.C__IsFalse, null);
              A.expect(firstTask.get$isFinished(), B.C__IsFalse, null);
              t2 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(144000), null, t2), $async$call$0);
            case 3:
              // returning from await.
              t3 = t1._readLocal$0().concurrencySettings;
              t3 = 3 * (t3.maxWorkers * t3.maxParallel);
              if (!(t3 < tasks.length)) {
                $async$returnValue = A.ioore(tasks, t3);
                // goto return
                $async$goto = 1;
                break;
              }
              lastTask = tasks[t3];
              J.cancel$1$z(t1._readLocal$0(), lastTask);
              A.expect(lastTask.__worker_task$_canceled != null, B.C__IsTrue, null);
              if (lastTask._executed == null)
                t1 = B.Duration_0;
              else {
                t1 = lastTask.__worker_task$_canceled;
                if (t1 == null)
                  t1 = lastTask._finished;
                if (t1 == null)
                  t1 = A.microsecTimeStamp();
                t3 = lastTask._executed;
                t3.toString;
                t3 = A.Duration$(t1 - t3, 0, 0);
                t1 = t3;
              }
              A.expect(t1._duration, B._OrderingMatcher_Kvb, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_wait(futures, false, t2), $async$call$0);
            case 4:
              // returning from await.
              t2 = type$.bool_Function_ValueTask_dynamic;
              t1 = t2._as(new A.execute_____closure42());
              t3 = type$.WhereIterable_ValueTask_dynamic;
              canceled = new A.WhereIterable(tasks, t2._as(new A.execute_____closure43()), t3);
              t2 = t2._as(new A.execute_____closure44());
              A.expect(new A.WhereIterable(tasks, t1, t3), B.C__Empty, null);
              t1 = canceled.get$length(0);
              A.expect(t1, new A._DeepMatcher(2, 100), null);
              t1 = new A.WhereIterable(tasks, t2, t3).get$length(0);
              t2 = canceled.get$length(0);
              t3 = tasks.length;
              A.expect(t1 + t2, new A._DeepMatcher(t3, 100), null);
              t1 = _box_2.errors;
              A.expect(t1, new A._DeepMatcher(2, 100), null);
              t1 = digits.length;
              t2 = _box_2.errors;
              t3 = tasks.length;
              A.expect(t1 + t2, new A._DeepMatcher(t3, 100), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure40.prototype = {
    call$1(value) {
      B.JSArray_methods.add$1(this.digits, A._asInt(value));
    },
    $signature: 30
  };
  A.execute_____closure41.prototype = {
    call$1(e) {
      ++this._box_2.errors;
    },
    $signature: 6
  };
  A.execute_____closure42.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).get$isRunning();
    },
    $signature: 22
  };
  A.execute_____closure43.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).__worker_task$_canceled != null;
    },
    $signature: 22
  };
  A.execute_____closure44.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).get$isFinished();
    },
    $signature: 22
  };
  A.execute____closure21.prototype = {
    call$0() {
      return this.$call$body$execute____closure4();
    },
    $call$body$execute____closure4() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, tasks, futures, t1, t2, t3, i, t4, t5, task, _box_3, digits;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_3 = {};
              digits = A._setArrayType([], type$.JSArray_int);
              _box_3.errors = 0;
              tasks = A._setArrayType([], type$.JSArray_ValueTask_dynamic);
              futures = A._setArrayType([], type$.JSArray_Future_dynamic);
              t1 = $async$self.pool;
              t2 = type$.Null;
              t3 = t1.__late_helper$_name;
              i = 0;
              while (true) {
                t4 = t1.__late_helper$_value;
                if (t4 === t1)
                  A.throwExpression(A.LateError$localNI(t3));
                t5 = t4.concurrencySettings;
                if (!(i < 3 * (t5.maxWorkers * t5.maxParallel) + 1))
                  break;
                task = t4.delayedIdentityTask$1(i);
                B.JSArray_methods.add$1(tasks, task);
                B.JSArray_methods.add$1(futures, task.__worker_value_task$_completer.future.then$1$1(new A.execute_____closure35(digits), t2).catchError$1(new A.execute_____closure36(_box_3)));
                ++i;
              }
              if (0 >= tasks.length) {
                $async$returnValue = A.ioore(tasks, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              tasks[0].cancel$0(0);
              if (0 >= tasks.length) {
                $async$returnValue = A.ioore(tasks, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(tasks[0].__worker_task$_canceled != null, B.C__IsTrue, null);
              t2 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(120000), null, t2), $async$call$0);
            case 3:
              // returning from await.
              t3 = t1._readLocal$0().concurrencySettings;
              t3 = 3 * (t3.maxWorkers * t3.maxParallel);
              if (!(t3 < tasks.length)) {
                $async$returnValue = A.ioore(tasks, t3);
                // goto return
                $async$goto = 1;
                break;
              }
              tasks[t3].cancel$0(0);
              t3 = t1._readLocal$0().concurrencySettings;
              t3 = 3 * (t3.maxWorkers * t3.maxParallel);
              if (!(t3 < tasks.length)) {
                $async$returnValue = A.ioore(tasks, t3);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(tasks[t3].__worker_task$_canceled != null, B.C__IsTrue, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_wait(futures, false, t2), $async$call$0);
            case 4:
              // returning from await.
              t2 = type$.bool_Function_ValueTask_dynamic;
              t3 = type$.WhereIterable_ValueTask_dynamic;
              t4 = new A.WhereIterable(tasks, t2._as(new A.execute_____closure37()), t3).get$length(0);
              A.expect(t4, new A._DeepMatcher(2, 100), null);
              A.expect(new A.WhereIterable(tasks, t2._as(new A.execute_____closure38()), t3), B.C__Empty, null);
              t2 = new A.WhereIterable(tasks, t2._as(new A.execute_____closure39()), t3).get$length(0);
              t3 = t1._readLocal$0().concurrencySettings;
              A.expect(t2, new A._DeepMatcher(3 * (t3.maxWorkers * t3.maxParallel) - 1, 100), null);
              t2 = _box_3.errors;
              A.expect(t2, new A._DeepMatcher(2, 100), null);
              A.expect(digits.length, B._OrderingMatcher_g8g, null);
              t2 = digits.length;
              t3 = _box_3.errors;
              t1 = t1._readLocal$0().concurrencySettings;
              A.expect(t2 + t3, new A._DeepMatcher(3 * (t1.maxWorkers * t1.maxParallel) + 1, 100), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure35.prototype = {
    call$1(value) {
      B.JSArray_methods.add$1(this.digits, A._asInt(value));
    },
    $signature: 30
  };
  A.execute_____closure36.prototype = {
    call$1(e) {
      ++this._box_3.errors;
    },
    $signature: 6
  };
  A.execute_____closure37.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).__worker_task$_canceled != null;
    },
    $signature: 22
  };
  A.execute_____closure38.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).get$isRunning();
    },
    $signature: 22
  };
  A.execute_____closure39.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).get$isFinished();
    },
    $signature: 22
  };
  A.execute___closure1.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.pool;
      t1.test$2("- immediate with pool.cancel()", new A.execute____closure10(t2));
      t1.test$2("- immediate with pool.cancel(task)", new A.execute____closure11(t2));
      t1.test$2("- immediate with task.cancel()", new A.execute____closure12(t2));
      t1.test$2("- with pool.cancel()", new A.execute____closure13(t2));
      t1.test$2("- with pool.cancel(task)", new A.execute____closure14(t2));
      t1.test$2("- with task.cancel()", new A.execute____closure15(t2));
    },
    $signature: 2
  };
  A.execute____closure10.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t11, done, t12, t13, digits, errors, futures, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_Exception);
              futures = A._setArrayType([], type$.JSArray_Future_dynamic);
              t1 = $async$self.pool;
              t2 = type$.nullable_void_Function;
              t3 = B.JSArray_methods.get$add(digits);
              t4 = type$.void_Function_int;
              t5 = B.JSArray_methods.get$add(errors);
              t6 = type$.void_Function_Exception;
              t7 = type$.void_Function_$opt_dynamic;
              t8 = type$._Future_dynamic;
              t9 = type$._AsyncCompleter_dynamic;
              t10 = t1.__late_helper$_name;
              i = 0;
              while (true) {
                t11 = t1.__late_helper$_value;
                if (t11 === t1)
                  A.throwExpression(A.LateError$localNI(t10));
                t11 = t11.concurrencySettings;
                if (!(i < 2 * (t11.maxWorkers * t11.maxParallel) + 1))
                  break;
                t11 = new A._Future($.Zone__current, t8);
                done = new A._AsyncCompleter(t11, t9);
                B.JSArray_methods.add$1(futures, t11);
                t11 = t1.__late_helper$_value;
                if (t11 === t1)
                  A.throwExpression(A.LateError$localNI(t10));
                t11 = t11.finiteTask$1(100).__WorkerStreamTask__controller_F;
                t11 === $ && A.throwLateFieldNI("_controller");
                t12 = A._instanceType(t11);
                t4._as(t3);
                t6._as(t5);
                t13 = t7._as(done.get$complete(done));
                t12._eval$1("_ControllerStream<1>")._eval$1("~(1)?")._as(t3);
                t2._as(t13);
                t11._subscribe$4(t12._eval$1("~(1)?")._as(t3), t5, t13, false);
                ++i;
              }
              J.cancel$2$z(t1._readLocal$0(), null, "Immediate cancelation");
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(futures, false, type$.dynamic), $async$call$0);
            case 2:
              // returning from await.
              A.expect(digits, B.C__Empty, null);
              t2 = errors.length;
              t3 = t1._readLocal$0().concurrencySettings;
              A.expect(t2, new A._DeepMatcher(2 * (t3.maxWorkers * t3.maxParallel) + 1, 100), null);
              t2 = type$.WhereTypeIterable_CanceledException;
              t3 = new A.WhereTypeIterable(errors, t2).get$length(0);
              t1 = t1._readLocal$0().concurrencySettings;
              A.expect(t3, new A._DeepMatcher(2 * (t1.maxWorkers * t1.maxParallel) + 1, 100), null);
              A.expect(new A.WhereTypeIterable(errors, t2).every$1(0, new A.execute_____closure34()), B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure34.prototype = {
    call$1(e) {
      type$.CanceledException._as(e);
      return B.JSString_methods.contains$1(e.get$message(e).toLowerCase(), "immediate cancelation");
    },
    $signature: 131
  };
  A.execute____closure11.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t4, t5, digits, errors, t1, done, t2, task, t3;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_Exception);
              t1 = new A._Future($.Zone__current, type$._Future_dynamic);
              done = new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic);
              t2 = $async$self.pool;
              task = t2._readLocal$0().finiteTask$1(100);
              t3 = task.__WorkerStreamTask__controller_F;
              t3 === $ && A.throwLateFieldNI("_controller");
              t4 = type$.void_Function_int._as(B.JSArray_methods.get$add(digits));
              t5 = type$.void_Function_Exception._as(B.JSArray_methods.get$add(errors));
              new A._ControllerStream(t3, A._instanceType(t3)._eval$1("_ControllerStream<1>")).listen$3$onDone$onError(t4, type$.void_Function_$opt_dynamic._as(done.get$complete(done)), t5);
              J.cancel$2$z(t2._readLocal$0(), task, "Immediate cancelation");
              $async$goto = 3;
              return A._asyncAwait(t1, $async$call$0);
            case 3:
              // returning from await.
              A.expect(digits, B.C__Empty, null);
              t1 = errors.length;
              A.expect(t1, new A._DeepMatcher(1, 100), null);
              if (0 >= errors.length) {
                $async$returnValue = A.ioore(errors, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(errors[0], new A.TypeMatcher(type$.TypeMatcher_CanceledException), null);
              if (0 >= errors.length) {
                $async$returnValue = A.ioore(errors, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = type$.CanceledException._as(errors[0]);
              t1 = t1.get$message(t1);
              A.expect(t1, new A._StringEqualsMatcher("Immediate cancelation"), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure12.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t3, t4, digits, errors, t1, done, task, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_Exception);
              t1 = new A._Future($.Zone__current, type$._Future_dynamic);
              done = new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic);
              task = $async$self.pool._readLocal$0().finiteTask$1(100);
              t2 = task.__WorkerStreamTask__controller_F;
              t2 === $ && A.throwLateFieldNI("_controller");
              t3 = type$.void_Function_int._as(B.JSArray_methods.get$add(digits));
              t4 = type$.void_Function_Exception._as(B.JSArray_methods.get$add(errors));
              new A._ControllerStream(t2, A._instanceType(t2)._eval$1("_ControllerStream<1>")).listen$3$onDone$onError(t3, type$.void_Function_$opt_dynamic._as(done.get$complete(done)), t4);
              task.super$WorkerTask$cancel(0, "Immediate cancelation");
              task._done$1(task._canceledException);
              $async$goto = 3;
              return A._asyncAwait(t1, $async$call$0);
            case 3:
              // returning from await.
              A.expect(digits, B.C__Empty, null);
              t1 = errors.length;
              A.expect(t1, new A._DeepMatcher(1, 100), null);
              if (0 >= errors.length) {
                $async$returnValue = A.ioore(errors, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(errors[0], new A.TypeMatcher(type$.TypeMatcher_CanceledException), null);
              if (0 >= errors.length) {
                $async$returnValue = A.ioore(errors, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = type$.CanceledException._as(errors[0]);
              A.expect(t1.get$message(t1).toLowerCase(), new A._Contains("immediate cancelation"), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure13.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t10, completer, t11, t12, t13, t14, map, fullExecution, partialExecution, fullCancelation, severalErrors, t1, t2, results, tasks, t3, t4, t5, t6, t7, t8, t9, i;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.int;
              t2 = type$.List_dynamic;
              results = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              t3 = $async$self.pool;
              t4 = type$.nullable_void_Function;
              t5 = type$.void_Function_dynamic;
              t6 = type$.void_Function_$opt_dynamic;
              t7 = type$._Future_dynamic;
              t8 = type$._AsyncCompleter_dynamic;
              t9 = t3.__late_helper$_name;
              i = 0;
              while (true) {
                t10 = t3.__late_helper$_value;
                if (t10 === t3)
                  A.throwExpression(A.LateError$localNI(t9));
                t10 = t10.concurrencySettings;
                if (!(i < 2 * (t10.maxWorkers * t10.maxParallel) + 1))
                  break;
                t10 = new A._Future($.Zone__current, t7);
                completer = new A._AsyncCompleter(t10, t8);
                B.JSArray_methods.add$1(tasks, t10);
                t10 = t3.__late_helper$_value;
                if (t10 === t3)
                  A.throwExpression(A.LateError$localNI(t9));
                t10 = t10.finite$1(2 * i + 1);
                t11 = results.$index(0, i);
                if (t11 == null) {
                  t11 = [];
                  results.$indexSet(0, i, t11);
                }
                t11 = t5._as(J.get$add$ax(t11));
                t12 = results.$index(0, i);
                if (t12 == null) {
                  t12 = [];
                  results.$indexSet(0, i, t12);
                }
                t12 = t5._as(J.get$add$ax(t12));
                t13 = t6._as(completer.get$complete(completer));
                t14 = t10.$ti;
                t14._eval$1("~(1)?")._as(t11);
                t4._as(t13);
                t10._controller._subscribe$4(t14._eval$1("~(1)?")._as(t11), t12, t13, false);
                ++i;
              }
              t4 = tasks.length;
              t5 = t3._readLocal$0().concurrencySettings;
              A.expect(t4, new A._DeepMatcher(2 * (t5.maxWorkers * t5.maxParallel) + 1, 100), null);
              t4 = tasks.length;
              t5 = A.Iterable_Iterable$generate(t4, null, t1);
              t4 = A.Iterable_Iterable$generate(t4, new A.execute_____closure29(), t2);
              map = A.LinkedHashMap_LinkedHashMap(null, null, t1, t2);
              A.MapBase__fillMapWithIterables(map, t5, t4);
              A.expect(results, new A._DeepMatcher(map, 100), null);
              t1 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(100000), null, t1), $async$call$0);
            case 2:
              // returning from await.
              J.cancel$0$z(t3._readLocal$0());
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t1), $async$call$0);
            case 3:
              // returning from await.
              t1 = results._length;
              t3 = tasks.length;
              A.expect(t1, new A._DeepMatcher(t3, 100), null);
              t1 = results.get$values(0);
              t2 = A._instanceType(t1);
              fullExecution = new A.WhereIterable(t1, t2._eval$1("bool(Iterable.E)")._as(new A.execute_____closure30()), t2._eval$1("WhereIterable<Iterable.E>")).get$length(0);
              t2 = results.get$values(0);
              t1 = A._instanceType(t2);
              partialExecution = new A.WhereIterable(t2, t1._eval$1("bool(Iterable.E)")._as(new A.execute_____closure31()), t1._eval$1("WhereIterable<Iterable.E>")).get$length(0);
              t1 = results.get$values(0);
              t2 = A._instanceType(t1);
              fullCancelation = new A.WhereIterable(t1, t2._eval$1("bool(Iterable.E)")._as(new A.execute_____closure32()), t2._eval$1("WhereIterable<Iterable.E>")).get$length(0);
              t2 = results.get$values(0);
              t1 = A._instanceType(t2);
              severalErrors = new A.WhereIterable(t2, t1._eval$1("bool(Iterable.E)")._as(new A.execute_____closure33()), t1._eval$1("WhereIterable<Iterable.E>")).get$length(0);
              A.expect(fullExecution, B._OrderingMatcher_g8g, "full exec");
              A.expect(partialExecution, B._OrderingMatcher_g8g, "partial");
              A.expect(fullCancelation, B._OrderingMatcher_g8g, "full cancel");
              A.expect(severalErrors, B._OrderingMatcher_Kvb, "multiple errors");
              t1 = tasks.length;
              A.expect(fullExecution + partialExecution + fullCancelation, new A._DeepMatcher(t1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure29.prototype = {
    call$1(_) {
      A._asInt(_);
      return [];
    },
    $signature: 132
  };
  A.execute_____closure30.prototype = {
    call$1(r) {
      return J.every$1$ax(type$.List_dynamic._as(r), new A.execute______closure2());
    },
    $signature: 33
  };
  A.execute______closure2.prototype = {
    call$1(e) {
      return A._isInt(e);
    },
    $signature: 9
  };
  A.execute_____closure31.prototype = {
    call$1(r) {
      var t1;
      type$.List_dynamic._as(r);
      t1 = J.getInterceptor$ax(r);
      return t1.any$1(r, new A.execute______closure0()) && t1.any$1(r, new A.execute______closure1());
    },
    $signature: 33
  };
  A.execute______closure0.prototype = {
    call$1(e) {
      return A._isInt(e);
    },
    $signature: 9
  };
  A.execute______closure1.prototype = {
    call$1(e) {
      return type$.CanceledException._is(e);
    },
    $signature: 9
  };
  A.execute_____closure32.prototype = {
    call$1(r) {
      return J.every$1$ax(type$.List_dynamic._as(r), new A.execute______closure());
    },
    $signature: 33
  };
  A.execute______closure.prototype = {
    call$1(e) {
      return type$.CanceledException._is(e);
    },
    $signature: 9
  };
  A.execute_____closure33.prototype = {
    call$1(r) {
      return J.whereType$1$0$ax(type$.List_dynamic._as(r), type$.CanceledException).get$length(0) > 1;
    },
    $signature: 33
  };
  A.execute____closure14.prototype = {
    call$0() {
      return this.$call$body$execute____closure3();
    },
    $call$body$execute____closure3() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, tasks, t1, started, futures, t2, t3, t4, t5, i, t6, t7, i0, task, t8, t9, _box_4, $status;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_4 = {};
              $status = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.String);
              _box_4.errors = 0;
              tasks = A._setArrayType([], type$.JSArray_StreamTask_dynamic);
              t1 = type$.JSArray_Future_dynamic;
              started = A._setArrayType([], t1);
              futures = A._setArrayType([], t1);
              t1 = $async$self.pool;
              t2 = type$.nullable_void_Function;
              t3 = type$._Future_dynamic;
              t4 = type$._AsyncCompleter_dynamic;
              t5 = t1.__late_helper$_name;
              i = 0;
              while (true) {
                t6 = t1.__late_helper$_value;
                if (t6 === t1)
                  A.throwExpression(A.LateError$localNI(t5));
                t7 = t6.concurrencySettings;
                if (!(i < 2 * (t7.maxWorkers * t7.maxParallel) + 1))
                  break;
                i0 = i + 1;
                task = t6.finiteTask$1(i0 * 2);
                B.JSArray_methods.add$1(tasks, task);
                t6 = new A._Future($.Zone__current, t3);
                B.JSArray_methods.add$1(started, t6);
                t7 = new A._Future($.Zone__current, t3);
                B.JSArray_methods.add$1(futures, t7);
                $status.$indexSet(0, i, "not started");
                t8 = task.__WorkerStreamTask__controller_F;
                t8 === $ && A.throwLateFieldNI("_controller");
                t9 = A._instanceType(t8);
                t6 = t9._eval$1("_ControllerStream<1>")._eval$1("~(1)?")._as(new A.execute_____closure19($status, i, new A._AsyncCompleter(t6, t4)));
                t7 = t2._as(new A.execute_____closure20($status, i, new A._AsyncCompleter(t7, t4)));
                t8._subscribe$4(t9._eval$1("~(1)?")._as(t6), new A.execute_____closure21(_box_4, $status, i), t7, false);
                i = i0;
              }
              if (0 >= started.length) {
                $async$returnValue = A.ioore(started, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait(started[0], $async$call$0);
            case 3:
              // returning from await.
              t2 = t1._readLocal$0();
              if (0 >= tasks.length) {
                $async$returnValue = A.ioore(tasks, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              J.cancel$1$z(t2, tasks[0]);
              if (0 >= tasks.length) {
                $async$returnValue = A.ioore(tasks, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(tasks[0].__worker_task$_canceled != null, B.C__IsTrue, null);
              t2 = type$.dynamic;
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, t2), $async$call$0);
            case 4:
              // returning from await.
              t3 = t1._readLocal$0();
              t4 = t1._readLocal$0().concurrencySettings;
              t4 = 2 * (t4.maxWorkers * t4.maxParallel);
              if (!(t4 < tasks.length)) {
                $async$returnValue = A.ioore(tasks, t4);
                // goto return
                $async$goto = 1;
                break;
              }
              J.cancel$1$z(t3, tasks[t4]);
              t4 = t1._readLocal$0().concurrencySettings;
              t4 = 2 * (t4.maxWorkers * t4.maxParallel);
              if (!(t4 < tasks.length)) {
                $async$returnValue = A.ioore(tasks, t4);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(tasks[t4].__worker_task$_canceled != null, B.C__IsTrue, null);
              $async$goto = 5;
              return A._asyncAwait(A.Future_wait(futures, false, t2), $async$call$0);
            case 5:
              // returning from await.
              t2 = type$.bool_Function_StreamTask_dynamic;
              t4 = type$.WhereIterable_StreamTask_dynamic;
              t3 = new A.WhereIterable(tasks, t2._as(new A.execute_____closure22()), t4).get$length(0);
              A.expect(t3, new A._DeepMatcher(2, 100), null);
              A.expect(new A.WhereIterable(tasks, t2._as(new A.execute_____closure23()), t4), B.C__Empty, null);
              t2 = new A.WhereIterable(tasks, t2._as(new A.execute_____closure24()), t4).get$length(0);
              t3 = t1._readLocal$0().concurrencySettings;
              A.expect(t2, new A._DeepMatcher(2 * (t3.maxWorkers * t3.maxParallel) - 1, 100), null);
              t2 = _box_4.errors;
              A.expect(t2, new A._DeepMatcher(2, 100), null);
              t2 = $status.get$values(0);
              t3 = A._instanceType(t2);
              A.expect(new A.WhereIterable(t2, t3._eval$1("bool(Iterable.E)")._as(new A.execute_____closure25()), t3._eval$1("WhereIterable<Iterable.E>")), B.C__Empty, null);
              t3 = $status.get$values(0);
              t2 = A._instanceType(t3);
              t2 = new A.WhereIterable(t3, t2._eval$1("bool(Iterable.E)")._as(new A.execute_____closure26()), t2._eval$1("WhereIterable<Iterable.E>")).get$length(0);
              A.expect(t2, new A._DeepMatcher(1, 100), null);
              t2 = $status.get$values(0);
              t3 = A._instanceType(t2);
              t3 = new A.WhereIterable(t2, t3._eval$1("bool(Iterable.E)")._as(new A.execute_____closure27()), t3._eval$1("WhereIterable<Iterable.E>")).get$length(0);
              A.expect(t3, new A._DeepMatcher(1, 100), null);
              t2 = $status.get$values(0);
              t3 = A._instanceType(t2);
              t3 = new A.WhereIterable(t2, t3._eval$1("bool(Iterable.E)")._as(new A.execute_____closure28()), t3._eval$1("WhereIterable<Iterable.E>")).get$length(0);
              t1 = t1._readLocal$0().concurrencySettings;
              t2 = _box_4.errors;
              A.expect(t3, new A._DeepMatcher(2 * (t1.maxWorkers * t1.maxParallel) + 1 - t2, 100), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure19.prototype = {
    call$1($event) {
      var t1;
      A._asInt($event);
      this.status.$indexSet(0, this.i, "started");
      t1 = this.start;
      if ((t1.future._state & 30) === 0)
        t1.complete$0(0);
    },
    $signature: 18
  };
  A.execute_____closure21.prototype = {
    call$1(e) {
      var t1 = this.status,
        t2 = this.i;
      t1.$indexSet(0, t2, t1.$index(0, t2) === "started" ? "interrupted" : "canceled");
      ++this._box_4.errors;
    },
    $signature: 6
  };
  A.execute_____closure20.prototype = {
    call$0() {
      var t1 = this.status,
        t2 = this.i;
      if (t1.$index(0, t2) === "started")
        t1.$indexSet(0, t2, "completed");
      this.completer.complete$0(0);
    },
    $signature: 1
  };
  A.execute_____closure22.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t).__worker_task$_canceled != null;
    },
    $signature: 27
  };
  A.execute_____closure23.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t).get$isRunning();
    },
    $signature: 27
  };
  A.execute_____closure24.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t).get$isFinished();
    },
    $signature: 27
  };
  A.execute_____closure25.prototype = {
    call$1(s) {
      return A._asString(s) === "started";
    },
    $signature: 3
  };
  A.execute_____closure26.prototype = {
    call$1(s) {
      return A._asString(s) === "interrupted";
    },
    $signature: 3
  };
  A.execute_____closure27.prototype = {
    call$1(s) {
      return A._asString(s) === "canceled";
    },
    $signature: 3
  };
  A.execute_____closure28.prototype = {
    call$1(s) {
      return A._asString(s) === "completed";
    },
    $signature: 3
  };
  A.execute____closure15.prototype = {
    call$0() {
      return this.$call$body$execute____closure2();
    },
    $call$body$execute____closure2() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, tasks, futures, t3, t4, t5, i, t6, t7, task, t8, t9, _box_5, $status, t1, t2, firstTaskStarted;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_5 = {};
              $status = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.String);
              t1 = type$._Future_dynamic;
              t2 = type$._AsyncCompleter_dynamic;
              firstTaskStarted = new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2);
              _box_5.errors = 0;
              tasks = A._setArrayType([], type$.JSArray_StreamTask_dynamic);
              futures = A._setArrayType([], type$.JSArray_Future_dynamic);
              t3 = $async$self.pool;
              t4 = type$.nullable_void_Function;
              t5 = t3.__late_helper$_name;
              i = 0;
              while (true) {
                t6 = t3.__late_helper$_value;
                if (t6 === t3)
                  A.throwExpression(A.LateError$localNI(t5));
                t7 = t6.concurrencySettings;
                if (!(i < 3 * (t7.maxWorkers * t7.maxParallel) + 1))
                  break;
                task = t6.finiteTask$1(i + 2);
                B.JSArray_methods.add$1(tasks, task);
                t6 = new A._Future($.Zone__current, t1);
                B.JSArray_methods.add$1(futures, t6);
                $status.$indexSet(0, i, "not started");
                t7 = task.__WorkerStreamTask__controller_F;
                t7 === $ && A.throwLateFieldNI("_controller");
                t8 = A._instanceType(t7);
                t9 = t8._eval$1("_ControllerStream<1>")._eval$1("~(1)?")._as(new A.execute_____closure9($status, i, firstTaskStarted));
                t6 = t4._as(new A.execute_____closure10($status, i, new A._AsyncCompleter(t6, t2)));
                t7._subscribe$4(t8._eval$1("~(1)?")._as(t9), new A.execute_____closure11(_box_5, $status, i), t6, false);
                ++i;
              }
              $async$goto = 3;
              return A._asyncAwait(firstTaskStarted.future, $async$call$0);
            case 3:
              // returning from await.
              if (0 >= tasks.length) {
                $async$returnValue = A.ioore(tasks, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = tasks[0];
              t1.super$WorkerTask$cancel(0, null);
              t1._done$1(t1._canceledException);
              if (0 >= tasks.length) {
                $async$returnValue = A.ioore(tasks, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(tasks[0].__worker_task$_canceled != null, B.C__IsTrue, null);
              t1 = type$.dynamic;
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(200000), null, t1), $async$call$0);
            case 4:
              // returning from await.
              t2 = t3._readLocal$0().concurrencySettings;
              t2 = 3 * (t2.maxWorkers * t2.maxParallel);
              if (!(t2 < tasks.length)) {
                $async$returnValue = A.ioore(tasks, t2);
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = tasks[t2];
              t2.super$WorkerTask$cancel(0, null);
              t2._done$1(t2._canceledException);
              t2 = t3._readLocal$0().concurrencySettings;
              t2 = 3 * (t2.maxWorkers * t2.maxParallel);
              if (!(t2 < tasks.length)) {
                $async$returnValue = A.ioore(tasks, t2);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(tasks[t2].__worker_task$_canceled != null, B.C__IsTrue, null);
              $async$goto = 5;
              return A._asyncAwait(A.Future_wait(futures, false, t1), $async$call$0);
            case 5:
              // returning from await.
              t1 = type$.bool_Function_StreamTask_dynamic;
              t2 = type$.WhereIterable_StreamTask_dynamic;
              t4 = new A.WhereIterable(tasks, t1._as(new A.execute_____closure12()), t2).get$length(0);
              A.expect(t4, new A._DeepMatcher(2, 100), null);
              A.expect(new A.WhereIterable(tasks, t1._as(new A.execute_____closure13()), t2), B.C__Empty, null);
              t1 = new A.WhereIterable(tasks, t1._as(new A.execute_____closure14()), t2).get$length(0);
              t2 = t3._readLocal$0().concurrencySettings;
              A.expect(t1, new A._DeepMatcher(3 * (t2.maxWorkers * t2.maxParallel) - 1, 100), null);
              t1 = _box_5.errors;
              A.expect(t1, new A._DeepMatcher(2, 100), null);
              t1 = $status.get$values(0);
              t2 = A._instanceType(t1);
              A.expect(new A.WhereIterable(t1, t2._eval$1("bool(Iterable.E)")._as(new A.execute_____closure15()), t2._eval$1("WhereIterable<Iterable.E>")), B.C__Empty, null);
              t2 = $status.get$values(0);
              t1 = A._instanceType(t2);
              t1 = new A.WhereIterable(t2, t1._eval$1("bool(Iterable.E)")._as(new A.execute_____closure16()), t1._eval$1("WhereIterable<Iterable.E>")).get$length(0);
              A.expect(t1, new A._DeepMatcher(1, 100), null);
              t1 = $status.get$values(0);
              t2 = A._instanceType(t1);
              t2 = new A.WhereIterable(t1, t2._eval$1("bool(Iterable.E)")._as(new A.execute_____closure17()), t2._eval$1("WhereIterable<Iterable.E>")).get$length(0);
              A.expect(t2, new A._DeepMatcher(1, 100), null);
              t1 = $status.get$values(0);
              t2 = A._instanceType(t1);
              t2 = new A.WhereIterable(t1, t2._eval$1("bool(Iterable.E)")._as(new A.execute_____closure18()), t2._eval$1("WhereIterable<Iterable.E>")).get$length(0);
              t3 = t3._readLocal$0().concurrencySettings;
              t1 = _box_5.errors;
              A.expect(t2, new A._DeepMatcher(3 * (t3.maxWorkers * t3.maxParallel) + 1 - t1, 100), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure9.prototype = {
    call$1($event) {
      var t1;
      A._asInt($event);
      t1 = this.i;
      this.status.$indexSet(0, t1, "started");
      if (t1 === 0)
        this.firstTaskStarted.complete$0(0);
    },
    $signature: 18
  };
  A.execute_____closure11.prototype = {
    call$1(e) {
      var t1 = this.status,
        t2 = this.i;
      t1.$indexSet(0, t2, t1.$index(0, t2) === "started" ? "interrupted" : "canceled");
      ++this._box_5.errors;
    },
    $signature: 6
  };
  A.execute_____closure10.prototype = {
    call$0() {
      var t1 = this.status,
        t2 = this.i;
      if (t1.$index(0, t2) === "started")
        t1.$indexSet(0, t2, "completed");
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.complete$0(0);
    },
    $signature: 1
  };
  A.execute_____closure12.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t).__worker_task$_canceled != null;
    },
    $signature: 27
  };
  A.execute_____closure13.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t).get$isRunning();
    },
    $signature: 27
  };
  A.execute_____closure14.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t).get$isFinished();
    },
    $signature: 27
  };
  A.execute_____closure15.prototype = {
    call$1(s) {
      return A._asString(s) === "started";
    },
    $signature: 3
  };
  A.execute_____closure16.prototype = {
    call$1(s) {
      return A._asString(s) === "interrupted";
    },
    $signature: 3
  };
  A.execute_____closure17.prototype = {
    call$1(s) {
      return A._asString(s) === "canceled";
    },
    $signature: 3
  };
  A.execute_____closure18.prototype = {
    call$1(s) {
      return A._asString(s) === "completed";
    },
    $signature: 3
  };
  A.execute___closure2.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.worker;
      t1.test$2("- finite() worker", new A.execute____closure7(t2));
      t1.test$2("- infinite() worker", new A.execute____closure8(t2));
      t1.test$2("- finite() pool", new A.execute____closure9(this.pool));
    },
    $signature: 2
  };
  A.execute____closure7.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, n, t1, t2, exception, digits, count, $N, cancelation, timer, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              count = 0;
              $N = 20;
              cancelation = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              timer = A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(20000 * A._asNum($N))), J.get$cancel$z(cancelation));
              A.expect(cancelation.get$exception() != null, B.C__IsFalse, null);
              $async$handler = 4;
              t1 = $async$self.worker._readLocal$0();
              t2 = $N;
              if (typeof t2 !== "number") {
                $async$returnValue = A.iae(t2);
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = new A._StreamIterator(A.checkNotNullable(t1.finite$2(50 * t2, cancelation), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 7;
            case 10:
              // for condition
              $async$temp1 = A;
              $async$goto = 12;
              return A._asyncAwait(t2.moveNext$0(), $async$call$0);
            case 12:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 11;
                break;
              }
              n = t2.get$current(0);
              J.add$1$ax(digits, n);
              t1 = count;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 8;
                break;
              }
              count = t1 + 1;
              // goto for condition
              $async$goto = 10;
              break;
            case 11:
              // after for
              $async$next.push(9);
              // goto finally
              $async$goto = 8;
              break;
            case 7:
              // uncaught
              $async$next = [4];
            case 8:
              // finally
              $async$handler = 4;
              $async$goto = 13;
              return A._asyncAwait(t2.cancel$0(0), $async$call$0);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 9:
              // after finally
              t1 = A.unexpectedSuccess("finite()", null);
              throw A.wrapException(t1);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (!type$.CanceledException._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              timer.cancel$0(0);
              A.expect(cancelation.get$exception() != null, B.C__IsTrue, null);
              A.expect(count, B._OrderingMatcher_g8g, null);
              A.expect(count, new A._OrderingMatcher($N, true, true, false, "a value less than or equal to", true), null);
              t1 = A.Iterable_Iterable$generate(count, null, type$.dynamic);
              A.expect(digits, new A._DeepMatcher(t1, 100), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure8.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, n, t1, t2, exception, digits, count, cancelation, timer, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              count = 0;
              cancelation = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              timer = A.Timer_Timer(new A.Duration(400000), J.get$cancel$z(cancelation));
              $async$handler = 4;
              t1 = J.stream$1$2$token$z($async$self.worker._readLocal$0(), 42, type$.nullable_CancelationToken._as(cancelation), type$.dynamic);
              t2 = A._instanceType(t1);
              t2 = new A._StreamIterator(A.checkNotNullable(new A._MapStream(t2._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t1, t2._eval$1("_MapStream<Stream.T,int>")), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 7;
            case 10:
              // for condition
              $async$temp1 = A;
              $async$goto = 12;
              return A._asyncAwait(t2.moveNext$0(), $async$call$0);
            case 12:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 11;
                break;
              }
              n = t2.get$current(0);
              J.add$1$ax(digits, n);
              t1 = count;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 8;
                break;
              }
              count = t1 + 1;
              // goto for condition
              $async$goto = 10;
              break;
            case 11:
              // after for
              $async$next.push(9);
              // goto finally
              $async$goto = 8;
              break;
            case 7:
              // uncaught
              $async$next = [4];
            case 8:
              // finally
              $async$handler = 4;
              $async$goto = 13;
              return A._asyncAwait(t2.cancel$0(0), $async$call$0);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 9:
              // after finally
              t1 = A.unexpectedSuccess("infinite()", null);
              throw A.wrapException(t1);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (!type$.CanceledException._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              timer.cancel$0(0);
              A.expect(cancelation.get$exception() != null, B.C__IsTrue, null);
              A.expect(count, B._OrderingMatcher_g8g, null);
              A.expect(count, new A._OrderingMatcher(20, true, true, false, "a value less than or equal to", true), null);
              t1 = A.Iterable_Iterable$generate(count, null, type$.dynamic);
              A.expect(digits, new A._DeepMatcher(t1, 100), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure9.prototype = {
    call$0() {
      return this.$call$body$execute____closure1();
    },
    $call$body$execute____closure1() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, i, tasks, t1, t2, t3, t4, t5, t6, _box_6, cancelation;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_6 = {};
              cancelation = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              A.Future_Future$delayed(new A.Duration(720000), cancelation.get$cancel(cancelation), type$.void);
              i = _box_6.errors = _box_6.success = 0;
              tasks = A._setArrayType([], type$.JSArray_Future_List_int);
              t1 = $async$self.pool;
              t2 = type$.List_int;
              t3 = type$.Object;
              t4 = t1.__late_helper$_name;
              while (true) {
                t5 = t1.__late_helper$_value;
                if (t5 === t1)
                  A.throwExpression(A.LateError$localNI(t4));
                t6 = t5.concurrencySettings;
                if (!(i < 2 * (t6.maxWorkers * t6.maxParallel) + 1))
                  break;
                B.JSArray_methods.add$1(tasks, A.FutureExtensions_onError(t5.finite$2(20, cancelation).toList$0(0).then$1$1(new A.execute_____closure7(_box_6), t2), new A.execute_____closure8(_box_6), t2, t3));
                ++i;
              }
              A.expect(_box_6.success, B._OrderingMatcher_Kvb, null);
              A.expect(_box_6.errors, B._OrderingMatcher_Kvb, null);
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, type$.dynamic), $async$call$0);
            case 2:
              // returning from await.
              A.expect(t1._readLocal$0()._worker_pool$_queue.get$length(0), B._OrderingMatcher_g8g, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t2), $async$call$0);
            case 3:
              // returning from await.
              A.expect(t1._readLocal$0()._worker_pool$_queue.get$length(0), B._OrderingMatcher_Kvb, null);
              A.expect(cancelation.get$exception() != null, B.C__IsTrue, null);
              t2 = _box_6.success;
              t3 = t1._readLocal$0().concurrencySettings;
              A.expect(t2, new A._DeepMatcher(t3.maxWorkers * t3.maxParallel, 100), null);
              t2 = _box_6.success;
              t3 = _box_6.errors;
              t4 = tasks.length;
              A.expect(t2 + t3, new A._DeepMatcher(t4, 100), null);
              J.cancel$0$z(t1._readLocal$0());
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure7.prototype = {
    call$1(list) {
      type$.List_int._as(list);
      ++this._box_6.success;
      return list;
    },
    $signature: 38
  };
  A.execute_____closure8.prototype = {
    call$2(ex, st) {
      ++this._box_6.errors;
      return A._setArrayType([], type$.JSArray_int);
    },
    $signature: 47
  };
  A.execute___closure3.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.worker;
      t1.test$2("- finite() worker", new A.execute____closure4(t2));
      t1.test$2("- infinite() worker", new A.execute____closure5(t2));
      t1.test$2("- finite() pool", new A.execute____closure6(this.pool));
    },
    $signature: 2
  };
  A.execute____closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, n, t1, t2, exception, digits, count, $N, timeout, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              count = 0;
              $N = 10;
              timeout = A.TimeoutToken$(new A.Duration(B.JSNumber_methods.round$0(20000 * A._asNum($N))));
              $async$handler = 4;
              t1 = $async$self.worker._readLocal$0();
              t2 = $N;
              if (typeof t2 !== "number") {
                $async$returnValue = A.iae(t2);
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = new A._StreamIterator(A.checkNotNullable(t1.finite$2(50 * t2, timeout), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 7;
            case 10:
              // for condition
              $async$temp1 = A;
              $async$goto = 12;
              return A._asyncAwait(t2.moveNext$0(), $async$call$0);
            case 12:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 11;
                break;
              }
              n = t2.get$current(0);
              J.add$1$ax(digits, n);
              t1 = count;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 8;
                break;
              }
              count = t1 + 1;
              // goto for condition
              $async$goto = 10;
              break;
            case 11:
              // after for
              $async$next.push(9);
              // goto finally
              $async$goto = 8;
              break;
            case 7:
              // uncaught
              $async$next = [4];
            case 8:
              // finally
              $async$handler = 4;
              $async$goto = 13;
              return A._asyncAwait(t2.cancel$0(0), $async$call$0);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 9:
              // after finally
              t1 = A.unexpectedSuccess("finite()", null);
              throw A.wrapException(t1);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (!type$.TimeoutException._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              A.expect(timeout.get$exception() != null, B.C__IsTrue, null);
              A.expect(count, B._OrderingMatcher_g8g, null);
              A.expect(count, new A._OrderingMatcher($N, true, true, false, "a value less than or equal to", true), null);
              t1 = A.Iterable_Iterable$generate(count, null, type$.dynamic);
              A.expect(digits, new A._DeepMatcher(t1, 100), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure5.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, n, t1, t2, exception, digits, count, timeout, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              count = 0;
              timeout = A.TimeoutToken$(new A.Duration(400000));
              $async$handler = 4;
              t1 = J.stream$1$2$token$z($async$self.worker._readLocal$0(), 42, type$.nullable_CancelationToken._as(timeout), type$.dynamic);
              t2 = A._instanceType(t1);
              t2 = new A._StreamIterator(A.checkNotNullable(new A._MapStream(t2._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t1, t2._eval$1("_MapStream<Stream.T,int>")), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 7;
            case 10:
              // for condition
              $async$temp1 = A;
              $async$goto = 12;
              return A._asyncAwait(t2.moveNext$0(), $async$call$0);
            case 12:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 11;
                break;
              }
              n = t2.get$current(0);
              J.add$1$ax(digits, n);
              t1 = count;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 8;
                break;
              }
              count = t1 + 1;
              // goto for condition
              $async$goto = 10;
              break;
            case 11:
              // after for
              $async$next.push(9);
              // goto finally
              $async$goto = 8;
              break;
            case 7:
              // uncaught
              $async$next = [4];
            case 8:
              // finally
              $async$handler = 4;
              $async$goto = 13;
              return A._asyncAwait(t2.cancel$0(0), $async$call$0);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 9:
              // after finally
              t1 = A.unexpectedSuccess("infinite()", null);
              throw A.wrapException(t1);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (!type$.TimeoutException._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              A.expect(count, B._OrderingMatcher_g8g, null);
              A.expect(count, new A._OrderingMatcher(20, true, true, false, "a value less than or equal to", true), null);
              t1 = A.Iterable_Iterable$generate(count, null, type$.dynamic);
              A.expect(digits, new A._DeepMatcher(t1, 100), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure6.prototype = {
    call$0() {
      return this.$call$body$execute____closure0();
    },
    $call$body$execute____closure0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t4, t5, _box_7, timeout, i, tasks, t1, t2, t3;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_7 = {};
              timeout = A.TimeoutToken$(new A.Duration(1440000));
              i = _box_7.errors = _box_7.success = 0;
              tasks = A._setArrayType([], type$.JSArray_Future_List_int);
              t1 = $async$self.pool;
              t2 = type$.List_int;
              t3 = t1.__late_helper$_name;
              while (true) {
                t4 = t1.__late_helper$_value;
                if (t4 === t1)
                  A.throwExpression(A.LateError$localNI(t3));
                t5 = t4.concurrencySettings;
                if (!(i < 2 * (t5.maxWorkers * t5.maxParallel) + 1))
                  break;
                B.JSArray_methods.add$1(tasks, t4.finite$2(40, timeout).toList$0(0).then$1$2$onError(new A.execute_____closure5(_box_7), new A.execute_____closure6(_box_7), t2));
                ++i;
              }
              A.expect(_box_7.success, B._OrderingMatcher_Kvb, null);
              A.expect(_box_7.errors, B._OrderingMatcher_Kvb, null);
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, type$.dynamic), $async$call$0);
            case 2:
              // returning from await.
              A.expect(t1._readLocal$0()._worker_pool$_queue.get$length(0), B._OrderingMatcher_g8g, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t2), $async$call$0);
            case 3:
              // returning from await.
              A.expect(timeout.get$exception() != null, B.C__IsTrue, null);
              t2 = _box_7.success;
              t3 = t1._readLocal$0().concurrencySettings;
              A.expect(t2, new A._DeepMatcher(t3.maxWorkers * t3.maxParallel, 100), null);
              t2 = _box_7.success;
              t3 = _box_7.errors;
              t4 = tasks.length;
              A.expect(t2 + t3, new A._DeepMatcher(t4, 100), null);
              J.cancel$0$z(t1._readLocal$0());
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure5.prototype = {
    call$1(list) {
      type$.List_int._as(list);
      ++this._box_7.success;
      return list;
    },
    $signature: 38
  };
  A.execute_____closure6.prototype = {
    call$2(ex, st) {
      ++this._box_7.errors;
      return A._setArrayType([], type$.JSArray_int);
    },
    $signature: 138
  };
  A.execute___closure4.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.worker;
      t1.test$2("- finite() worker", new A.execute____closure1(t2));
      t1.test$2("- infinite() worker", new A.execute____closure2(t2));
      t1.test$2("- finite() pool", new A.execute____closure3(this.pool));
    },
    $signature: 2
  };
  A.execute____closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, composite1, n, composite2, n0, t3, t4, t5, exception, timeout2, cancelation2, digits, count, $N, timeout1, t1, t2, cancelation1, $async$exception, $async$exception1, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              count = 0;
              $N = 20;
              timeout1 = A.TimeoutToken$(new A.Duration(B.JSNumber_methods.round$0(20000 * A._asNum($N))));
              t1 = type$._Future_CanceledException;
              t2 = type$._AsyncCompleter_CanceledException;
              cancelation1 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(timeout1.timeout._duration * 0.5)), cancelation1.get$cancel(cancelation1));
              t3 = type$.JSArray_CancelationToken;
              composite1 = A.CompositeToken$any(A._setArrayType([timeout1, cancelation1], t3));
              $async$handler = 4;
              t4 = $async$self.worker._readLocal$0();
              t5 = $N;
              if (typeof t5 !== "number") {
                $async$returnValue = A.iae(t5);
                // goto return
                $async$goto = 1;
                break;
              }
              t5 = new A._StreamIterator(A.checkNotNullable(t4.finite$2(50 * t5, composite1), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 7;
            case 10:
              // for condition
              $async$temp1 = A;
              $async$goto = 12;
              return A._asyncAwait(t5.moveNext$0(), $async$call$0);
            case 12:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 11;
                break;
              }
              n = t5.get$current(0);
              J.add$1$ax(digits, n);
              t4 = count;
              if (typeof t4 !== "number") {
                $async$returnValue = t4.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 8;
                break;
              }
              count = t4 + 1;
              // goto for condition
              $async$goto = 10;
              break;
            case 11:
              // after for
              $async$next.push(9);
              // goto finally
              $async$goto = 8;
              break;
            case 7:
              // uncaught
              $async$next = [4];
            case 8:
              // finally
              $async$handler = 4;
              $async$goto = 13;
              return A._asyncAwait(t5.cancel$0(0), $async$call$0);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 9:
              // after finally
              t4 = A.unexpectedSuccess("finite()", null);
              throw A.wrapException(t4);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (!type$.CanceledException._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              t4 = composite1;
              t4._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(t4), B.C__IsTrue, null);
              A.expect(timeout1.get$exception() != null, B.C__IsFalse, null);
              A.expect(cancelation1.get$exception() != null, B.C__IsTrue, null);
              A.expect(count, B._OrderingMatcher_g8g, null);
              A.expect(count, new A._OrderingMatcher($N, true, true, false, "a value less than or equal to", true), null);
              timeout1 = type$.dynamic;
              t4 = A.Iterable_Iterable$generate(count, null, timeout1);
              A.expect(digits, new A._DeepMatcher(t4, 100), null);
              J.clear$0$ax(digits);
              count = 0;
              timeout2 = A.TimeoutToken$(new A.Duration(B.JSNumber_methods.round$0(20000 * A._asNum($N))));
              cancelation2 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              composite2 = A.CompositeToken$any(A._setArrayType([timeout2, cancelation2], t3));
              $async$handler = 15;
              t1 = $async$self.worker._readLocal$0();
              t2 = $N;
              if (typeof t2 !== "number") {
                $async$returnValue = A.iae(t2);
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = new A._StreamIterator(A.checkNotNullable(t1.finite$2(50 * t2, composite2), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 18;
            case 21:
              // for condition
              $async$temp1 = A;
              $async$goto = 23;
              return A._asyncAwait(t2.moveNext$0(), $async$call$0);
            case 23:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 22;
                break;
              }
              n0 = t2.get$current(0);
              J.add$1$ax(digits, n0);
              t1 = count;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 19;
                break;
              }
              count = t1 + 1;
              // goto for condition
              $async$goto = 21;
              break;
            case 22:
              // after for
              $async$next.push(20);
              // goto finally
              $async$goto = 19;
              break;
            case 18:
              // uncaught
              $async$next = [15];
            case 19:
              // finally
              $async$handler = 15;
              $async$goto = 24;
              return A._asyncAwait(t2.cancel$0(0), $async$call$0);
            case 24:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 20:
              // after finally
              t1 = A.unexpectedSuccess("finite()", null);
              throw A.wrapException(t1);
              $async$handler = 2;
              // goto after finally
              $async$goto = 17;
              break;
            case 15:
              // catch
              $async$handler = 14;
              $async$exception1 = $async$currentError;
              if (!type$.TimeoutException._is(A.unwrapException($async$exception1)))
                throw $async$exception1;
              // goto after finally
              $async$goto = 17;
              break;
            case 14:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 17:
              // after finally
              t1 = composite2;
              t1._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(t1), B.C__IsTrue, null);
              A.expect(timeout2.get$exception() != null, B.C__IsTrue, null);
              A.expect(cancelation2.get$exception() != null, B.C__IsFalse, null);
              A.expect(count, B._OrderingMatcher_g8g, null);
              A.expect(count, new A._OrderingMatcher($N, true, true, false, "a value less than or equal to", true), null);
              timeout1 = A.Iterable_Iterable$generate(count, null, timeout1);
              A.expect(digits, new A._DeepMatcher(timeout1, 100), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, composite1, n, composite2, n0, t3, t4, t5, exception, digits, count, timeout1, t1, t2, cancelation1, $async$exception, $async$exception1, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              count = 0;
              timeout1 = A.TimeoutToken$(new A.Duration(400000));
              t1 = type$._Future_CanceledException;
              t2 = type$._AsyncCompleter_CanceledException;
              cancelation1 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(timeout1.timeout._duration * 0.5)), cancelation1.get$cancel(cancelation1));
              t3 = type$.JSArray_CancelationToken;
              composite1 = A.CompositeToken$any(A._setArrayType([timeout1, cancelation1], t3));
              $async$handler = 4;
              t4 = J.stream$1$2$token$z($async$self.worker._readLocal$0(), 42, type$.nullable_CancelationToken._as(composite1), type$.dynamic);
              t5 = A._instanceType(t4);
              t5 = new A._StreamIterator(A.checkNotNullable(new A._MapStream(t5._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t4, t5._eval$1("_MapStream<Stream.T,int>")), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 7;
            case 10:
              // for condition
              $async$temp1 = A;
              $async$goto = 12;
              return A._asyncAwait(t5.moveNext$0(), $async$call$0);
            case 12:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 11;
                break;
              }
              n = t5.get$current(0);
              J.add$1$ax(digits, n);
              t4 = count;
              if (typeof t4 !== "number") {
                $async$returnValue = t4.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 8;
                break;
              }
              count = t4 + 1;
              // goto for condition
              $async$goto = 10;
              break;
            case 11:
              // after for
              $async$next.push(9);
              // goto finally
              $async$goto = 8;
              break;
            case 7:
              // uncaught
              $async$next = [4];
            case 8:
              // finally
              $async$handler = 4;
              $async$goto = 13;
              return A._asyncAwait(t5.cancel$0(0), $async$call$0);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 9:
              // after finally
              t4 = A.unexpectedSuccess("infinite()", null);
              throw A.wrapException(t4);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (!type$.CanceledException._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              t4 = composite1;
              t4._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(t4), B.C__IsTrue, null);
              A.expect(timeout1.get$exception() != null, B.C__IsFalse, null);
              A.expect(cancelation1.get$exception() != null, B.C__IsTrue, null);
              A.expect(count, B._OrderingMatcher_g8g, null);
              A.expect(count, new A._OrderingMatcher(20, true, true, false, "a value less than or equal to", true), null);
              timeout1 = type$.dynamic;
              t4 = A.Iterable_Iterable$generate(count, null, timeout1);
              A.expect(digits, new A._DeepMatcher(t4, 100), null);
              J.clear$0$ax(digits);
              count = 0;
              composite2 = A.CompositeToken$any(A._setArrayType([A.TimeoutToken$(new A.Duration(400000)), new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2))], t3));
              $async$handler = 15;
              t1 = J.stream$1$2$token$z($async$self.worker._readLocal$0(), 42, type$.nullable_CancelationToken._as(composite2), timeout1);
              t2 = A._instanceType(t1);
              t2 = new A._StreamIterator(A.checkNotNullable(new A._MapStream(t2._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t1, t2._eval$1("_MapStream<Stream.T,int>")), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 18;
            case 21:
              // for condition
              $async$temp1 = A;
              $async$goto = 23;
              return A._asyncAwait(t2.moveNext$0(), $async$call$0);
            case 23:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 22;
                break;
              }
              n0 = t2.get$current(0);
              J.add$1$ax(digits, n0);
              t1 = count;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 19;
                break;
              }
              count = t1 + 1;
              // goto for condition
              $async$goto = 21;
              break;
            case 22:
              // after for
              $async$next.push(20);
              // goto finally
              $async$goto = 19;
              break;
            case 18:
              // uncaught
              $async$next = [15];
            case 19:
              // finally
              $async$handler = 15;
              $async$goto = 24;
              return A._asyncAwait(t2.cancel$0(0), $async$call$0);
            case 24:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 20:
              // after finally
              t1 = A.unexpectedSuccess("infinite()", null);
              throw A.wrapException(t1);
              $async$handler = 2;
              // goto after finally
              $async$goto = 17;
              break;
            case 15:
              // catch
              $async$handler = 14;
              $async$exception1 = $async$currentError;
              if (!(A.unwrapException($async$exception1) instanceof A.SquadronTimeoutException))
                throw $async$exception1;
              // goto after finally
              $async$goto = 17;
              break;
            case 14:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 17:
              // after finally
              A.expect(count, B._OrderingMatcher_g8g, null);
              A.expect(count, new A._OrderingMatcher(20, true, true, false, "a value less than or equal to", true), null);
              t1 = A.Iterable_Iterable$generate(count, null, timeout1);
              A.expect(digits, new A._DeepMatcher(t1, 100), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure3.prototype = {
    call$0() {
      return this.$call$body$execute____closure();
    },
    $call$body$execute____closure() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, tasks, t4, t5, t6, t7, i, t8, t9, t10, timeout2, token2, composite2, _box_8, timeout1, t1, t2, cancelation1, t3, composite1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_8 = {};
              timeout1 = A.TimeoutToken$(new A.Duration(720000));
              t1 = type$._Future_CanceledException;
              t2 = type$._AsyncCompleter_CanceledException;
              cancelation1 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              t3 = type$.JSArray_CancelationToken;
              composite1 = A.CompositeToken$any(A._setArrayType([timeout1, cancelation1], t3));
              _box_8.errors = _box_8.success = 0;
              tasks = A._setArrayType([], type$.JSArray_Future_List_int);
              t4 = $async$self.pool;
              t5 = type$.List_int;
              t6 = type$.Object;
              t7 = t4.__late_helper$_name;
              i = 0;
              while (true) {
                t8 = t4.__late_helper$_value;
                if (t8 === t4)
                  A.throwExpression(A.LateError$localNI(t7));
                t9 = t8.concurrencySettings;
                if (!(i < 2 * (t9.maxWorkers * t9.maxParallel) + 1))
                  break;
                B.JSArray_methods.add$1(tasks, A.FutureExtensions_onError(t8.finite$2(20, composite1).toList$0(0).then$1$1(new A.execute_____closure1(_box_8), t5), new A.execute_____closure2(_box_8), t5, t6));
                ++i;
              }
              A.expect(_box_8.success, B._OrderingMatcher_Kvb, null);
              A.expect(_box_8.errors, B._OrderingMatcher_Kvb, null);
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, type$.dynamic), $async$call$0);
            case 2:
              // returning from await.
              A.expect(t4._readLocal$0()._worker_pool$_queue.get$length(0), B._OrderingMatcher_g8g, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t5), $async$call$0);
            case 3:
              // returning from await.
              A.expect(timeout1.get$exception() != null, B.C__IsTrue, null);
              A.expect(cancelation1.get$exception() != null, B.C__IsFalse, null);
              t8 = _box_8.success;
              t9 = t4._readLocal$0().concurrencySettings;
              A.expect(t8, new A._DeepMatcher(t9.maxWorkers * t9.maxParallel, 100), null);
              t8 = _box_8.success;
              t9 = _box_8.errors;
              t10 = tasks.length;
              A.expect(t8 + t9, new A._DeepMatcher(t10, 100), null);
              t8 = t4._readLocal$0().concurrencySettings;
              timeout2 = A.TimeoutToken$(new A.Duration(B.JSInt_methods.round$0(B.JSInt_methods.round$0(40000 * (t8.maxWorkers * t8.maxParallel)) * 20)));
              token2 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              composite2 = A.CompositeToken$any(A._setArrayType([timeout2, token2], t3));
              i = _box_8.errors = _box_8.success = 0;
              B.JSArray_methods.clear$0(tasks);
              while (true) {
                t1 = t4.__late_helper$_value;
                if (t1 === t4)
                  A.throwExpression(A.LateError$localNI(t7));
                t2 = t1.concurrencySettings;
                if (!(i < 2 * (t2.maxWorkers * t2.maxParallel) + 1))
                  break;
                B.JSArray_methods.add$1(tasks, A.FutureExtensions_onError(t1.finite$2(20, composite2).toList$0(0).then$1$1(new A.execute_____closure3(_box_8), t5), new A.execute_____closure4(_box_8), t5, t6));
                ++i;
              }
              A.expect(_box_8.success, B._OrderingMatcher_Kvb, null);
              A.expect(_box_8.errors, B._OrderingMatcher_Kvb, null);
              A.Timer_Timer(new A.Duration(720000), token2.get$cancel(token2));
              $async$goto = 4;
              return A._asyncAwait(A.Future_wait(tasks, false, t5), $async$call$0);
            case 4:
              // returning from await.
              A.expect(timeout2.get$exception() != null, B.C__IsFalse, null);
              A.expect(token2.get$exception() != null, B.C__IsTrue, null);
              t1 = _box_8.success;
              t2 = t4._readLocal$0().concurrencySettings;
              A.expect(t1, new A._DeepMatcher(t2.maxWorkers * t2.maxParallel, 100), null);
              t1 = _box_8.success;
              t2 = _box_8.errors;
              t3 = tasks.length;
              A.expect(t1 + t2, new A._DeepMatcher(t3, 100), null);
              J.cancel$0$z(t4._readLocal$0());
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure1.prototype = {
    call$1(list) {
      type$.List_int._as(list);
      ++this._box_8.success;
      return list;
    },
    $signature: 38
  };
  A.execute_____closure2.prototype = {
    call$2(ex, st) {
      ++this._box_8.errors;
      return A._setArrayType([], type$.JSArray_int);
    },
    $signature: 47
  };
  A.execute_____closure3.prototype = {
    call$1(list) {
      type$.List_int._as(list);
      ++this._box_8.success;
      return list;
    },
    $signature: 38
  };
  A.execute_____closure4.prototype = {
    call$2(ex, st) {
      ++this._box_8.errors;
      return A._setArrayType([], type$.JSArray_int);
    },
    $signature: 47
  };
  A.ConsoleToHtml.prototype = {
    convert$1(message) {
      return new A._SyncStarIterable(this.convert$body$ConsoleToHtml(message), type$._SyncStarIterable_String);
    },
    convert$body$ConsoleToHtml($async$message) {
      return function() {
        var message = $async$message;
        var $async$goto = 0, $async$handler = 2, $async$currentError, codeUnits, t1, closeTags, html, t2, t3, t4, replacements, replacement, i, _box_0;
        return function $async$convert$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                _box_0 = {};
                while (true) {
                  if (!(B.JSString_methods.endsWith$1(message, "\r") || B.JSString_methods.endsWith$1(message, "\n")))
                    break;
                  message = B.JSString_methods.substring$2(message, 0, message.length - 1);
                }
                codeUnits = new A.CodeUnits(message);
                t1 = type$.JSArray_int;
                closeTags = A._setArrayType([], t1);
                html = A._setArrayType([], t1);
                _box_0.i = 0;
                t1 = message.length, t2 = 0;
              case 3:
                // for condition
                if (!(t2 < t1)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                t2 = $.$get$ConsoleToHtml_sequences();
                t3 = A._arrayInstanceType(t2);
                t4 = t3._eval$1("WhereIterable<1>");
                replacements = A.List_List$of(new A.WhereIterable(t2, t3._eval$1("bool(1)")._as(new A.ConsoleToHtml_convert_closure(_box_0, codeUnits)), t4), true, t4._eval$1("Iterable.E"));
                t2 = replacements.length;
                $async$goto = t2 === 1 ? 5 : 7;
                break;
              case 5:
                // then
                if (0 >= t2) {
                  A.ioore(replacements, 0);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                replacement = replacements[0];
                $async$goto = replacement === $.$get$ConsoleToHtml_resetSeq() ? 8 : 10;
                break;
              case 8:
                // then
                B.JSArray_methods.addAll$1(html, closeTags);
                B.JSArray_methods.clear$0(closeTags);
                // goto join
                $async$goto = 9;
                break;
              case 10:
                // else
                $async$goto = replacement === $.$get$ConsoleToHtml_cr() || replacement === $.$get$ConsoleToHtml_lf() ? 11 : 13;
                break;
              case 11:
                // then
                $async$goto = 14;
                return $async$iterator._async$_current = A.String_String$fromCharCodes(html, 0, null), 1;
              case 14:
                // after yield
                B.JSArray_methods.clear$0(html);
                // goto join
                $async$goto = 12;
                break;
              case 13:
                // else
                B.JSArray_methods.addAll$1(html, replacement._codeUnits);
                t2 = replacement._closeTag;
                B.JSArray_methods.addAll$1(closeTags, t2 == null ? B.List_empty1 : t2);
              case 12:
                // join
              case 9:
                // join
                i = _box_0.i + J.get$length$asx(replacement._sequence);
                _box_0.i = i;
                t2 = i;
                // goto join
                $async$goto = 6;
                break;
              case 7:
                // else
                t2 = _box_0.i;
                if (!(t2 >= 0 && t2 < t1)) {
                  A.ioore(message, t2);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                B.JSArray_methods.add$1(html, message.charCodeAt(t2));
                t2 = ++_box_0.i;
              case 6:
                // join
                // goto for condition
                $async$goto = 3;
                break;
              case 4:
                // after for
                B.JSArray_methods.addAll$1(html, closeTags);
                B.JSArray_methods.clear$0(closeTags);
                $async$goto = 15;
                return $async$iterator._async$_current = A.String_String$fromCharCodes(html, 0, null), 1;
              case 15:
                // after yield
              case 1:
                // return
                return 0;
              case 2:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    }
  };
  A.ConsoleToHtml_convert_closure.prototype = {
    call$1(s) {
      return type$.SequenceReplacement._as(s).match$2(0, this.codeUnits, this._box_0.i);
    },
    $signature: 139
  };
  A.SequenceReplacement.prototype = {
    get$length(_) {
      return J.get$length$asx(this._sequence);
    },
    match$2(_, codeUnits, index) {
      var i, t5,
        t1 = this._sequence,
        t2 = J.getInterceptor$asx(t1),
        t3 = type$.List_int._as(codeUnits)._string,
        t4 = t3.length;
      if (index + t2.get$length(t1) > t4)
        return false;
      for (i = 0; i < t2.get$length(t1); ++i) {
        t5 = index + i;
        if (!(t5 >= 0 && t5 < t4))
          return A.ioore(t3, t5);
        if (t3.charCodeAt(t5) !== t2.$index(t1, i))
          return false;
      }
      return true;
    }
  };
  A.CustomException.prototype = {
    serialize$0() {
      var t1 = this._squadron_exception$_stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      return A.List_List$unmodifiable(["CUSTOM", this.message, t1], type$.dynamic);
    }
  };
  A.HtmlLogger.prototype = {
    _onScroll$1(scrollEvent) {
      var prevScrollToEnd, t1, t2, t3, _this = this;
      if (!_this._forceScroll) {
        prevScrollToEnd = _this._scrollToEnd;
        t1 = _this._div;
        t2 = t1.scrollHeight;
        t2.toString;
        t2 = B.JSNumber_methods.round$0(t2);
        t3 = t1.scrollTop;
        t3.toString;
        t3 = B.JSNumber_methods.round$0(t3);
        t1 = t1.clientHeight;
        t1.toString;
        t1 = _this._scrollToEnd = t2 - t3 <= t1;
        if (t1 !== prevScrollToEnd) {
          window.toString;
          t2 = typeof console != "undefined";
          t2.toString;
          if (t2)
            window.console.log("_scrollToEnd = " + t1);
        }
      } else
        _this._forceScroll = false;
    },
    print$1(_, message) {
      var t1, t2, t3, t4, _this = this,
        ts = A.Duration$(_this._sw.get$elapsedMicroseconds(), 0, 0);
      for (t1 = $.$get$HtmlLogger__formatter().convert$1(message), t2 = t1.$ti, t1 = new A._SyncStarIterator(t1._outerHelper(), t2._eval$1("_SyncStarIterator<1>")), t3 = _this._div, t2 = t2._precomputed1; t1.moveNext$0();) {
        t4 = t1._async$_current;
        message = t4 == null ? t2._as(t4) : t4;
        if (message.length !== 0)
          message = "[" + ts.toString$0(0) + "] " + message;
        t4 = document.createElement("SPAN");
        J.set$innerHtml$x(t4, message + "<BR>");
        t3.appendChild(t4).toString;
      }
      if (_this._scrollToEnd) {
        _this._forceScroll = true;
        t1 = t3.scrollHeight;
        t1.toString;
        B.DivElement_methods.scrollTo$2(t3, 0, B.JSNumber_methods.round$0(t1));
      }
    }
  };
  A.InstallableWorker.prototype = {};
  A.IssuesWorkerPool.prototype = {
    issue_8$1(words) {
      return this.stream$1$1(0, new A.IssuesWorkerPool_issue_8_closure(words), type$.dynamic);
    }
  };
  A.IssuesWorkerPool_closure.prototype = {
    call$0() {
      return A.IssuesWorker$(this.context);
    },
    $signature: 140
  };
  A.IssuesWorkerPool_issue_8_closure.prototype = {
    call$1(w) {
      return type$.IssuesWorker._as(w).stream$1$2$args(0, 1, [this.words], type$.dynamic);
    },
    $signature: 212
  };
  A.IssuesWorker.prototype = {};
  A.execute_closure.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- GitHub Issues", new A.execute__closure(t1));
    },
    $signature: 1
  };
  A.execute__closure.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- #8 - Exceptions from Streams must come through onError", new A.execute___closure(t1));
    },
    $signature: 2
  };
  A.execute___closure.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Squadron Worker", new A.execute____closure(t1));
      t1.test$2("- Worker Pool", new A.execute____closure0(t1));
    },
    $signature: 2
  };
  A.execute____closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.IssuesWorker$($async$self.tc), new A.execute_____closure0(), type$.IssuesWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure0.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure0(type$.IssuesWorker._as(worker));
    },
    $call$body$execute_____closure0(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, stream, t1, completer, results, errors, t2, t3;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 3:
              // returning from await.
              stream = worker.stream$1$2$args(0, 1, [[0, 1, 2, 3, 4]], type$.dynamic);
              t1 = new A._Future($.Zone__current, type$._Future_dynamic);
              completer = new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic);
              results = [];
              errors = [];
              t2 = type$.void_Function_dynamic;
              t3 = t2._as(B.JSArray_methods.get$add(results));
              t2 = t2._as(B.JSArray_methods.get$add(errors));
              stream.listen$3$onDone$onError(t3, type$.void_Function_$opt_dynamic._as(completer.get$complete(completer)), t2);
              $async$goto = 4;
              return A._asyncAwait(t1, $async$call$1);
            case 4:
              // returning from await.
              t1 = A._setArrayType([0, 1], type$.JSArray_int);
              A.expect(results, new A._DeepMatcher(t1, 100), null);
              t1 = errors.length;
              A.expect(t1, new A._DeepMatcher(1, 100), null);
              if (0 >= errors.length) {
                $async$returnValue = A.ioore(errors, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(errors[0], new A.TypeMatcher(type$.TypeMatcher_WorkerException), null);
              if (0 >= errors.length) {
                $async$returnValue = A.ioore(errors, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = type$.WorkerException._as(errors[0]);
              A.expect(t1.message.toLowerCase(), new A._StringEqualsMatcher("issue 8 error message"), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 142
  };
  A.execute____closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.IssuesWorkerPool$($async$self.tc), new A.execute_____closure(), type$.IssuesWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure(type$.IssuesWorkerPool._as(pool));
    },
    $call$body$execute_____closure(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, stream, completer, results, errors, t2, t3, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = pool.start$0(0);
              $async$goto = 3;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 3:
              // returning from await.
              stream = pool.issue_8$1([0, 1, 2, 3, 4]);
              t1 = new A._Future($.Zone__current, type$._Future_dynamic);
              completer = new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic);
              results = [];
              errors = [];
              t2 = type$.void_Function_dynamic;
              t3 = t2._as(B.JSArray_methods.get$add(results));
              t2 = t2._as(B.JSArray_methods.get$add(errors));
              stream.listen$3$onDone$onError(t3, type$.void_Function_$opt_dynamic._as(completer.get$complete(completer)), t2);
              $async$goto = 4;
              return A._asyncAwait(t1, $async$call$1);
            case 4:
              // returning from await.
              t1 = A._setArrayType([0, 1], type$.JSArray_int);
              A.expect(results, new A._DeepMatcher(t1, 100), null);
              t1 = errors.length;
              A.expect(t1, new A._DeepMatcher(1, 100), null);
              if (0 >= errors.length) {
                $async$returnValue = A.ioore(errors, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(errors[0], new A.TypeMatcher(type$.TypeMatcher_WorkerException), null);
              if (0 >= errors.length) {
                $async$returnValue = A.ioore(errors, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = type$.WorkerException._as(errors[0]);
              A.expect(t1.message.toLowerCase(), new A._StringEqualsMatcher("issue 8 error message"), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 143
  };
  A.LocalClientWorkerPool.prototype = {
    checkIds$0() {
      return this.execute$1$1(new A.LocalClientWorkerPool_checkIds_closure(), type$.String);
    },
    checkException$0() {
      return this.execute$1$1(new A.LocalClientWorkerPool_checkException_closure(), type$.bool);
    },
    checkSequence$1(count) {
      return this.stream$1$1(0, new A.LocalClientWorkerPool_checkSequence_closure(count), type$.dynamic);
    }
  };
  A.LocalClientWorkerPool_closure.prototype = {
    call$0() {
      var t1 = this.localService.___WebLocalWorker__channel_A;
      t1 === $ && A.throwLateFieldNI("_channel");
      t1 = t1 == null ? null : t1.share$0(0)._sendPort;
      return A.LocalClientWorker$(this.context, [t1]);
    },
    $signature: 144
  };
  A.LocalClientWorkerPool_checkIds_closure.prototype = {
    call$1(w) {
      return type$.LocalClientWorker._as(w).send$1$1(0, 1, type$.String);
    },
    $signature: 145
  };
  A.LocalClientWorkerPool_checkException_closure.prototype = {
    call$1(w) {
      return type$.LocalClientWorker._as(w).send$1$1(0, 2, type$.bool);
    },
    $signature: 146
  };
  A.LocalClientWorkerPool_checkSequence_closure.prototype = {
    call$1(w) {
      return type$.LocalClientWorker._as(w).stream$1$2$args(0, 3, [this.count], type$.dynamic);
    },
    $signature: 147
  };
  A.LocalClientWorker.prototype = {};
  A.LocalService.prototype = {};
  A.LocalServiceImpl.prototype = {
    throwException$0() {
      return A.throwExpression(A.Exception_Exception("Intentional exception"));
    },
    get$operations() {
      var result, _this = this,
        value = _this.__LocalServiceImpl_operations_FI;
      if (value === $) {
        result = A.LinkedHashMap_LinkedHashMap$_literal([1, new A.LocalServiceImpl_operations_closure(_this), 2, new A.LocalServiceImpl_operations_closure0(_this), 3, new A.LocalServiceImpl_operations_closure1(_this)], type$.int, type$.dynamic_Function_List_dynamic);
        _this.__LocalServiceImpl_operations_FI !== $ && A.throwLateFieldADI("operations");
        _this.set$__LocalServiceImpl_operations_FI(result);
        value = result;
      }
      return value;
    },
    set$__LocalServiceImpl_operations_FI(__LocalServiceImpl_operations_FI) {
      this.__LocalServiceImpl_operations_FI = type$.Map_of_int_and_dynamic_Function_List_dynamic._as(__LocalServiceImpl_operations_FI);
    }
  };
  A.LocalServiceImpl_operations_closure.prototype = {
    call$1(req) {
      type$.List_dynamic._as(req);
      return 'LocalService running as "' + $.$get$threadId() + '"';
    },
    $signature: 148
  };
  A.LocalServiceImpl_operations_closure0.prototype = {
    call$1(req) {
      type$.List_dynamic._as(req);
      return this.$this.throwException$0();
    },
    $signature: 33
  };
  A.LocalServiceImpl_operations_closure1.prototype = {
    call$1(req) {
      var t1 = type$.List_dynamic,
        t2 = type$.int;
      t2 = A.Stream_Stream$fromIterable(A.Iterable_Iterable$generate(B.JSNumber_methods.toInt$0(A._asNum(J.$index$asx(t1._as(J.$index$asx(t1._as(req), 3)), 0))), null, t2), t2);
      t1 = t2.$ti;
      return new A._MapStream(t1._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t2, t1._eval$1("_MapStream<Stream.T,int>"));
    },
    $signature: 149
  };
  A.execute_closure3.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- Local Worker", new A.execute__closure5(t1, new A.LocalServiceImpl(), A.RegExp_RegExp('Worker running as "(0x[0-9A-Fa-f]+)", LocalService running as "(0x[0-9A-Fa-f]+)"', true, false)));
    },
    $signature: 1
  };
  A.execute__closure5.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.localService;
      t1.group$2("- Identity", new A.execute___closure23(t1, t2, this.regExp));
      t1.group$2("- Exception", new A.execute___closure24(t1, t2));
      t1.group$2("- Stream", new A.execute___closure25(t1, t2));
    },
    $signature: 2
  };
  A.execute___closure23.prototype = {
    call$0() {
      var t3,
        t1 = this.tc,
        t2 = this.localService;
      t1.test$2("- Local", new A.execute____closure28(t2));
      t3 = this.regExp;
      t1.test$2("- Squadron", new A.execute____closure29(t2, t1, t3));
      t1.test$2("- Pool", new A.execute____closure30(t2, t1, t3));
    },
    $signature: 2
  };
  A.execute____closure28.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, id;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              id = 'LocalService running as "' + $.$get$threadId() + '"';
              A.expect(id, new A._StringEqualsMatcher(id), null);
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure57(), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure57.prototype = {
    call$1(localWorker) {
      return this.$call$body$execute_____closure9(type$.LocalWorker_LocalServiceImpl._as(localWorker));
    },
    $call$body$execute_____closure9(localWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        id, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = localWorker.___WebLocalWorker__channel_A;
              t1 === $ && A.throwLateFieldNI("_channel");
              t1 = t1 == null ? null : t1.sendRequest$1$2(1, [], type$.dynamic);
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.dynamic), $async$call$1);
            case 2:
              // returning from await.
              id = $async$result;
              t1 = $.$get$threadId();
              A.expect(id, new A._StringEqualsMatcher('LocalService running as "' + t1 + '"'), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.execute____closure29.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure56($async$self.tc, $async$self.regExp), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure56.prototype = {
    call$1(localWorker) {
      return this.$call$body$execute_____closure8(type$.LocalWorker_LocalServiceImpl._as(localWorker));
    },
    $call$body$execute_____closure8(localWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = localWorker.___WebLocalWorker__channel_A;
              t1 === $ && A.throwLateFieldNI("_channel");
              t1 = t1 == null ? null : t1.share$0(0)._sendPort;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorker$($async$self.tc, [t1]), new A.execute______closure7($async$self.regExp), type$.LocalClientWorker, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.execute______closure7.prototype = {
    call$1(localClientWorker) {
      return this.$call$body$execute______closure3(type$.LocalClientWorker._as(localClientWorker));
    },
    $call$body$execute______closure3(localClientWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t1, t2, t3, match, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = $async$self.regExp;
              $async$goto = 3;
              return A._asyncAwait(localClientWorker.send$1$1(0, 1, type$.String), $async$call$1);
            case 3:
              // returning from await.
              match = $async$temp1.firstMatch$1($async$result);
              A.expect(match, B.C__IsNotNull, null);
              t1 = match._match;
              t2 = t1.length;
              if (1 >= t2) {
                $async$returnValue = A.ioore(t1, 1);
                // goto return
                $async$goto = 1;
                break;
              }
              t3 = t1[1];
              if (2 >= t2) {
                $async$returnValue = A.ioore(t1, 2);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = t1[2];
              A.expect(t3, new A._IsNot(A.wrapMatcher(typeof t1 == "string" ? new A._StringEqualsMatcher(t1) : new A._DeepMatcher(t1, 100))), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 45
  };
  A.execute____closure30.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure55($async$self.tc, $async$self.regExp), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure55.prototype = {
    call$1(localWorker) {
      return this.$call$body$execute_____closure7(type$.LocalWorker_LocalServiceImpl._as(localWorker));
    },
    $call$body$execute_____closure7(localWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorkerPool$($async$self.tc, localWorker, new A.ConcurrencySettings(2, 4, 3)), new A.execute______closure6($async$self.regExp), type$.LocalClientWorkerPool, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.execute______closure6.prototype = {
    call$1(workerPool) {
      return this.$call$body$execute______closure2(type$.LocalClientWorkerPool._as(workerPool));
    },
    $call$body$execute______closure2(workerPool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t1, i, workerIds, t2, t3, wid, t4, tasks, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              tasks = A._setArrayType([], type$.JSArray_Future_String);
              for (t1 = workerPool.concurrencySettings, t1 = t1.maxWorkers * t1.maxParallel, i = 0; i < t1; ++i)
                B.JSArray_methods.add$1(tasks, workerPool.checkIds$0());
              t1 = type$.String;
              workerIds = A.LinkedHashSet_LinkedHashSet$_empty(t1);
              $async$temp1 = J;
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t1), $async$call$1);
            case 3:
              // returning from await.
              t1 = $async$temp1.get$iterator$ax($async$result), t2 = $async$self.regExp;
            case 4:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t3 = t1.get$current(t1);
              A._expect(t3, new A._MatchesRegExp(t2), null, null, null, false);
              t3 = t2.firstMatch$1(t3)._match;
              if (1 >= t3.length) {
                $async$returnValue = A.ioore(t3, 1);
                // goto return
                $async$goto = 1;
                break;
              }
              wid = t3[1];
              A._expect(wid, B.C__IsNotNull, null, null, null, false);
              t4 = $.$get$threadId();
              A._expect(wid, new A._IsNot(A.wrapMatcher(new A._StringEqualsMatcher(t4))), null, null, null, false);
              if (2 >= t3.length) {
                $async$returnValue = A.ioore(t3, 2);
                // goto return
                $async$goto = 1;
                break;
              }
              t3 = t3[2];
              A._expect(t3, new A._StringEqualsMatcher(t4), null, null, null, false);
              wid.toString;
              workerIds.add$1(0, wid);
              // goto for condition
              $async$goto = 4;
              break;
            case 5:
              // after for
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 40
  };
  A.execute___closure24.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.localService;
      t1.test$2("- Local", new A.execute____closure25(t2));
      t1.test$2("- Squadron", new A.execute____closure26(t2, t1));
      t1.test$2("- Pool", new A.execute____closure27(t2, t1));
    },
    $signature: 2
  };
  A.execute____closure25.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                res = $async$self.localService.throwException$0();
              } catch (exception) {
                ex = A.unwrapException(exception);
                A.expect(J.toString$0$(ex).toLowerCase(), new A._Contains("intentional exception"), null);
              }
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure54(), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure54.prototype = {
    call$1(localWorker) {
      return this.$call$body$execute_____closure6(type$.LocalWorker_LocalServiceImpl._as(localWorker));
    },
    $call$body$execute_____closure6(localWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              t1 = localWorker.___WebLocalWorker__channel_A;
              t1 === $ && A.throwLateFieldNI("_channel");
              t1 = t1 == null ? null : t1.sendRequest$1$2(2, [], type$.dynamic);
              $async$goto = 6;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.dynamic), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("throwException()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.WorkerException) {
                ex = t1;
                A.expect(ex.message.toLowerCase(), new A._Contains("intentional exception"), null);
                A.expect(J.toString$0$(ex._squadron_exception$_stackTrace), new A._Contains("throwException"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.execute____closure26.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl).___WebLocalWorker__channel_A;
              t1 === $ && A.throwLateFieldNI("_channel");
              t1 = t1 == null ? null : t1.share$0(0)._sendPort;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorker$($async$self.tc, [t1]), new A.execute_____closure53(), type$.LocalClientWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure53.prototype = {
    call$1(localClientWorker) {
      return this.$call$body$execute_____closure5(type$.LocalClientWorker._as(localClientWorker));
    },
    $call$body$execute_____closure5(localClientWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(localClientWorker.send$1$1(0, 2, type$.bool), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 45
  };
  A.execute____closure27.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure52($async$self.tc), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure52.prototype = {
    call$1(localWorker) {
      return this.$call$body$execute_____closure4(type$.LocalWorker_LocalServiceImpl._as(localWorker));
    },
    $call$body$execute_____closure4(localWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorkerPool$($async$self.tc, localWorker, new A.ConcurrencySettings(2, 4, 3)), new A.execute______closure5(), type$.LocalClientWorkerPool, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.execute______closure5.prototype = {
    call$1(pool) {
      return this.$call$body$execute______closure1(type$.LocalClientWorkerPool._as(pool));
    },
    $call$body$execute______closure1(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, i, tasks, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              tasks = A._setArrayType([], type$.JSArray_Future_bool);
              for (t1 = pool.concurrencySettings, t1 = t1.maxWorkers * t1.maxParallel, i = 0; i < t1; ++i)
                B.JSArray_methods.add$1(tasks, pool.checkException$0());
              $async$temp1 = J;
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(tasks, false, type$.bool), $async$call$1);
            case 2:
              // returning from await.
              t1 = $async$temp1.get$iterator$ax($async$result);
            case 3:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 4;
                break;
              }
              A._expect(t1.get$current(t1), B.C__IsTrue, null, null, null, false);
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 40
  };
  A.execute___closure25.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.localService;
      t1.test$2("- Local", new A.execute____closure22(t2));
      t1.test$2("- Squadron", new A.execute____closure23(t2, t1));
      t1.test$2("- Pool", new A.execute____closure24(t2, t1));
    },
    $signature: 2
  };
  A.execute____closure22.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, res1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.int;
              $async$goto = 2;
              return A._asyncAwait(A.Stream_Stream$fromIterable(A.Iterable_Iterable$generate(19, null, t1), t1).toList$0(0), $async$call$0);
            case 2:
              // returning from await.
              res1 = $async$result;
              t1 = A.Iterable_Iterable$generate(19, null, type$.dynamic);
              A.expect(res1, new A._DeepMatcher(t1, 100), null);
              $async$goto = 3;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure51(), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure51.prototype = {
    call$1(localWorker) {
      return this.$call$body$execute_____closure3(type$.LocalWorker_LocalServiceImpl._as(localWorker));
    },
    $call$body$execute_____closure3(localWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, res2, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = localWorker.___WebLocalWorker__channel_A;
              t1 === $ && A.throwLateFieldNI("_channel");
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(t1.sendStreamingRequest$1$2(3, [19], t2).toList$0(0), $async$call$1);
            case 2:
              // returning from await.
              res2 = $async$result;
              t2 = A.Iterable_Iterable$generate(19, null, t2);
              A.expect(res2, new A._DeepMatcher(t2, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.execute____closure23.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure50($async$self.tc), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure50.prototype = {
    call$1(localWorker) {
      return this.$call$body$execute_____closure2(type$.LocalWorker_LocalServiceImpl._as(localWorker));
    },
    $call$body$execute_____closure2(localWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = localWorker.___WebLocalWorker__channel_A;
              t1 === $ && A.throwLateFieldNI("_channel");
              t1 = t1 == null ? null : t1.share$0(0)._sendPort;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorker$($async$self.tc, [t1]), new A.execute______closure4(), type$.LocalClientWorker, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.execute______closure4.prototype = {
    call$1(localClientWorker) {
      return this.$call$body$execute______closure0(type$.LocalClientWorker._as(localClientWorker));
    },
    $call$body$execute______closure0(localClientWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        res, t1, t2;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(localClientWorker.stream$1$2$args(0, 3, [19], type$.dynamic).toList$0(0), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              t1 = J.getInterceptor$asx(res);
              t2 = t1.get$length(res);
              A.expect(t2, new A._DeepMatcher(19, 100), null);
              A.expect(t1.every$1(res, new A.execute_______closure0()), B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 45
  };
  A.execute_______closure0.prototype = {
    call$1(e) {
      return A._asBool(J.$index$asx(e, "ok"));
    },
    $signature: 9
  };
  A.execute____closure24.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure49($async$self.tc), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure49.prototype = {
    call$1(localWorker) {
      return this.$call$body$execute_____closure1(type$.LocalWorker_LocalServiceImpl._as(localWorker));
    },
    $call$body$execute_____closure1(localWorker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorkerPool$($async$self.tc, localWorker, new A.ConcurrencySettings(2, 4, 3)), new A.execute______closure3(), type$.LocalClientWorkerPool, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.execute______closure3.prototype = {
    call$1(pool) {
      return this.$call$body$execute______closure(type$.LocalClientWorkerPool._as(pool));
    },
    $call$body$execute______closure(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, i, results, tasks;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              tasks = A._setArrayType([], type$.JSArray_Future_List_dynamic);
              for (t1 = pool.concurrencySettings, t1 = t1.maxWorkers * t1.maxParallel, i = 0; i < t1; ++i)
                B.JSArray_methods.add$1(tasks, pool.checkSequence$1(i).toList$0(0));
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(tasks, false, type$.List_dynamic), $async$call$1);
            case 2:
              // returning from await.
              results = $async$result;
              for (t1 = J.getInterceptor$asx(results), i = 0; i < t1.get$length(results); ++i)
                A._expect(J.every$1$ax(t1.$index(results, i), new A.execute_______closure()), B.C__IsTrue, null, null, null, false);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 40
  };
  A.execute_______closure.prototype = {
    call$1(e) {
      return A._asBool(J.$index$asx(e, "ok"));
    },
    $signature: 9
  };
  A.execute_closure2.prototype = {
    call$0() {
      var logs = A._setArrayType([], type$.JSArray_String),
        t1 = this.tc;
      t1.group$2("- Logging", new A.execute__closure4(t1, A.MemoryLogger$(logs, new A.MemoryLogFilter()), logs));
    },
    $signature: 1
  };
  A.execute__closure4.prototype = {
    call$0() {
      var t3, t4, t5,
        worker = A._Cell$named("worker"),
        t1 = this.tc,
        t2 = this.memoryLogger;
      A._declarer().setUpAll$1(new A.execute___closure11(worker, t1, t2));
      A._declarer().tearDownAll$1(new A.execute___closure12(worker));
      t3 = A._declarer();
      t4 = type$.dynamic_Function;
      t5 = t4._as(new A.execute___closure13(t2));
      t3._checkNotBuilt$1("setUp");
      B.JSArray_methods.add$1(t3._setUps, t5);
      t5 = A._declarer();
      t2 = t4._as(new A.execute___closure14(t2));
      t5._checkNotBuilt$1("tearDown");
      B.JSArray_methods.add$1(t5._tearDowns, t2);
      t2 = this.logs;
      t1.test$2("off", new A.execute___closure15(worker, t2));
      t1.test$2(">= fatal", new A.execute___closure16(worker, t2));
      t1.test$2(">= error", new A.execute___closure17(worker, t2));
      t1.test$2(">= warning", new A.execute___closure18(worker, t2));
      t1.test$2(">= info", new A.execute___closure19(worker, t2));
      t1.test$2(">= debug", new A.execute___closure20(worker, t2));
      t1.test$2(">= trace", new A.execute___closure21(worker, t2));
      t1.test$2("all", new A.execute___closure22(worker, t2));
    },
    $signature: 2
  };
  A.execute___closure11.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t1.__late_helper$_value = A.TestWorker$($async$self.tc, null);
              t1._readLocal$0().channelLogger = $async$self.memoryLogger;
              $async$goto = 2;
              return A._asyncAwait(J.start$0$x(t1._readLocal$0()), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure12.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker._readLocal$0();
              t2 = J.getInterceptor$x(t1);
              t2.stop$0(t1);
              t2.super$Releasable$release(t1);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure13.prototype = {
    call$0() {
      var t1 = this.memoryLogger;
      B.JSArray_methods.clear$0(t1._logs);
      t1._memory_logger$_filter._level = B.Level_0_all;
    },
    $signature: 2
  };
  A.execute___closure14.prototype = {
    call$0() {
      B.JSArray_methods.clear$0(this.memoryLogger._logs);
    },
    $signature: 2
  };
  A.execute___closure15.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$2$args$z(t1._readLocal$0(), 1, [10000], t2), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 2, t2), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t2), $async$call$0);
            case 4:
              // returning from await.
              t2 = $async$self.logs;
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("trace")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("debug")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("info")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("warning")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("error")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("fatal")))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure16.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$2$args$z(t1._readLocal$0(), 1, [6000], t2), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 2, t2), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t2), $async$call$0);
            case 4:
              // returning from await.
              t2 = $async$self.logs;
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("trace")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("debug")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("info")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("warning")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("error")))), null);
              A.expect(t2, new A._Contains(new A._Contains("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure17.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$2$args$z(t1._readLocal$0(), 1, [5000], t2), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 2, t2), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t2), $async$call$0);
            case 4:
              // returning from await.
              t2 = $async$self.logs;
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("trace")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("debug")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("info")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("warning")))), null);
              A.expect(t2, new A._Contains(new A._Contains("error")), null);
              A.expect(t2, new A._Contains(new A._Contains("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure18.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$2$args$z(t1._readLocal$0(), 1, [4000], t2), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 2, t2), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t2), $async$call$0);
            case 4:
              // returning from await.
              t2 = $async$self.logs;
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("trace")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("debug")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("info")))), null);
              A.expect(t2, new A._Contains(new A._Contains("warning")), null);
              A.expect(t2, new A._Contains(new A._Contains("error")), null);
              A.expect(t2, new A._Contains(new A._Contains("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure19.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$2$args$z(t1._readLocal$0(), 1, [3000], t2), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 2, t2), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t2), $async$call$0);
            case 4:
              // returning from await.
              t2 = $async$self.logs;
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("trace")))), null);
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("debug")))), null);
              A.expect(t2, new A._Contains(new A._Contains("info")), null);
              A.expect(t2, new A._Contains(new A._Contains("warning")), null);
              A.expect(t2, new A._Contains(new A._Contains("error")), null);
              A.expect(t2, new A._Contains(new A._Contains("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure20.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$2$args$z(t1._readLocal$0(), 1, [2000], t2), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 2, t2), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t2), $async$call$0);
            case 4:
              // returning from await.
              t2 = $async$self.logs;
              A.expect(t2, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("trace")))), null);
              A.expect(t2, new A._Contains(new A._Contains("debug")), null);
              A.expect(t2, new A._Contains(new A._Contains("info")), null);
              A.expect(t2, new A._Contains(new A._Contains("warning")), null);
              A.expect(t2, new A._Contains(new A._Contains("error")), null);
              A.expect(t2, new A._Contains(new A._Contains("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure21.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$2$args$z(t1._readLocal$0(), 1, [1000], t2), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 2, t2), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t2), $async$call$0);
            case 4:
              // returning from await.
              t2 = $async$self.logs;
              A.expect(t2, new A._Contains(new A._Contains("trace")), null);
              A.expect(t2, new A._Contains(new A._Contains("debug")), null);
              A.expect(t2, new A._Contains(new A._Contains("info")), null);
              A.expect(t2, new A._Contains(new A._Contains("warning")), null);
              A.expect(t2, new A._Contains(new A._Contains("error")), null);
              A.expect(t2, new A._Contains(new A._Contains("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure22.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$2$args$z(t1._readLocal$0(), 1, [0], t2), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 2, t2), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t2), $async$call$0);
            case 4:
              // returning from await.
              t2 = $async$self.logs;
              A.expect(t2, new A._Contains(new A._Contains("trace")), null);
              A.expect(t2, new A._Contains(new A._Contains("debug")), null);
              A.expect(t2, new A._Contains(new A._Contains("info")), null);
              A.expect(t2, new A._Contains(new A._Contains("warning")), null);
              A.expect(t2, new A._Contains(new A._Contains("error")), null);
              A.expect(t2, new A._Contains(new A._Contains("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_closure1.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- Marshaler", new A.execute__closure3(t1));
    },
    $signature: 1
  };
  A.execute__closure3.prototype = {
    call$0() {
      var testWorker = A._Cell$named("testWorker"),
        t1 = this.tc;
      A._declarer().setUpAll$1(new A.execute___closure5(testWorker, t1));
      A._declarer().tearDownAll$1(new A.execute___closure6(testWorker));
      t1.test$2('- unmarshaled "non-native" types work in VM, fail on Web', new A.execute___closure7(testWorker, t1));
      t1.test$2('- unmarshaled "non-native" input types work in VM, fail on Web', new A.execute___closure8(testWorker, t1));
      t1.test$2('- unmarshaled "non-native" output types work in VM, fail on Web', new A.execute___closure9(testWorker, t1));
      t1.test$2('- marshaled "non-native" types always work', new A.execute___closure10(testWorker));
    },
    $signature: 2
  };
  A.execute___closure5.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.testWorker;
              t1.__late_helper$_value = A.TestWorker$($async$self.tc, null);
              $async$goto = 2;
              return A._asyncAwait(J.start$0$x(t1._readLocal$0()), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure6.prototype = {
    call$0() {
      var t1 = this.testWorker._readLocal$0(),
        t2 = J.getInterceptor$x(t1);
      t2.stop$0(t1);
      t2.super$Releasable$release(t1);
    },
    $signature: 2
  };
  A.execute___closure7.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, sum, ex, t1, exception, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.testWorker._readLocal$0().bigIntAdd$4$marshalIn$marshalOut(A._BigIntImpl__BigIntImpl$from(7), A._BigIntImpl__BigIntImpl$from(5), false, false), $async$call$0);
            case 6:
              // returning from await.
              sum = $async$result;
              t1 = $async$self.tc.workerPlatform;
              if (t1 === B.TestPlatform_JavaScript_js || t1 === B.TestPlatform_WebAssembly_wasm) {
                t1 = A.unexpectedSuccess("unmarshalled call to bigIntAdd()", sum);
                throw A.wrapException(t1);
              } else {
                t1 = A._BigIntImpl__BigIntImpl$from(12);
                A.expect(sum, new A._DeepMatcher(t1, 100), null);
              }
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                t1 = $async$self.tc.workerPlatform;
                if (t1 === B.TestPlatform_JavaScript_js || t1 === B.TestPlatform_WebAssembly_wasm)
                  A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("failed to post message"), null);
                else
                  throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure8.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, sum, ex, t1, exception, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.testWorker._readLocal$0().bigIntAdd$4$marshalIn$marshalOut(A._BigIntImpl__BigIntImpl$from(7), A._BigIntImpl__BigIntImpl$from(5), false, true), $async$call$0);
            case 6:
              // returning from await.
              sum = $async$result;
              t1 = $async$self.tc.workerPlatform;
              if (t1 === B.TestPlatform_JavaScript_js || t1 === B.TestPlatform_WebAssembly_wasm) {
                t1 = A.unexpectedSuccess("unmarshalled call to bigIntAdd()", sum);
                throw A.wrapException(t1);
              } else {
                t1 = A._BigIntImpl__BigIntImpl$from(12);
                A.expect(sum, new A._DeepMatcher(t1, 100), null);
              }
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                t1 = $async$self.tc.workerPlatform;
                if (t1 === B.TestPlatform_JavaScript_js || t1 === B.TestPlatform_WebAssembly_wasm)
                  A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("failed to post message"), null);
                else
                  throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, sum, ex, t1, exception, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.testWorker._readLocal$0().bigIntAdd$4$marshalIn$marshalOut(A._BigIntImpl__BigIntImpl$from(7), A._BigIntImpl__BigIntImpl$from(5), true, false), $async$call$0);
            case 6:
              // returning from await.
              sum = $async$result;
              t1 = $async$self.tc.workerPlatform;
              if (t1 === B.TestPlatform_JavaScript_js || t1 === B.TestPlatform_WebAssembly_wasm) {
                t1 = A.unexpectedSuccess("unmarshalled call to bigIntAdd()", sum);
                throw A.wrapException(t1);
              } else {
                t1 = A._BigIntImpl__BigIntImpl$from(12);
                A.expect(sum, new A._DeepMatcher(t1, 100), null);
              }
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                t1 = $async$self.tc.workerPlatform;
                if (t1 === B.TestPlatform_JavaScript_js || t1 === B.TestPlatform_WebAssembly_wasm)
                  A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("failed to post message"), null);
                else
                  throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure10.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, sum, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.testWorker._readLocal$0().bigIntAdd$4$marshalIn$marshalOut(A._BigIntImpl__BigIntImpl$from(7), A._BigIntImpl__BigIntImpl$from(5), true, true), $async$call$0);
            case 2:
              // returning from await.
              sum = $async$result;
              t1 = A._BigIntImpl__BigIntImpl$from(12);
              A.expect(sum, new A._DeepMatcher(t1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.MemoryLogger.prototype = {
    log$5$error$stackTrace$time(level, message, error, stackTrace, time) {
      var msg,
        t1 = this._memory_logger$_filter._level;
      if (t1 == null)
        t1 = B.Level_1000_trace;
      if (level.value >= t1.value) {
        msg = type$.Function._is(message) ? message.call$0() : message;
        t1 = msg == null ? null : J.toString$0$(msg);
        if (t1 == null)
          t1 = error == null ? null : J.toString$0$(error);
        if (t1 == null)
          t1 = "<no log message>";
        B.JSArray_methods.add$1(this._logs, t1);
      }
      this.super$Logger$log(level, message, error, stackTrace, time == null ? new A.DateTime(Date.now(), false) : time);
    }
  };
  A.MemoryLogFilter.prototype = {
    shouldLog$1($event) {
      var t1 = this._level;
      if (t1 == null)
        t1 = B.Level_1000_trace;
      return $event.level.value >= t1.value;
    }
  };
  A.MissingWorker.prototype = {};
  A.PrimeWorkerPool.prototype = {
    isPrime$2(n, counter) {
      return this.execute$1$2$counter(new A.PrimeWorkerPool_isPrime_closure(n), counter, type$.bool);
    },
    isPrime$1(n) {
      return this.isPrime$2(n, null);
    },
    getPrimes$3(min, max, counter) {
      var t1 = this.stream$1$2$counter(0, new A.PrimeWorkerPool_getPrimes_closure(min, max), counter, type$.int),
        t2 = t1.$ti;
      return new A._MapStream(t2._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t1, t2._eval$1("_MapStream<Stream.T,int>"));
    }
  };
  A.PrimeWorkerPool_closure.prototype = {
    call$0() {
      return A.PrimeWorker$(this.context, this.cache);
    },
    $signature: 153
  };
  A.PrimeWorkerPool_isPrime_closure.prototype = {
    call$1(w) {
      return this.$call$body$PrimeWorkerPool_isPrime_closure(type$.PrimeWorker._as(w));
    },
    $call$body$PrimeWorkerPool_isPrime_closure(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this, t1, t2;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.bool;
              t2 = w.send$1$2$args(0, 1, [$async$self.n], t1);
              $async$goto = 3;
              return A._asyncAwait(type$.Future_bool._is(t2) ? t2 : A._Future$value(A._asBool(t2), t1), $async$call$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 154
  };
  A.PrimeWorkerPool_getPrimes_closure.prototype = {
    call$1(w) {
      var t1 = type$.PrimeWorker._as(w).stream$1$2$args(0, 2, [this.min, this.max], type$.int),
        t2 = A._instanceType(t1);
      return new A._MapStream(t2._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t1, t2._eval$1("_MapStream<Stream.T,int>"));
    },
    $signature: 155
  };
  A.PrimeWorker.prototype = {};
  A.execute_closure4.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- Shared Channel", new A.execute__closure6(t1));
    },
    $signature: 1
  };
  A.execute__closure6.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- cache worker", new A.execute___closure26(t1));
      t1.test$2("- prime worker with cache", new A.execute___closure27(t1));
    },
    $signature: 2
  };
  A.execute___closure26.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t2, cache, t1, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              cache = A.CacheWorker$($async$self.tc);
              t1 = type$.dynamic;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(cache.send$1$2$args(0, 1, [1], t1), $async$call$0);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsNull, null);
              t2 = type$.bool;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(cache.send$1$2$args(0, 2, [1], t2), $async$call$0);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsFalse, null);
              $async$goto = 4;
              return A._asyncAwait(cache.send$1$2$args(0, 3, [1, "in cache", null], t1), $async$call$0);
            case 4:
              // returning from await.
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(cache.send$1$2$args(0, 2, [1], t2), $async$call$0);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              $async$goto = 6;
              return A._asyncAwait(cache.send$1$2$args(0, 1, [1], t1), $async$call$0);
            case 6:
              // returning from await.
              t1 = $async$result;
              A.expect(t1, new A._StringEqualsMatcher("in cache"), null);
              cache.stop$0(0);
              A.expect(cache._worker$_stopped != null, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure27.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, cacheStats, primeWorker, sw, t2, t3, t4, t5, t6, elapsedWithEmptyCache, elapsedWithFullCache, t1, cache, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc;
              cache = A.CacheWorker$(t1);
              $async$goto = 2;
              return A._asyncAwait(cache.start$0(0), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(cache.getStats$0(0), $async$call$0);
            case 3:
              // returning from await.
              cacheStats = $async$result;
              A.expect(cacheStats.hit, B._OrderingMatcher_Kvb, null);
              A.expect(cacheStats.miss, B._OrderingMatcher_Kvb, null);
              A.expect(cacheStats.expired, B._OrderingMatcher_Kvb, null);
              A.expect(cacheStats.size, B._OrderingMatcher_Kvb, null);
              A.expect(cacheStats.maxSize, B._OrderingMatcher_Kvb, null);
              primeWorker = A.PrimeWorker$(t1, cache);
              sw = new A.Stopwatch();
              $.$get$Stopwatch__frequency();
              sw.start$0(0);
              t1 = B.Set_ozoMd.get$iterator(B.Set_ozoMd), t2 = type$._Future_bool, t3 = type$.Future_bool, t4 = type$.bool;
            case 4:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t5 = primeWorker.send$1$2$args(0, 1, [t1.get$current(0)], t4);
              if (!t3._is(t5)) {
                A._asBool(t5);
                t6 = new A._Future($.Zone__current, t2);
                t6._state = 8;
                t6._resultOrListeners = t5;
                t5 = t6;
              }
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait(t5, $async$call$0);
            case 6:
              // returning from await.
              $async$temp1._expect($async$result, B.C__IsTrue, null, null, null, false);
              // goto for condition
              $async$goto = 4;
              break;
            case 5:
              // after for
              elapsedWithEmptyCache = sw.get$elapsedMicroseconds();
              $async$goto = 7;
              return A._asyncAwait(cache.getStats$0(0), $async$call$0);
            case 7:
              // returning from await.
              cacheStats = $async$result;
              A.expect(cacheStats.hit, B._OrderingMatcher_Kvb, null);
              A.expect(cacheStats.miss, B._OrderingMatcher_g8g, null);
              A.expect(cacheStats.expired, B._OrderingMatcher_Kvb, null);
              t1 = cacheStats.size;
              A.expect(t1, B._OrderingMatcher_g8g, null);
              t5 = cacheStats.maxSize;
              A.expect(t5, new A._DeepMatcher(t1, 100), null);
              t1 = sw._stop;
              sw._start = t1 == null ? $.Primitives_timerTicks.call$0() : t1;
              t1 = B.Set_ozoMd.get$iterator(B.Set_ozoMd);
            case 8:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 9;
                break;
              }
              t5 = primeWorker.send$1$2$args(0, 1, [t1.get$current(0)], t4);
              if (!t3._is(t5)) {
                A._asBool(t5);
                t6 = new A._Future($.Zone__current, t2);
                t6._state = 8;
                t6._resultOrListeners = t5;
                t5 = t6;
              }
              $async$temp1 = A;
              $async$goto = 10;
              return A._asyncAwait(t5, $async$call$0);
            case 10:
              // returning from await.
              $async$temp1._expect($async$result, B.C__IsTrue, null, null, null, false);
              // goto for condition
              $async$goto = 8;
              break;
            case 9:
              // after for
              elapsedWithFullCache = sw.get$elapsedMicroseconds();
              $async$goto = 11;
              return A._asyncAwait(cache.getStats$0(0), $async$call$0);
            case 11:
              // returning from await.
              cacheStats = $async$result;
              t1 = cacheStats.hit;
              A.expect(t1, B._OrderingMatcher_g8g, null);
              t2 = cacheStats.miss;
              A.expect(t2, B._OrderingMatcher_g8g, null);
              A.expect(t1, new A._DeepMatcher(t2, 100), null);
              A.expect(cacheStats.expired, B._OrderingMatcher_Kvb, null);
              t1 = cacheStats.size;
              A.expect(t1, B._OrderingMatcher_g8g, null);
              t2 = cacheStats.maxSize;
              A.expect(t2, new A._DeepMatcher(t1, 100), null);
              A.expect(elapsedWithFullCache, new A._OrderingMatcher(elapsedWithEmptyCache / 5, false, true, false, "a value less than", true), null);
              primeWorker.stop$0(0);
              A.expect(primeWorker._worker$_stopped != null, B.C__IsTrue, null);
              cache.stop$0(0);
              A.expect(cache._worker$_stopped != null, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.TestContext.prototype = {
    get$done() {
      var t1 = this._completer;
      t1 = t1 == null ? null : t1.future.then$1$1(new A.TestContext_done_closure(this), type$.bool);
      return t1 == null ? A.Future_Future$value(this._canceled, type$.bool) : t1;
    },
    run$1(testSuite) {
      var _this = this;
      type$.void_Function._as(testSuite);
      if (_this._completer == null) {
        _this._canceled = false;
        _this._completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
        _this.testResults.clear$0(0);
      }
      A.group(_this.workerPlatform.label + " workers / JavaScript test client", testSuite);
    },
    test$3$skip(label, body, skip) {
      var savedPath, t1, _this = this;
      type$.dynamic_Function._as(body);
      savedPath = _this._testPath;
      t1 = (savedPath.length !== 0 ? _this._testPath = savedPath + " " : savedPath) + label;
      _this._testPath = t1;
      if (!$.$get$TestContext__knownTests().contains$1(0, t1))
        A.print("Unregistered test " + _this._testPath);
      if (!skip) {
        t1 = _this.onlyTests;
        t1 = t1._collection$_length === 0 || t1.any$1(0, new A.TestContext_test_closure(_this));
      } else
        t1 = false;
      if (t1) {
        ++_this._pending;
        A.test(label, new A.TestContext_test_closure0(_this, _this._testPath, body, A.Timer_Timer(A.Duration$(0, 0, 30), new A.TestContext_test_closure1(_this))));
      }
      _this._testPath = savedPath;
    },
    test$2(label, body) {
      return this.test$3$skip(label, body, false);
    },
    group$2(label, body) {
      var savedPath, t1, _this = this;
      type$.dynamic_Function._as(body);
      savedPath = _this._testPath;
      t1 = (savedPath.length !== 0 ? _this._testPath = savedPath + " " : savedPath) + label;
      _this._testPath = t1;
      if (!$.$get$TestContext__knownGroups().contains$1(0, t1))
        A.print("Unregistered group " + _this._testPath);
      A.group(label, body);
      _this._testPath = savedPath;
    }
  };
  A.TestContext_done_closure.prototype = {
    call$1(_) {
      return this.$this._canceled;
    },
    $signature: 156
  };
  A.TestContext_test_closure.prototype = {
    call$1(t) {
      return !J.allMatches$1$s(type$.Pattern._as(t), this.$this._testPath).get$isEmpty(0);
    },
    $signature: 157
  };
  A.TestContext_test_closure1.prototype = {
    call$0() {
      var t2,
        t1 = this.$this;
      if (--t1._pending === 0) {
        t2 = t1._completer;
        t2 = (t2 == null ? null : (t2.future._state & 30) !== 0) === false;
      } else
        t2 = false;
      if (t2) {
        t1._completer.complete$0(0);
        t1._completer = null;
      }
    },
    $signature: 1
  };
  A.TestContext_test_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, res, ex, st, t1, t2, exception, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              t1 = $async$self.$this;
              $async$goto = t1._canceled ? 6 : 8;
              break;
            case 6:
              // then
              t2 = $async$self.currentTest;
              A.print('Test "' + t2 + '" cancelled');
              t1.testResults.$indexSet(0, t2, new A.TestResult());
              // goto join
              $async$goto = 7;
              break;
            case 8:
              // else
              res = $async$self.body.call$0();
              $async$goto = res instanceof A._Future ? 9 : 10;
              break;
            case 9:
              // then
              $async$goto = 11;
              return A._asyncAwait(res, $async$call$0);
            case 11:
              // returning from await.
            case 10:
              // join
              t1.testResults.$indexSet(0, $async$self.currentTest, new A.TestResult());
            case 7:
              // join
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              $async$self.$this.testResults.$indexSet(0, $async$self.currentTest, new A.TestResult());
              throw $async$exception;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              $async$self.timeout.cancel$0(0);
              t1 = $async$self.$this;
              if (--t1._pending === 0) {
                t2 = t1._completer;
                t2 = (t2 == null ? null : (t2.future._state & 30) !== 0) === false;
              } else
                t2 = false;
              if (t2) {
                t1._completer.complete$0(0);
                t1._completer = null;
              }
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.TestResult.prototype = {};
  A.TestEntryPoints.prototype = {};
  A.NoOutput.prototype = {
    output$1($event) {
    }
  };
  A.EmptyPrinter.prototype = {
    log$1($event) {
      return B.List_2No;
    }
  };
  A.TestPlatform.prototype = {
    _enumToString$0() {
      return "TestPlatform." + this._name;
    }
  };
  A.run_closure.prototype = {
    call$1(r) {
      type$.Pattern._as(r);
      return r instanceof A.JSSyntaxRegExp ? r.pattern : J.toString$0$(r);
    },
    $signature: 158
  };
  A.run_closure0.prototype = {
    call$1(t) {
      var t1;
      type$.Timer._as(t);
      t1 = this.testContext._pending;
      if (t1 === 0)
        t.cancel$0(0);
      else
        A.reportStatus("" + t1 + " tests pending...");
    },
    $signature: 41
  };
  A.run_closure1.prototype = {
    call$1(canceled) {
      return A.reportStatus(A._asBool(canceled) ? "Cancelled" : "Done");
    },
    $signature: 70
  };
  A.main_closure.prototype = {
    call$1(message) {
      var t1 = message == null ? null : J.toString$0$(message);
      if (t1 == null)
        t1 = "(null)";
      this.htmlLogger.print$1(0, t1);
    },
    $signature: 6
  };
  A.main_closure0.prototype = {
    call$1(m) {
      var t1, t2;
      type$.MessageEvent._as(m);
      if (J.$eq$(new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(m.data, true), "@@CANCELLED@@")) {
        t1 = this._box_0.context;
        if (t1 != null) {
          t2 = t1._completer;
          if ((t2 == null ? null : (t2.future._state & 30) !== 0) === false) {
            t1._canceled = true;
            t2.complete$0(0);
            t1._completer = null;
          }
        }
      } else
        A.print("(*) " + A.S(new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(m.data, true)));
    },
    $signature: 20
  };
  A.TestWorkerPool.prototype = {
    io$1$ms(ms) {
      return this.execute$1$1(new A.TestWorkerPool_io_closure(ms), type$.dynamic);
    },
    delayed$1(n) {
      return this.execute$1$1(new A.TestWorkerPool_delayed_closure(n), type$.int);
    },
    throwTaskTimeOutException$0() {
      return this.execute$1$1(new A.TestWorkerPool_throwTaskTimeOutException_closure(), type$.int);
    },
    throwCanceledException$0() {
      return this.execute$1$1(new A.TestWorkerPool_throwCanceledException_closure(), type$.int);
    },
    throwCustomException$0() {
      return this.execute$1$1(new A.TestWorkerPool_throwCustomException_closure(), type$.int);
    },
    ping$0() {
      return this.execute$1$1(new A.TestWorkerPool_ping_closure(), type$.bool);
    },
    finite$2(count, token) {
      return this.stream$1$1(0, new A.TestWorkerPool_finite_closure(count, token), type$.int);
    },
    finite$1(count) {
      return this.finite$2(count, null);
    },
    getPendingInfiniteWithErrors$0() {
      return this.concurrencySettings.maxWorkers === 1 ? this.execute$1$1(new A.TestWorkerPool_getPendingInfiniteWithErrors_closure(), type$.int) : A.throwExpression(A.WorkerException$("getPendingInfiniteWithErrors() is not supported for worker pools with maxWorker != 1", null, null));
    },
    infiniteWithErrors$1(token) {
      return this.stream$1$1(0, new A.TestWorkerPool_infiniteWithErrors_closure(token), type$.int);
    },
    delayedIdentityTask$1(n) {
      return this.scheduleTask$1$1(new A.TestWorkerPool_delayedIdentityTask_closure(n), type$.int);
    },
    finiteTask$1(n) {
      return this.scheduleStream$1$1(new A.TestWorkerPool_finiteTask_closure(n, null), type$.int);
    },
    infiniteWithErrorsTask$1(token) {
      return this.scheduleStream$1$1(new A.TestWorkerPool_infiniteWithErrorsTask_closure(token), type$.int);
    }
  };
  A.TestWorkerPool_closure.prototype = {
    call$0() {
      return A.TestWorker$(this.context, null);
    },
    $signature: 39
  };
  A.TestWorkerPool$throws_closure.prototype = {
    call$0() {
      return A.TestWorker$throws(this.context);
    },
    $signature: 39
  };
  A.TestWorkerPool$missingStartRequest_closure.prototype = {
    call$0() {
      return A.TestWorker$missingStartRequest(this.context);
    },
    $signature: 39
  };
  A.TestWorkerPool$invalid_closure.prototype = {
    call$0() {
      return A.TestWorker$invalid(this.context);
    },
    $signature: 39
  };
  A.TestWorkerPool_io_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).send$1$2$args(0, 11, [this.ms], type$.dynamic);
    },
    $signature: 161
  };
  A.TestWorkerPool_delayed_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).delayed$1(this.n);
    },
    $signature: 16
  };
  A.TestWorkerPool_throwTaskTimeOutException_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).send$1$1(0, 23, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int);
    },
    $signature: 16
  };
  A.TestWorkerPool_throwCanceledException_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).send$1$1(0, 24, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int);
    },
    $signature: 16
  };
  A.TestWorkerPool_throwCustomException_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).send$1$1(0, 25, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int);
    },
    $signature: 16
  };
  A.TestWorkerPool_ping_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).send$1$1(0, 34, type$.bool);
    },
    $signature: 163
  };
  A.TestWorkerPool_finite_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).finite$2(this.count, this.token);
    },
    $signature: 36
  };
  A.TestWorkerPool_getPendingInfiniteWithErrors_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).send$1$1(0, 45, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int);
    },
    $signature: 16
  };
  A.TestWorkerPool_infiniteWithErrors_closure.prototype = {
    call$1(w) {
      var t1 = type$.TestWorker._as(w).stream$1$2$token(0, 46, this.token, type$.dynamic),
        t2 = A._instanceType(t1);
      return new A._MapStream(t2._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t1, t2._eval$1("_MapStream<Stream.T,int>"));
    },
    $signature: 36
  };
  A.TestWorkerPool_delayedIdentityTask_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).delayed$1(this.n);
    },
    $signature: 16
  };
  A.TestWorkerPool_finiteTask_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).finite$2(this.n, this.token);
    },
    $signature: 36
  };
  A.TestWorkerPool_infiniteWithErrorsTask_closure.prototype = {
    call$1(w) {
      var t1 = type$.TestWorker._as(w).stream$1$2$token(0, 46, this.token, type$.dynamic),
        t2 = A._instanceType(t1);
      return new A._MapStream(t2._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t1, t2._eval$1("_MapStream<Stream.T,int>"));
    },
    $signature: 36
  };
  A.TestWorker.prototype = {
    delayed$1(n) {
      return this.send$1$2$args(0, 13, [n], type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int);
    },
    finite$2(count, token) {
      var t1 = this.stream$1$3$args$token(0, 41, [count], token, type$.dynamic),
        t2 = A._instanceType(t1);
      return new A._MapStream(t2._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t1, t2._eval$1("_MapStream<Stream.T,int>"));
    },
    bigIntAdd$4$marshalIn$marshalOut(a, b, marshalIn, marshalOut) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.BigInt),
        $async$returnValue, $async$self = this, result, t1, $$a, res;
      var $async$bigIntAdd$4$marshalIn$marshalOut = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $$a = marshalIn ? a.toString$0(0) : a;
              $async$goto = 3;
              return A._asyncAwait($async$self.send$1$4$args$inspectRequest$inspectResponse(0, 51, [$$a, marshalIn ? b.toString$0(0) : b, marshalIn, marshalOut], true, true, type$.dynamic), $async$bigIntAdd$4$marshalIn$marshalOut);
            case 3:
              // returning from await.
              res = $async$result;
              if (marshalOut) {
                A._asString(res);
                result = A._BigIntImpl__tryParse(res, null);
                if (result == null)
                  A.throwExpression(A.FormatException$("Could not parse BigInt", res, null));
                t1 = result;
              } else
                t1 = res;
              $async$returnValue = type$.FutureOr_BigInt._as(t1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$bigIntAdd$4$marshalIn$marshalOut, $async$completer);
    }
  };
  A.execute_closure7.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- WebWorker", new A.execute__closure9(t1));
    },
    $signature: 1
  };
  A.execute__closure9.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- native Web Worker", new A.execute___closure42(t1));
      t1.test$2("- classic Web Worker", new A.execute___closure43(t1));
      t1.test$2("- in-memory Web Worker", new A.execute___closure44(t1));
      t1.test$2("- missing Web Worker (JavaScript)", new A.execute___closure45());
      t1.test$2("- missing Web Worker (WebAssembly)", new A.execute___closure46());
    },
    $signature: 2
  };
  A.execute___closure42.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, ep, worker, completer, res, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc.entryPoints.native;
              t1.toString;
              ep = A.getEntryPointUrl(t1);
              t1 = new Worker(ep._1);
              t1.toString;
              worker = t1;
              A.expect(worker, B.C__IsNotNull, null);
              $async$handler = 2;
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_String), type$._AsyncCompleter_String);
              t1 = type$.nullable_EventTarget;
              A._EventStreamSubscription$(t1._as(worker), "error", type$.nullable_void_Function_Event._as(new A.execute____closure86(completer)), false, type$.Event);
              A._EventStreamSubscription$(t1._as(worker), "message", type$.nullable_void_Function_MessageEvent._as(new A.execute____closure87(completer)), false, type$.MessageEvent);
              J.postMessage$1$x(worker, "Hello");
              $async$goto = 5;
              return A._asyncAwait(completer.future, $async$call$0);
            case 5:
              // returning from await.
              res = $async$result;
              A.expect(res, new A._StringEqualsMatcher('ECHO "Hello"'), null);
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              if (A.boolConversionCheck(ep._0))
                (self.URL || self.webkitURL).revokeObjectURL(ep._1);
              J.terminate$0$x(worker);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure86.prototype = {
    call$1(e) {
      var err = A._errorFromEvent(e);
      this.completer.completeError$1(err);
    },
    $signature: 14
  };
  A.execute____closure87.prototype = {
    call$1(e) {
      this.completer.complete$1(0, type$.nullable_FutureOr_String._as(new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(type$.MessageEvent._as(e).data, true)));
    },
    $signature: 20
  };
  A.execute___closure43.prototype = {
    call$0() {
      return this.$call$body$execute___closure();
    },
    $call$body$execute___closure() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, ep, worker, ready, completer, ok, res, t3, t4, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = $async$self.tc.entryPoints.echo;
              t2.toString;
              ep = A.getEntryPointUrl(t2);
              t2 = new Worker(ep._1);
              t2.toString;
              worker = t2;
              A.expect(worker, B.C__IsNotNull, null);
              $async$handler = 2;
              t2 = $.Zone__current;
              ready = new A._AsyncCompleter(new A._Future(t2, type$._Future_bool), type$._AsyncCompleter_bool);
              completer = new A._AsyncCompleter(new A._Future(t2, type$._Future_String), type$._AsyncCompleter_String);
              t2 = type$.nullable_EventTarget;
              A._EventStreamSubscription$(t2._as(worker), "error", type$.nullable_void_Function_Event._as(new A.execute____closure83(ready, completer)), false, type$.Event);
              t1.readySub = null;
              t3 = type$.nullable_void_Function_MessageEvent;
              t4 = type$.MessageEvent;
              t1.readySub = A._EventStreamSubscription$(t2._as(worker), "message", t3._as(new A.execute____closure84(t1, ready)), false, t4);
              $async$goto = 5;
              return A._asyncAwait(ready.future, $async$call$0);
            case 5:
              // returning from await.
              ok = $async$result;
              A.expect(ok, B.C__IsTrue, null);
              A._EventStreamSubscription$(t2._as(worker), "message", t3._as(new A.execute____closure85(completer)), false, t4);
              J.postMessage$1$x(worker, "Hello");
              $async$goto = 6;
              return A._asyncAwait(completer.future, $async$call$0);
            case 6:
              // returning from await.
              res = $async$result;
              A.expect(res, new A._StringEqualsMatcher('ECHO "Hello"'), null);
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              if (A.boolConversionCheck(ep._0))
                (self.URL || self.webkitURL).revokeObjectURL(ep._1);
              J.terminate$0$x(worker);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure83.prototype = {
    call$1(e) {
      var err = A._errorFromEvent(e);
      this.ready.completeError$1(err);
      this.completer.completeError$1(err);
    },
    $signature: 14
  };
  A.execute____closure84.prototype = {
    call$1(e) {
      var $status;
      type$.MessageEvent._as(e);
      this._box_0.readySub.cancel$0(0);
      $status = A.WorkerResponseExt_from(type$.List_dynamic._as(new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(e.data, true)));
      this.ready.complete$1(0, type$.nullable_FutureOr_bool._as(A.WorkerResponse_get_result($status)));
    },
    $signature: 20
  };
  A.execute____closure85.prototype = {
    call$1(e) {
      var t1 = new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(type$.MessageEvent._as(e).data, true);
      t1 = t1 == null ? null : J.toString$0$(t1);
      if (t1 == null)
        t1 = "";
      this.completer.complete$1(0, t1);
    },
    $signature: 20
  };
  A.execute___closure44.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, worker, completer, res, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new Worker($async$self.tc.entryPoints.inMemory.toString$0(0));
              t1.toString;
              worker = t1;
              A.expect(worker, B.C__IsNotNull, null);
              $async$handler = 2;
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_String), type$._AsyncCompleter_String);
              t1 = type$.nullable_EventTarget;
              A._EventStreamSubscription$(t1._as(worker), "error", type$.nullable_void_Function_Event._as(new A.execute____closure81(completer)), false, type$.Event);
              A._EventStreamSubscription$(t1._as(worker), "message", type$.nullable_void_Function_MessageEvent._as(new A.execute____closure82(completer)), false, type$.MessageEvent);
              J.postMessage$1$x(worker, "Hello");
              $async$goto = 5;
              return A._asyncAwait(completer.future, $async$call$0);
            case 5:
              // returning from await.
              res = $async$result;
              A.expect(res, new A._StringEqualsMatcher('ECHO "Hello"'), null);
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              J.terminate$0$x(worker);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure81.prototype = {
    call$1($event) {
      var err = A._errorFromEvent($event);
      this.completer.completeError$1(err);
    },
    $signature: 14
  };
  A.execute____closure82.prototype = {
    call$1(e) {
      this.completer.complete$1(0, type$.nullable_FutureOr_String._as(new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(type$.MessageEvent._as(e).data, true)));
    },
    $signature: 20
  };
  A.execute___closure45.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], worker, connected, completer, success, res, ex, exception, ep, t1, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              ep = A.getEntryPointUrl(A.Uri_parse("not_found.js"));
              t1 = new Worker(ep._1);
              t1.toString;
              worker = t1;
              A.expect(worker, B.C__IsNotNull, null);
              connected = false;
              $async$handler = 2;
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_String), type$._AsyncCompleter_String);
              t1 = type$.nullable_EventTarget;
              A._EventStreamSubscription$(t1._as(worker), "error", type$.nullable_void_Function_Event._as(new A.execute____closure79(completer)), false, type$.Event);
              A._EventStreamSubscription$(t1._as(worker), "message", type$.nullable_void_Function_MessageEvent._as(new A.execute____closure80(completer)), false, type$.MessageEvent);
              success = false;
              $async$handler = 6;
              J.postMessage$1$x(worker, "Hello");
              $async$goto = 9;
              return A._asyncAwait(completer.future, $async$call$0);
            case 9:
              // returning from await.
              res = $async$result;
              success = true;
              t1 = A.unexpectedSuccess("message processed by missing worker", res);
              throw A.wrapException(t1);
              $async$handler = 2;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$currentError;
              ex = A.unwrapException($async$exception);
              A.print("success = " + A.S(success) + ", ex = " + J.get$runtimeType$(ex).toString$0(0) + " " + A.S(ex));
              if (A.boolConversionCheck(success))
                throw $async$exception;
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto uncaught
              $async$goto = 2;
              break;
            case 8:
              // after finally
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              A.expect(connected, B.C__IsFalse, null);
              if (A.boolConversionCheck(ep._0))
                (self.URL || self.webkitURL).revokeObjectURL(ep._1);
              J.terminate$0$x(worker);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure79.prototype = {
    call$1($event) {
      var err = A._errorFromEvent($event);
      this.completer.completeError$1(err);
    },
    $signature: 14
  };
  A.execute____closure80.prototype = {
    call$1(e) {
      var t1, t2,
        data = new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(type$.MessageEvent._as(e).data, true),
        res = A.WorkerResponseExt_from(type$.List_dynamic._as(data));
      if (!A.WorkerResponseExt_unwrapInPlace(res, A.ExceptionManager$(), null))
        return;
      t1 = type$.nullable_SquadronException;
      t2 = this.completer;
      if (t1._as(J.$index$asx(res, 2)) != null) {
        t1 = t1._as(J.$index$asx(res, 2));
        t1.toString;
        t2.completeError$1(t1);
      } else
        t2.complete$1(0, "processed message with result " + A.S(A.WorkerResponse_get_result(res)));
    },
    $signature: 20
  };
  A.execute___closure46.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], worker, connected, completer, success, res, exception, ep, t1, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              ep = A.getEntryPointUrl(A.Uri_parse("not_found.wasm"));
              t1 = new Worker(ep._1);
              t1.toString;
              worker = t1;
              A.expect(worker, B.C__IsNotNull, null);
              connected = false;
              $async$handler = 2;
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_String), type$._AsyncCompleter_String);
              t1 = type$.nullable_EventTarget;
              A._EventStreamSubscription$(t1._as(worker), "error", type$.nullable_void_Function_Event._as(new A.execute____closure77(completer)), false, type$.Event);
              A._EventStreamSubscription$(t1._as(worker), "message", type$.nullable_void_Function_MessageEvent._as(new A.execute____closure78(completer)), false, type$.MessageEvent);
              success = false;
              $async$handler = 6;
              J.postMessage$1$x(worker, "Hello");
              $async$goto = 9;
              return A._asyncAwait(completer.future, $async$call$0);
            case 9:
              // returning from await.
              res = $async$result;
              success = true;
              t1 = A.unexpectedSuccess("message processed by missing worker", res);
              throw A.wrapException(t1);
              $async$handler = 2;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$currentError;
              if (A.boolConversionCheck(success))
                throw $async$exception;
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto uncaught
              $async$goto = 2;
              break;
            case 8:
              // after finally
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              A.expect(connected, B.C__IsFalse, null);
              if (A.boolConversionCheck(ep._0))
                (self.URL || self.webkitURL).revokeObjectURL(ep._1);
              J.terminate$0$x(worker);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure77.prototype = {
    call$1($event) {
      var err = A._errorFromEvent($event);
      this.completer.completeError$1(err);
    },
    $signature: 14
  };
  A.execute____closure78.prototype = {
    call$1(e) {
      var t1, t2,
        data = new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(type$.MessageEvent._as(e).data, true),
        res = A.WorkerResponseExt_from(type$.List_dynamic._as(data));
      if (!A.WorkerResponseExt_unwrapInPlace(res, A.ExceptionManager$(), null))
        return;
      t1 = type$.nullable_SquadronException;
      t2 = this.completer;
      if (t1._as(J.$index$asx(res, 2)) != null) {
        t1 = t1._as(J.$index$asx(res, 2));
        t1.toString;
        t2.completeError$1(t1);
      } else
        t2.complete$1(0, "processed message with result " + A.S(A.WorkerResponse_get_result(res)));
    },
    $signature: 20
  };
  A.execute_closure5.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- WorkerPool", new A.execute__closure7(t1, A.Logger$(null, B.Level_0_all, null, null)));
    },
    $signature: 1
  };
  A.execute__closure7.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- prime worker pool with cache", new A.execute___closure28(t1));
      t1.test$2("- worker pool monitoring", new A.execute___closure29(t1));
      t1.group$2("- initialization error", new A.execute___closure30(t1));
      t1.group$2("- error handling", new A.execute___closure31(t1));
      t1.test$2("- value - performance", new A.execute___closure32(t1, this.logger));
      t1.test$2("- streaming - performance", new A.execute___closure33(t1));
      t1.test$2("- stopped pool will not accept new requests", new A.execute___closure34(t1));
      t1.test$2("- restarted pool will serve new requests", new A.execute___closure35(t1));
      t1.test$2("- pool termination does not prevent processing of pending tasks", new A.execute___closure36(t1));
      t1.group$2("- Streaming", new A.execute___closure37(t1));
    },
    $signature: 2
  };
  A.execute___closure28.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.CacheWorker$(t1), new A.execute____closure53(t1), type$.CacheWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure53.prototype = {
    call$1(cache) {
      return this.$call$body$execute____closure15(type$.CacheWorker._as(cache));
    },
    $call$body$execute____closure15(cache) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(cache.start$0(0), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A.Using_useAsync(A.PrimeWorkerPool$($async$self.tc, cache, B.ConcurrencySettings_2_2_2), new A.execute_____closure80(), type$.PrimeWorkerPool, type$.Null), $async$call$1);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 165
  };
  A.execute_____closure80.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure20(type$.PrimeWorkerPool._as(pool));
    },
    $call$body$execute_____closure20(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        completedTasks, tasks, t2, taskId, i, t3, t4, stats, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = pool.start$0(0);
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 2:
              // returning from await.
              completedTasks = A._setArrayType([], type$.JSArray_int);
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (t1 = pool.concurrencySettings, t2 = t1.maxWorkers, t1 = t2 * t1.maxParallel, taskId = 0, i = 1; i <= t1; ++i) {
                ++taskId;
                B.JSArray_methods.add$1(tasks, pool.isPrime$1(i).whenComplete$1(new A.execute______closure17(completedTasks, taskId)));
              }
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, type$.dynamic), $async$call$1);
            case 3:
              // returning from await.
              t1 = completedTasks.length;
              t3 = tasks.length;
              A.expect(t1, new A._DeepMatcher(t3, 100), null);
              t1 = pool._workers;
              t3 = A._arrayInstanceType(t1);
              t4 = t3._eval$1("MappedListIterable<1,WorkerStat>");
              stats = A.List_List$of(new A.MappedListIterable(t1, t3._eval$1("WorkerStat(1)")._as(A._pool_worker_PoolWorker_getStats$closure()), t4), true, t4._eval$1("ListIterable.E"));
              t4 = stats.length;
              A.expect(t4, new A._DeepMatcher(t2, 100), null);
              A.expect(B.JSArray_methods.every$1(stats, new A.execute______closure18(pool)), B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 52
  };
  A.execute______closure17.prototype = {
    call$0() {
      return B.JSArray_methods.add$1(this.completedTasks, this.id);
    },
    $signature: 1
  };
  A.execute______closure18.prototype = {
    call$1(s) {
      return type$.WorkerStat._as(s).maxWorkload <= this.pool.concurrencySettings.maxParallel;
    },
    $signature: 167
  };
  A.execute___closure29.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, new A.ConcurrencySettings(2, 5, 3)), new A.execute____closure52(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure52.prototype = {
    call$1(pool) {
      return this.$call$body$execute____closure14(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute____closure14(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t3, t4, tasks, t5, timer, _box_0, i, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              i = _box_0.stopped = 0;
              t1 = pool.start$0(0);
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 2:
              // returning from await.
              t1 = pool._workers;
              t2 = t1.length;
              t3 = pool.concurrencySettings;
              t4 = t3.minWorkers;
              A.expect(t2, new A._DeepMatcher(t4, 100), null);
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (t2 = t3.maxWorkers, t3 = 2 * (t2 * t3.maxParallel) + 1; i < t3; ++i)
                B.JSArray_methods.add$1(tasks, pool.io$1$ms(800));
              t3 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(240000), null, t3), $async$call$1);
            case 3:
              // returning from await.
              t5 = t1.length;
              A.expect(t5, new A._DeepMatcher(t2, 100), null);
              A.expect(_box_0.stopped, B._OrderingMatcher_Kvb, null);
              timer = A.Timer_Timer$periodic(new A.Duration(40000), new A.execute_____closure79(_box_0, pool, B.Duration_80000));
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, t3), $async$call$1);
            case 4:
              // returning from await.
              A.expect(_box_0.stopped, B._OrderingMatcher_Kvb, null);
              $async$goto = 5;
              return A._asyncAwait(A.Future_wait(tasks, false, t3), $async$call$1);
            case 5:
              // returning from await.
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(240000), null, t3), $async$call$1);
            case 6:
              // returning from await.
              A.expect(_box_0.stopped, B._OrderingMatcher_g8g, null);
              t1 = t1.length;
              A.expect(t1, new A._DeepMatcher(t4, 100), null);
              timer.cancel$0(0);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute_____closure79.prototype = {
    call$1(timer) {
      var t1;
      type$.Timer._as(timer);
      t1 = this._box_0;
      t1.stopped = t1.stopped + this.pool.stop$1(0, new A.execute______closure16(this.maxIdle));
    },
    $signature: 41
  };
  A.execute______closure16.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).get$idleTime()._duration > this.maxIdle._duration;
    },
    $signature: 169
  };
  A.execute___closure30.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- failed init", new A.execute____closure49(t1));
      t1.test$3$skip("- missing command", new A.execute____closure50(t1), true);
      t1.test$2("- invalid command ID", new A.execute____closure51(t1));
    },
    $signature: 2
  };
  A.execute____closure49.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$throws($async$self.tc), new A.execute_____closure78(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure78.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure19(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute_____closure19(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, t1, exception, $async$exception, $async$exception1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              t1 = pool.start$0(0);
              $async$goto = 6;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 6:
              // returning from await.
              t1 = A.unexpectedSuccess("start()", null);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              if (!type$.SquadronError._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait(pool.ping$0(), $async$call$1);
            case 11:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("ping()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception1 = $async$currentError;
              if (!type$.CanceledException._is(A.unwrapException($async$exception1)))
                throw $async$exception1;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              A.expect(pool._workers.length, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure50.prototype = {
    call$0() {
      return A.Using_useAsync(A.TestWorkerPool$missingStartRequest(this.tc), new A.execute_____closure77(), type$.TestWorkerPool, type$.Null);
    },
    $signature: 0
  };
  A.execute_____closure77.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure18(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute_____closure18(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, t1, exception, $async$exception, $async$exception1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              t1 = pool.start$0(0);
              $async$goto = 6;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 6:
              // returning from await.
              t1 = A.unexpectedSuccess("start()", null);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              if (!type$.SquadronError._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait(pool.ping$0(), $async$call$1);
            case 11:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("ping()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception1 = $async$currentError;
              if (!type$.CanceledException._is(A.unwrapException($async$exception1)))
                throw $async$exception1;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              A.expect(pool._workers.length, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure51.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$invalid($async$self.tc), new A.execute_____closure76(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure76.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure17(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute_____closure17(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, t1, exception, $async$exception, $async$exception1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              t1 = pool.start$0(0);
              $async$goto = 6;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 6:
              // returning from await.
              t1 = A.unexpectedSuccess("start()", null);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              if (!type$.SquadronError._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait(pool.ping$0(), $async$call$1);
            case 11:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("ping()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception1 = $async$currentError;
              if (!type$.CanceledException._is(A.unwrapException($async$exception1)))
                throw $async$exception1;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              A.expect(pool._workers.length, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure31.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Exception", new A.execute____closure43(t1));
      t1.test$2("- WorkerException", new A.execute____closure44(t1));
      t1.test$2("- TaskTimeOutException", new A.execute____closure45(t1));
      t1.test$2("- CanceledException", new A.execute____closure46(t1));
      t1.test$2("- CustomException", new A.execute____closure47(t1));
      t1.test$2("- CustomException - after deserializer deregistation", new A.execute____closure48(t1));
    },
    $signature: 2
  };
  A.execute____closure43.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure75(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure75.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure16(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute_____closure16(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, ex, exception, t2, t1, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = pool.start$0(0);
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 2:
              // returning from await.
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(pool.execute$1$1(new A.execute______closure14(), type$.int), $async$call$1);
            case 7:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("throwException()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.WorkerException) {
                ex = t1;
                A.expect(ex.message.toLowerCase(), new A._Contains("intentional exception"), null);
                A.expect(J.toString$0$(ex._squadron_exception$_stackTrace), new A._Contains("throwException"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              t1 = pool._workers;
              t2 = A._arrayInstanceType(t1);
              t2 = new A.MappedListIterable(t1, t2._eval$1("WorkerStat(1)")._as(A._pool_worker_PoolWorker_getStats$closure()), t2._eval$1("MappedListIterable<1,WorkerStat>")).fold$1$2(0, 0, new A.execute______closure15(), type$.int);
              A.expect(t2, new A._DeepMatcher(1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute______closure14.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).send$1$1(0, 21, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int);
    },
    $signature: 16
  };
  A.execute______closure15.prototype = {
    call$2(p, s) {
      return A._asInt(p) + type$.WorkerStat._as(s).totalErrors;
    },
    $signature: 68
  };
  A.execute____closure44.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure74(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure74.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure15(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute_____closure15(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, ex, exception, t2, t1, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = pool.start$0(0);
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 2:
              // returning from await.
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(pool.execute$1$1(new A.execute______closure12(), type$.int), $async$call$1);
            case 7:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("throwWorkerException()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.WorkerException) {
                ex = t1;
                A.expect(ex.message.toLowerCase(), new A._Contains("intentional worker exception"), null);
                A.expect(J.toString$0$(ex._squadron_exception$_stackTrace), new A._Contains("throwWorkerException"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              t1 = pool._workers;
              t2 = A._arrayInstanceType(t1);
              t2 = new A.MappedListIterable(t1, t2._eval$1("WorkerStat(1)")._as(A._pool_worker_PoolWorker_getStats$closure()), t2._eval$1("MappedListIterable<1,WorkerStat>")).fold$1$2(0, 0, new A.execute______closure13(), type$.int);
              A.expect(t2, new A._DeepMatcher(1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute______closure12.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).send$1$1(0, 22, type$.int);
    },
    $signature: 16
  };
  A.execute______closure13.prototype = {
    call$2(p, s) {
      return A._asInt(p) + type$.WorkerStat._as(s).totalErrors;
    },
    $signature: 68
  };
  A.execute____closure45.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure73(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure73.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure14(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute_____closure14(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, ex, exception, t1, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = pool.start$0(0);
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 2:
              // returning from await.
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(pool.throwTaskTimeOutException$0(), $async$call$1);
            case 7:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("timeOut()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.TimeoutException._is(t1)) {
                ex = t1;
                A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("intentional timeout exception"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure46.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure72(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure72.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure13(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute_____closure13(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(pool.throwCanceledException$0(), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("cancel()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.CanceledException._is(t1)) {
                ex = t1;
                A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("intentional canceled exception"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure47.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure71(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure71.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure12(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute_____closure12(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              pool.get$exceptionManager().register$2(0, "CUSTOM", A.custom_exception_CustomException_deserialize$closure());
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(pool.throwCustomException$0(), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("cancel()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.CustomException) {
                ex = t1;
                A.expect(ex.message.toLowerCase(), new A._Contains("intentional custom exception"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure48.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure70(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure70.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure11(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute_____closure11(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, ex, res0, ex0, t1, exception, $async$exception, $async$exception1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              pool.get$exceptionManager().register$2(0, "CUSTOM", A.custom_exception_CustomException_deserialize$closure());
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(pool.throwCustomException$0(), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("cancel()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.CustomException) {
                ex = t1;
                A.expect(ex.message.toLowerCase(), new A._Contains("intentional custom exception"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              pool.get$exceptionManager().unregister$1(0, "CUSTOM");
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait(pool.throwCustomException$0(), $async$call$1);
            case 11:
              // returning from await.
              res0 = $async$result;
              t1 = A.unexpectedSuccess("cancel()", res0);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception1 = $async$currentError;
              t1 = A.unwrapException($async$exception1);
              if (type$.SquadronException._is(t1)) {
                ex0 = t1;
                A.expect(ex0, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_CustomException))), null);
                A.expect(J.get$message$z(ex0).toLowerCase(), new A._Contains("intentional custom exception"), null);
              } else
                throw $async$exception1;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure32.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PrimeWorkerPool$($async$self.tc, null, B.ConcurrencySettings_1_3_1), new A.execute____closure42($async$self.logger), type$.PrimeWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure42.prototype = {
    call$1(pool) {
      return this.$call$body$execute____closure13(type$.PrimeWorkerPool._as(pool));
    },
    $call$body$execute____closure13(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t1, i, start, progress, t2, end, t3, t4, t5, counter, tasks;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              counter = A.PerfCounter$("perf");
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (t1 = pool.concurrencySettings, t1 = 3 * (t1.maxWorkers * t1.maxParallel) + 1, i = 0; i < t1; ++i)
                B.JSArray_methods.add$1(tasks, pool.isPrime$2(B.Set_ozoMd.get$last(0), counter));
              start = A.PerfCounterSnapshot$(counter);
              A.expect(start.totalCount, B._OrderingMatcher_Kvb, null);
              A.expect(start.totalErrors, B._OrderingMatcher_Kvb, null);
              A.expect(start.totalTimeInMicroseconds, B._OrderingMatcher_Kvb, null);
              if (0 >= tasks.length) {
                $async$returnValue = A.ioore(tasks, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait(tasks[0], $async$call$1);
            case 3:
              // returning from await.
              progress = A.PerfCounterSnapshot$(counter);
              t1 = progress.totalCount;
              A.expect(t1, B._OrderingMatcher_g8g, null);
              A.expect(progress.totalErrors, B._OrderingMatcher_Kvb, null);
              t2 = progress.totalTimeInMicroseconds;
              A.expect(t2, B._OrderingMatcher_g8g, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_wait(tasks, false, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              end = A.PerfCounterSnapshot$(counter);
              t3 = end.totalCount;
              t4 = end.totalErrors;
              t5 = end.totalTimeInMicroseconds;
              $async$self.logger.t$1("end: " + t3 + " / " + t4 + " / " + t5);
              A.expect(t3, new A._OrderingMatcher(t1, false, false, true, "a value greater than", true), null);
              A.expect(t4, B._OrderingMatcher_Kvb, null);
              A.expect(t5, new A._OrderingMatcher(t2, false, false, true, "a value greater than", true), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 52
  };
  A.execute___closure33.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PrimeWorkerPool$($async$self.tc, null, B.ConcurrencySettings_1_3_1), new A.execute____closure41(), type$.PrimeWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure41.prototype = {
    call$1(pool) {
      return this.$call$body$execute____closure12(type$.PrimeWorkerPool._as(pool));
    },
    $call$body$execute____closure12(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, t1, t2, i, t3, start, progress, end, counter, tasks;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              counter = A.PerfCounter$("perf");
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (t1 = pool.concurrencySettings, t1 = 3 * (t1.maxWorkers * t1.maxParallel) + 1, t2 = type$.dynamic, i = 0; i < t1; ++i) {
                t3 = pool.getPrimes$3(0, 1000, counter);
                B.JSArray_methods.add$1(tasks, t3.listen$2$cancelOnError(null, true).asFuture$1$1(null, t2));
              }
              start = A.PerfCounterSnapshot$(counter);
              A.expect(start.totalCount, B._OrderingMatcher_Kvb, null);
              A.expect(start.totalErrors, B._OrderingMatcher_Kvb, null);
              A.expect(start.totalTimeInMicroseconds, B._OrderingMatcher_Kvb, null);
              if (0 >= tasks.length) {
                $async$returnValue = A.ioore(tasks, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait(tasks[0], $async$call$1);
            case 3:
              // returning from await.
              progress = A.PerfCounterSnapshot$(counter);
              t1 = progress.totalCount;
              A.expect(t1, B._OrderingMatcher_g8g, null);
              A.expect(progress.totalErrors, B._OrderingMatcher_Kvb, null);
              t3 = progress.totalTimeInMicroseconds;
              A.expect(t3, B._OrderingMatcher_g8g, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_wait(tasks, false, t2), $async$call$1);
            case 4:
              // returning from await.
              end = A.PerfCounterSnapshot$(counter);
              A.expect(end.totalCount, new A._OrderingMatcher(t1, false, false, true, "a value greater than", true), null);
              A.expect(end.totalErrors, B._OrderingMatcher_Kvb, null);
              A.expect(end.totalTimeInMicroseconds, new A._OrderingMatcher(t3, false, false, true, "a value greater than", true), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 52
  };
  A.execute___closure34.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_0_1_50), new A.execute____closure40(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure40.prototype = {
    call$1(pool) {
      return this.$call$body$execute____closure11(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute____closure11(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, n, ex, t1, exception, n0, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(pool.delayed$1(-1), $async$call$1);
            case 2:
              // returning from await.
              n0 = $async$result;
              A.expect(n0, new A._DeepMatcher(-1, 100), null);
              pool.stop$0(0);
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(pool.delayed$1(-1), $async$call$1);
            case 7:
              // returning from await.
              n = $async$result;
              t1 = A.unexpectedSuccess("delayed()", n);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("cannot accept new requests"), null);
                A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("stopped"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure35.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_0_2_50), new A.execute____closure39(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure39.prototype = {
    call$1(pool) {
      return this.$call$body$execute____closure10(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute____closure10(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, n, ex, t2, exception, t1, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = pool.start$0(0);
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 2:
              // returning from await.
              t1 = pool._workers;
              A.expect(t1.length, B._OrderingMatcher_g8g, null);
              $async$goto = 3;
              return A._asyncAwait(pool.delayed$1(-1), $async$call$1);
            case 3:
              // returning from await.
              n = $async$result;
              t2 = n;
              A.expect(t2, new A._DeepMatcher(-1, 100), null);
              pool.stop$0(0);
              A.expect(t1.length, B._OrderingMatcher_Kvb, null);
              A.expect(pool._stopped, B.C__IsTrue, null);
              $async$handler = 5;
              $async$goto = 8;
              return A._asyncAwait(pool.delayed$1(-1), $async$call$1);
            case 8:
              // returning from await.
              n = $async$result;
              t1 = A.unexpectedSuccess("delayed()", n);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("cannot accept new requests"), null);
                A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("stopped"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 7:
              // after finally
              pool.start$0(0);
              $async$goto = 9;
              return A._asyncAwait(pool.delayed$1(-2), $async$call$1);
            case 9:
              // returning from await.
              n = $async$result;
              t1 = n;
              A.expect(t1, new A._DeepMatcher(-2, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure36.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_1_3_1), new A.execute____closure38(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure38.prototype = {
    call$1(pool) {
      return this.$call$body$execute____closure9(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute____closure9(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $N, digits, tasks, i, t3, t1, t2;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = pool.concurrencySettings;
              t2 = t1.maxWorkers;
              t1 = t2 * t1.maxParallel;
              $N = 2 * t1 + t2;
              digits = A._setArrayType([], type$.JSArray_int);
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (t2 = type$.dynamic, i = 0; i < $N; ++i)
                B.JSArray_methods.add$1(tasks, pool.delayed$1(i).then$1$1(new A.execute_____closure69(digits), t2));
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t2), $async$call$1);
            case 2:
              // returning from await.
              pool.stop$0(0);
              A.expect(pool._stopped, B.C__IsTrue, null);
              t3 = pool._worker_pool$_queue;
              A.expect(t3.get$length(0), B._OrderingMatcher_g8g, null);
              A.expect(digits.length, new A._OrderingMatcher(t1 * 3, true, true, false, "a value less than or equal to", true), null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t2), $async$call$1);
            case 3:
              // returning from await.
              A.expect(pool._stopped, B.C__IsTrue, null);
              A.expect(t3.get$length(0), B._OrderingMatcher_Kvb, null);
              t3 = digits.length;
              A.expect(t3, new A._DeepMatcher($N, 100), null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t2), $async$call$1);
            case 4:
              // returning from await.
              A.expect(pool._workers.length, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute_____closure69.prototype = {
    call$1(value) {
      B.JSArray_methods.add$1(this.digits, A._asInt(value));
    },
    $signature: 30
  };
  A.execute___closure37.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- with multiple errors - cancelOnError: false", new A.execute____closure31(t1));
      t1.test$2("- with multiple errors - cancelOnError: true", new A.execute____closure32(t1));
      t1.test$2("- with multiple errors - await for", new A.execute____closure33(t1));
      t1.test$2("- with multiple errors - throwing in await for", new A.execute____closure34(t1));
      t1.test$2("- with multiple errors - pause/resume", new A.execute____closure35(t1));
      t1.test$2("- with multiple errors - pause/resume/cancel - using a StreamTask", new A.execute____closure36(t1));
      t1.test$2("- with multiple errors - immediate cancelation", new A.execute____closure37(t1));
    },
    $signature: 2
  };
  A.execute____closure31.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure68(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure68.prototype = {
    call$1(pool) {
      return this.$call$body$execute_____closure10(type$.TestWorkerPool._as(pool));
    },
    $call$body$execute_____closure10(pool) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        done, numbers, errors, lowerCaseMessages, t1, token;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.Zone__current;
              token = new A.CancelableToken(new A._AsyncCompleter(new A._Future(t1, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              t1 = new A._Future(t1, type$._Future_dynamic);
              done = new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic);
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              pool.infiniteWithErrors$1(token).listen$4$cancelOnError$onDone$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_$opt_dynamic._as(done.get$complete(done)), new A.execute______closure8(errors, token));
              $async$goto = 2;
              return A._asyncAwait(t1, $async$call$1);
            case 2:
              // returning from await.
              A.expect(numbers.length, new A._OrderingMatcher(6, false, false, true, "a value greater than", true), null);
              A.expect(errors.length, new A._OrderingMatcher(3, false, false, true, "a value greater than", true), null);
              t1 = type$.MappedListIterable_SquadronException_String;
              lowerCaseMessages = new A.MappedListIterable(errors, type$.String_Function_SquadronException._as(new A.execute______closure9()), t1);
              t1 = t1._eval$1("bool(ListIterable.E)");
              A.expect(lowerCaseMessages.super$Iterable$where(0, t1._as(new A.execute______closure10())).get$length(0), new A._OrderingMatcher(3, false, false, true, "a value greater than", true), null);
              t1 = lowerCaseMessages.super$Iterable$where(0, t1._as(new A.execute______closure11())).get$length(0);
              A.expect(t1, new A._DeepMatcher(1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute______closure8.prototype = {
    call$1(ex) {
      var t1 = this.errors;
      B.JSArray_methods.add$1(t1, type$.SquadronException._as(ex));
      if (t1.length > 3)
        this.token.cancel$1(0, new A.CanceledException("by request"));
    },
    $signature: 6
  };
  A.execute______closure9.prototype = {
    call$1(e) {
      type$.SquadronException._as(e);
      return e.get$message(e).toLowerCase();
    },
    $signature: 44
  };
  A.execute______closure10.prototype = {
    call$1(m) {
      return B.JSString_methods.contains$1(A._asString(m), "error #");
    },
    $signature: 3
  };
  A.execute______closure11.prototype = {
    call$1(m) {
      return B.JSString_methods.contains$1(A._asString(m), "by request");
    },
    $signature: 3
  };
  A.execute____closure32.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, res, ex, t2, exception, testWorkerPool, token, t1, numbers, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              testWorkerPool = A.TestWorkerPool$($async$self.tc, null);
              token = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(testWorkerPool.infiniteWithErrors$1(token).listen$2$cancelOnError(new A.execute_____closure67(numbers), true).asFuture$1$0(type$.dynamic), $async$call$0);
            case 6:
              // returning from await.
              res = $async$result;
              t2 = A.unexpectedSuccess("infiniteWithErrors()", res);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                ex = t2;
                A.expect(ex.message.toLowerCase(), new A._Contains("error #"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = A._setArrayType([0, 1, 2], t1);
              A.expect(numbers, new A._DeepMatcher(t1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure67.prototype = {
    call$1(number) {
      return B.JSArray_methods.add$1(this.numbers, A._asInt(number));
    },
    $signature: 18
  };
  A.execute____closure33.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, number, e, t2, exception, testWorkerPool, token, t1, numbers, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              testWorkerPool = A.TestWorkerPool$($async$self.tc, null);
              token = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$handler = 3;
              t2 = new A._StreamIterator(A.checkNotNullable(testWorkerPool.infiniteWithErrors$1(token), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 6;
            case 9:
              // for condition
              $async$temp1 = A;
              $async$goto = 11;
              return A._asyncAwait(t2.moveNext$0(), $async$call$0);
            case 11:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 10;
                break;
              }
              number = t2.get$current(0);
              J.add$1$ax(numbers, number);
              // goto for condition
              $async$goto = 9;
              break;
            case 10:
              // after for
              $async$next.push(8);
              // goto finally
              $async$goto = 7;
              break;
            case 6:
              // uncaught
              $async$next = [3];
            case 7:
              // finally
              $async$handler = 3;
              $async$goto = 12;
              return A._asyncAwait(t2.cancel$0(0), $async$call$0);
            case 12:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 8:
              // after finally
              t2 = A.unexpectedSuccess("infiniteWithErrors()", null);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                e = t2;
                A.expect(e.message.toLowerCase(), new A._Contains("error #"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = A._setArrayType([0, 1, 2], t1);
              A.expect(numbers, new A._DeepMatcher(t1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure34.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, number, e, t2, t3, exception, testWorkerPool, token, t1, numbers, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              testWorkerPool = A.TestWorkerPool$($async$self.tc, null);
              token = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$handler = 3;
              t2 = new A._StreamIterator(A.checkNotNullable(testWorkerPool.infiniteWithErrors$1(token), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 6;
            case 9:
              // for condition
              $async$temp1 = A;
              $async$goto = 11;
              return A._asyncAwait(t2.moveNext$0(), $async$call$0);
            case 11:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 10;
                break;
              }
              number = t2.get$current(0);
              if (J.get$length$asx(numbers) === 0)
                J.add$1$ax(numbers, number);
              else {
                t3 = A.WorkerException$("Client-side exception", null, null);
                throw A.wrapException(t3);
              }
              // goto for condition
              $async$goto = 9;
              break;
            case 10:
              // after for
              $async$next.push(8);
              // goto finally
              $async$goto = 7;
              break;
            case 6:
              // uncaught
              $async$next = [3];
            case 7:
              // finally
              $async$handler = 3;
              $async$goto = 12;
              return A._asyncAwait(t2.cancel$0(0), $async$call$0);
            case 12:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 8:
              // after finally
              t2 = A.unexpectedSuccess("infiniteWithErrors()", null);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                e = t2;
                t2 = e.message;
                A.expect(t2, new A._StringEqualsMatcher("Client-side exception"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = A._setArrayType([0], t1);
              A.expect(numbers, new A._DeepMatcher(t1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure35.prototype = {
    call$0() {
      return this.$call$body$execute____closure8();
    },
    $call$body$execute____closure8() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t2, t3, t4, t1, testWorkerPool, numbers, errors, sub;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              testWorkerPool = A.TestWorkerPool$($async$self.tc, null);
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              sub = testWorkerPool.infiniteWithErrors$1(new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException))).listen$3$cancelOnError$onError(new A.execute_____closure64(numbers), false, new A.execute_____closure65(errors));
              t1.paused = t1.countErrors = t1.countNumbers = 0;
              t2 = new A.execute____closure_pause(t1, sub, numbers, errors);
              t3 = new A.execute____closure_resume(t1, numbers, errors, sub);
              sub.resume$0(0);
              sub.pause$0(0);
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              t4 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t4), $async$call$0);
            case 2:
              // returning from await.
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              sub.resume$0(0);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t4), $async$call$0);
            case 3:
              // returning from await.
              t2.call$0();
              t2.call$0();
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t4), $async$call$0);
            case 4:
              // returning from await.
              t3.call$0();
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t4), $async$call$0);
            case 5:
              // returning from await.
              t3.call$0();
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t4), $async$call$0);
            case 6:
              // returning from await.
              sub.cancel$0(0);
              A.expect(numbers.length, new A._OrderingMatcher(t1.countNumbers, false, false, true, "a value greater than", true), null);
              A.expect(errors.length, new A._OrderingMatcher(t1.countErrors, false, false, true, "a value greater than", true), null);
              A.expect(new A.MappedListIterable(errors, type$.String_Function_SquadronException._as(new A.execute_____closure66()), type$.MappedListIterable_SquadronException_String), new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("by request")))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure64.prototype = {
    call$1(number) {
      return B.JSArray_methods.add$1(this.numbers, A._asInt(number));
    },
    $signature: 18
  };
  A.execute_____closure65.prototype = {
    call$1(ex) {
      return B.JSArray_methods.add$1(this.errors, type$.SquadronException._as(ex));
    },
    $signature: 5
  };
  A.execute____closure_pause.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, _this = this, _null = null,
        _s20_ = "a value greater than";
      _this.sub.pause$0(0);
      t1 = _this._box_1;
      t2 = t1.paused;
      t3 = _this.numbers;
      t4 = t1.countNumbers;
      t5 = t3.length;
      if (t2 === 0) {
        A.expect(t5, new A._OrderingMatcher(t4, false, false, true, _s20_, true), _null);
        t2 = _this.errors;
        A.expect(t2.length, new A._OrderingMatcher(t1.countErrors, false, false, true, _s20_, true), _null);
        t1.countNumbers = t3.length;
        t1.countErrors = t2.length;
      } else {
        A.expect(t5, new A._DeepMatcher(t4, 100), _null);
        t2 = _this.errors.length;
        t3 = t1.countErrors;
        A.expect(t2, new A._DeepMatcher(t3, 100), _null);
      }
      ++t1.paused;
    },
    $signature: 1
  };
  A.execute____closure_resume.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.numbers.length,
        t2 = _this._box_1,
        t3 = t2.countNumbers;
      A.expect(t1, new A._DeepMatcher(t3, 100), null);
      t1 = _this.errors.length;
      t3 = t2.countErrors;
      A.expect(t1, new A._DeepMatcher(t3, 100), null);
      _this.sub.resume$0(0);
      t1 = t2.paused;
      if (t1 > 0)
        t2.paused = t1 - 1;
    },
    $signature: 1
  };
  A.execute_____closure66.prototype = {
    call$1(e) {
      type$.SquadronException._as(e);
      return e.get$message(e);
    },
    $signature: 44
  };
  A.execute____closure36.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, numbers0, t2, errors0, t3, t4, token0, t5, sub0, numbers1, errors1, sub1, numbersCount0, errorsCount0, pool, t1, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              pool = A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_1_1_1);
              t1 = pool.concurrencySettings;
              A.expect(t1.maxWorkers * t1.maxParallel, new A._DeepMatcher(1, 100), null);
              t1 = pool.start$0(0);
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$0);
            case 2:
              // returning from await.
              t1 = type$.JSArray_int;
              numbers0 = A._setArrayType([], t1);
              t2 = type$.JSArray_SquadronException;
              errors0 = A._setArrayType([], t2);
              t3 = type$._Future_CanceledException;
              t4 = type$._AsyncCompleter_CanceledException;
              token0 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t3), t4));
              t5 = pool.infiniteWithErrorsTask$1(token0).__WorkerStreamTask__controller_F;
              t5 === $ && A.throwLateFieldNI("_controller");
              sub0 = new A._ControllerStream(t5, A._instanceType(t5)._eval$1("_ControllerStream<1>")).listen$3$cancelOnError$onError(new A.execute_____closure60(numbers0), false, new A.execute_____closure61(errors0));
              numbers1 = A._setArrayType([], t1);
              errors1 = A._setArrayType([], t2);
              t4 = pool.infiniteWithErrorsTask$1(new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t3), t4))).__WorkerStreamTask__controller_F;
              t4 === $ && A.throwLateFieldNI("_controller");
              sub1 = new A._ControllerStream(t4, A._instanceType(t4)._eval$1("_ControllerStream<1>")).listen$3$cancelOnError$onError(new A.execute_____closure62(numbers1), false, new A.execute_____closure63(errors1));
              sub0.pause$0(0);
              sub1.pause$0(0);
              t4 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(60000), null, t4), $async$call$0);
            case 3:
              // returning from await.
              A.expect(numbers0, B.C__Empty, null);
              A.expect(errors0, B.C__Empty, null);
              A.expect(numbers1, B.C__Empty, null);
              A.expect(errors1, B.C__Empty, null);
              sub0.resume$0(0);
              sub1.resume$0(0);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(60000), null, t4), $async$call$0);
            case 4:
              // returning from await.
              A.expect(numbers0, B.C__NotEmpty, null);
              A.expect(errors0, B.C__NotEmpty, null);
              A.expect(numbers1, B.C__Empty, null);
              A.expect(errors1, B.C__Empty, null);
              sub1.pause$0(0);
              token0.cancel$1(0, new A.CanceledException("by token #0"));
              numbersCount0 = numbers0.length;
              errorsCount0 = errors0.length;
              A.expect(numbers1, B.C__Empty, null);
              A.expect(errors1, B.C__Empty, null);
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(60000), null, t4), $async$call$0);
            case 5:
              // returning from await.
              A.expect(numbers0.length, numbersCount0, null);
              ++errorsCount0;
              A.expect(errors0.length, errorsCount0, null);
              t3 = J.get$message$z(B.JSArray_methods.get$last(errors0));
              A.expect(t3, new A._StringEqualsMatcher("by token #0"), null);
              A.expect(numbers1, B.C__Empty, null);
              A.expect(errors1, B.C__Empty, null);
              sub1.resume$0(0);
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(60000), null, t4), $async$call$0);
            case 6:
              // returning from await.
              A.expect(numbers0.length, numbersCount0, null);
              A.expect(errors0.length, errorsCount0, null);
              A.expect(numbers1, B.C__NotEmpty, null);
              A.expect(errors1, B.C__NotEmpty, null);
              sub1.cancel$0(0);
              sub0.cancel$0(0);
              $async$goto = 7;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$0);
            case 7:
              // returning from await.
              $async$temp1 = A;
              $async$goto = 8;
              return A._asyncAwait(pool.getPendingInfiniteWithErrors$0(), $async$call$0);
            case 8:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure60.prototype = {
    call$1(number) {
      return B.JSArray_methods.add$1(this.numbers0, A._asInt(number));
    },
    $signature: 18
  };
  A.execute_____closure61.prototype = {
    call$1(ex) {
      return B.JSArray_methods.add$1(this.errors0, type$.SquadronException._as(ex));
    },
    $signature: 5
  };
  A.execute_____closure62.prototype = {
    call$1(number) {
      return B.JSArray_methods.add$1(this.numbers1, A._asInt(number));
    },
    $signature: 18
  };
  A.execute_____closure63.prototype = {
    call$1(ex) {
      return B.JSArray_methods.add$1(this.errors1, type$.SquadronException._as(ex));
    },
    $signature: 5
  };
  A.execute____closure37.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, numbers, errors, pool, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              pool = A.TestWorkerPool$($async$self.tc, null);
              t1 = pool.start$0(0);
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$0);
            case 2:
              // returning from await.
              t1 = $.Zone__current;
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              pool.infiniteWithErrors$1(new A.CancelableToken(new A._AsyncCompleter(new A._Future(t1, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException))).listen$3$cancelOnError$onError(new A.execute_____closure58(numbers), false, new A.execute_____closure59(errors)).cancel$0(0);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, type$.dynamic), $async$call$0);
            case 3:
              // returning from await.
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure58.prototype = {
    call$1(number) {
      return B.JSArray_methods.add$1(this.numbers, A._asInt(number));
    },
    $signature: 18
  };
  A.execute_____closure59.prototype = {
    call$1(ex) {
      return B.JSArray_methods.add$1(this.errors, type$.SquadronException._as(ex));
    },
    $signature: 5
  };
  A.execute_closure6.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- Squadron Worker", new A.execute__closure8(t1));
    },
    $signature: 1
  };
  A.execute__closure8.prototype = {
    call$0() {
      var logs = A._setArrayType([], type$.JSArray_String),
        t1 = this.tc;
      t1.group$2("- start/stop", new A.execute___closure38(A.MemoryLogger$(logs, new A.MemoryLogFilter()), t1, logs));
      t1.group$2("- initialization error", new A.execute___closure39(t1));
      t1.group$2("- workloads", new A.execute___closure40(t1));
      t1.group$2("- streaming", new A.execute___closure41(t1));
    },
    $signature: 2
  };
  A.execute___closure38.prototype = {
    call$0() {
      var t1 = this.memoryLogger,
        t2 = A._declarer(),
        t3 = type$.dynamic_Function,
        t4 = t3._as(new A.execute____closure70(t1));
      t2._checkNotBuilt$1("setUp");
      B.JSArray_methods.add$1(t2._setUps, t4);
      t4 = A._declarer();
      t3 = t3._as(new A.execute____closure71(t1));
      t4._checkNotBuilt$1("tearDown");
      B.JSArray_methods.add$1(t4._tearDowns, t3);
      t3 = this.tc;
      t3.test$2("- start & stop", new A.execute____closure72(t3, t1));
      t3.test$2("- hook", new A.execute____closure73(t3, t1));
      t4 = this.logs;
      t3.test$2("- hook failure", new A.execute____closure74(t3, t1, t4));
      t3.group$2("- install", new A.execute____closure75(t3, t1, t4));
      t3.test$2("- cannot restart after stop", new A.execute____closure76(t3));
    },
    $signature: 2
  };
  A.execute____closure70.prototype = {
    call$0() {
      var t1 = this.memoryLogger;
      B.JSArray_methods.clear$0(t1._logs);
      t1._memory_logger$_filter._level = B.Level_0_all;
    },
    $signature: 2
  };
  A.execute____closure71.prototype = {
    call$0() {
      B.JSArray_methods.clear$0(this.memoryLogger._logs);
    },
    $signature: 2
  };
  A.execute____closure72.prototype = {
    call$0() {
      return A.Using_useAsync(A.TestWorker$(this.tc, null), new A.execute_____closure107(this.memoryLogger), type$.TestWorker, type$.Null);
    },
    $signature: 0
  };
  A.execute_____closure107.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure30(type$.TestWorker._as(worker));
    },
    $call$body$execute_____closure30(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, channel, t2, upTime;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              worker.channelLogger = $async$self.memoryLogger;
              t1 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t1), $async$call$1);
            case 2:
              // returning from await.
              A.expect(worker._channel, B.C__IsNull, null);
              A.expect(worker.get$upTime(), B.Duration_0, null);
              A.expect(worker.get$idleTime(), B.Duration_0, null);
              A.expect(worker._worker$_stopped != null, B.C__IsFalse, null);
              $async$goto = 3;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 3:
              // returning from await.
              channel = $async$result;
              A.expect(worker._channel, B.C__IsNotNull, null);
              t2 = worker._channel;
              A.expect(channel, new A._DeepMatcher(t2, 100), null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t1), $async$call$1);
            case 4:
              // returning from await.
              A.expect(worker.get$upTime(), new A._OrderingMatcher(B.Duration_0, false, false, true, "a value greater than", true), null);
              A.expect(worker._worker$_stopped != null, false, null);
              upTime = worker.get$upTime();
              A.expect(upTime, new A._OrderingMatcher(B.Duration_0, false, false, true, "a value greater than", true), null);
              A.expect(worker.get$idleTime(), new A._OrderingMatcher(upTime, true, false, true, "a value greater than or equal to", true), null);
              worker.stop$0(0);
              A.expect(worker._worker$_stopped != null, B.C__IsTrue, null);
              upTime = worker.get$upTime();
              A.expect(worker._channel, B.C__IsNull, null);
              A.expect(worker.get$upTime(), new A._OrderingMatcher(B.Duration_0, false, false, true, "a value greater than", true), null);
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t1), $async$call$1);
            case 5:
              // returning from await.
              t1 = worker.get$upTime();
              A.expect(t1, new A._DeepMatcher(upTime, 100), null);
              A.expect(worker.get$idleTime(), new A._OrderingMatcher(worker.get$upTime(), false, false, true, "a value greater than", true), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 11
  };
  A.execute____closure73.prototype = {
    call$0() {
      return this.$call$body$execute____closure19();
    },
    $call$body$execute____closure19() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.status = null;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, new A.execute____closure_hook0(t1)), new A.execute_____closure106(t1, $async$self.memoryLogger), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure_hook0.prototype = {
    call$1(pw) {
      this._box_0.status = "hook called";
    },
    $signature: 26
  };
  A.execute_____closure106.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure29(type$.TestWorker._as(worker));
    },
    $call$body$execute_____closure29(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              worker.channelLogger = $async$self.memoryLogger;
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, type$.dynamic), $async$call$1);
            case 2:
              // returning from await.
              t1 = $async$self._box_0;
              A.expect(t1.status, B.C__IsNull, null);
              $async$goto = 3;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 3:
              // returning from await.
              t1 = t1.status;
              A.expect(t1, new A._StringEqualsMatcher("hook called"), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 11
  };
  A.execute____closure74.prototype = {
    call$0() {
      return this.$call$body$execute____closure18();
    },
    $call$body$execute____closure18() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.status = null;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, new A.execute____closure_hook(t1)), new A.execute_____closure105(t1, $async$self.memoryLogger, $async$self.logs), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure_hook.prototype = {
    call$1(pw) {
      this._box_1.status = "hook called";
      throw A.wrapException(A.Exception_Exception("intended exception after setting status"));
    },
    $signature: 26
  };
  A.execute_____closure105.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure28(type$.TestWorker._as(worker));
    },
    $call$body$execute_____closure28(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              worker.channelLogger = $async$self.memoryLogger;
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, type$.dynamic), $async$call$1);
            case 2:
              // returning from await.
              t1 = $async$self._box_1;
              A.expect(t1.status, B.C__IsNull, null);
              $async$goto = 3;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 3:
              // returning from await.
              t1 = t1.status;
              A.expect(t1, new A._StringEqualsMatcher("hook called"), null);
              A.expect($async$self.logs, new A._Contains(new A._Contains("intended exception")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 11
  };
  A.execute____closure75.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.memoryLogger,
        t3 = this.logs;
      t1.test$2("- no error", new A.execute_____closure102(t1, t2, t3));
      t1.test$2("- error on installation", new A.execute_____closure103(t1, t2, t3));
      t1.test$2("- error on uninstallation", new A.execute_____closure104(t1, t2, t3));
    },
    $signature: 2
  };
  A.execute_____closure102.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.logs;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.InstallableWorker$($async$self.tc, false, false), new A.execute______closure21($async$self.memoryLogger, t1), type$.InstallableWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("intended failure on uninstall")))), null);
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("service uninstalled successfully")))), null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, type$.dynamic), $async$call$0);
            case 3:
              // returning from await.
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("intended failure on uninstall")))), null);
              A.expect(t1, new A._Contains(new A._Contains("service uninstalled successfully")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute______closure21.prototype = {
    call$1(w) {
      return this.$call$body$execute______closure6(type$.InstallableWorker._as(w));
    },
    $call$body$execute______closure6(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              w.channelLogger = $async$self.memoryLogger;
              $async$goto = 2;
              return A._asyncAwait(w.start$0(0), $async$call$1);
            case 2:
              // returning from await.
              t1 = $async$self.logs;
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("intended failure on install")))), null);
              A.expect(t1, new A._Contains(new A._Contains("service installed successfully")), null);
              t1 = type$.bool;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.send$1$1(0, 1, t1), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(w.send$1$1(0, 2, t1), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsFalse, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 49
  };
  A.execute_____closure103.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.logs;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.InstallableWorker$($async$self.tc, true, false), new A.execute______closure20($async$self.memoryLogger, t1), type$.InstallableWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("intended failure on uninstall")))), null);
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("service uninstalled successfully")))), null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, type$.dynamic), $async$call$0);
            case 3:
              // returning from await.
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("intended failure on uninstall")))), null);
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("service uninstalled successfully")))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute______closure20.prototype = {
    call$1(w) {
      return this.$call$body$execute______closure5(type$.InstallableWorker._as(w));
    },
    $call$body$execute______closure5(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, res, ex, res0, ex0, t1, exception, $async$exception, $async$exception1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              w.channelLogger = $async$self.memoryLogger;
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(w.start$0(0), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("start()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.WorkerException) {
                ex = t1;
                A.expect(ex.message.toLowerCase(), new A._Contains("this exception is reported"), null);
                t1 = $async$self.logs;
                A.expect(t1, new A._Contains(new A._Contains("intended failure on install")), null);
                A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("service installed successfully")))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait(w.send$1$1(0, 1, type$.bool), $async$call$1);
            case 11:
              // returning from await.
              res0 = $async$result;
              t1 = A.unexpectedSuccess("isInstalled()", res0);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception1 = $async$currentError;
              t1 = A.unwrapException($async$exception1);
              if (t1 instanceof A.WorkerException) {
                ex0 = t1;
                A.expect(ex0.message.toLowerCase(), new A._Contains("this exception is reported"), null);
                t1 = $async$self.logs;
                A.expect(t1, new A._Contains(new A._Contains("intended failure on install")), null);
                A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("service installed successfully")))), null);
              } else
                throw $async$exception1;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 49
  };
  A.execute_____closure104.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.logs;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.InstallableWorker$($async$self.tc, false, true), new A.execute______closure19($async$self.memoryLogger, t1), type$.InstallableWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("intended failure on uninstall")))), null);
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("service uninstalled successfully")))), null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, type$.dynamic), $async$call$0);
            case 3:
              // returning from await.
              A.expect(t1, new A._Contains(new A._Contains("intended failure on uninstall")), null);
              A.expect(t1, new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("service uninstalled successfully")))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute______closure19.prototype = {
    call$1(w) {
      return this.$call$body$execute______closure4(type$.InstallableWorker._as(w));
    },
    $call$body$execute______closure4(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              w.channelLogger = $async$self.memoryLogger;
              $async$goto = 2;
              return A._asyncAwait(w.start$0(0), $async$call$1);
            case 2:
              // returning from await.
              A.expect($async$self.logs, new A._Contains(new A._Contains("service installed successfully")), null);
              t1 = type$.bool;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.send$1$1(0, 1, t1), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(w.send$1$1(0, 2, t1), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsFalse, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 49
  };
  A.execute____closure76.prototype = {
    call$0() {
      return A.Using_useAsync(A.TestWorker$(this.tc, null), new A.execute_____closure101(), type$.TestWorker, type$.Null);
    },
    $signature: 0
  };
  A.execute_____closure101.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure27(type$.TestWorker._as(worker));
    },
    $call$body$execute_____closure27(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 2:
              // returning from await.
              t1 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t1), $async$call$1);
            case 3:
              // returning from await.
              worker.stop$0(0);
              A.expect(worker._worker$_stopped != null, B.C__IsTrue, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t1), $async$call$1);
            case 4:
              // returning from await.
              $async$handler = 6;
              $async$goto = 9;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 9:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("start()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.WorkerException) {
                ex = t1;
                A.expect(ex.message.toLowerCase(), new A._Contains("worker is stopped"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 8:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 11
  };
  A.execute___closure39.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$3$skip("- not found", new A.execute____closure66(t1), t1.entryPoints.missingWorker == null);
      t1.test$2("- failed init", new A.execute____closure67(t1));
      t1.test$3$skip("- missing start request", new A.execute____closure68(t1), true);
      t1.test$2("- invalid command ID", new A.execute____closure69(t1));
    },
    $signature: 2
  };
  A.execute____closure66.prototype = {
    call$0() {
      var t1 = this.tc.entryPoints.missingWorker;
      t1.toString;
      return A.Using_useAsync(new A.MissingWorker(t1, null, B.List_empty0, false, new A.Object()), new A.execute_____closure100(), type$.MissingWorker, type$.Null);
    },
    $signature: 0
  };
  A.execute_____closure100.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure26(type$.MissingWorker._as(worker));
    },
    $call$body$execute_____closure26(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, ex, ex0, st, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("start()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.print("EXPECTED " + A.getRuntimeTypeOfDartObject(ex).toString$0(0));
              } else {
                ex0 = t1;
                st = A.getTraceFromException($async$exception);
                A.print("UNEXPECTED " + J.get$runtimeType$(ex0).toString$0(0) + "\nex = " + A.S(ex0) + "\nst = " + A.S(st));
              }
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 174
  };
  A.execute____closure67.prototype = {
    call$0() {
      return A.Using_useAsync(A.TestWorker$throws(this.tc), new A.execute_____closure99(), type$.TestWorker, type$.Null);
    },
    $signature: 0
  };
  A.execute_____closure99.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure25(type$.TestWorker._as(worker));
    },
    $call$body$execute_____closure25(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, res0, t1, exception, $async$exception, $async$exception1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("start()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              if (!type$.SquadronError._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait(worker.send$1$1(0, 34, type$.bool), $async$call$1);
            case 11:
              // returning from await.
              res0 = $async$result;
              t1 = A.unexpectedSuccess("ping()", res0);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception1 = $async$currentError;
              if (!type$.SquadronError._is(A.unwrapException($async$exception1)))
                throw $async$exception1;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 11
  };
  A.execute____closure68.prototype = {
    call$0() {
      return A.Using_useAsync(A.TestWorker$missingStartRequest(this.tc), new A.execute_____closure98(), type$.TestWorker, type$.Null);
    },
    $signature: 0
  };
  A.execute_____closure98.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure24(type$.TestWorker._as(worker));
    },
    $call$body$execute_____closure24(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, res0, t1, exception, $async$exception, $async$exception1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("start()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              if (!type$.SquadronError._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait(worker.send$1$1(0, 34, type$.bool), $async$call$1);
            case 11:
              // returning from await.
              res0 = $async$result;
              t1 = A.unexpectedSuccess("ping()", res0);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception1 = $async$currentError;
              if (!type$.SquadronError._is(A.unwrapException($async$exception1)))
                throw $async$exception1;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 11
  };
  A.execute____closure69.prototype = {
    call$0() {
      return A.Using_useAsync(A.TestWorker$invalid(this.tc), new A.execute_____closure97(), type$.TestWorker, type$.Null);
    },
    $signature: 0
  };
  A.execute_____closure97.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure23(type$.TestWorker._as(worker));
    },
    $call$body$execute_____closure23(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, res, res0, t1, exception, $async$exception, $async$exception1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("start()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              if (!type$.SquadronError._is(A.unwrapException($async$exception)))
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait(worker.send$1$1(0, 34, type$.bool), $async$call$1);
            case 11:
              // returning from await.
              res0 = $async$result;
              t1 = A.unexpectedSuccess("ping()", res0);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception1 = $async$currentError;
              if (!type$.SquadronError._is(A.unwrapException($async$exception1)))
                throw $async$exception1;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 10:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 11
  };
  A.execute___closure40.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- sequential", new A.execute____closure63(t1));
      t1.test$2("- parallel", new A.execute____closure64(t1));
      t1.group$2("- error handling", new A.execute____closure65(t1));
    },
    $signature: 2
  };
  A.execute____closure63.prototype = {
    call$0() {
      return A.Using_useAsync(A.TestWorker$(this.tc, null), new A.execute_____closure96(), type$.TestWorker, type$.Null);
    },
    $signature: 0
  };
  A.execute_____closure96.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure22(type$.TestWorker._as(worker));
    },
    $call$body$execute_____closure22(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, completedTasks, t3, task, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              $async$goto = 2;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 2:
              // returning from await.
              t2 = type$.JSArray_int;
              completedTasks = A._setArrayType([], t2);
              t1.taskId = 0;
              t1 = new A.execute_____closure_createTask0(t1, worker, completedTasks);
              A.expect(completedTasks, B.C__Empty, "no tasks yet");
              A.expect(worker._workload, B._OrderingMatcher_Kvb, null);
              A.expect(worker._maxWorkload, B._OrderingMatcher_Kvb, null);
              A.expect(worker._totalWorkload, B._OrderingMatcher_Kvb, null);
              $async$goto = 3;
              return A._asyncAwait(t1.call$1(B.Duration_80000), $async$call$1);
            case 3:
              // returning from await.
              t3 = A._setArrayType([1], t2);
              A.expect(completedTasks, new A._DeepMatcher(t3, 100), "#1 has completed");
              A.expect(worker._workload, B._OrderingMatcher_Kvb, null);
              t3 = worker._maxWorkload;
              A.expect(t3, new A._DeepMatcher(1, 100), null);
              t3 = worker._totalWorkload;
              A.expect(t3, new A._DeepMatcher(1, 100), null);
              task = t1.call$1(new A.Duration(240000));
              t3 = A._setArrayType([1], t2);
              A.expect(completedTasks, new A._DeepMatcher(t3, 100), "#2 pending");
              t3 = worker._workload;
              A.expect(t3, new A._DeepMatcher(1, 100), null);
              t3 = worker._maxWorkload;
              A.expect(t3, new A._DeepMatcher(1, 100), null);
              t3 = worker._totalWorkload;
              A.expect(t3, new A._DeepMatcher(1, 100), null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              t3 = A._setArrayType([1], t2);
              A.expect(completedTasks, new A._DeepMatcher(t3, 100), "#2 still pending");
              t3 = worker._workload;
              A.expect(t3, new A._DeepMatcher(1, 100), null);
              t3 = worker._maxWorkload;
              A.expect(t3, new A._DeepMatcher(1, 100), null);
              t3 = worker._totalWorkload;
              A.expect(t3, new A._DeepMatcher(1, 100), null);
              $async$goto = 5;
              return A._asyncAwait(task, $async$call$1);
            case 5:
              // returning from await.
              t3 = A._setArrayType([1, 2], t2);
              A.expect(completedTasks, new A._DeepMatcher(t3, 100), "#2 has completed");
              A.expect(worker._workload, B._OrderingMatcher_Kvb, null);
              t3 = worker._maxWorkload;
              A.expect(t3, new A._DeepMatcher(1, 100), null);
              t3 = worker._totalWorkload;
              A.expect(t3, new A._DeepMatcher(2, 100), null);
              $async$goto = 6;
              return A._asyncAwait(t1.call$1(B.Duration_80000), $async$call$1);
            case 6:
              // returning from await.
              t1 = A._setArrayType([1, 2, 3], t2);
              A.expect(completedTasks, new A._DeepMatcher(t1, 100), "#3 has completed");
              A.expect(worker._workload, B._OrderingMatcher_Kvb, null);
              t1 = worker._maxWorkload;
              A.expect(t1, new A._DeepMatcher(1, 100), null);
              t1 = worker._totalWorkload;
              A.expect(t1, new A._DeepMatcher(3, 100), null);
              worker.stop$0(0);
              A.expect(worker._workload, B._OrderingMatcher_Kvb, null);
              t1 = worker._maxWorkload;
              A.expect(t1, new A._DeepMatcher(1, 100), null);
              t1 = worker._totalWorkload;
              A.expect(t1, new A._DeepMatcher(3, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 11
  };
  A.execute_____closure_createTask0.prototype = {
    call$1(duration) {
      var t1 = ++this._box_2.taskId;
      return this.worker.send$1$2$args(0, 11, [B.JSInt_methods._tdivFast$1(duration._duration, 1000)], type$.dynamic).whenComplete$1(new A.execute______createTask_closure0(this.completedTasks, t1));
    },
    $signature: 72
  };
  A.execute______createTask_closure0.prototype = {
    call$0() {
      return B.JSArray_methods.add$1(this.completedTasks, this.id);
    },
    $signature: 1
  };
  A.execute____closure64.prototype = {
    call$0() {
      return A.Using_useAsync(A.TestWorker$(this.tc, null), new A.execute_____closure95(), type$.TestWorker, type$.Null);
    },
    $signature: 0
  };
  A.execute_____closure95.prototype = {
    call$1(worker) {
      return this.$call$body$execute_____closure21(type$.TestWorker._as(worker));
    },
    $call$body$execute_____closure21(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        tasks, t3, t4, t1, t2, completedTasks;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = type$.JSArray_int;
              completedTasks = A._setArrayType([], t2);
              t1.taskId = 0;
              t1 = new A.execute_____closure_createTask(t1, worker, completedTasks);
              $async$goto = 2;
              return A._asyncAwait(worker.start$0(0), $async$call$1);
            case 2:
              // returning from await.
              A.expect(completedTasks, B.C__Empty, "no tasks yet");
              A.expect(worker._workload, B._OrderingMatcher_Kvb, null);
              A.expect(worker._maxWorkload, B._OrderingMatcher_Kvb, null);
              A.expect(worker._totalWorkload, B._OrderingMatcher_Kvb, null);
              tasks = A._setArrayType([t1.call$1(B.Duration_80000), t1.call$1(new A.Duration(400000)), t1.call$1(new A.Duration(240000))], type$.JSArray_Future_dynamic);
              A.expect(completedTasks, B.C__Empty, "no async suspension yet");
              t3 = worker._workload;
              A.expect(t3, new A._DeepMatcher(3, 100), null);
              t3 = worker._maxWorkload;
              A.expect(t3, new A._DeepMatcher(3, 100), null);
              A.expect(worker._totalWorkload, B._OrderingMatcher_Kvb, null);
              t3 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t3), $async$call$1);
            case 3:
              // returning from await.
              t4 = A._setArrayType([1, 3, 2], t2);
              A.expect(completedTasks, new A._DeepMatcher(t4, 100), "#1, #3, #2");
              A.expect(worker._workload, B._OrderingMatcher_Kvb, null);
              t4 = worker._maxWorkload;
              A.expect(t4, new A._DeepMatcher(3, 100), null);
              t4 = worker._totalWorkload;
              A.expect(t4, new A._DeepMatcher(3, 100), null);
              B.JSArray_methods.clear$0(completedTasks);
              t1.call$1(new A.Duration(880000));
              t1.call$1(new A.Duration(560000));
              t1.call$1(new A.Duration(400000));
              A.expect(completedTasks, B.C__Empty, "no async suspension yet");
              t4 = worker._workload;
              A.expect(t4, new A._DeepMatcher(3, 100), null);
              t4 = worker._maxWorkload;
              A.expect(t4, new A._DeepMatcher(3, 100), null);
              t4 = worker._totalWorkload;
              A.expect(t4, new A._DeepMatcher(3, 100), null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(120000), null, t3), $async$call$1);
            case 4:
              // returning from await.
              A.expect(completedTasks, B.C__Empty, "1.5 delays");
              t4 = worker._workload;
              A.expect(t4, new A._DeepMatcher(3, 100), null);
              t4 = worker._maxWorkload;
              A.expect(t4, new A._DeepMatcher(3, 100), null);
              t4 = worker._totalWorkload;
              A.expect(t4, new A._DeepMatcher(3, 100), null);
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t3), $async$call$1);
            case 5:
              // returning from await.
              t4 = A._setArrayType([6], t2);
              A.expect(completedTasks, new A._DeepMatcher(t4, 100), "5.5 delays");
              t4 = worker._workload;
              A.expect(t4, new A._DeepMatcher(2, 100), null);
              t4 = worker._maxWorkload;
              A.expect(t4, new A._DeepMatcher(3, 100), null);
              t4 = worker._totalWorkload;
              A.expect(t4, new A._DeepMatcher(4, 100), null);
              t1.call$1(new A.Duration(400000));
              t1.call$1(new A.Duration(240000));
              t1 = A._setArrayType([6], t2);
              A.expect(completedTasks, new A._DeepMatcher(t1, 100), "still 5.5 delays");
              t1 = worker._workload;
              A.expect(t1, new A._DeepMatcher(4, 100), null);
              t1 = worker._maxWorkload;
              A.expect(t1, new A._DeepMatcher(4, 100), null);
              t1 = worker._totalWorkload;
              A.expect(t1, new A._DeepMatcher(4, 100), null);
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t3), $async$call$1);
            case 6:
              // returning from await.
              t1 = A._setArrayType([6, 5, 8], t2);
              A.expect(completedTasks, new A._DeepMatcher(t1, 100), "9.5 delays");
              t1 = worker._workload;
              A.expect(t1, new A._DeepMatcher(2, 100), null);
              t1 = worker._maxWorkload;
              A.expect(t1, new A._DeepMatcher(4, 100), null);
              t1 = worker._totalWorkload;
              A.expect(t1, new A._DeepMatcher(6, 100), null);
              $async$goto = 7;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(200000), null, t3), $async$call$1);
            case 7:
              // returning from await.
              t1 = A._setArrayType([6, 5, 8, 7, 4], t2);
              A.expect(completedTasks, new A._DeepMatcher(t1, 100), "12 delays");
              A.expect(worker._workload, B._OrderingMatcher_Kvb, null);
              t1 = worker._maxWorkload;
              A.expect(t1, new A._DeepMatcher(4, 100), null);
              t1 = worker._totalWorkload;
              A.expect(t1, new A._DeepMatcher(8, 100), null);
              worker.stop$0(0);
              A.expect(worker._workload, B._OrderingMatcher_Kvb, null);
              t1 = worker._maxWorkload;
              A.expect(t1, new A._DeepMatcher(4, 100), null);
              t1 = worker._totalWorkload;
              A.expect(t1, new A._DeepMatcher(8, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 11
  };
  A.execute_____closure_createTask.prototype = {
    call$1(duration) {
      var t1 = ++this._box_3.taskId;
      return this.worker.send$1$2$args(0, 11, [B.JSInt_methods._tdivFast$1(duration._duration, 1000)], type$.dynamic).whenComplete$1(new A.execute______createTask_closure(this.completedTasks, t1));
    },
    $signature: 72
  };
  A.execute______createTask_closure.prototype = {
    call$0() {
      return B.JSArray_methods.add$1(this.completedTasks, this.id);
    },
    $signature: 1
  };
  A.execute____closure65.prototype = {
    call$0() {
      var worker = A._Cell$named("worker"),
        t1 = this.tc;
      A._declarer().setUpAll$1(new A.execute_____closure85(worker, t1));
      A._declarer().tearDownAll$1(new A.execute_____closure86(worker));
      t1.test$2("- Exception", new A.execute_____closure87(worker));
      t1.test$2("- WorkerException", new A.execute_____closure88(worker));
      t1.test$2("- TaskTimeOutException", new A.execute_____closure89(worker));
      t1.test$2("- CanceledException", new A.execute_____closure90(worker));
      t1.test$2("- CustomException", new A.execute_____closure91(worker));
      t1.test$2("- invalid request", new A.execute_____closure92(worker));
      t1.test$2("- invalid response", new A.execute_____closure93(worker));
      t1.test$2("- missing operation", new A.execute_____closure94(worker));
    },
    $signature: 2
  };
  A.execute_____closure85.prototype = {
    call$0() {
      var t1 = this.worker;
      t1.set$finalLocalValue(A.TestWorker$(this.tc, null));
      return J.start$0$x(t1._readLocal$0());
    },
    $signature: 73
  };
  A.execute_____closure86.prototype = {
    call$0() {
      J.stop$0$x(this.worker._readLocal$0());
    },
    $signature: 2
  };
  A.execute_____closure87.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, res, ex, t3, exception, t1, t2, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = t1._readLocal$0().get$stats();
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 21, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int), $async$call$0);
            case 6:
              // returning from await.
              res = $async$result;
              t3 = A.unexpectedSuccess("throwException()", res);
              throw A.wrapException(t3);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t3 = A.unwrapException($async$exception);
              if (t3 instanceof A.WorkerException) {
                ex = t3;
                A.expect(ex.message.toLowerCase(), new A._Contains("intentional exception"), null);
                A.expect(J.toString$0$(ex._squadron_exception$_stackTrace), new A._Contains("throwException"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = t1._readLocal$0().get$stats();
              A.expect(t1.totalErrors, new A._DeepMatcher(t2.totalErrors + 1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure88.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, res, ex, t3, exception, t1, t2, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = t1._readLocal$0().get$stats();
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 22, type$.int), $async$call$0);
            case 6:
              // returning from await.
              res = $async$result;
              t3 = A.unexpectedSuccess("throwWorkerException()", res);
              throw A.wrapException(t3);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t3 = A.unwrapException($async$exception);
              if (t3 instanceof A.WorkerException) {
                ex = t3;
                t3 = ex.message;
                A.expect(t3.toLowerCase(), new A._StringEqualsMatcher("intentional worker exception"), null);
                A.expect(J.toString$0$(ex._squadron_exception$_stackTrace), new A._Contains("throwWorkerException"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = t1._readLocal$0().get$stats();
              A.expect(t1.totalErrors, new A._DeepMatcher(t2.totalErrors + 1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure89.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, res, ex, t3, exception, t1, t2, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = t1._readLocal$0().get$stats();
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 23, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int), $async$call$0);
            case 6:
              // returning from await.
              res = $async$result;
              t3 = A.unexpectedSuccess("throwTaskTimeOutException()", res);
              throw A.wrapException(t3);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t3 = A.unwrapException($async$exception);
              if (t3 instanceof A.SquadronTimeoutException) {
                ex = t3;
                A.expect(ex.message.toLowerCase(), new A._Contains("intentional timeout exception"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = t1._readLocal$0().get$stats();
              A.expect(t1.totalErrors, new A._DeepMatcher(t2.totalErrors + 1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure90.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, res, ex, t3, exception, t1, t2, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = t1._readLocal$0().get$stats();
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 24, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int), $async$call$0);
            case 6:
              // returning from await.
              res = $async$result;
              t3 = A.unexpectedSuccess("throwCanceledException()", res);
              throw A.wrapException(t3);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t3 = A.unwrapException($async$exception);
              if (type$.SquadronCanceledException._is(t3)) {
                ex = t3;
                A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("intentional canceled exception"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = t1._readLocal$0().get$stats();
              A.expect(t1.totalErrors, new A._DeepMatcher(t2.totalErrors + 1, 100), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure91.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, errors, res, ex, t2, exception, t3, t1, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t1._readLocal$0().get$exceptionManager().register$2(0, "CUSTOM", A.custom_exception_CustomException_deserialize$closure());
              $async$handler = 3;
              errors = t1._readLocal$0().get$stats().totalErrors;
              $async$handler = 7;
              $async$goto = 10;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 25, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int), $async$call$0);
            case 10:
              // returning from await.
              res = $async$result;
              t2 = A.unexpectedSuccess("throwCustomException()", res);
              throw A.wrapException(t2);
              $async$handler = 3;
              // goto after finally
              $async$goto = 9;
              break;
            case 7:
              // catch
              $async$handler = 6;
              $async$exception = $async$currentError;
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.CustomException) {
                ex = t2;
                A.expect(ex.message.toLowerCase(), new A._Contains("intentional custom exception"), null);
                A.expect(J.toString$0$(ex._squadron_exception$_stackTrace), new A._Contains("throwCustomException"), null);
                t2 = ex._command;
                A.expect(t2, new A._DeepMatcher(25, 100), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 9;
              break;
            case 6:
              // uncaught
              // goto uncaught
              $async$goto = 3;
              break;
            case 9:
              // after finally
              t2 = t1._readLocal$0().get$stats();
              t3 = errors;
              if (typeof t3 !== "number") {
                $async$returnValue = t3.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 4;
                break;
              }
              A.expect(t2.totalErrors, new A._DeepMatcher(t3 + 1, 100), null);
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              t1._readLocal$0().get$exceptionManager().unregister$1(0, "CUSTOM");
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure92.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, obj, res, ex, exception, transferable, t1, t2, result, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              transferable = A._setArrayType([1], type$.JSArray_int);
              t1 = $async$self.worker;
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$2$args$z(t1._readLocal$0(), 31, [transferable], t2), $async$call$0);
            case 2:
              // returning from await.
              result = $async$result;
              A.expect(result, new A._DeepMatcher(transferable, 100), null);
              obj = A.getUnsendable();
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(J.send$1$2$args$z(t1._readLocal$0(), 31, [obj], t2), $async$call$0);
            case 7:
              // returning from await.
              res = $async$result;
              t2 = A.unexpectedSuccess("forward()", res);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t2 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t2)) {
                ex = t2;
                A.expect(J.toString$0$(ex), new A._Contains("Failed to post"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              $async$temp1 = A;
              $async$goto = 8;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 34, type$.bool), $async$call$0);
            case 8:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure93.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, res, ex, t1, exception, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(J.send$1$1$z($async$self.worker._readLocal$0(), 33, type$.dynamic), $async$call$0);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("invalidResponse()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.expect(J.toString$0$(ex), new A._Contains("Failed to post"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(J.send$1$1$z($async$self.worker._readLocal$0(), 34, type$.bool), $async$call$0);
            case 7:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure94.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, res, ex, t1, exception, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(J.send$1$1$z($async$self.worker._readLocal$0(), 32, type$.dynamic), $async$call$0);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("missing()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.expect(J.get$message$z(ex).toLowerCase(), new A._Contains("unknown command"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(J.send$1$1$z($async$self.worker._readLocal$0(), 34, type$.bool), $async$call$0);
            case 7:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure41.prototype = {
    call$0() {
      var worker = A._Cell$named("worker"),
        t1 = this.tc;
      A._declarer().setUpAll$1(new A.execute____closure54(worker, t1));
      A._declarer().tearDownAll$1(new A.execute____closure55(worker));
      t1.test$2("- cancelOnError: false", new A.execute____closure56(worker));
      t1.test$2("- cancelOnError: true", new A.execute____closure57(worker));
      t1.test$2("- await for", new A.execute____closure58(worker));
      t1.test$2("- throwing in await for", new A.execute____closure59(worker));
      t1.test$2("- pause/resume", new A.execute____closure60(worker));
      t1.test$2("- immediate cancelation", new A.execute____closure61(worker));
      t1.test$2("- subscription cancelation", new A.execute____closure62(worker));
    },
    $signature: 2
  };
  A.execute____closure54.prototype = {
    call$0() {
      var t1 = this.worker;
      t1.__late_helper$_value = A.TestWorker$(this.tc, null);
      return J.start$0$x(t1._readLocal$0());
    },
    $signature: 73
  };
  A.execute____closure55.prototype = {
    call$0() {
      J.stop$0$x(this.worker._readLocal$0());
    },
    $signature: 2
  };
  A.execute____closure56.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, sub, t5, t6, pending, t1, done, numbers, errors, t2, t3, t4, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new A._Future($.Zone__current, type$._Future_dynamic);
              done = new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic);
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              t2 = $async$self.worker;
              t3 = type$.dynamic;
              t4 = type$.int;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$1$z(t2._readLocal$0(), 45, t3).then$1$1(A.cast_helpers_Cast_toInt$closure(), t4), $async$call$0);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_Kvb, null);
              sub = A._Cell$named("sub");
              t5 = J.stream$1$2$token$z(t2._readLocal$0(), 46, null, t3);
              t6 = A._instanceType(t5);
              sub.__late_helper$_value = new A._MapStream(t6._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t5, t6._eval$1("_MapStream<Stream.T,int>")).listen$4$cancelOnError$onDone$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_$opt_dynamic._as(done.get$complete(done)), new A.execute_____closure83(errors, 3, sub, done));
              $async$goto = 3;
              return A._asyncAwait(J.send$1$1$z(t2._readLocal$0(), 45, t3).then$1$1(A.cast_helpers_Cast_toInt$closure(), t4), $async$call$0);
            case 3:
              // returning from await.
              pending = $async$result;
              A.expect(pending, new A._DeepMatcher(1, 100), null);
              $async$goto = 4;
              return A._asyncAwait(t1, $async$call$0);
            case 4:
              // returning from await.
              t1 = errors.length;
              A.expect(t1, new A._DeepMatcher(3, 100), null);
              A.expect(numbers.length, new A._OrderingMatcher(errors.length, false, false, true, "a value greater than", true), null);
              A.expect(B.JSArray_methods.every$1(errors, new A.execute_____closure84()), B.C__IsTrue, null);
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(J.send$1$1$z(t2._readLocal$0(), 45, t3).then$1$1(A.cast_helpers_Cast_toInt$closure(), t4), $async$call$0);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure83.prototype = {
    call$1(ex) {
      var _this = this,
        t1 = _this.errors;
      B.JSArray_methods.add$1(t1, type$.SquadronException._as(ex));
      if (t1.length >= _this.maxErrors) {
        J.cancel$0$z(_this.sub._readLocal$0());
        _this.done.complete$0(0);
      }
    },
    $signature: 6
  };
  A.execute_____closure84.prototype = {
    call$1(e) {
      type$.SquadronException._as(e);
      return B.JSString_methods.contains$1(e.get$message(e).toLowerCase(), "error #");
    },
    $signature: 177
  };
  A.execute____closure57.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$self = this, done, res, ex, t5, t6, exception, t1, numbers, t2, t3, t4, pending, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              t2 = $async$self.worker;
              t3 = type$.dynamic;
              t4 = type$.int;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$1$z(t2._readLocal$0(), 45, t3).then$1$1(A.cast_helpers_Cast_toInt$closure(), t4), $async$call$0);
            case 2:
              // returning from await.
              pending = $async$result;
              A.expect(pending, B._OrderingMatcher_Kvb, null);
              $async$handler = 4;
              t5 = J.stream$1$2$token$z(t2._readLocal$0(), 46, null, t3);
              t6 = A._instanceType(t5);
              done = new A._MapStream(t6._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t5, t6._eval$1("_MapStream<Stream.T,int>")).listen$2$cancelOnError(type$.void_Function_int._as(J.get$add$ax(numbers)), true).asFuture$1$0(t3);
              $async$goto = 7;
              return A._asyncAwait(J.send$1$1$z(t2._readLocal$0(), 45, t3).then$1$1(A.cast_helpers_Cast_toInt$closure(), t4), $async$call$0);
            case 7:
              // returning from await.
              pending = $async$result;
              t6 = pending;
              A.expect(t6, new A._DeepMatcher(1, 100), null);
              $async$goto = 8;
              return A._asyncAwait(done, $async$call$0);
            case 8:
              // returning from await.
              res = $async$result;
              t5 = A.unexpectedSuccess("infiniteWithErrors()", res);
              throw A.wrapException(t5);
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t5 = A.unwrapException($async$exception);
              if (t5 instanceof A.WorkerException) {
                ex = t5;
                A.expect(ex.message.toLowerCase(), new A._Contains("error #"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              t1 = A._setArrayType([0, 1, 2], t1);
              A.expect(numbers, new A._DeepMatcher(t1, 100), null);
              $async$goto = 9;
              return A._asyncAwait(J.send$1$1$z(t2._readLocal$0(), 45, t3).then$1$1(A.cast_helpers_Cast_toInt$closure(), t4), $async$call$0);
            case 9:
              // returning from await.
              pending = $async$result;
              A.expect(pending, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure58.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, number, pending, ex, t2, t3, t4, t5, t6, t7, exception, t1, numbers, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$handler = 3;
              t2 = $async$self.worker;
              t3 = type$.dynamic;
              t4 = J.stream$1$2$token$z(t2._readLocal$0(), 46, null, t3);
              t5 = A._instanceType(t4);
              t5 = new A._StreamIterator(A.checkNotNullable(new A._MapStream(t5._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t4, t5._eval$1("_MapStream<Stream.T,int>")), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 6;
              t4 = type$.int, t6 = t2.__late_helper$_name;
            case 9:
              // for condition
              $async$temp1 = A;
              $async$goto = 11;
              return A._asyncAwait(t5.moveNext$0(), $async$call$0);
            case 11:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 10;
                break;
              }
              number = t5.get$current(0);
              t7 = t2.__late_helper$_value;
              if (t7 === t2)
                A.throwExpression(A.LateError$localNI(t6));
              $async$goto = 12;
              return A._asyncAwait(J.send$1$1$z(t7, 45, t3).then$1$1(A.cast_helpers_Cast_toInt$closure(), t4), $async$call$0);
            case 12:
              // returning from await.
              pending = $async$result;
              A._expect(pending, new A._DeepMatcher(1, 100), null, null, null, false);
              J.add$1$ax(numbers, number);
              // goto for condition
              $async$goto = 9;
              break;
            case 10:
              // after for
              $async$next.push(8);
              // goto finally
              $async$goto = 7;
              break;
            case 6:
              // uncaught
              $async$next = [3];
            case 7:
              // finally
              $async$handler = 3;
              $async$goto = 13;
              return A._asyncAwait(t5.cancel$0(0), $async$call$0);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 8:
              // after finally
              t2 = A.unexpectedSuccess("infiniteWithErrors()", null);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                ex = t2;
                A.expect(ex.message.toLowerCase(), new A._Contains("error #"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = A._setArrayType([0, 1, 2], t1);
              A.expect(numbers, new A._DeepMatcher(t1, 100), null);
              $async$temp1 = A;
              $async$goto = 14;
              return A._asyncAwait(J.send$1$1$z($async$self.worker._readLocal$0(), 45, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int), $async$call$0);
            case 14:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure59.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$currentError, $async$next = [], $async$self = this, number, pending, ex, t2, t3, t4, t5, t6, t7, exception, t1, numbers, $async$exception, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$handler = 3;
              t2 = $async$self.worker;
              t3 = type$.dynamic;
              t4 = J.stream$1$2$token$z(t2._readLocal$0(), 46, null, t3);
              t5 = A._instanceType(t4);
              t5 = new A._StreamIterator(A.checkNotNullable(new A._MapStream(t5._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t4, t5._eval$1("_MapStream<Stream.T,int>")), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 6;
              t4 = type$.int, t6 = t2.__late_helper$_name;
            case 9:
              // for condition
              $async$temp1 = A;
              $async$goto = 11;
              return A._asyncAwait(t5.moveNext$0(), $async$call$0);
            case 11:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 10;
                break;
              }
              number = t5.get$current(0);
              t7 = t2.__late_helper$_value;
              if (t7 === t2)
                A.throwExpression(A.LateError$localNI(t6));
              $async$goto = 12;
              return A._asyncAwait(J.send$1$1$z(t7, 45, t3).then$1$1(A.cast_helpers_Cast_toInt$closure(), t4), $async$call$0);
            case 12:
              // returning from await.
              pending = $async$result;
              A._expect(pending, new A._DeepMatcher(1, 100), null, null, null, false);
              if (J.get$length$asx(numbers) === 0)
                J.add$1$ax(numbers, number);
              else {
                t2 = A.WorkerException$("Client-side exception", null, null);
                throw A.wrapException(t2);
              }
              // goto for condition
              $async$goto = 9;
              break;
            case 10:
              // after for
              $async$next.push(8);
              // goto finally
              $async$goto = 7;
              break;
            case 6:
              // uncaught
              $async$next = [3];
            case 7:
              // finally
              $async$handler = 3;
              $async$goto = 13;
              return A._asyncAwait(t5.cancel$0(0), $async$call$0);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 8:
              // after finally
              t2 = A.unexpectedSuccess("infiniteWithErrors()", null);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                ex = t2;
                t2 = ex.message;
                A.expect(t2, new A._StringEqualsMatcher("Client-side exception"), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = A._setArrayType([0], t1);
              A.expect(numbers, new A._DeepMatcher(t1, 100), null);
              $async$temp1 = A;
              $async$goto = 14;
              return A._asyncAwait(J.send$1$1$z($async$self.worker._readLocal$0(), 45, type$.dynamic).then$1$1(A.cast_helpers_Cast_toInt$closure(), type$.int), $async$call$0);
            case 14:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure60.prototype = {
    call$0() {
      return this.$call$body$execute____closure17();
    },
    $call$body$execute____closure17() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, numbers, errors, t5, t6, sub, t1, t2, t3, t4, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = $async$self.worker;
              t3 = type$.dynamic;
              t4 = type$.int;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$1$z(t2._readLocal$0(), 45, t3).then$1$1(A.cast_helpers_Cast_toInt$closure(), t4), $async$call$0);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_Kvb, null);
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              t5 = J.stream$1$2$token$z(t2._readLocal$0(), 46, null, t3);
              t6 = A._instanceType(t5);
              sub = new A._MapStream(t6._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t5, t6._eval$1("_MapStream<Stream.T,int>")).listen$3$cancelOnError$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_SquadronException._as(B.JSArray_methods.get$add(errors)));
              t1.paused = t1.countErrors = t1.countNumbers = 0;
              t6 = new A.execute____closure_pause0(t1, sub, numbers, errors);
              t5 = new A.execute____closure_resume0(t1, numbers, errors, sub);
              sub.resume$0(0);
              sub.pause$0(0);
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(240000), null, t3), $async$call$0);
            case 3:
              // returning from await.
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              sub.resume$0(0);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(240000), null, t3), $async$call$0);
            case 4:
              // returning from await.
              t6.call$0();
              t6.call$0();
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(240000), null, t3), $async$call$0);
            case 5:
              // returning from await.
              t5.call$0();
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(240000), null, t3), $async$call$0);
            case 6:
              // returning from await.
              t5.call$0();
              $async$goto = 7;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(240000), null, t3), $async$call$0);
            case 7:
              // returning from await.
              sub.cancel$0(0);
              A.expect(numbers.length, new A._OrderingMatcher(t1.countNumbers, false, false, true, "a value greater than", true), null);
              A.expect(errors.length, new A._OrderingMatcher(t1.countErrors, false, false, true, "a value greater than", true), null);
              A.expect(new A.MappedListIterable(errors, type$.String_Function_SquadronException._as(new A.execute_____closure82()), type$.MappedListIterable_SquadronException_String), new A._IsNot(A.wrapMatcher(new A._Contains(new A._Contains("by request")))), null);
              $async$goto = 8;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t3), $async$call$0);
            case 8:
              // returning from await.
              $async$temp1 = A;
              $async$goto = 9;
              return A._asyncAwait(J.send$1$1$z(t2._readLocal$0(), 45, t3).then$1$1(A.cast_helpers_Cast_toInt$closure(), t4), $async$call$0);
            case 9:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure_pause0.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, _this = this, _null = null,
        _s20_ = "a value greater than";
      _this.sub.pause$0(0);
      t1 = _this._box_4;
      t2 = t1.paused;
      t3 = _this.numbers;
      t4 = t1.countNumbers;
      t5 = t3.length;
      if (t2 === 0) {
        A.expect(t5, new A._OrderingMatcher(t4, false, false, true, _s20_, true), _null);
        t2 = _this.errors;
        A.expect(t2.length, new A._OrderingMatcher(t1.countErrors, false, false, true, _s20_, true), _null);
        t1.countNumbers = t3.length;
        t1.countErrors = t2.length;
      } else {
        A.expect(t5, new A._DeepMatcher(t4, 100), _null);
        t2 = _this.errors.length;
        t3 = t1.countErrors;
        A.expect(t2, new A._DeepMatcher(t3, 100), _null);
      }
      ++t1.paused;
    },
    $signature: 1
  };
  A.execute____closure_resume0.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.numbers.length,
        t2 = _this._box_4,
        t3 = t2.countNumbers;
      A.expect(t1, new A._DeepMatcher(t3, 100), null);
      t1 = _this.errors.length;
      t3 = t2.countErrors;
      A.expect(t1, new A._DeepMatcher(t3, 100), null);
      _this.sub.resume$0(0);
      t1 = t2.paused;
      if (t1 > 0)
        t2.paused = t1 - 1;
    },
    $signature: 1
  };
  A.execute_____closure82.prototype = {
    call$1(e) {
      type$.SquadronException._as(e);
      return e.get$message(e).toLowerCase();
    },
    $signature: 44
  };
  A.execute____closure61.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, numbers, errors, t4, t5, t1, t2, t3, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.worker;
              t2 = type$.dynamic;
              t3 = type$.int;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 45, t2).then$1$1(A.cast_helpers_Cast_toInt$closure(), t3), $async$call$0);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_Kvb, null);
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              t4 = J.stream$1$2$token$z(t1._readLocal$0(), 46, null, t2);
              t5 = A._instanceType(t4);
              new A._MapStream(t5._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t4, t5._eval$1("_MapStream<Stream.T,int>")).listen$3$cancelOnError$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_SquadronException._as(B.JSArray_methods.get$add(errors))).cancel$0(0);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(240000), null, t2), $async$call$0);
            case 3:
              // returning from await.
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(J.send$1$1$z(t1._readLocal$0(), 45, t2).then$1$1(A.cast_helpers_Cast_toInt$closure(), t3), $async$call$0);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_Kvb, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure62.prototype = {
    call$0() {
      return this.$call$body$execute____closure16();
    },
    $call$body$execute____closure16() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t2, t3, t4, t5, sub, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.counter = 0;
              t2 = $async$self.worker;
              t3 = type$.dynamic;
              t4 = J.stream$1$3$args$token$z(t2._readLocal$0(), 43, [100], null, t3);
              t5 = A._instanceType(t4);
              sub = new A._MapStream(t5._eval$1("int(Stream.T)")._as(A.cast_helpers_Cast_toInt$closure()), t4, t5._eval$1("_MapStream<Stream.T,int>")).listen$1(new A.execute_____closure81(t1));
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(A.Duration$(0, 100, 0), null, t3), $async$call$0);
            case 2:
              // returning from await.
              A.expect(t1.counter, B._OrderingMatcher_g8g, null);
              sub.cancel$0(0);
              J.stop$0$x(t2._readLocal$0());
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure81.prototype = {
    call$1(n) {
      A._asInt(n);
      ++this._box_5.counter;
    },
    $signature: 18
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = A._BroadcastStreamController.prototype;
    _.super$_BroadcastStreamController$_addEventError = _._addEventError$0;
    _ = A._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._async$_add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _ = A.ListBase.prototype;
    _.super$ListBase$setRange = _.setRange$4;
    _ = A.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _.super$Iterable$skipWhile = _.skipWhile$1;
    _ = A.Element.prototype;
    _.super$Element$createFragment = _.createFragment$3$treeSanitizer$validator;
    _ = A._SimpleNodeValidator.prototype;
    _.super$_SimpleNodeValidator$allowsAttribute = _.allowsAttribute$3;
    _ = A.BaseRequest.prototype;
    _.super$BaseRequest$finalize = _.finalize$0;
    _ = A.Logger.prototype;
    _.super$Logger$log = _.log$5$error$stackTrace$time;
    _ = A.Matcher.prototype;
    _.super$Matcher$describeMismatch = _.describeMismatch$4;
    _ = A.TypeMatcher.prototype;
    _.super$TypeMatcher$describe = _.describe$1;
    _.super$TypeMatcher$matches = _.matches$2;
    _ = A.WorkerTask.prototype;
    _.super$WorkerTask$cancel = _.cancel$1;
    _.super$WorkerTask$run = _.run$1;
    _ = A.Releasable.prototype;
    _.super$Releasable$release = _.release$0;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance = hunkHelpers.installInstanceTearOff,
      _static_0 = hunkHelpers._static_0,
      _static_1 = hunkHelpers._static_1,
      _static = hunkHelpers.installStaticTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_0_i = hunkHelpers._instance_0i,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_u = hunkHelpers._instance_1u;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 178);
    _instance_1_i(J.JSArray.prototype, "get$add", "add$1", 4);
    _instance(J.JSString.prototype, "get$startsWith", 1, 1, null, ["call$2", "call$1"], ["startsWith$2", "startsWith$1"], 110, 0, 0);
    _instance_1_i(A.FixedLengthListMixin.prototype, "get$add", "add$1", 4);
    _instance_1_i(A.UnmodifiableListMixin.prototype, "get$add", "add$1", 4);
    _static_0(A, "_js_helper_Primitives_dateNow$closure", "Primitives_dateNow", 78);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 48);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 48);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 48);
    _static_1(A, "async_Future__kTrue$closure", "Future__kTrue", 19);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static_1(A, "async___nullDataHandler$closure", "_nullDataHandler", 5);
    _static_2(A, "async___nullErrorHandler$closure", "_nullErrorHandler", 23);
    _static_0(A, "async___nullDoneHandler$closure", "_nullDoneHandler", 1);
    _static(A, "async___rootHandleUncaughtError$closure", 5, null, ["call$5"], ["_rootHandleUncaughtError"], 180, 0);
    _static(A, "async___rootRun$closure", 4, null, ["call$1$4", "call$4"], ["_rootRun", function($self, $parent, zone, f) {
      return A._rootRun($self, $parent, zone, f, type$.dynamic);
    }], 181, 1);
    _static(A, "async___rootRunUnary$closure", 5, null, ["call$2$5", "call$5"], ["_rootRunUnary", function($self, $parent, zone, f, arg) {
      var t1 = type$.dynamic;
      return A._rootRunUnary($self, $parent, zone, f, arg, t1, t1);
    }], 182, 1);
    _static(A, "async___rootRunBinary$closure", 6, null, ["call$3$6", "call$6"], ["_rootRunBinary", function($self, $parent, zone, f, arg1, arg2) {
      var t1 = type$.dynamic;
      return A._rootRunBinary($self, $parent, zone, f, arg1, arg2, t1, t1, t1);
    }], 183, 1);
    _static(A, "async___rootRegisterCallback$closure", 4, null, ["call$1$4", "call$4"], ["_rootRegisterCallback", function($self, $parent, zone, f) {
      return A._rootRegisterCallback($self, $parent, zone, f, type$.dynamic);
    }], 184, 0);
    _static(A, "async___rootRegisterUnaryCallback$closure", 4, null, ["call$2$4", "call$4"], ["_rootRegisterUnaryCallback", function($self, $parent, zone, f) {
      var t1 = type$.dynamic;
      return A._rootRegisterUnaryCallback($self, $parent, zone, f, t1, t1);
    }], 185, 0);
    _static(A, "async___rootRegisterBinaryCallback$closure", 4, null, ["call$3$4", "call$4"], ["_rootRegisterBinaryCallback", function($self, $parent, zone, f) {
      var t1 = type$.dynamic;
      return A._rootRegisterBinaryCallback($self, $parent, zone, f, t1, t1, t1);
    }], 186, 0);
    _static(A, "async___rootErrorCallback$closure", 5, null, ["call$5"], ["_rootErrorCallback"], 187, 0);
    _static(A, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 188, 0);
    _static(A, "async___rootCreateTimer$closure", 5, null, ["call$5"], ["_rootCreateTimer"], 189, 0);
    _static(A, "async___rootCreatePeriodicTimer$closure", 5, null, ["call$5"], ["_rootCreatePeriodicTimer"], 190, 0);
    _static(A, "async___rootPrint$closure", 4, null, ["call$4"], ["_rootPrint"], 55, 0);
    _static_1(A, "async___printToZone$closure", "_printToZone", 191);
    _static(A, "async___rootFork$closure", 5, null, ["call$5"], ["_rootFork"], 192, 0);
    var _;
    _instance_0_u(_ = A._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_1_i(_ = A._BroadcastStreamController.prototype, "get$add", "add$1", 4);
    _instance(_, "get$addError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["addError$2", "addError$1"], 71, 0, 0);
    _instance_0_i(_, "get$close", "close$0", 13);
    _instance_1_i(_, "get$_async$_add", "_async$_add$1", 4);
    _instance_2_u(_, "get$_addError", "_addError$2", 23);
    _instance_0_u(_, "get$_async$_close", "_async$_close$0", 1);
    _instance(A._Completer.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 71, 0, 0);
    _instance(A._AsyncCompleter.prototype, "get$complete", 1, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["complete$1", "complete$0"], 121, 0, 0);
    _instance_2_u(A._Future.prototype, "get$_completeError", "_completeError$2", 23);
    _instance_1_i(_ = A._StreamController.prototype, "get$_async$_add", "_async$_add$1", 4);
    _instance_2_u(_, "get$_addError", "_addError$2", 23);
    _instance_0_u(_, "get$_async$_close", "_async$_close$0", 1);
    _instance_0_u(_ = A._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_0_i(_ = A._BufferingStreamSubscription.prototype, "get$cancel", "cancel$0", 37);
    _instance_0_u(_, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_0_i(_ = A._DoneStreamSubscription.prototype, "get$cancel", "cancel$0", 37);
    _instance_0_u(_, "get$_onMicrotask", "_onMicrotask$0", 1);
    _instance_1_u(_ = A._StreamIterator.prototype, "get$_async$_onData", "_async$_onData$1", 4);
    _instance_2_u(_, "get$_onError", "_onError$2", 23);
    _instance_0_u(_, "get$_async$_onDone", "_async$_onDone$0", 1);
    _instance_0_u(_ = A._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 4);
    _instance_2_u(_, "get$_async$_handleError", "_async$_handleError$2", 98);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 1);
    _static_2(A, "collection___defaultEquals$closure", "_defaultEquals", 75);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 76);
    _instance_1_i(A._LinkedHashSet.prototype, "get$contains", "contains$1", 19);
    _instance_1_i(A.ListBase.prototype, "get$add", "add$1", 4);
    _static_1(A, "convert___defaultToEncodable$closure", "_defaultToEncodable", 74);
    _instance_1_i(_ = A._ByteCallbackSink.prototype, "get$add", "add$1", 4);
    _instance_0_i(_, "get$close", "close$0", 1);
    _static_1(A, "core__identityHashCode$closure", "identityHashCode", 76);
    _static_2(A, "core__identical$closure", "identical", 75);
    _static_1(A, "core__GeneratorIterable__id$closure", "_GeneratorIterable__id", 67);
    _static_1(A, "core__print$closure", "print", 4);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 15);
    _static(A, "html__Html5NodeValidator__standardAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__standardAttributeValidator"], 77, 0);
    _static(A, "html__Html5NodeValidator__uriAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__uriAttributeValidator"], 77, 0);
    _instance_1_i(A._ChildNodeListLazy.prototype, "get$add", "add$1", 4);
    _instance_1_i(A.ImmutableListMixin.prototype, "get$add", "add$1", 4);
    _instance_0_u(_ = A.StreamGroup.prototype, "get$_onListen", "_onListen$0", 1);
    _instance_0_u(_, "get$_onCancelBroadcast", "_onCancelBroadcast$0", 1);
    _static(A, "canceled_exceptions___self$closure", 1, null, ["call$1$1", "call$1"], ["_self", function(x) {
      return A._self(x, type$.dynamic);
    }], 196, 1);
    _instance(A.CancelableToken.prototype, "get$cancel", 1, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["cancel$1", "cancel$0"], 114, 0, 0);
    _instance_1_i(A.QueueList.prototype, "get$add", "add$1", 4);
    _instance_1_i(A._DelegatingIterableBase.prototype, "get$contains", "contains$1", 19);
    _instance_1_u(A.PrettyPrinter.prototype, "get$toEncodableFallback", "toEncodableFallback$1", 152);
    _instance(A._DeepMatcher.prototype, "get$_recursiveMatch", 0, 4, null, ["call$4"], ["_recursiveMatch$4"], 160, 0, 0);
    _static_1(A, "pretty_print___escapeString$closure", "_escapeString", 15);
    _static_1(A, "util___getHexLiteral$closure", "_getHexLiteral", 15);
    _instance_1_u(_ = A._BaseWebChannel.prototype, "get$_postRequest", "_postRequest$1", 25);
    _instance_1_u(_, "get$_inspectAndPostRequest", "_inspectAndPostRequest$1", 25);
    _instance_1_i(_ = A._WebWorkerChannel.prototype, "get$reply", "reply$1", 5);
    _instance_1_u(_, "get$inspectAndReply", "inspectAndReply$1", 5);
    _instance_1_u(A._WebForwardChannel.prototype, "get$_forward", "_forward$1", 26);
    _static_2(A, "_pool_worker_PoolWorker_compareCapacityDesc$closure", "PoolWorker_compareCapacityDesc", 197);
    _static_1(A, "_pool_worker_PoolWorker_isStopped$closure", "PoolWorker_isStopped", 198);
    _static_1(A, "_pool_worker_PoolWorker_getStats$closure", "PoolWorker_getStats", 199);
    _instance_1_u(_ = A.StreamWrapper.prototype, "get$_bufferize", "_bufferize$1", 25);
    _instance_1_u(_, "get$_process", "_process$1", 25);
    _instance_0_u(_, "get$__stream_wrapper$_onListen", "__stream_wrapper$_onListen$0", 1);
    _instance_0_u(_, "get$__stream_wrapper$_onCancel", "__stream_wrapper$_onCancel$0", 37);
    _instance_0_u(_, "get$__stream_wrapper$_onPause", "__stream_wrapper$_onPause$0", 1);
    _instance_0_u(_, "get$__stream_wrapper$_onResume", "__stream_wrapper$_onResume$0", 1);
    _static_1(A, "_user_code_UserCode__noop$closure", "UserCode__noop", 5);
    _instance_0_u(_ = A.WorkerStreamTask.prototype, "get$__worker_stream_task$_onPause", "__worker_stream_task$_onPause$0", 1);
    _instance_0_u(_, "get$__worker_stream_task$_onResume", "__worker_stream_task$_onResume$0", 1);
    _instance_0_u(_, "get$__worker_stream_task$_onCancel", "__worker_stream_task$_onCancel$0", 43);
    _instance(_, "get$_done", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_done$1", "_done$0"], 83, 0, 0);
    _instance_2_u(_, "get$__worker_stream_task$_onError", "__worker_stream_task$_onError$2", 29);
    _instance_1_u(_, "get$__worker_stream_task$_onData", "__worker_stream_task$_onData$1", 4);
    _instance_0_u(_, "get$__worker_stream_task$_onListen", "__worker_stream_task$_onListen$0", 1);
    _instance_2_u(_ = A.WorkerValueTask.prototype, "get$_completeWithError", "_completeWithError$2", 85);
    _instance_1_u(_, "get$_completeWithResult", "_completeWithResult$1", 5);
    _static_1(A, "squadron_canceled_exception__SquadronCanceledExceptionExt_deserialize$closure", "SquadronCanceledExceptionExt_deserialize", 200);
    _static_1(A, "squadron_canceled_exceptions__SquadronCanceledExceptionsExt_deserialize$closure", "SquadronCanceledExceptionsExt_deserialize", 201);
    _static_1(A, "squadron_error__SquadronErrorExt_deserialize$closure", "SquadronErrorExt_deserialize", 202);
    _static_1(A, "squadron_timeout_exception__SquadronTimeoutExceptionExt_deserialize$closure", "SquadronTimeoutExceptionExt_deserialize", 203);
    _static_1(A, "worker_exception__WorkerExceptionExt_deserialize$closure", "WorkerExceptionExt_deserialize", 204);
    _instance_1_u(_ = A.WorkerPool.prototype, "get$_removeWorkerAndNotify", "_removeWorkerAndNotify$1", 4);
    _instance_0_u(_, "get$_schedule", "_schedule$0", 1);
    _instance(A.SquadronCancelationToken.prototype, "get$_checkToken", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_checkToken$1", "_checkToken$0"], 93, 0, 0);
    _instance_0_u(A.Chain.prototype, "get$toTrace", "toTrace$0", 31);
    _static_1(A, "frame_Frame___parseVM_tearOff$closure", "Frame___parseVM_tearOff", 34);
    _static_1(A, "frame_Frame___parseV8_tearOff$closure", "Frame___parseV8_tearOff", 34);
    _static_1(A, "frame_Frame___parseFirefox_tearOff$closure", "Frame___parseFirefox_tearOff", 34);
    _static_1(A, "frame_Frame___parseFriendly_tearOff$closure", "Frame___parseFriendly_tearOff", 34);
    _instance_0_u(A.LazyChain.prototype, "get$toTrace", "toTrace$0", 31);
    _static_1(A, "trace_Trace___parseVM_tearOff$closure", "Trace___parseVM_tearOff", 79);
    _static_1(A, "trace_Trace___parseFriendly_tearOff$closure", "Trace___parseFriendly_tearOff", 79);
    _instance_0_u(A.Invoker.prototype, "get$_onRun", "_onRun$0", 1);
    _instance_0_u(A.LiveTestController.prototype, "get$run", "run$0", 13);
    _instance_0_u(A.Engine.prototype, "get$run", "run$0", 115);
    _instance_1_u(_ = A.ExpandedReporter.prototype, "get$_onTestStarted", "_onTestStarted$1", 122);
    _instance_1_u(_, "get$_onDone", "_onDone$1", 123);
    _static_1(A, "cancelation_test__execute$closure", "execute", 12);
    _static_1(A, "custom_exception_CustomException_deserialize$closure", "CustomException_deserialize", 208);
    _instance_1_u(A.HtmlLogger.prototype, "get$_onScroll", "_onScroll$1", 14);
    _static_1(A, "issues_test__execute$closure", "execute0", 12);
    _static_1(A, "local_worker_test__execute$closure", "execute1", 12);
    _static_1(A, "logging_test__execute$closure", "execute2", 12);
    _static_1(A, "marshaler_test__execute$closure", "execute3", 12);
    _static_1(A, "shared_channel_test__execute$closure", "execute4", 12);
    _static_1(A, "web_worker_js_test__execute$closure", "execute5", 12);
    _static_1(A, "worker_pool_test__execute$closure", "execute6", 12);
    _static_1(A, "worker_test__execute$closure", "execute7", 12);
    _static(A, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return A.max(a, b, type$.num);
    }], 209, 1);
    _static_0(A, "channel_Channel_noop$closure", "Channel_noop", 1);
    _static_1(A, "_transferables_Transferables__isBaseType$closure", "Transferables__isBaseType", 19);
    _static_1(A, "_transferables_Transferables__isSafeForTransfer$closure", "Transferables__isSafeForTransfer", 19);
    _static_1(A, "_transferables_Transferables__isNotSafeForTransfer$closure", "Transferables__isNotSafeForTransfer", 19);
    _static_1(A, "cast_helpers_Cast_toInt$closure", "Cast_toInt", 210);
    _static_1(A, "cast_helpers_Cast_toDbl$closure", "Cast_toDbl", 211);
    _static(A, "cast_helpers_Cast_identity$closure", 1, null, ["call$1$1", "call$1"], ["Cast_identity", function(value) {
      return A.Cast_identity(value, type$.dynamic);
    }], 141, 1);
    _static_0(A, "_platform__unsendable$closure", "unsendable", 1);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Error, A.ListBase, A.Closure, A.SentinelValue, A.Iterable, A.ListIterator, A.MappedIterator, A.WhereIterator, A.ExpandIterator, A.TakeIterator, A.SkipIterator, A.SkipWhileIterator, A.EmptyIterator, A.FollowedByIterator, A.WhereTypeIterator, A.NonNullsIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.Symbol, A._Record, A.MapView, A.ConstantMap, A._KeysOrValuesOrElementsIterator, A.SetBase, A.JSInvocationMirror, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A._Required, A.MapBase, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._SyncStarIterator, A.AsyncError, A.Stream, A._BufferingStreamSubscription, A._BroadcastStreamController, A.TimeoutException, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A._StreamController, A._SyncStreamControllerDispatch, A._AsyncStreamControllerDispatch, A._StreamSinkWrapper, A._AddStreamState, A._DelayedEvent, A._DelayedDone, A._PendingEvents, A._DoneStreamSubscription, A._StreamIterator, A._ZoneFunction, A._ZoneSpecification, A._ZoneDelegate, A._Zone, A._HashMapKeyIterator, A._LinkedHashSetCell, A._LinkedHashSetIterator, A._MapBaseValueIterator, A._UnmodifiableMapMixin, A._ListQueueIterator, A.Codec, A.Converter, A._Base64Encoder, A.ByteConversionSink, A._JsonStringifier, A._JsonPrettyPrintMixin, A._Utf8Encoder, A._Utf8Decoder, A._BigIntImpl, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A._StringStackTrace, A.Stopwatch, A.RuneIterator, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A.Expando, A.CssStyleDeclarationBase, A.EventStreamProvider, A._EventStreamSubscription0, A._Html5NodeValidator, A.ImmutableListMixin, A.NodeValidatorBuilder, A._SimpleNodeValidator, A._SvgNodeValidator, A.FixedSizeListIterator, A._DOMWindowCrossFrame, A._SameOriginUriPolicy, A._ValidatingTreeSanitizer, A._StructuredClone, A._AcceptStructuredClone, A.NullRejectionException, A.AsyncMemoizer, A.DelegatingSink, A.FutureGroup, A.StreamGroup, A._StreamGroupState, A.All, A.CancelationToken, A.CanceledException, A.CanceledExceptions, A._QueueList_Object_ListMixin, A.UnionSetController, A._DelegatingIterableBase, A.UnmodifiableSetMixin, A.BaseClient, A.BaseRequest, A.BaseResponse, A.ClientException, A.AnsiColor, A.LogFilter, A.LogEvent, A.LogOutput, A.LogPrinter, A.Logger, A.OutputEvent, A.Matcher, A.StringDescription, A._Mismatch, A.Context, A.Style, A.ParsedPath, A.PathException, A.Pool, A.PoolResource, A._BaseWebChannel, A._LocalWorker_Object_Releasable, A.PoolWorker, A.StreamWrapper, A.TokenId, A.ValueWrapper, A.WorkerRunner, A.WorkerTask, A.ConcurrencySettings, A.ExceptionManager, A.SquadronException, A.SquadronCanceledExceptions, A.TaskCanceledException, A._WorkerPool_Object_Releasable, A.PerfCounter, A.PerfCounterSnapshot, A.WorkerStat, A.CancelationTokenReference, A._Worker_Object_Releasable, A.Chain, A.Frame, A.LazyChain, A.LazyTrace, A._Node, A.Trace, A.UnparsedFrame, A.OutsideTestException, A.ClosedException, A.Timeout, A.Declarer, A.DuplicateTestNameException, A.Group, A.Test, A.Invoker, A._AsyncCounter, A.LiveTest, A.Message, A.MessageType, A.Metadata, A.OperatingSystem, A.PlatformSelector, A.Runtime, A.StackTraceFormatter, A.State, A.Suite, A.SuitePlatform, A.TestFailure, A.Engine, A.LiveSuite, A.LiveSuiteController, A.ExpandedReporter, A.RunnerSuiteController, A.SuiteConfiguration, A._IterableSet_Object_SetMixin, A.PrintSink, A.ReleasedException, A.Releasable, A.EventStreamProvider0, A._EventStreamSubscription, A.CacheStat, A.ConsoleToHtml, A.SequenceReplacement, A.HtmlLogger, A.LocalService, A.TestContext, A.TestResult, A.TestEntryPoints]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData, A.EventTarget, A.AccessibleNodeList, A.Blob, A.CssTransformComponent, A.CssRule, A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase, A.CssStyleValue, A.DataTransferItemList, A.DomException, A.DomImplementation, A._DomRectList_JavaScriptObject_ListMixin, A.DomRectReadOnly, A._DomStringList_JavaScriptObject_ListMixin, A.DomTokenList, A.Event, A._FileList_JavaScriptObject_ListMixin, A.Gamepad, A.History, A._HtmlCollection_JavaScriptObject_ListMixin, A.ImageData, A.Location, A.MediaList, A._MidiInputMap_JavaScriptObject_MapMixin, A._MidiOutputMap_JavaScriptObject_MapMixin, A.MimeType, A._MimeTypeArray_JavaScriptObject_ListMixin, A._NodeList_JavaScriptObject_ListMixin, A.Plugin, A._PluginArray_JavaScriptObject_ListMixin, A._RtcStatsReport_JavaScriptObject_MapMixin, A.SharedArrayBuffer, A.SpeechGrammar, A._SpeechGrammarList_JavaScriptObject_ListMixin, A.SpeechRecognitionResult, A._Storage_JavaScriptObject_MapMixin, A.StyleSheet, A._TextTrackCueList_JavaScriptObject_ListMixin, A.TimeRanges, A.Touch, A._TouchList_JavaScriptObject_ListMixin, A.TrackDefaultList, A.Url, A.__CssRuleList_JavaScriptObject_ListMixin, A.__GamepadList_JavaScriptObject_ListMixin, A.__NamedNodeMap_JavaScriptObject_ListMixin, A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin, A.__StyleSheetList_JavaScriptObject_ListMixin, A.Length, A._LengthList_JavaScriptObject_ListMixin, A.Number, A._NumberList_JavaScriptObject_ListMixin, A.PointList, A._StringList_JavaScriptObject_ListMixin, A.Transform, A._TransformList_JavaScriptObject_ListMixin, A.AudioBuffer, A._AudioParamMap_JavaScriptObject_MapMixin]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A._CyclicInitializationError, A.RuntimeError, A.AssertionError, A._Error, A.JsonUnsupportedObjectError, A.ArgumentError, A.NoSuchMethodError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError]);
    _inheritMany(A.ListBase, [A.UnmodifiableListBase, A._FrozenElementList, A._ChildNodeListLazy]);
    _inheritMany(A.UnmodifiableListBase, [A.CodeUnits, A.UnmodifiableListView]);
    _inheritMany(A.Closure, [A.Closure0Args, A.Closure2Args, A.Instantiation, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._SyncBroadcastStreamController__sendData_closure, A._SyncBroadcastStreamController__sendError_closure, A._SyncBroadcastStreamController__sendDone_closure, A.Future_wait_closure, A.Future_doWhile_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_Stream$fromFuture_closure, A.Stream_Stream$fromIterable_closure, A.Stream_length_closure, A.Stream_isEmpty_closure0, A.Stream_toList_closure, A.Stream_first_closure0, A._CustomZone_bindUnaryCallback_closure, A._CustomZone_bindUnaryCallbackGuarded_closure, A._RootZone_bindUnaryCallback_closure, A._RootZone_bindUnaryCallbackGuarded_closure, A._HashMap_values_closure, A._LinkedCustomHashMap_closure, A.MapBase_entries_closure, A._BigIntImpl_hashCode_finish, A._Uri__makePath_closure, A._createTables_setChars, A._createTables_setRange, A.Element_Element$html_closure, A._EventStreamSubscription_closure0, A._EventStreamSubscription_onData_closure0, A.NodeValidatorBuilder_allowsElement_closure, A.NodeValidatorBuilder_allowsAttribute_closure, A._SimpleNodeValidator_closure, A._SimpleNodeValidator_closure0, A._TemplatingNodeValidator_closure, A.jsify__convert, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.dartify_convert, A.FutureGroup_add_closure, A.StreamGroup__onListen_closure, A.StreamGroup__onCancel_closure, A.CanceledExceptions_message_closure, A.CompositeToken$__closure, A.CompositeToken__checkTokens_closure, A.TimeoutToken_ensureStarted_closure, A.UnionSet__iterable_closure, A.UnionSet_contains_closure, A.head_closure, A.BaseRequest_closure0, A.BrowserClient_send_closure, A.BrowserClient_send_closure0, A.ByteStream_toBytes_closure, A.PrettyPrinter_formatStackTrace_closure, A._Contains_matches_closure, A._DeepMatcher__compareSets_closure, A._expect_closure0, A.prettyPrint_prettyPrintImpl, A.prettyPrint_prettyPrintImpl_pp, A.prettyPrint_prettyPrintImpl_closure, A.prettyPrint_prettyPrintImpl_closure0, A.prettyPrint_prettyPrintImpl_closure1, A.wrapMatcher_closure, A.escape_closure, A.Context_joinAll_closure, A.Context_split_closure, A._validateArgList_closure, A.WindowsStyle_absolutePathToUri_closure, A.Pool__runOnRelease_closure, A._WebChannel_sendRequest_closure, A._WebChannel_sendRequest_closure0, A._WebChannel_sendStreamingRequest_closure, A.openChannel_fail, A.openChannel_success, A.openChannel_closure, A.openChannel__closure3, A.openChannel_closure0, A.openChannel_closure1, A.JsWorkerRunnerExt_get_handle_closure, A.StreamWrapper_closure, A.StreamWrapper_closure0, A.StreamWrapper__onListen_closure, A.UserCode_run_closure, A.ValueWrapper_closure, A.ValueWrapper_closure0, A.WorkerRunner_WorkerRunner$use_closure, A.WorkerRunner__pipe_closure, A.WorkerStreamTask_run_closure, A.WorkerValueTask_run_closure, A.SquadronCanceledException_SquadronCanceledException$from_closure, A.SquadronCanceledExceptions_message_closure, A.SquadronCanceledExceptions_serialize_closure, A.WorkerPool__provisionWorkers_closure0, A.WorkerPool__provisionWorkers__closure, A.WorkerPool__provisionWorkers__closure1, A.WorkerPool_stop_closure, A.WorkerPool__schedule_closure, A.WorkerPool__schedule_closure0, A.WorkerPool__schedule_closure1, A.WorkerPool_cancel_closure, A.Worker_send_sendReq, A.Worker_start_closure, A.LogEventSerialization__getLevel_closure, A.Chain_Chain$parse_closure, A.Chain_toTrace_closure, A.Chain_toString_closure0, A.Chain_toString__closure0, A.Chain_toString_closure, A.Chain_toString__closure, A.Trace__parseVM_closure, A.Trace$parseV8_closure, A.Trace$parseJSCore_closure, A.Trace$parseFirefox_closure, A.Trace$parseFriendly_closure, A.Trace_toString_closure0, A.Trace_toString_closure, A.Declarer_build_closure, A.Declarer__runSetUps_closure, A.Declarer__setUpAll___closure, A.Group_forPlatform_closure, A.Group__map_closure, A.Invoker_guard_closure, A.Invoker_runTearDowns__closure0, A.Invoker__onRun___closure0, A.Metadata__validateTags_closure, A.Metadata__validateTags_closure0, A.PlatformSelector_validate__closure, A.PlatformSelector_evaluate_closure, A.Engine_success_closure, A.Engine_closure, A.Engine_run_closure, A.Engine__runLiveTest_closure, A.LiveSuiteController_reportLiveTest_closure, A.ExpandedReporter__onTestStarted_closure, A.ExpandedReporter__onTestStarted_closure0, A.ExpandedReporter__onTestStarted_closure1, A._EventStreamSubscription_closure, A._EventStreamSubscription_onData_closure, A._checkWebWorkers_closure, A._checkWebWorkers_closure0, A._checkWebWorkers_closure1, A.execute_____closure47, A.execute_____closure48, A.execute_____closure45, A.execute_____closure46, A.execute_____closure40, A.execute_____closure41, A.execute_____closure42, A.execute_____closure43, A.execute_____closure44, A.execute_____closure35, A.execute_____closure36, A.execute_____closure37, A.execute_____closure38, A.execute_____closure39, A.execute_____closure34, A.execute_____closure29, A.execute_____closure30, A.execute______closure2, A.execute_____closure31, A.execute______closure0, A.execute______closure1, A.execute_____closure32, A.execute______closure, A.execute_____closure33, A.execute_____closure19, A.execute_____closure21, A.execute_____closure22, A.execute_____closure23, A.execute_____closure24, A.execute_____closure25, A.execute_____closure26, A.execute_____closure27, A.execute_____closure28, A.execute_____closure9, A.execute_____closure11, A.execute_____closure12, A.execute_____closure13, A.execute_____closure14, A.execute_____closure15, A.execute_____closure16, A.execute_____closure17, A.execute_____closure18, A.execute_____closure7, A.execute_____closure5, A.execute_____closure1, A.execute_____closure3, A.ConsoleToHtml_convert_closure, A.IssuesWorkerPool_issue_8_closure, A.execute_____closure0, A.execute_____closure, A.LocalClientWorkerPool_checkIds_closure, A.LocalClientWorkerPool_checkException_closure, A.LocalClientWorkerPool_checkSequence_closure, A.LocalServiceImpl_operations_closure, A.LocalServiceImpl_operations_closure0, A.LocalServiceImpl_operations_closure1, A.execute_____closure57, A.execute_____closure56, A.execute______closure7, A.execute_____closure55, A.execute______closure6, A.execute_____closure54, A.execute_____closure53, A.execute_____closure52, A.execute______closure5, A.execute_____closure51, A.execute_____closure50, A.execute______closure4, A.execute_______closure0, A.execute_____closure49, A.execute______closure3, A.execute_______closure, A.PrimeWorkerPool_isPrime_closure, A.PrimeWorkerPool_getPrimes_closure, A.TestContext_done_closure, A.TestContext_test_closure, A.run_closure, A.run_closure0, A.run_closure1, A.main_closure, A.main_closure0, A.TestWorkerPool_io_closure, A.TestWorkerPool_delayed_closure, A.TestWorkerPool_throwTaskTimeOutException_closure, A.TestWorkerPool_throwCanceledException_closure, A.TestWorkerPool_throwCustomException_closure, A.TestWorkerPool_ping_closure, A.TestWorkerPool_finite_closure, A.TestWorkerPool_getPendingInfiniteWithErrors_closure, A.TestWorkerPool_infiniteWithErrors_closure, A.TestWorkerPool_delayedIdentityTask_closure, A.TestWorkerPool_finiteTask_closure, A.TestWorkerPool_infiniteWithErrorsTask_closure, A.execute____closure86, A.execute____closure87, A.execute____closure83, A.execute____closure84, A.execute____closure85, A.execute____closure81, A.execute____closure82, A.execute____closure79, A.execute____closure80, A.execute____closure77, A.execute____closure78, A.execute____closure53, A.execute_____closure80, A.execute______closure18, A.execute____closure52, A.execute_____closure79, A.execute______closure16, A.execute_____closure78, A.execute_____closure77, A.execute_____closure76, A.execute_____closure75, A.execute______closure14, A.execute_____closure74, A.execute______closure12, A.execute_____closure73, A.execute_____closure72, A.execute_____closure71, A.execute_____closure70, A.execute____closure42, A.execute____closure41, A.execute____closure40, A.execute____closure39, A.execute____closure38, A.execute_____closure69, A.execute_____closure68, A.execute______closure8, A.execute______closure9, A.execute______closure10, A.execute______closure11, A.execute_____closure67, A.execute_____closure64, A.execute_____closure65, A.execute_____closure66, A.execute_____closure60, A.execute_____closure61, A.execute_____closure62, A.execute_____closure63, A.execute_____closure58, A.execute_____closure59, A.execute_____closure107, A.execute____closure_hook0, A.execute_____closure106, A.execute____closure_hook, A.execute_____closure105, A.execute______closure21, A.execute______closure20, A.execute______closure19, A.execute_____closure101, A.execute_____closure100, A.execute_____closure99, A.execute_____closure98, A.execute_____closure97, A.execute_____closure96, A.execute_____closure_createTask0, A.execute_____closure95, A.execute_____closure_createTask, A.execute_____closure83, A.execute_____closure84, A.execute_____closure82, A.execute_____closure81]);
    _inheritMany(A.Closure0Args, [A.nullFuture_closure, A.Primitives_initTicker_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._TimerImpl$periodic_closure, A.Future_Future_closure, A.Future_Future$microtask_closure, A.Future_Future$delayed_closure, A.Future_forEach_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__chainCoreFutureAsync_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_Stream$fromIterable_closure_next, A.Stream_Stream$fromIterable__closure, A.Stream_length_closure0, A.Stream_isEmpty_closure, A.Stream_toList_closure0, A.Stream_first_closure, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A._AddStreamState_cancel_closure, A._BufferingStreamSubscription_asFuture_closure, A._BufferingStreamSubscription_asFuture__closure, A._BufferingStreamSubscription__sendError_sendError, A._BufferingStreamSubscription__sendDone_sendDone, A._PendingEvents_schedule_closure, A._DoneStreamSubscription_asFuture_closure, A._MultiStream_listen_closure, A._cancelAndValue_closure, A._CustomZone_bindCallback_closure, A._CustomZone_bindCallbackGuarded_closure, A._rootHandleError_closure, A._RootZone_bindCallback_closure, A._RootZone_bindCallbackGuarded_closure, A._Utf8Decoder__decoder_closure, A._Utf8Decoder__decoderNonfatal_closure, A.StreamGroup_add_closure, A.StreamGroup_add_closure0, A.StreamGroup__listenToStream_closure, A.Logger_defaultFilter_closure, A.Logger_defaultPrinter_closure, A.Logger_defaultOutput_closure, A._expect_closure, A.Pool_close_closure, A.Pool__onResourceReleaseAllowed_closure, A._BaseWebChannel__postRequest_closure, A._BaseWebChannel__inspectAndPostRequest_closure, A._BaseWebChannel__postResponse_closure, A._BaseWebChannel__inspectAndPostResponse_closure, A._WebChannel_sendRequest_closure1, A._WebChannel_sendStreamingRequest_closure0, A._WebWorkerChannel_error_closure, A._WebForwardChannel__forward_closure, A.openChannel__closure2, A.openChannel___closure, A.openChannel___closure0, A.openChannel__closure1, A.openChannel__closure, A.openChannel__closure0, A.openChannel_closure2, A.openChannel_closure3, A.PoolWorker_run_closure, A.WorkerRunner__getTokenRef_closure, A.WorkerRunner__pipe_onDone, A.WorkerRunner__pipe_closure1, A.WorkerStreamTask__done_closure, A.WorkerValueTask__completeWithError_closure, A.WorkerValueTask__completeWithResult_closure, A.WorkerPool__provisionWorkers_closure, A.WorkerPool__provisionWorkers_closure2, A.WorkerPool__provisionWorkers__closure0, A.WorkerPool__provisionWorkers__closure2, A.WorkerPool__dispatchTasks_closure, A.Worker_send_sendReq_closure0, A.Worker_stream_onDone, A.Worker_stream_closure, A.Chain_Chain$current_closure, A.Chain_Chain$forTrace_closure, A.Frame_Frame$parseVM_closure, A.Frame_Frame$parseV8_closure, A.Frame_Frame$_parseFirefoxEval_closure, A.Frame_Frame$parseFirefox_closure, A.Frame_Frame$parseFriendly_closure, A.StackZoneSpecification_chainFor_closure, A.StackZoneSpecification_chainFor_closure0, A.StackZoneSpecification__currentTrace_closure, A.Trace_Trace$from_closure, A.Declarer_test_closure, A.Declarer_test__closure, A.Declarer_group_closure, A.Declarer_build__closure, A.Declarer__setUpAll_closure, A.Declarer__setUpAll__closure, A.Declarer__tearDownAll_closure, A.Declarer__tearDownAll__closure, A.Invoker_guard__closure, A.Invoker_runTearDowns_closure, A.Invoker_runTearDowns__closure, A.Invoker__waitForOutstandingCallbacks_closure, A.Invoker__waitForOutstandingCallbacks_closure0, A.Invoker_heartbeat_message, A.Invoker_heartbeat_closure, A.Invoker_heartbeat__closure, A.Invoker__handleError_closure, A.Invoker__onRun_closure, A.Invoker__onRun__closure, A.Invoker__onRun___closure, A.Invoker__onRun____closure, A.Invoker__onRun____closure0, A.Metadata_Metadata_unresolved, A.PlatformSelector_validate_closure, A.pumpEventQueue_closure, A.Engine_run__closure, A.Engine_run___closure, A.Engine_run_closure0, A.Engine__runLiveTest_closure0, A.Engine__runLiveTest_closure1, A.Engine__runSkippedTest_closure, A.Engine__runSkippedTest_closure0, A.Engine__runSkippedTest_closure1, A.LiveSuiteController_close_closure, A.RunnerSuiteController__close_closure, A._declarer_closure, A._declarer__closure, A.currentOSGuess_closure, A.Using_useAsync_closure, A.execute_closure0, A.execute__closure0, A.execute__closure1, A.execute__closure2, A.execute___closure0, A.execute____closure16, A.execute____closure17, A.execute____closure18, A.execute____closure19, A.execute____closure20, A.execute____closure21, A.execute___closure1, A.execute____closure10, A.execute____closure11, A.execute____closure12, A.execute____closure13, A.execute____closure14, A.execute_____closure20, A.execute____closure15, A.execute_____closure10, A.execute___closure2, A.execute____closure7, A.execute____closure8, A.execute____closure9, A.execute___closure3, A.execute____closure4, A.execute____closure5, A.execute____closure6, A.execute___closure4, A.execute____closure1, A.execute____closure2, A.execute____closure3, A.IssuesWorkerPool_closure, A.execute_closure, A.execute__closure, A.execute___closure, A.execute____closure, A.execute____closure0, A.LocalClientWorkerPool_closure, A.execute_closure3, A.execute__closure5, A.execute___closure23, A.execute____closure28, A.execute____closure29, A.execute____closure30, A.execute___closure24, A.execute____closure25, A.execute____closure26, A.execute____closure27, A.execute___closure25, A.execute____closure22, A.execute____closure23, A.execute____closure24, A.execute_closure2, A.execute__closure4, A.execute___closure11, A.execute___closure12, A.execute___closure13, A.execute___closure14, A.execute___closure15, A.execute___closure16, A.execute___closure17, A.execute___closure18, A.execute___closure19, A.execute___closure20, A.execute___closure21, A.execute___closure22, A.execute_closure1, A.execute__closure3, A.execute___closure5, A.execute___closure6, A.execute___closure7, A.execute___closure8, A.execute___closure9, A.execute___closure10, A.PrimeWorkerPool_closure, A.execute_closure4, A.execute__closure6, A.execute___closure26, A.execute___closure27, A.TestContext_test_closure1, A.TestContext_test_closure0, A.TestWorkerPool_closure, A.TestWorkerPool$throws_closure, A.TestWorkerPool$missingStartRequest_closure, A.TestWorkerPool$invalid_closure, A.execute_closure7, A.execute__closure9, A.execute___closure42, A.execute___closure43, A.execute___closure44, A.execute___closure45, A.execute___closure46, A.execute_closure5, A.execute__closure7, A.execute___closure28, A.execute______closure17, A.execute___closure29, A.execute___closure30, A.execute____closure49, A.execute____closure50, A.execute____closure51, A.execute___closure31, A.execute____closure43, A.execute____closure44, A.execute____closure45, A.execute____closure46, A.execute____closure47, A.execute____closure48, A.execute___closure32, A.execute___closure33, A.execute___closure34, A.execute___closure35, A.execute___closure36, A.execute___closure37, A.execute____closure31, A.execute____closure32, A.execute____closure33, A.execute____closure34, A.execute____closure35, A.execute____closure_pause, A.execute____closure_resume, A.execute____closure36, A.execute____closure37, A.execute_closure6, A.execute__closure8, A.execute___closure38, A.execute____closure70, A.execute____closure71, A.execute____closure72, A.execute____closure73, A.execute____closure74, A.execute____closure75, A.execute_____closure102, A.execute_____closure103, A.execute_____closure104, A.execute____closure76, A.execute___closure39, A.execute____closure66, A.execute____closure67, A.execute____closure68, A.execute____closure69, A.execute___closure40, A.execute____closure63, A.execute______createTask_closure0, A.execute____closure64, A.execute______createTask_closure, A.execute____closure65, A.execute_____closure85, A.execute_____closure86, A.execute_____closure87, A.execute_____closure88, A.execute_____closure89, A.execute_____closure90, A.execute_____closure91, A.execute_____closure92, A.execute_____closure93, A.execute_____closure94, A.execute___closure41, A.execute____closure54, A.execute____closure55, A.execute____closure56, A.execute____closure57, A.execute____closure58, A.execute____closure59, A.execute____closure60, A.execute____closure_pause0, A.execute____closure_resume0, A.execute____closure61, A.execute____closure62]);
    _inheritMany(A.Iterable, [A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.ExpandIterable, A.TakeIterable, A.SkipIterable, A.SkipWhileIterable, A.FollowedByIterable, A.WhereTypeIterable, A.NonNullsIterable, A._KeysOrValues, A._AllMatchesIterable, A._StringAllMatchesIterable, A._SyncStarIterable, A.Runes, A._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable, A._HashMapKeyIterable, A._MapBaseValueIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A.ReversedListIterable, A.ListQueue, A._GeneratorIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inherit(A.EfficientLengthTakeIterable, A.TakeIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A.EfficientLengthFollowedByIterable, A.FollowedByIterable);
    _inherit(A._Record2, A._Record);
    _inheritMany(A._Record2, [A._Record_2_revoke_url, A._Record_2_runner_script]);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inheritMany(A.Closure2Args, [A.ConstantMap_map_closure, A.Primitives_functionNoSuchMethod_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A.Future_wait_handleError, A.FutureExtensions_onError_onError, A._Future__chainForeignFuture_closure0, A.Stream_Stream$fromFuture_closure0, A._AddStreamState_makeErrorHandler_closure, A._BufferingStreamSubscription_asFuture_closure0, A.HashMap_HashMap$from_closure, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A._JsonStringifier_writeMap_closure, A._JsonPrettyPrintMixin_writeMap_closure, A._BigIntImpl_hashCode_combine, A.NoSuchMethodError_toString_closure, A.Uri_splitQueryString_closure, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A._createTables_build, A.MidiInputMap_keys_closure, A.MidiInputMap_values_closure, A.MidiOutputMap_keys_closure, A.MidiOutputMap_values_closure, A.RtcStatsReport_keys_closure, A.RtcStatsReport_values_closure, A.Storage_keys_closure, A.Storage_values_closure, A._ValidatingTreeSanitizer_sanitizeTree_walk, A._StructuredClone_walk_closure, A._StructuredClone_walk_closure0, A._AcceptStructuredClone_walk_closure, A.AudioParamMap_keys_closure, A.AudioParamMap_values_closure, A.FutureGroup_add_closure0, A.StreamGroup__onCancelBroadcast_closure, A.mergeMaps_closure, A.UnionSet_length_closure, A.BaseRequest_closure, A.PrettyPrinter_closure, A._DeepMatcher__compareSets_closure0, A._DeepMatcher__recursiveMatch_closure, A._DeepMatcher__recursiveMatch_closure0, A._DeepMatcher__recursiveMatch_closure1, A._DeepMatcher__recursiveMatch_closure2, A._DeepMatcher__recursiveMatch_closure3, A._Mismatch$simple_closure, A.Pool__runOnRelease_closure0, A.ValueWrapper_closure1, A.WorkerRunner__pipe_closure0, A.WorkerPool__provisionWorkers_closure1, A.Worker_send_sendReq_closure, A.Frame_Frame$parseV8_closure_parseLocation, A.Metadata_Metadata_closure, A.Metadata_validatePlatformSelectors_closure, A.Metadata_merge_closure, A.Metadata_merge_closure0, A.Metadata_forPlatform_closure, A.Engine_closure0, A.execute_____closure8, A.execute_____closure6, A.execute_____closure2, A.execute_____closure4, A.execute______closure15, A.execute______closure13]);
    _inherit(A.ConstantStringMap, A.ConstantMap);
    _inheritMany(A.SetBase, [A.ConstantSet, A._SetBase, A._UnionSet_SetBase_UnmodifiableSetMixin]);
    _inheritMany(A.ConstantSet, [A.ConstantStringSet, A.GeneralConstantSet]);
    _inherit(A.Instantiation1, A.Instantiation);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inheritMany(A.MapBase, [A.JsLinkedHashMap, A._HashMap, A._AttributeMap]);
    _inheritMany(A.JsLinkedHashMap, [A.JsIdentityLinkedHashMap, A.JsConstantLinkedHashMap, A._LinkedCustomHashMap]);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Stream, [A._StreamImpl, A.StreamView, A._EmptyStream, A._MultiStream, A._ForwardingStream, A._EventStream0, A._EventStream]);
    _inherit(A._ControllerStream, A._StreamImpl);
    _inherit(A._BroadcastStream, A._ControllerStream);
    _inheritMany(A._BufferingStreamSubscription, [A._ControllerSubscription, A._ForwardingStreamSubscription]);
    _inherit(A._BroadcastSubscription, A._ControllerSubscription);
    _inheritMany(A._BroadcastStreamController, [A._SyncBroadcastStreamController, A._AsyncBroadcastStreamController]);
    _inheritMany(A._Completer, [A._AsyncCompleter, A._SyncCompleter]);
    _inheritMany(A._StreamController, [A._AsyncStreamController, A._SyncStreamController]);
    _inherit(A._StreamControllerAddStreamState, A._AddStreamState);
    _inheritMany(A._DelayedEvent, [A._DelayedData, A._DelayedError]);
    _inherit(A._MultiStreamController, A._AsyncStreamController);
    _inherit(A._MapStream, A._ForwardingStream);
    _inheritMany(A._Zone, [A._CustomZone, A._RootZone]);
    _inherit(A._IdentityHashMap, A._HashMap);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inheritMany(A.Codec, [A.Encoding, A.Base64Codec, A._FusedCodec, A.JsonCodec]);
    _inheritMany(A.Encoding, [A.AsciiCodec, A.Utf8Codec]);
    _inheritMany(A.Converter, [A._UnicodeSubsetEncoder, A.Base64Encoder, A.JsonEncoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inherit(A.AsciiEncoder, A._UnicodeSubsetEncoder);
    _inherit(A._ByteCallbackSink, A.ByteConversionSink);
    _inherit(A.JsonCyclicError, A.JsonUnsupportedObjectError);
    _inherit(A._JsonStringStringifier, A._JsonStringifier);
    _inherit(A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, A._JsonStringStringifier);
    _inherit(A._JsonStringStringifierPretty, A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inheritMany(A.EventTarget, [A.Node, A.FileWriter, A.MessagePort, A.SourceBuffer, A._SourceBufferList_EventTarget_ListMixin, A.TextTrack, A.TextTrackCue, A._TextTrackList_EventTarget_ListMixin, A.VideoTrackList, A.Window, A.Worker, A.AudioTrackList, A.BaseAudioContext]);
    _inheritMany(A.Node, [A.Element, A.CharacterData, A.Document, A._Attr]);
    _inheritMany(A.Element, [A.HtmlElement, A.SvgElement]);
    _inheritMany(A.HtmlElement, [A.AnchorElement, A.AreaElement, A.BaseElement, A.BodyElement, A.DivElement, A.FormElement, A.SelectElement, A.TableElement, A.TableRowElement, A.TableSectionElement, A.TemplateElement]);
    _inherit(A.CssPerspective, A.CssTransformComponent);
    _inherit(A.CssStyleDeclaration, A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase);
    _inheritMany(A.CssStyleValue, [A.CssTransformValue, A.CssUnparsedValue]);
    _inherit(A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin, A._DomRectList_JavaScriptObject_ListMixin);
    _inherit(A.DomRectList, A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin, A._DomStringList_JavaScriptObject_ListMixin);
    _inherit(A.DomStringList, A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inheritMany(A.Event, [A.ErrorEvent, A.MessageEvent]);
    _inherit(A.File, A.Blob);
    _inherit(A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin, A._FileList_JavaScriptObject_ListMixin);
    _inherit(A.FileList, A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin, A._HtmlCollection_JavaScriptObject_ListMixin);
    _inherit(A.HtmlCollection, A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.HtmlDocument, A.Document);
    _inherit(A.MidiInputMap, A._MidiInputMap_JavaScriptObject_MapMixin);
    _inherit(A.MidiOutputMap, A._MidiOutputMap_JavaScriptObject_MapMixin);
    _inherit(A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin, A._MimeTypeArray_JavaScriptObject_ListMixin);
    _inherit(A.MimeTypeArray, A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin, A._NodeList_JavaScriptObject_ListMixin);
    _inherit(A.NodeList, A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin, A._PluginArray_JavaScriptObject_ListMixin);
    _inherit(A.PluginArray, A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.RtcStatsReport, A._RtcStatsReport_JavaScriptObject_MapMixin);
    _inherit(A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, A._SourceBufferList_EventTarget_ListMixin);
    _inherit(A.SourceBufferList, A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin, A._SpeechGrammarList_JavaScriptObject_ListMixin);
    _inherit(A.SpeechGrammarList, A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.Storage, A._Storage_JavaScriptObject_MapMixin);
    _inherit(A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin, A._TextTrackCueList_JavaScriptObject_ListMixin);
    _inherit(A.TextTrackCueList, A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, A._TextTrackList_EventTarget_ListMixin);
    _inherit(A.TextTrackList, A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin, A._TouchList_JavaScriptObject_ListMixin);
    _inherit(A.TouchList, A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__CssRuleList_JavaScriptObject_ListMixin);
    _inherit(A._CssRuleList, A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._DomRect, A.DomRectReadOnly);
    _inherit(A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__GamepadList_JavaScriptObject_ListMixin);
    _inherit(A._GamepadList, A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin, A.__NamedNodeMap_JavaScriptObject_ListMixin);
    _inherit(A._NamedNodeMap, A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin);
    _inherit(A._SpeechRecognitionResultList, A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin, A.__StyleSheetList_JavaScriptObject_ListMixin);
    _inherit(A._StyleSheetList, A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._ElementAttributeMap, A._AttributeMap);
    _inherit(A._ElementEventStreamImpl, A._EventStream0);
    _inherit(A._TemplatingNodeValidator, A._SimpleNodeValidator);
    _inherit(A._StructuredCloneDart2Js, A._StructuredClone);
    _inherit(A._AcceptStructuredCloneDart2Js, A._AcceptStructuredClone);
    _inherit(A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin, A._LengthList_JavaScriptObject_ListMixin);
    _inherit(A.LengthList, A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin, A._NumberList_JavaScriptObject_ListMixin);
    _inherit(A.NumberList, A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.ScriptElement0, A.SvgElement);
    _inherit(A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin, A._StringList_JavaScriptObject_ListMixin);
    _inherit(A.StringList, A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin, A._TransformList_JavaScriptObject_ListMixin);
    _inherit(A.TransformList, A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.AudioParamMap, A._AudioParamMap_JavaScriptObject_MapMixin);
    _inherit(A.OfflineAudioContext, A.BaseAudioContext);
    _inherit(A.TimeoutCanceledException, A.CanceledException);
    _inheritMany(A.CancelationToken, [A.CancelableToken, A.CompositeToken, A.TimeoutToken, A.SquadronCancelationToken]);
    _inheritMany(A._Enum, [A._Mode, A.Level, A.Compiler, A.Status, A.Result, A.TestPlatform]);
    _inherit(A.EmptyUnmodifiableSet, A._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin);
    _inherit(A.QueueList, A._QueueList_Object_ListMixin);
    _inherit(A.UnionSet, A._UnionSet_SetBase_UnmodifiableSetMixin);
    _inherit(A.DelegatingSet, A._DelegatingIterableBase);
    _inherit(A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin, A.DelegatingSet);
    _inherit(A.UnmodifiableSetView, A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin);
    _inherit(A.BrowserClient, A.BaseClient);
    _inherit(A.ByteStream, A.StreamView);
    _inherit(A.Request, A.BaseRequest);
    _inheritMany(A.BaseResponse, [A.Response, A.StreamedResponse]);
    _inherit(A.StreamedResponseV2, A.StreamedResponse);
    _inheritMany(A.LogFilter, [A.DevelopmentFilter, A._LogAllFilter, A.MemoryLogFilter]);
    _inheritMany(A.LogOutput, [A.ConsoleOutput, A._NoLogOutput, A.NoOutput]);
    _inheritMany(A.LogPrinter, [A.PrettyPrinter, A._DummyPrinter, A.EmptyPrinter]);
    _inheritMany(A.Matcher, [A._Empty, A._NotEmpty, A._IsNull, A._IsNotNull, A._IsTrue, A._IsFalse, A._Contains, A.TypeMatcher, A._DeepMatcher, A._IsNot, A._OrderingMatcher]);
    _inherit(A.FeatureMatcher, A.TypeMatcher);
    _inheritMany(A.FeatureMatcher, [A._Predicate, A._StringEqualsMatcher, A._MatchesRegExp]);
    _inherit(A.InternalStyle, A.Style);
    _inheritMany(A.InternalStyle, [A.PosixStyle, A.UrlStyle, A.WindowsStyle]);
    _inheritMany(A._BaseWebChannel, [A._WebChannel, A._WebWorkerChannel]);
    _inherit(A._WebForwardChannel, A._WebChannel);
    _inherit(A.LocalWorker, A._LocalWorker_Object_Releasable);
    _inherit(A._WebLocalWorker, A.LocalWorker);
    _inheritMany(A.Logger, [A.InternalLogger, A.MemoryLogger]);
    _inheritMany(A.WorkerTask, [A.WorkerStreamTask, A.WorkerValueTask]);
    _inheritMany(A.SquadronException, [A.SquadronCanceledException, A.SquadronError, A.WorkerException]);
    _inherit(A.SquadronTimeoutException, A.SquadronCanceledException);
    _inherit(A.WorkerPool, A._WorkerPool_Object_Releasable);
    _inherit(A.Worker0, A._Worker_Object_Releasable);
    _inherit(A.LocalTest, A.Test);
    _inherit(A.LiveTestController, A.LiveTest);
    _inherit(A._LiveSuite, A.LiveSuite);
    _inherit(A.RunnerSuite, A.Suite);
    _inherit(A._IterableSet_Object_SetMixin_UnmodifiableSetMixin, A._IterableSet_Object_SetMixin);
    _inherit(A.IterableSet, A._IterableSet_Object_SetMixin_UnmodifiableSetMixin);
    _inheritMany(A.Worker0, [A.CacheWorker, A.InstallableWorker, A.IssuesWorker, A.LocalClientWorker, A.MissingWorker, A.PrimeWorker, A.TestWorker]);
    _inherit(A.CustomException, A.WorkerException);
    _inheritMany(A.WorkerPool, [A.IssuesWorkerPool, A.LocalClientWorkerPool, A.PrimeWorkerPool, A.TestWorkerPool]);
    _inherit(A.LocalServiceImpl, A.LocalService);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._AsyncStreamController, A._AsyncStreamControllerDispatch);
    _mixin(A._SyncStreamController, A._SyncStreamControllerDispatch);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, A._JsonPrettyPrintMixin);
    _mixin(A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase, A.CssStyleDeclarationBase);
    _mixin(A._DomRectList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._DomRectList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._DomStringList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._DomStringList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._FileList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._FileList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._HtmlCollection_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._MidiInputMap_JavaScriptObject_MapMixin, A.MapBase);
    _mixin(A._MidiOutputMap_JavaScriptObject_MapMixin, A.MapBase);
    _mixin(A._MimeTypeArray_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._MimeTypeArray_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._NodeList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._PluginArray_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._PluginArray_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._RtcStatsReport_JavaScriptObject_MapMixin, A.MapBase);
    _mixin(A._SourceBufferList_EventTarget_ListMixin, A.ListBase);
    _mixin(A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._SpeechGrammarList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._SpeechGrammarList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._Storage_JavaScriptObject_MapMixin, A.MapBase);
    _mixin(A._TextTrackCueList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._TextTrackCueList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TextTrackList_EventTarget_ListMixin, A.ListBase);
    _mixin(A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TouchList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._TouchList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__CssRuleList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__CssRuleList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__GamepadList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__GamepadList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__NamedNodeMap_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__SpeechRecognitionResultList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__StyleSheetList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__StyleSheetList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._LengthList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._LengthList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._NumberList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._NumberList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._StringList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._StringList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._TransformList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._TransformList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._AudioParamMap_JavaScriptObject_MapMixin, A.MapBase);
    _mixin(A._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin, A.UnmodifiableSetMixin);
    _mixin(A._QueueList_Object_ListMixin, A.ListBase);
    _mixin(A._UnionSet_SetBase_UnmodifiableSetMixin, A.UnmodifiableSetMixin);
    _mixin(A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin, A.UnmodifiableSetMixin);
    _mixin(A._LocalWorker_Object_Releasable, A.Releasable);
    _mixin(A._WorkerPool_Object_Releasable, A.Releasable);
    _mixin(A._Worker_Object_Releasable, A.Releasable);
    _mixin(A._IterableSet_Object_SetMixin, A.SetBase);
    _mixin(A._IterableSet_Object_SetMixin_UnmodifiableSetMixin, A.UnmodifiableSetMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["Future<Null>()", "~()", "Null()", "bool(String)", "~(Object?)", "~(@)", "Null(@)", "Future<Null>(TestWorkerPool)", "String()", "bool(@)", "~(String,@)", "Future<Null>(TestWorker)", "~(TestContext)", "Future<~>()", "~(Event)", "String(String)", "Future<int>(TestWorker)", "Future<Null>(LocalWorker<LocalServiceImpl>)", "~(int)", "bool(Object?)", "~(MessageEvent)", "~(Description,bool)", "bool(ValueTask<@>)", "~(Object,StackTrace)", "Null(JSObject)", "~(List<@>)", "~(JSObject)", "bool(StreamTask<@>)", "Null(Object,StackTrace)", "~(@,@)", "Null(int)", "Trace()", "Frame()", "bool(List<@>)", "Frame(String)", "Null(@,@)", "Stream<int>(TestWorker)", "Future<@>()", "List<int>(List<int>)", "TestWorker()", "Future<Null>(LocalClientWorkerPool)", "~(Timer)", "~(Object?,Object?)", "@()", "String(SquadronException)", "Future<Null>(LocalClientWorker)", "Chain()", "List<int>(Object?,StackTrace)", "~(~())", "Future<Null>(InstallableWorker)", "~(State)", "bool(Uri)", "Future<Null>(PrimeWorkerPool)", "Metadata(Metadata,Metadata)", "~(PlatformSelector,Metadata)", "~(Zone,ZoneDelegate,Zone,String)", "GroupEntry?(GroupEntry)", "@(Function)", "String(Frame)", "int(Frame)", "bool(WorkerTask<@,Worker0>)", "~(CanceledException)", "Object?(Object?)", "bool(NodeValidator)", "~(String,String)", "~(Uint8List,String,int)", "~(~)", "int(int)", "int(int,WorkerStat)", "int(int,int)", "~(bool)", "~(Object[StackTrace?])", "Future<@>(Duration)", "Future<Channel>()", "@(@)", "bool(Object?,Object?)", "int(Object?)", "bool(Element,String,String,_Html5NodeValidator)", "int()", "Trace(String)", "Future<List<@>>()", "~(WorkerRunner)", "CancelationTokenReference()", "~([SquadronException?])", "Future<@>(~)", "~(Object,StackTrace?)", "Future<~>(~)", "SquadronCanceledException(CanceledException)", "String(SquadronCanceledException)", "List<@>(SquadronCanceledException)", "Null(Channel)", "Uint8List(@,@)", "Null(~())", "~([@])", "0&(@,@)", "Channel(Channel)", "bool(Level)", "bool(Node)", "~(@,StackTrace)", "List<Frame>(Trace)", "int(Trace)", "@(@,String)", "String(Trace)", "@(String)", "bool/()", "Frame(String,String)", "GroupEntry(GroupEntry)", "~(Node,Node?)", "@(@,@)", "~(Zone,ZoneDelegate,Zone,Object,StackTrace)", "bool(Pattern[int])", "Metadata()", "Metadata(Metadata,BooleanSelector)", "String(CanceledException)", "Future<~>([CanceledException?])", "Future<bool?>()", "bool(LiveTest)", "Null(List<~>)", "Null(Object?,StackTrace)", "~(RunnerSuite)", "Future<@>?()", "~([Object?])", "~(LiveTest)", "~(bool?)", "~(AsyncError)", "~(Message)", "Future<bool?>?()", "OperatingSystem()", "CanceledException?(CancelationToken)", "Null(@,StackTrace)", "Future<Response>(Client0)", "bool(CanceledException)", "List<@>(int)", "bool(String,String)", "int(String)", "_Future<@>(@)", "~(List<int>)", "DevelopmentFilter()", "List<int>(@,@)", "bool(SequenceReplacement)", "IssuesWorker()", "0^(@)<Object?>", "Future<Null>(IssuesWorker)", "Future<Null>(IssuesWorkerPool)", "LocalClientWorker()", "Future<String>(LocalClientWorker)", "Future<bool>(LocalClientWorker)", "Stream<@>(LocalClientWorker)", "String(List<@>)", "Stream<int>(List<@>)", "PrettyPrinter()", "ConsoleOutput()", "Object(@)", "PrimeWorker()", "Future<bool>(PrimeWorker)", "Stream<int>(PrimeWorker)", "bool(~)", "bool(Pattern)", "String(Pattern)", "~(Level,bool)", "_Mismatch?(Object?,Object?,String,int)", "Future<@>(TestWorker)", "~(Symbol0,@)", "Future<bool>(TestWorker)", "String(Object?,Matcher,String?,Map<@,@>,bool)", "Future<Null>(CacheWorker)", "String(Object?,int,Set<Object?>,bool)", "bool(WorkerStat)", "String(Object?)", "bool(TestWorker)", "String(@)", "String(Match)", "String(String?)", "Map<String,String>(Map<String,String>,String)", "Future<Null>(MissingWorker)", "~(String,int)", "~(String,int?)", "bool(SquadronException)", "int(@,@)", "~(int,@)", "~(Zone?,ZoneDelegate?,Zone,Object,StackTrace)", "0^(Zone?,ZoneDelegate?,Zone,0^())<Object?>", "0^(Zone?,ZoneDelegate?,Zone,0^(1^),1^)<Object?,Object?>", "0^(Zone?,ZoneDelegate?,Zone,0^(1^,2^),1^,2^)<Object?,Object?,Object?>", "0^()(Zone,ZoneDelegate,Zone,0^())<Object?>", "0^(1^)(Zone,ZoneDelegate,Zone,0^(1^))<Object?,Object?>", "0^(1^,2^)(Zone,ZoneDelegate,Zone,0^(1^,2^))<Object?,Object?,Object?>", "AsyncError?(Zone,ZoneDelegate,Zone,Object,StackTrace?)", "~(Zone?,ZoneDelegate?,Zone,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))", "~(String)", "Zone(Zone?,ZoneDelegate?,Zone,ZoneSpecification?,Map<Object?,Object?>?)", "~(SquadronException)", "~(Channel)", "Null(JSObject?)", "0^(0^)<Object?>", "int(PoolWorker<Worker0>,PoolWorker<Worker0>)", "bool(PoolWorker<Worker0>)", "WorkerStat(PoolWorker<Worker0>)", "SquadronCanceledException?(List<@>?)", "SquadronCanceledExceptions?(List<@>?)", "SquadronException?(List<@>)", "SquadronTimeoutException?(List<@>?)", "WorkerException?(List<@>)", "Null(bool)", "~(JSObject?)", "Null(CanceledException)", "CustomException?(List<@>)", "0^(0^,0^)<num>", "int(@)", "double(@)", "Stream<@>(IssuesWorker)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "2;revoke,url": (t1, t2) => o => o instanceof A._Record_2_revoke_url && t1._is(o._0) && t2._is(o._1),
      "2;runner,script": (t1, t2) => o => o instanceof A._Record_2_runner_script && t1._is(o._0) && t2._is(o._1)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"LegacyJavaScriptObject","PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","KeyframeEffect":"JavaScriptObject","KeyframeEffectReadOnly":"JavaScriptObject","AnimationEffectReadOnly":"JavaScriptObject","AbortPaymentEvent":"Event","ExtendableEvent":"Event","AudioContext":"BaseAudioContext","AbsoluteOrientationSensor":"EventTarget","OrientationSensor":"EventTarget","Sensor":"EventTarget","AElement":"SvgElement","GraphicsElement":"SvgElement","AudioElement":"HtmlElement","MediaElement":"HtmlElement","ShadowRoot":"Node","DocumentFragment":"Node","XmlDocument":"Document","VttCue":"TextTrackCue","CDataSection":"CharacterData","Text":"CharacterData","MathMLElement":"Element","HtmlFormControlsCollection":"HtmlCollection","CssCharsetRule":"CssRule","CssMatrixComponent":"CssTransformComponent","CssStyleSheet":"StyleSheet","CssurlImageValue":"CssStyleValue","CssImageValue":"CssStyleValue","CssResourceValue":"CssStyleValue","JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"Null":[],"TrustedGetRuntimeType":[]},"JavaScriptObject":{"JSObject":[]},"LegacyJavaScriptObject":{"JSObject":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"TrustedGetRuntimeType":[]},"LateError":{"Error":[]},"CodeUnits":{"ListBase":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"ExpandIterator":{"Iterator":["2"]},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"TakeIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"SkipWhileIterable":{"Iterable":["1"],"Iterable.E":"1"},"SkipWhileIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"FollowedByIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthFollowedByIterable":{"FollowedByIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"FollowedByIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"NonNullsIterable":{"Iterable":["1"],"Iterable.E":"1"},"NonNullsIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"Symbol":{"Symbol0":[]},"_Record_2_revoke_url":{"_Record2":[],"_Record":[]},"_Record_2_runner_script":{"_Record2":[],"_Record":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_KeysOrValues":{"Iterable":["1"],"Iterable.E":"1"},"_KeysOrValuesOrElementsIterator":{"Iterator":["1"]},"ConstantSet":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ConstantStringSet":{"ConstantSet":["1"],"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"GeneralConstantSet":{"ConstantSet":["1"],"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"_CyclicInitializationError":{"Error":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JsIdentityLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"JsConstantLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_Record2":{"_Record":[]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteBuffer":{"JSObject":[],"ByteBuffer":[],"TrustedGetRuntimeType":[]},"NativeTypedData":{"JSObject":[]},"NativeByteData":{"NativeTypedData":[],"ByteData":[],"JSObject":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"NativeTypedData":[],"JavaScriptIndexingBehavior":["1"],"JSObject":[]},"NativeTypedArrayOfDouble":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"ListBase":["double"],"Float32List":[],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeFloat64List":{"ListBase":["double"],"Float64List":[],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Int16List":[],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Int32List":[],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Int8List":[],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Uint16List":[],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Uint32List":[],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Uint8ClampedList":[],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Uint8List":[],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"AsyncError":{"Error":[]},"_Future":{"Future":["1"]},"MultiStreamController":{"StreamController":["1"],"Sink":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"_BroadcastStream":{"_ControllerStream":["1"],"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_BroadcastStreamController":{"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"TimeoutException":{"Exception":[]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"StreamView":{"Stream":["1"]},"_StreamController":{"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamSinkWrapper":{"Sink":["1"]},"_StreamControllerAddStreamState":{"_AddStreamState":["1"]},"_StreamImpl":{"Stream":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_EmptyStream":{"Stream":["1"],"Stream.T":"1"},"_MultiStream":{"Stream":["1"],"Stream.T":"1"},"_MultiStreamController":{"_AsyncStreamController":["1"],"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"MultiStreamController":["1"],"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ForwardingStream":{"Stream":["2"]},"_ForwardingStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_MapStream":{"_ForwardingStream":["1","2"],"Stream":["2"],"Stream.T":"2"},"_ZoneSpecification":{"ZoneSpecification":[]},"_ZoneDelegate":{"ZoneDelegate":[]},"_Zone":{"Zone":[]},"_CustomZone":{"_Zone":[],"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapBase":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_IdentityHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_LinkedHashSet":{"_SetBase":["1"],"SetBase":["1"],"LinkedHashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"UnmodifiableListView":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListBase.E":"1","UnmodifiableListMixin.E":"1"},"ListBase":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_MapBaseValueIterator":{"Iterator":["2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ListQueue":{"Queue":["1"],"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_ListQueueIterator":{"Iterator":["1"]},"SetBase":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"AsciiCodec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"_UnicodeSubsetEncoder":{"Converter":["String","List<int>"]},"AsciiEncoder":{"Converter":["String","List<int>"]},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"Base64Encoder":{"Converter":["List<int>","String"]},"ByteConversionSink":{"Sink":["List<int>"]},"_ByteCallbackSink":{"Sink":["List<int>"]},"_FusedCodec":{"Codec":["1","3"],"Codec.S":"1"},"Encoding":{"Codec":["String","List<int>"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"],"Codec.S":"Object?"},"JsonEncoder":{"Converter":["Object?","String"]},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Encoder":{"Converter":["String","List<int>"]},"Utf8Decoder":{"Converter":["List<int>","String"]},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"Set":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"String":{"Comparable":["String"],"Pattern":[]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"IntegerDivisionByZeroException":{"Exception":[],"Error":[]},"_GeneratorIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_StringStackTrace":{"StackTrace":[]},"Runes":{"Iterable":["int"],"Iterable.E":"int"},"RuneIterator":{"Iterator":["int"]},"StringBuffer":{"StringSink":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"CssRule":{"JSObject":[]},"Element":{"Node":[],"EventTarget":[],"JSObject":[]},"Event":{"JSObject":[]},"File":{"Blob":[],"JSObject":[]},"Gamepad":{"JSObject":[]},"MessageEvent":{"Event":[],"JSObject":[]},"MimeType":{"JSObject":[]},"Node":{"EventTarget":[],"JSObject":[]},"Plugin":{"JSObject":[]},"SourceBuffer":{"EventTarget":[],"JSObject":[]},"SpeechGrammar":{"JSObject":[]},"SpeechRecognitionResult":{"JSObject":[]},"StyleSheet":{"JSObject":[]},"TextTrack":{"EventTarget":[],"JSObject":[]},"TextTrackCue":{"EventTarget":[],"JSObject":[]},"Touch":{"JSObject":[]},"_Html5NodeValidator":{"NodeValidator":[]},"HtmlElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"AccessibleNodeList":{"JSObject":[]},"AnchorElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"AreaElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"BaseElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"Blob":{"JSObject":[]},"BodyElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"CharacterData":{"Node":[],"EventTarget":[],"JSObject":[]},"CssPerspective":{"JSObject":[]},"CssStyleDeclaration":{"JSObject":[]},"CssStyleValue":{"JSObject":[]},"CssTransformComponent":{"JSObject":[]},"CssTransformValue":{"JSObject":[]},"CssUnparsedValue":{"JSObject":[]},"DataTransferItemList":{"JSObject":[]},"DivElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"Document":{"Node":[],"EventTarget":[],"JSObject":[]},"DomException":{"JSObject":[]},"DomImplementation":{"JSObject":[]},"DomRectList":{"ListBase":["Rectangle<num>"],"ImmutableListMixin":["Rectangle<num>"],"List":["Rectangle<num>"],"JavaScriptIndexingBehavior":["Rectangle<num>"],"EfficientLengthIterable":["Rectangle<num>"],"JSObject":[],"Iterable":["Rectangle<num>"],"ListBase.E":"Rectangle<num>","ImmutableListMixin.E":"Rectangle<num>"},"DomRectReadOnly":{"Rectangle":["num"],"JSObject":[]},"DomStringList":{"ListBase":["String"],"ImmutableListMixin":["String"],"List":["String"],"JavaScriptIndexingBehavior":["String"],"EfficientLengthIterable":["String"],"JSObject":[],"Iterable":["String"],"ListBase.E":"String","ImmutableListMixin.E":"String"},"DomTokenList":{"JSObject":[]},"_FrozenElementList":{"ListBase":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListBase.E":"1"},"ErrorEvent":{"Event":[],"JSObject":[]},"EventTarget":{"JSObject":[]},"FileList":{"ListBase":["File"],"ImmutableListMixin":["File"],"List":["File"],"JavaScriptIndexingBehavior":["File"],"EfficientLengthIterable":["File"],"JSObject":[],"Iterable":["File"],"ListBase.E":"File","ImmutableListMixin.E":"File"},"FileWriter":{"EventTarget":[],"JSObject":[]},"FormElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"History":{"JSObject":[]},"HtmlCollection":{"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSObject":[],"Iterable":["Node"],"ListBase.E":"Node","ImmutableListMixin.E":"Node"},"HtmlDocument":{"Node":[],"EventTarget":[],"JSObject":[]},"ImageData":{"JSObject":[]},"Location":{"JSObject":[]},"MediaList":{"JSObject":[]},"MessagePort":{"EventTarget":[],"JSObject":[]},"MidiInputMap":{"MapBase":["String","@"],"JSObject":[],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"MidiOutputMap":{"MapBase":["String","@"],"JSObject":[],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"MimeTypeArray":{"ListBase":["MimeType"],"ImmutableListMixin":["MimeType"],"List":["MimeType"],"JavaScriptIndexingBehavior":["MimeType"],"EfficientLengthIterable":["MimeType"],"JSObject":[],"Iterable":["MimeType"],"ListBase.E":"MimeType","ImmutableListMixin.E":"MimeType"},"_ChildNodeListLazy":{"ListBase":["Node"],"List":["Node"],"EfficientLengthIterable":["Node"],"Iterable":["Node"],"ListBase.E":"Node"},"NodeList":{"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSObject":[],"Iterable":["Node"],"ListBase.E":"Node","ImmutableListMixin.E":"Node"},"PluginArray":{"ListBase":["Plugin"],"ImmutableListMixin":["Plugin"],"List":["Plugin"],"JavaScriptIndexingBehavior":["Plugin"],"EfficientLengthIterable":["Plugin"],"JSObject":[],"Iterable":["Plugin"],"ListBase.E":"Plugin","ImmutableListMixin.E":"Plugin"},"RtcStatsReport":{"MapBase":["String","@"],"JSObject":[],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"SelectElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"SharedArrayBuffer":{"JSObject":[]},"SourceBufferList":{"ListBase":["SourceBuffer"],"ImmutableListMixin":["SourceBuffer"],"List":["SourceBuffer"],"EventTarget":[],"JavaScriptIndexingBehavior":["SourceBuffer"],"EfficientLengthIterable":["SourceBuffer"],"JSObject":[],"Iterable":["SourceBuffer"],"ListBase.E":"SourceBuffer","ImmutableListMixin.E":"SourceBuffer"},"SpeechGrammarList":{"ListBase":["SpeechGrammar"],"ImmutableListMixin":["SpeechGrammar"],"List":["SpeechGrammar"],"JavaScriptIndexingBehavior":["SpeechGrammar"],"EfficientLengthIterable":["SpeechGrammar"],"JSObject":[],"Iterable":["SpeechGrammar"],"ListBase.E":"SpeechGrammar","ImmutableListMixin.E":"SpeechGrammar"},"Storage":{"MapBase":["String","String"],"JSObject":[],"Map":["String","String"],"MapBase.K":"String","MapBase.V":"String"},"TableElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"TableRowElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"TableSectionElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"TemplateElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"TextTrackCueList":{"ListBase":["TextTrackCue"],"ImmutableListMixin":["TextTrackCue"],"List":["TextTrackCue"],"JavaScriptIndexingBehavior":["TextTrackCue"],"EfficientLengthIterable":["TextTrackCue"],"JSObject":[],"Iterable":["TextTrackCue"],"ListBase.E":"TextTrackCue","ImmutableListMixin.E":"TextTrackCue"},"TextTrackList":{"ListBase":["TextTrack"],"ImmutableListMixin":["TextTrack"],"List":["TextTrack"],"EventTarget":[],"JavaScriptIndexingBehavior":["TextTrack"],"EfficientLengthIterable":["TextTrack"],"JSObject":[],"Iterable":["TextTrack"],"ListBase.E":"TextTrack","ImmutableListMixin.E":"TextTrack"},"TimeRanges":{"JSObject":[]},"TouchList":{"ListBase":["Touch"],"ImmutableListMixin":["Touch"],"List":["Touch"],"JavaScriptIndexingBehavior":["Touch"],"EfficientLengthIterable":["Touch"],"JSObject":[],"Iterable":["Touch"],"ListBase.E":"Touch","ImmutableListMixin.E":"Touch"},"TrackDefaultList":{"JSObject":[]},"Url":{"JSObject":[]},"VideoTrackList":{"EventTarget":[],"JSObject":[]},"Window":{"WindowBase":[],"EventTarget":[],"JSObject":[]},"Worker":{"EventTarget":[],"JSObject":[]},"_Attr":{"Node":[],"EventTarget":[],"JSObject":[]},"_CssRuleList":{"ListBase":["CssRule"],"ImmutableListMixin":["CssRule"],"List":["CssRule"],"JavaScriptIndexingBehavior":["CssRule"],"EfficientLengthIterable":["CssRule"],"JSObject":[],"Iterable":["CssRule"],"ListBase.E":"CssRule","ImmutableListMixin.E":"CssRule"},"_DomRect":{"Rectangle":["num"],"JSObject":[]},"_GamepadList":{"ListBase":["Gamepad?"],"ImmutableListMixin":["Gamepad?"],"List":["Gamepad?"],"JavaScriptIndexingBehavior":["Gamepad?"],"EfficientLengthIterable":["Gamepad?"],"JSObject":[],"Iterable":["Gamepad?"],"ListBase.E":"Gamepad?","ImmutableListMixin.E":"Gamepad?"},"_NamedNodeMap":{"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"EfficientLengthIterable":["Node"],"JSObject":[],"Iterable":["Node"],"ListBase.E":"Node","ImmutableListMixin.E":"Node"},"_SpeechRecognitionResultList":{"ListBase":["SpeechRecognitionResult"],"ImmutableListMixin":["SpeechRecognitionResult"],"List":["SpeechRecognitionResult"],"JavaScriptIndexingBehavior":["SpeechRecognitionResult"],"EfficientLengthIterable":["SpeechRecognitionResult"],"JSObject":[],"Iterable":["SpeechRecognitionResult"],"ListBase.E":"SpeechRecognitionResult","ImmutableListMixin.E":"SpeechRecognitionResult"},"_StyleSheetList":{"ListBase":["StyleSheet"],"ImmutableListMixin":["StyleSheet"],"List":["StyleSheet"],"JavaScriptIndexingBehavior":["StyleSheet"],"EfficientLengthIterable":["StyleSheet"],"JSObject":[],"Iterable":["StyleSheet"],"ListBase.E":"StyleSheet","ImmutableListMixin.E":"StyleSheet"},"_AttributeMap":{"MapBase":["String","String"],"Map":["String","String"]},"_ElementAttributeMap":{"MapBase":["String","String"],"Map":["String","String"],"MapBase.K":"String","MapBase.V":"String"},"_EventStream0":{"Stream":["1"],"Stream.T":"1"},"_ElementEventStreamImpl":{"_EventStream0":["1"],"Stream":["1"],"Stream.T":"1"},"_EventStreamSubscription0":{"StreamSubscription":["1"]},"NodeValidatorBuilder":{"NodeValidator":[]},"_SimpleNodeValidator":{"NodeValidator":[]},"_TemplatingNodeValidator":{"NodeValidator":[]},"_SvgNodeValidator":{"NodeValidator":[]},"FixedSizeListIterator":{"Iterator":["1"]},"_DOMWindowCrossFrame":{"WindowBase":[],"EventTarget":[],"JSObject":[]},"_SameOriginUriPolicy":{"UriPolicy":[]},"_ValidatingTreeSanitizer":{"NodeTreeSanitizer":[]},"NullRejectionException":{"Exception":[]},"Length":{"JSObject":[]},"Number":{"JSObject":[]},"Transform":{"JSObject":[]},"LengthList":{"ListBase":["Length"],"ImmutableListMixin":["Length"],"List":["Length"],"EfficientLengthIterable":["Length"],"JSObject":[],"Iterable":["Length"],"ListBase.E":"Length","ImmutableListMixin.E":"Length"},"NumberList":{"ListBase":["Number"],"ImmutableListMixin":["Number"],"List":["Number"],"EfficientLengthIterable":["Number"],"JSObject":[],"Iterable":["Number"],"ListBase.E":"Number","ImmutableListMixin.E":"Number"},"PointList":{"JSObject":[]},"ScriptElement0":{"SvgElement":[],"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"StringList":{"ListBase":["String"],"ImmutableListMixin":["String"],"List":["String"],"EfficientLengthIterable":["String"],"JSObject":[],"Iterable":["String"],"ListBase.E":"String","ImmutableListMixin.E":"String"},"SvgElement":{"Element":[],"Node":[],"EventTarget":[],"JSObject":[]},"TransformList":{"ListBase":["Transform"],"ImmutableListMixin":["Transform"],"List":["Transform"],"EfficientLengthIterable":["Transform"],"JSObject":[],"Iterable":["Transform"],"ListBase.E":"Transform","ImmutableListMixin.E":"Transform"},"AudioBuffer":{"JSObject":[]},"AudioParamMap":{"MapBase":["String","@"],"JSObject":[],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"AudioTrackList":{"EventTarget":[],"JSObject":[]},"BaseAudioContext":{"EventTarget":[],"JSObject":[]},"OfflineAudioContext":{"EventTarget":[],"JSObject":[]},"DelegatingSink":{"Sink":["1"]},"FutureGroup":{"Sink":["Future<1>"]},"StreamGroup":{"Sink":["Stream<1>"]},"All":{"BooleanSelector":[]},"CanceledException":{"Exception":[]},"CanceledExceptions":{"CanceledException":[],"Exception":[]},"TimeoutCanceledException":{"CanceledException":[],"TimeoutException":[],"Exception":[]},"CancelableToken":{"CancelationToken":[]},"CompositeToken":{"CancelationToken":[]},"TimeoutToken":{"CancelationToken":[]},"EmptyUnmodifiableSet":{"UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"QueueList":{"ListBase":["1"],"List":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListBase.E":"1","QueueList.E":"1"},"UnionSet":{"SetBase":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableSetView":{"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":["1"],"DelegatingSet":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_DelegatingIterableBase":{"Iterable":["1"]},"DelegatingSet":{"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"BaseClient":{"Client0":[]},"BrowserClient":{"Client0":[]},"ByteStream":{"StreamView":["List<int>"],"Stream":["List<int>"],"Stream.T":"List<int>","StreamView.T":"List<int>"},"ClientException":{"Exception":[]},"Request":{"BaseRequest":[]},"StreamedResponseV2":{"StreamedResponse":[]},"DevelopmentFilter":{"LogFilter":[]},"ConsoleOutput":{"LogOutput":[]},"PrettyPrinter":{"LogPrinter":[]},"_Empty":{"Matcher":[]},"_NotEmpty":{"Matcher":[]},"_IsNull":{"Matcher":[]},"_IsNotNull":{"Matcher":[]},"_IsTrue":{"Matcher":[]},"_IsFalse":{"Matcher":[]},"_Contains":{"Matcher":[]},"_Predicate":{"FeatureMatcher":["1"],"TypeMatcher":["1"],"Matcher":[],"FeatureMatcher.T":"1","TypeMatcher.T":"1"},"StringDescription":{"Description":[]},"_StringEqualsMatcher":{"FeatureMatcher":["String"],"TypeMatcher":["String"],"Matcher":[],"FeatureMatcher.T":"String","TypeMatcher.T":"String"},"_DeepMatcher":{"Matcher":[]},"FeatureMatcher":{"TypeMatcher":["1"],"Matcher":[]},"_IsNot":{"Matcher":[]},"_OrderingMatcher":{"Matcher":[]},"_MatchesRegExp":{"FeatureMatcher":["String"],"TypeMatcher":["String"],"Matcher":[],"FeatureMatcher.T":"String","TypeMatcher.T":"String"},"TypeMatcher":{"Matcher":[],"TypeMatcher.T":"1"},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"_WebChannel":{"Channel":[]},"_WebWorkerChannel":{"WorkerChannel":[]},"_WebForwardChannel":{"Channel":[]},"_WebLocalWorker":{"LocalWorker":["1"],"Releasable":[]},"InternalLogger":{"Logger":[]},"_NoLogOutput":{"LogOutput":[]},"_DummyPrinter":{"LogPrinter":[]},"_LogAllFilter":{"LogFilter":[]},"WorkerStreamTask":{"WorkerTask":["1","2"],"StreamTask":["1"],"Task":["1"]},"WorkerTask":{"Task":["1"]},"WorkerValueTask":{"WorkerTask":["1","2"],"ValueTask":["1"],"Task":["1"]},"SquadronCanceledException":{"SquadronException":[],"CanceledException":[],"Exception":[]},"SquadronCanceledExceptions":{"SquadronCanceledException":[],"CanceledExceptions":[],"SquadronException":[],"CanceledException":[],"Exception":[]},"SquadronError":{"SquadronException":[],"Exception":[]},"SquadronException":{"Exception":[]},"SquadronTimeoutException":{"SquadronCanceledException":[],"TimeoutCanceledException":[],"SquadronException":[],"CanceledException":[],"TimeoutException":[],"Exception":[]},"TaskCanceledException":{"SquadronError":[],"SquadronException":[],"CanceledException":[],"Exception":[]},"WorkerException":{"SquadronException":[],"Exception":[]},"LocalWorker":{"Releasable":[]},"WorkerPool":{"Releasable":[]},"CancelationTokenReference":{"SquadronCancelationToken":[],"CancelationToken":[]},"SquadronCancelationToken":{"CancelationToken":[]},"Worker0":{"Releasable":[]},"Chain":{"StackTrace":[]},"LazyChain":{"Chain":[],"StackTrace":[]},"LazyTrace":{"Trace":[],"StackTrace":[]},"Trace":{"StackTrace":[]},"UnparsedFrame":{"Frame":[]},"OutsideTestException":{"Exception":[]},"ClosedException":{"Exception":[]},"DuplicateTestNameException":{"Exception":[]},"Group":{"GroupEntry":[]},"LocalTest":{"Test":[],"GroupEntry":[]},"LiveTestController":{"LiveTest":[]},"Test":{"GroupEntry":[]},"TestFailure":{"Exception":[]},"_LiveSuite":{"LiveSuite":[]},"RunnerSuite":{"Suite":[]},"IterableSet":{"SetBase":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"PrintSink":{"StringSink":[]},"ReleasedException":{"Exception":[]},"_EventStream":{"Stream":["1"],"Stream.T":"1"},"_EventStreamSubscription":{"StreamSubscription":["1"]},"CacheWorker":{"Worker0":[],"Releasable":[]},"CustomException":{"WorkerException":[],"SquadronException":[],"Exception":[]},"InstallableWorker":{"Worker0":[],"Releasable":[]},"IssuesWorkerPool":{"WorkerPool":["IssuesWorker"],"Releasable":[],"WorkerPool.W":"IssuesWorker"},"IssuesWorker":{"Worker0":[],"Releasable":[]},"LocalClientWorkerPool":{"WorkerPool":["LocalClientWorker"],"Releasable":[],"WorkerPool.W":"LocalClientWorker"},"LocalClientWorker":{"Worker0":[],"Releasable":[]},"MemoryLogger":{"Logger":[]},"MemoryLogFilter":{"LogFilter":[]},"MissingWorker":{"Worker0":[],"Releasable":[]},"PrimeWorkerPool":{"WorkerPool":["PrimeWorker"],"Releasable":[],"WorkerPool.W":"PrimeWorker"},"PrimeWorker":{"Worker0":[],"Releasable":[]},"NoOutput":{"LogOutput":[]},"EmptyPrinter":{"LogPrinter":[]},"TestWorkerPool":{"WorkerPool":["TestWorker"],"Releasable":[],"WorkerPool.W":"TestWorker"},"TestWorker":{"Worker0":[],"Releasable":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"StreamTask":{"Task":["1"]},"ValueTask":{"Task":["1"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"NativeTypedArray":1,"_DelayedEvent":1,"_EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin":1,"_QueueList_Object_ListMixin":1,"_UnionSet_SetBase_UnmodifiableSetMixin":1,"_IterableSet_Object_SetMixin":1,"_IterableSet_Object_SetMixin_UnmodifiableSetMixin":1}'));
  var string$ = {
    ______: "===== asynchronous gap ===========================\n",
    ABCDEF: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    Cannoteff: "Cannot extract a file path from a URI with a fragment component",
    Cannotefq: "Cannot extract a file path from a URI with a query component",
    Cannoten: "Cannot extract a non-Windows file path from a file URI with an authority",
    Cannotf: "Cannot fire new event. Controller is already firing an event",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type"
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      AsyncError: findType("AsyncError"),
      AsyncMemoizer_dynamic: findType("AsyncMemoizer<@>"),
      AsyncMemoizer_void: findType("AsyncMemoizer<~>"),
      Base64Codec: findType("Base64Codec"),
      BaseElement: findType("BaseElement"),
      BigInt: findType("BigInt"),
      Blob: findType("Blob"),
      BodyElement: findType("BodyElement"),
      BooleanSelector: findType("BooleanSelector"),
      ByteBuffer: findType("ByteBuffer"),
      ByteData: findType("ByteData"),
      CacheStat: findType("CacheStat"),
      CacheWorker: findType("CacheWorker"),
      CancelationToken: findType("CancelationToken"),
      CancelationTokenReference: findType("CancelationTokenReference"),
      CanceledException: findType("CanceledException"),
      CanceledExceptions: findType("CanceledExceptions"),
      Chain: findType("Chain"),
      Channel: findType("Channel"),
      Client_Function: findType("Client0()"),
      Comparable_dynamic: findType("Comparable<@>"),
      Completer_PoolResource: findType("Completer<PoolResource>"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      ConstantStringMap_String_String: findType("ConstantStringMap<String,String>"),
      CssRule: findType("CssRule"),
      DateTime: findType("DateTime"),
      DivElement: findType("DivElement"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Element: findType("Element"),
      Error: findType("Error"),
      ErrorEvent: findType("ErrorEvent"),
      Event: findType("Event"),
      Exception: findType("Exception"),
      File: findType("File"),
      FileList: findType("FileList"),
      Float32List: findType("Float32List"),
      Float64List: findType("Float64List"),
      FormatException: findType("FormatException"),
      Frame: findType("Frame"),
      Frame_Function_String: findType("Frame(String)"),
      Function: findType("Function"),
      FutureGroup_dynamic: findType("FutureGroup<@>"),
      FutureGroup_void: findType("FutureGroup<~>"),
      FutureOr_BigInt: findType("BigInt/"),
      Future_Null: findType("Future<Null>"),
      Future_RunnerSuite: findType("Future<RunnerSuite>"),
      Future_bool: findType("Future<bool>"),
      Future_dynamic: findType("Future<@>"),
      Future_nullable_bool: findType("Future<bool?>"),
      Future_void: findType("Future<~>"),
      Group: findType("Group"),
      GroupEntry: findType("GroupEntry"),
      ImageData: findType("ImageData"),
      InstallableWorker: findType("InstallableWorker"),
      Int16List: findType("Int16List"),
      Int32List: findType("Int32List"),
      Int8List: findType("Int8List"),
      Invocation: findType("Invocation"),
      IssuesWorker: findType("IssuesWorker"),
      IssuesWorkerPool: findType("IssuesWorkerPool"),
      IterableSet_LiveTest: findType("IterableSet<LiveTest>"),
      Iterable_Node: findType("Iterable<Node>"),
      Iterable_SquadronCanceledException: findType("Iterable<SquadronCanceledException>"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      Iterable_nullable_Object: findType("Iterable<Object?>"),
      JSArray_AsyncError: findType("JSArray<AsyncError>"),
      JSArray_CancelationToken: findType("JSArray<CancelationToken>"),
      JSArray_Compiler: findType("JSArray<Compiler>"),
      JSArray_Declarer: findType("JSArray<Declarer>"),
      JSArray_Exception: findType("JSArray<Exception>"),
      JSArray_Frame: findType("JSArray<Frame>"),
      JSArray_Future_List_dynamic: findType("JSArray<Future<List<@>>>"),
      JSArray_Future_List_int: findType("JSArray<Future<List<int>>>"),
      JSArray_Future_String: findType("JSArray<Future<String>>"),
      JSArray_Future_bool: findType("JSArray<Future<bool>>"),
      JSArray_Future_dynamic: findType("JSArray<Future<@>>"),
      JSArray_Future_void: findType("JSArray<Future<~>>"),
      JSArray_Group: findType("JSArray<Group>"),
      JSArray_GroupEntry: findType("JSArray<GroupEntry>"),
      JSArray_List_dynamic: findType("JSArray<List<@>>"),
      JSArray_Map_dynamic_dynamic: findType("JSArray<Map<@,@>>"),
      JSArray_NodeValidator: findType("JSArray<NodeValidator>"),
      JSArray_PoolWorker_IssuesWorker: findType("JSArray<PoolWorker<IssuesWorker>>"),
      JSArray_PoolWorker_LocalClientWorker: findType("JSArray<PoolWorker<LocalClientWorker>>"),
      JSArray_PoolWorker_PrimeWorker: findType("JSArray<PoolWorker<PrimeWorker>>"),
      JSArray_PoolWorker_TestWorker: findType("JSArray<PoolWorker<TestWorker>>"),
      JSArray_Set_LiveTest: findType("JSArray<Set<LiveTest>>"),
      JSArray_SquadronException: findType("JSArray<SquadronException>"),
      JSArray_StreamTask_dynamic: findType("JSArray<StreamTask<@>>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Trace: findType("JSArray<Trace>"),
      JSArray_ValueTask_dynamic: findType("JSArray<ValueTask<@>>"),
      JSArray_WorkerStat: findType("JSArray<WorkerStat>"),
      JSArray_Zone: findType("JSArray<Zone>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_Object: findType("JSArray<Object?>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSArray_nullable_Uri: findType("JSArray<Uri?>"),
      JSArray_of_dynamic_Function: findType("JSArray<@()>"),
      JSArray_of_void_Function: findType("JSArray<~()>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      Length: findType("Length"),
      Level: findType("Level"),
      List_Group: findType("List<Group>"),
      List_String: findType("List<String>"),
      List_bool: findType("List<bool>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_num: findType("List<num>"),
      List_of_void_Function: findType("List<~()>"),
      List_void: findType("List<~>"),
      LiveSuiteController: findType("LiveSuiteController"),
      LiveTest: findType("LiveTest"),
      LocalClientWorker: findType("LocalClientWorker"),
      LocalClientWorkerPool: findType("LocalClientWorkerPool"),
      LocalServiceImpl: findType("LocalServiceImpl"),
      LocalWorker_LocalServiceImpl: findType("LocalWorker<LocalServiceImpl>"),
      Location: findType("Location"),
      Map_Level_bool: findType("Map<Level,bool>"),
      Map_String_String: findType("Map<String,String>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_of_int_and_dynamic_Function_List_dynamic: findType("Map<int,@(List<@>)>"),
      Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>"),
      MappedIterable_String_Frame: findType("MappedIterable<String,Frame>"),
      MappedListIterable_SquadronException_String: findType("MappedListIterable<SquadronException,String>"),
      MappedListIterable_String_String: findType("MappedListIterable<String,String>"),
      MappedListIterable_String_Trace: findType("MappedListIterable<String,Trace>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      Matcher: findType("Matcher"),
      Message: findType("Message"),
      MessageEvent: findType("MessageEvent"),
      MessagePort: findType("MessagePort"),
      Metadata: findType("Metadata"),
      MimeType: findType("MimeType"),
      MissingWorker: findType("MissingWorker"),
      NativeByteBuffer: findType("NativeByteBuffer"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeTypedData: findType("NativeTypedData"),
      NativeUint8List: findType("NativeUint8List"),
      Node: findType("Node"),
      NodeValidator: findType("NodeValidator"),
      NonNullsIterable_Uri: findType("NonNullsIterable<Uri>"),
      Null: findType("Null"),
      Null_Function: findType("Null()"),
      Null_Function_dynamic: findType("Null(@)"),
      Number: findType("Number"),
      Object: findType("Object"),
      Pattern: findType("Pattern"),
      PlatformSelector: findType("PlatformSelector"),
      Plugin: findType("Plugin"),
      PoolResource: findType("PoolResource"),
      PoolWorker_Worker: findType("PoolWorker<Worker0>"),
      PrimeWorker: findType("PrimeWorker"),
      PrimeWorkerPool: findType("PrimeWorkerPool"),
      QueueList_LiveTest: findType("QueueList<LiveTest>"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      Rectangle_num: findType("Rectangle<num>"),
      RegExpMatch: findType("RegExpMatch"),
      Response: findType("Response"),
      ReversedListIterable_Declarer: findType("ReversedListIterable<Declarer>"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      RunnerSuite: findType("RunnerSuite"),
      ScriptElement: findType("ScriptElement0"),
      SequenceReplacement: findType("SequenceReplacement"),
      Set_LiveTest: findType("Set<LiveTest>"),
      Set_String: findType("Set<String>"),
      Set_dynamic: findType("Set<@>"),
      SharedArrayBuffer: findType("SharedArrayBuffer"),
      SourceBuffer: findType("SourceBuffer"),
      SpeechGrammar: findType("SpeechGrammar"),
      SpeechRecognitionResult: findType("SpeechRecognitionResult"),
      SquadronCancelationToken: findType("SquadronCancelationToken"),
      SquadronCanceledException: findType("SquadronCanceledException"),
      SquadronError: findType("SquadronError"),
      SquadronException: findType("SquadronException"),
      StackTrace: findType("StackTrace"),
      State: findType("State"),
      StreamController_LiveTest: findType("StreamController<LiveTest>"),
      StreamGroup_LiveTest: findType("StreamGroup<LiveTest>"),
      StreamSubscription_dynamic: findType("StreamSubscription<@>"),
      StreamTask_dynamic: findType("StreamTask<@>"),
      Stream_LiveTest: findType("Stream<LiveTest>"),
      Stream_dynamic: findType("Stream<@>"),
      StreamedResponse: findType("StreamedResponse"),
      String: findType("String"),
      String_Function_Match: findType("String(Match)"),
      String_Function_SquadronException: findType("String(SquadronException)"),
      String_Function_String: findType("String(String)"),
      StyleSheet: findType("StyleSheet"),
      SvgElement: findType("SvgElement"),
      Symbol: findType("Symbol0"),
      TemplateElement: findType("TemplateElement"),
      Test: findType("Test"),
      TestContext: findType("TestContext"),
      TestResult: findType("TestResult"),
      TestWorker: findType("TestWorker"),
      TestWorkerPool: findType("TestWorkerPool"),
      TextTrack: findType("TextTrack"),
      TextTrackCue: findType("TextTrackCue"),
      TimeoutCanceledException: findType("TimeoutCanceledException"),
      TimeoutException: findType("TimeoutException"),
      Timer: findType("Timer"),
      Touch: findType("Touch"),
      Trace: findType("Trace"),
      Trace_Function_String: findType("Trace(String)"),
      Transform: findType("Transform"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      TypeError: findType("TypeError"),
      TypeMatcher_CanceledException: findType("TypeMatcher<CanceledException>"),
      TypeMatcher_CustomException: findType("TypeMatcher<CustomException>"),
      TypeMatcher_WorkerException: findType("TypeMatcher<WorkerException>"),
      Uint16List: findType("Uint16List"),
      Uint32List: findType("Uint32List"),
      Uint8ClampedList: findType("Uint8ClampedList"),
      Uint8List: findType("Uint8List"),
      UnionSetController_LiveTest: findType("UnionSetController<LiveTest>"),
      UnionSet_LiveTest: findType("UnionSet<LiveTest>"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableListView_LiveTest: findType("UnmodifiableListView<LiveTest>"),
      UnmodifiableMapView_BooleanSelector_Metadata: findType("UnmodifiableMapView<BooleanSelector,Metadata>"),
      UnmodifiableMapView_PlatformSelector_Metadata: findType("UnmodifiableMapView<PlatformSelector,Metadata>"),
      UnmodifiableMapView_String_String: findType("UnmodifiableMapView<String,String>"),
      UnmodifiableSetView_LiveTest: findType("UnmodifiableSetView<LiveTest>"),
      UnmodifiableSetView_String: findType("UnmodifiableSetView<String>"),
      Uri: findType("Uri"),
      ValueTask_dynamic: findType("ValueTask<@>"),
      WhereIterable_Level: findType("WhereIterable<Level>"),
      WhereIterable_StreamTask_dynamic: findType("WhereIterable<StreamTask<@>>"),
      WhereIterable_String: findType("WhereIterable<String>"),
      WhereIterable_ValueTask_dynamic: findType("WhereIterable<ValueTask<@>>"),
      WhereTypeIterable_CanceledException: findType("WhereTypeIterable<CanceledException>"),
      WhereTypeIterable_GroupEntry: findType("WhereTypeIterable<GroupEntry>"),
      WhereTypeIterable_String: findType("WhereTypeIterable<String>"),
      WindowBase: findType("WindowBase"),
      WorkerException: findType("WorkerException"),
      WorkerStat: findType("WorkerStat"),
      WorkerTask_dynamic_Worker: findType("WorkerTask<@,Worker0>"),
      Zone: findType("Zone"),
      _AsyncBroadcastStreamController_LiveSuite: findType("_AsyncBroadcastStreamController<LiveSuite>"),
      _AsyncBroadcastStreamController_RunnerSuite: findType("_AsyncBroadcastStreamController<RunnerSuite>"),
      _AsyncBroadcastStreamController_bool: findType("_AsyncBroadcastStreamController<bool>"),
      _AsyncCompleter_CanceledException: findType("_AsyncCompleter<CanceledException>"),
      _AsyncCompleter_Channel: findType("_AsyncCompleter<Channel>"),
      _AsyncCompleter_List_dynamic: findType("_AsyncCompleter<List<@>>"),
      _AsyncCompleter_List_void: findType("_AsyncCompleter<List<~>>"),
      _AsyncCompleter_PoolResource: findType("_AsyncCompleter<PoolResource>"),
      _AsyncCompleter_SquadronCanceledException: findType("_AsyncCompleter<SquadronCanceledException>"),
      _AsyncCompleter_StreamedResponse: findType("_AsyncCompleter<StreamedResponse>"),
      _AsyncCompleter_String: findType("_AsyncCompleter<String>"),
      _AsyncCompleter_Uint8List: findType("_AsyncCompleter<Uint8List>"),
      _AsyncCompleter_bool: findType("_AsyncCompleter<bool>"),
      _AsyncCompleter_dynamic: findType("_AsyncCompleter<@>"),
      _AsyncCompleter_int: findType("_AsyncCompleter<int>"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _Attr: findType("_Attr"),
      _BigIntImpl: findType("_BigIntImpl"),
      _ChildNodeListLazy: findType("_ChildNodeListLazy"),
      _ElementEventStreamImpl_Event: findType("_ElementEventStreamImpl<Event>"),
      _EventStream_JSObject: findType("_EventStream<JSObject>"),
      _FrozenElementList_Element: findType("_FrozenElementList<Element>"),
      _Future_CanceledException: findType("_Future<CanceledException>"),
      _Future_Channel: findType("_Future<Channel>"),
      _Future_List_dynamic: findType("_Future<List<@>>"),
      _Future_List_void: findType("_Future<List<~>>"),
      _Future_PoolResource: findType("_Future<PoolResource>"),
      _Future_SquadronCanceledException: findType("_Future<SquadronCanceledException>"),
      _Future_StreamedResponse: findType("_Future<StreamedResponse>"),
      _Future_String: findType("_Future<String>"),
      _Future_Uint8List: findType("_Future<Uint8List>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_void: findType("_Future<~>"),
      _Html5NodeValidator: findType("_Html5NodeValidator"),
      _IdentityHashMap_of_nullable_Object_and_nullable_Object: findType("_IdentityHashMap<Object?,Object?>"),
      _Mismatch: findType("_Mismatch"),
      _Predicate_nullable_Object: findType("_Predicate<Object?>"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _StreamIterator_int: findType("_StreamIterator<int>"),
      _SyncBroadcastStreamController_AsyncError: findType("_SyncBroadcastStreamController<AsyncError>"),
      _SyncBroadcastStreamController_LiveTest: findType("_SyncBroadcastStreamController<LiveTest>"),
      _SyncBroadcastStreamController_Message: findType("_SyncBroadcastStreamController<Message>"),
      _SyncBroadcastStreamController_State: findType("_SyncBroadcastStreamController<State>"),
      _SyncCompleter_PoolResource: findType("_SyncCompleter<PoolResource>"),
      _SyncStarIterable_Object: findType("_SyncStarIterable<Object>"),
      _SyncStarIterable_String: findType("_SyncStarIterable<String>"),
      _ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C: findType("_ZoneFunction<0^(1^,2^)(Zone,ZoneDelegate,Zone,0^(1^,2^))<Object?,Object?,Object?>>"),
      _ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B: findType("_ZoneFunction<0^(1^)(Zone,ZoneDelegate,Zone,0^(1^))<Object?,Object?>>"),
      _ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function: findType("_ZoneFunction<0^()(Zone,ZoneDelegate,Zone,0^())<Object?>>"),
      _ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace: findType("_ZoneFunction<AsyncError?(Zone,ZoneDelegate,Zone,Object,StackTrace?)>"),
      _ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace: findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,Object,StackTrace)>"),
      _ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_String: findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,String)>"),
      bool: findType("bool"),
      bool_Function_Level: findType("bool(Level)"),
      bool_Function_Never: findType("bool(0&)"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_StreamTask_dynamic: findType("bool(StreamTask<@>)"),
      bool_Function_String: findType("bool(String)"),
      bool_Function_ValueTask_dynamic: findType("bool(ValueTask<@>)"),
      bool_Function_nullable_Object: findType("bool(Object?)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_List_dynamic: findType("@(List<@>)"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_String: findType("@(String)"),
      dynamic_Function_dynamic_dynamic: findType("@(@,@)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_CancelationToken: findType("CancelationToken?"),
      nullable_CanceledException: findType("CanceledException?"),
      nullable_Declarer: findType("Declarer?"),
      nullable_EventTarget: findType("EventTarget?"),
      nullable_FutureOr_String: findType("String/?"),
      nullable_FutureOr_bool: findType("bool/?"),
      nullable_Future_Channel: findType("Future<Channel>?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Future_nullable_bool: findType("Future<bool?>?"),
      nullable_Future_void: findType("Future<~>?"),
      nullable_Gamepad: findType("Gamepad?"),
      nullable_GroupEntry_Function_GroupEntry: findType("GroupEntry?(GroupEntry)"),
      nullable_Invoker: findType("Invoker?"),
      nullable_Iterable_Group: findType("Iterable<Group>?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_JavaScriptFunction: findType("JavaScriptFunction?"),
      nullable_List_List_dynamic: findType("List<List<@>>?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_LiveTest: findType("LiveTest?"),
      nullable_Map_PlatformSelector_Metadata: findType("Map<PlatformSelector,Metadata>?"),
      nullable_Map_of_int_and_dynamic_Function_List_dynamic: findType("Map<int,@(List<@>)>?"),
      nullable_Map_of_int_and_void_Function: findType("Map<int,~()>?"),
      nullable_Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>?"),
      nullable_Object: findType("Object?"),
      nullable_SquadronCancelationToken: findType("SquadronCancelationToken?"),
      nullable_SquadronException: findType("SquadronException?"),
      nullable_SquadronException_Function_List_dynamic: findType("SquadronException?(List<@>)"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_StackTraceFormatter: findType("StackTraceFormatter?"),
      nullable_StackZoneSpecification: findType("StackZoneSpecification?"),
      nullable_StreamSubscription_LiveTest: findType("StreamSubscription<LiveTest>?"),
      nullable_String_Function_Match: findType("String(Match)?"),
      nullable_TestContext: findType("TestContext?"),
      nullable_WorkerChannel: findType("WorkerChannel?"),
      nullable_WorkerException_Function_List_dynamic: findType("WorkerException?(List<@>)"),
      nullable_Zone: findType("Zone?"),
      nullable_ZoneDelegate: findType("ZoneDelegate?"),
      nullable_ZoneSpecification: findType("ZoneSpecification?"),
      nullable__AsyncCounter: findType("_AsyncCounter?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable__Mismatch_Function_4_nullable_Object_and_nullable_Object_and_String_and_int: findType("_Mismatch?(Object?,Object?,String,int)"),
      nullable_bool: findType("bool?"),
      nullable_dynamic_Function_Event: findType("@(Event)?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_Event: findType("~(Event)?"),
      nullable_void_Function_MessageEvent: findType("~(MessageEvent)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_$opt_dynamic: findType("~([@])"),
      void_Function_$opt_void: findType("~([~])"),
      void_Function_Exception: findType("~(Exception)"),
      void_Function_IssuesWorker_bool: findType("~(IssuesWorker,bool)"),
      void_Function_List_dynamic: findType("~(List<@>)"),
      void_Function_List_int: findType("~(List<int>)"),
      void_Function_LocalClientWorker_bool: findType("~(LocalClientWorker,bool)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_PrimeWorker_bool: findType("~(PrimeWorker,bool)"),
      void_Function_SquadronException: findType("~(SquadronException)"),
      void_Function_String_String: findType("~(String,String)"),
      void_Function_String_dynamic: findType("~(String,@)"),
      void_Function_TestWorker_bool: findType("~(TestWorker,bool)"),
      void_Function_Timer: findType("~(Timer)"),
      void_Function_dynamic: findType("~(@)"),
      void_Function_int: findType("~(int)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.AnchorElement_methods = A.AnchorElement.prototype;
    B.BodyElement_methods = A.BodyElement.prototype;
    B.DivElement_methods = A.DivElement.prototype;
    B.DomImplementation_methods = A.DomImplementation.prototype;
    B.HtmlDocument_methods = A.HtmlDocument.prototype;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.Location_methods = A.Location.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.TableElement_methods = A.TableElement.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.AnsiColor_12_true = new A.AnsiColor(12, true);
    B.AnsiColor_196_true = new A.AnsiColor(196, true);
    B.AnsiColor_199_true = new A.AnsiColor(199, true);
    B.AnsiColor_208_true = new A.AnsiColor(208, true);
    B.AnsiColor_null_false = new A.AnsiColor(null, false);
    B.AsciiEncoder_127 = new A.AsciiEncoder(127);
    B.C__EmptyStream = new A._EmptyStream(A.findType("_EmptyStream<List<int>>"));
    B.ByteStream__EmptyStream = new A.ByteStream(B.C__EmptyStream);
    B.CONSTANT0 = new A.Instantiation1(A.canceled_exceptions___self$closure(), A.findType("Instantiation1<CanceledException>"));
    B.CONSTANT = new A.Instantiation1(A.math__max$closure(), A.findType("Instantiation1<int>"));
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.C_All = new A.All();
    B.C_AsciiCodec = new A.AsciiCodec();
    B.C_Base64Encoder = new A.Base64Encoder();
    B.C_Base64Codec = new A.Base64Codec();
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_EmptyUnmodifiableSet = new A.EmptyUnmodifiableSet(A.findType("EmptyUnmodifiableSet<String>"));
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C__DelayedDone = new A._DelayedDone();
    B.C__Empty = new A._Empty();
    B.C__IsFalse = new A._IsFalse();
    B.C__IsNotNull = new A._IsNotNull();
    B.C__IsNull = new A._IsNull();
    B.C__IsTrue = new A._IsTrue();
    B.C__NotEmpty = new A._NotEmpty();
    B.C__Required = new A._Required();
    B.C__RootZone = new A._RootZone();
    B.Compiler_Dart2Js_dart2js_dart2js = new A.Compiler("Dart2Js", "dart2js", "dart2js");
    B.Compiler_Dart2Wasm_dart2wasm_dart2wasm = new A.Compiler("Dart2Wasm", "dart2wasm", "dart2wasm");
    B.Compiler_Kernel_kernel_kernel = new A.Compiler("Kernel", "kernel", "kernel");
    B.ConcurrencySettings_0_1_50 = new A.ConcurrencySettings(0, 1, 50);
    B.ConcurrencySettings_0_2_50 = new A.ConcurrencySettings(0, 2, 50);
    B.ConcurrencySettings_1_1_1 = new A.ConcurrencySettings(1, 1, 1);
    B.ConcurrencySettings_1_3_1 = new A.ConcurrencySettings(1, 3, 1);
    B.ConcurrencySettings_1_4_50 = new A.ConcurrencySettings(1, 4, 50);
    B.ConcurrencySettings_2_2_2 = new A.ConcurrencySettings(2, 2, 2);
    B.Duration_0 = new A.Duration(0);
    B.Duration_30000000 = new A.Duration(30000000);
    B.Duration_80000 = new A.Duration(80000);
    B.JsonEncoder_null_null = new A.JsonEncoder(null, null);
    B.Level_0_all = new A.Level(0, "all");
    B.Level_10000_off = new A.Level(10000, "off");
    B.Level_1000_trace = new A.Level(1000, "trace");
    B.Level_2000_debug = new A.Level(2000, "debug");
    B.Level_3000_info = new A.Level(3000, "info");
    B.Level_4000_warning = new A.Level(4000, "warning");
    B.Level_5000_error = new A.Level(5000, "error");
    B.Level_6000_fatal = new A.Level(6000, "fatal");
    B.Level_9999_nothing = new A.Level(9999, "nothing");
    B.List_2No = A._setArrayType(makeConstList([""]), type$.JSArray_String);
    B.List_2jN = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_42A = A._setArrayType(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_4AN = A._setArrayType(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_4Jt = A._setArrayType(makeConstList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), type$.JSArray_String);
    B.List_AOY = A._setArrayType(makeConstList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), type$.JSArray_String);
    B.Level_999_verbose = new A.Level(999, "verbose");
    B.Level_5999_wtf = new A.Level(5999, "wtf");
    B.List_Ah0 = A._setArrayType(makeConstList([B.Level_0_all, B.Level_999_verbose, B.Level_1000_trace, B.Level_2000_debug, B.Level_3000_info, B.Level_4000_warning, B.Level_5000_error, B.Level_5999_wtf, B.Level_6000_fatal, B.Level_9999_nothing, B.Level_10000_off]), A.findType("JSArray<Level>"));
    B.List_GVy = A._setArrayType(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    B.OperatingSystem_Windows_windows = new A.OperatingSystem("Windows", "windows");
    B.OperatingSystem_elx = new A.OperatingSystem("OS X", "mac-os");
    B.OperatingSystem_Linux_linux = new A.OperatingSystem("Linux", "linux");
    B.OperatingSystem_Android_android = new A.OperatingSystem("Android", "android");
    B.OperatingSystem_iOS_ios = new A.OperatingSystem("iOS", "ios");
    B.List_K1A = A._setArrayType(makeConstList([B.OperatingSystem_Windows_windows, B.OperatingSystem_elx, B.OperatingSystem_Linux_linux, B.OperatingSystem_Android_android, B.OperatingSystem_iOS_ios]), A.findType("JSArray<OperatingSystem>"));
    B.List_M2I0 = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_M2I = A._setArrayType(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.Compiler_Exe_exe_exe = new A.Compiler("Exe", "exe", "exe");
    B.Compiler_Source_source_source = new A.Compiler("Source", "source", "source");
    B.List_Mqm = A._setArrayType(makeConstList([B.Compiler_Dart2Js_dart2js_dart2js, B.Compiler_Dart2Wasm_dart2wasm_dart2wasm, B.Compiler_Exe_exe_exe, B.Compiler_Kernel_kernel_kernel, B.Compiler_Source_source_source]), type$.JSArray_Compiler);
    B.List_VOY = A._setArrayType(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    B.List_Vet = A._setArrayType(makeConstList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), type$.JSArray_String);
    B.List_empty1 = A._setArrayType(makeConstList([]), type$.JSArray_int);
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_ib5 = A._setArrayType(makeConstList([B.Compiler_Kernel_kernel_kernel, B.Compiler_Source_source_source, B.Compiler_Exe_exe_exe]), type$.JSArray_Compiler);
    B.List_piR = A._setArrayType(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.Runtime_WrZ = new A.Runtime("VM", "vm", true, false, false, B.Compiler_Kernel_kernel_kernel, B.List_ib5);
    B.List_Aec = A._setArrayType(makeConstList([B.Compiler_Dart2Js_dart2js_dart2js, B.Compiler_Dart2Wasm_dart2wasm_dart2wasm]), type$.JSArray_Compiler);
    B.Runtime_Iua = new A.Runtime("Chrome", "chrome", false, true, true, B.Compiler_Dart2Js_dart2js_dart2js, B.List_Aec);
    B.Runtime_A3h = new A.Runtime("Firefox", "firefox", false, true, false, B.Compiler_Dart2Js_dart2js_dart2js, B.List_Aec);
    B.List_Compiler_Dart2Js_dart2js_dart2js = A._setArrayType(makeConstList([B.Compiler_Dart2Js_dart2js_dart2js]), type$.JSArray_Compiler);
    B.Runtime_JNA = new A.Runtime("Safari", "safari", false, true, false, B.Compiler_Dart2Js_dart2js_dart2js, B.List_Compiler_Dart2Js_dart2js_dart2js);
    B.Runtime_iHz = new A.Runtime("Microsoft Edge", "edge", false, true, true, B.Compiler_Dart2Js_dart2js_dart2js, B.List_Compiler_Dart2Js_dart2js_dart2js);
    B.Runtime_RkP = new A.Runtime("Node.js", "node", false, false, false, B.Compiler_Dart2Js_dart2js_dart2js, B.List_Compiler_Dart2Js_dart2js_dart2js);
    B.List_vjx = A._setArrayType(makeConstList([B.Runtime_WrZ, B.Runtime_Iua, B.Runtime_A3h, B.Runtime_JNA, B.Runtime_iHz, B.Runtime_RkP]), A.findType("JSArray<Runtime>"));
    B.List_ym9 = A._setArrayType(makeConstList(["bind", "if", "ref", "repeat", "syntax"]), type$.JSArray_String);
    B.Object_empty = {};
    B.Map_empty0 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<BooleanSelector,Metadata>"));
    B.Map_empty3 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<Level,bool>"));
    B.Map_empty = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<PlatformSelector,Metadata>"));
    B.Map_empty4 = new A.ConstantStringMap(B.Object_empty, [], type$.ConstantStringMap_String_String);
    B.Map_empty5 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<Symbol0,@>"));
    B.Map_empty1 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<0&,0&>"));
    B.Map_empty2 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<@,@>"));
    B.Object_Fb0 = {"\n": 0, "\r": 1, "\f": 2, "\b": 3, "\t": 4, "\v": 5, "\x7f": 6};
    B.Map_grgg4 = new A.ConstantStringMap(B.Object_Fb0, ["\\n", "\\r", "\\f", "\\b", "\\t", "\\v", "\\x7F"], type$.ConstantStringMap_String_String);
    B.MessageType_print = new A.MessageType("print");
    B.MessageType_skip = new A.MessageType("skip");
    B.OperatingSystem_none_none = new A.OperatingSystem("none", "none");
    B.PlatformSelector_All = new A.PlatformSelector(B.C_All);
    B.Result_0 = new A.Result("success");
    B.Result_1 = new A.Result("skipped");
    B.Result_3 = new A.Result("error");
    B.Set_ozoMd = new A.GeneralConstantSet([1000000007, 1000000009, 1000001789, 1000001791, 6643838879, 99999199999, 999999000001, 67280421310721], A.findType("GeneralConstantSet<int>"));
    B.Object_ypq = {$sqdrn: 0, $wrkr: 1, $cncld: 2, "$cncld*": 3, $tmt: 4};
    B.Set_zHPI1 = new A.ConstantStringSet(B.Object_ypq, 5, A.findType("ConstantStringSet<String>"));
    B.Status_0 = new A.Status("pending");
    B.State_Status_0_Result_0 = new A.State(B.Status_0, B.Result_0);
    B.Status_1 = new A.Status("running");
    B.State_Status_1_Result_0 = new A.State(B.Status_1, B.Result_0);
    B.State_Status_1_Result_1 = new A.State(B.Status_1, B.Result_1);
    B.Status_2 = new A.Status("complete");
    B.State_Status_2_Result_1 = new A.State(B.Status_2, B.Result_1);
    B.Result_2 = new A.Result("failure");
    B.State_Status_2_Result_2 = new A.State(B.Status_2, B.Result_2);
    B.State_Status_2_Result_3 = new A.State(B.Status_2, B.Result_3);
    B.Symbol_EY8 = new A.Symbol("test.invoker");
    B.Symbol__clientToken = new A.Symbol("_clientToken");
    B.Symbol_call = new A.Symbol("call");
    B.Symbol_runCount = new A.Symbol("runCount");
    B.Symbol_yzu = new A.Symbol("test.declarer");
    B.TestPlatform_JavaScript_js = new A.TestPlatform("JavaScript", "js");
    B.TestPlatform_WebAssembly_wasm = new A.TestPlatform("WebAssembly", "wasm");
    B.Duration_720000000 = new A.Duration(720000000);
    B.Timeout_Duration_720000000_null = new A.Timeout(B.Duration_720000000, null);
    B.Timeout_null_1 = new A.Timeout(null, 1);
    B.Timeout_null_null = new A.Timeout(null, null);
    B.Type_ByteBuffer_EOZ = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_mF8 = A.typeLiteral("ByteData");
    B.Type_Float32List_Ymk = A.typeLiteral("Float32List");
    B.Type_Float64List_Ymk = A.typeLiteral("Float64List");
    B.Type_Int16List_cot = A.typeLiteral("Int16List");
    B.Type_Int32List_m1p = A.typeLiteral("Int32List");
    B.Type_Int8List_woc = A.typeLiteral("Int8List");
    B.Type_JSObject_0ua = A.typeLiteral("JSObject");
    B.Type_Object_QJv = A.typeLiteral("Object");
    B.Type_Uint16List_2mh = A.typeLiteral("Uint16List");
    B.Type_Uint32List_2mh = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_9Bb = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_CSc = A.typeLiteral("Uint8List");
    B.Type_double_23F = A.typeLiteral("double");
    B.Type_int_8nG = A.typeLiteral("int");
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B._Mode_0 = new A._Mode("any");
    B._Mode_1 = new A._Mode("every");
    B._OrderingMatcher_Kvb = new A._OrderingMatcher(0, true, false, false, "a value equal to", true);
    B._OrderingMatcher_g8g = new A._OrderingMatcher(0, false, false, true, "a positive value", false);
    B._StreamGroupState_canceled = new A._StreamGroupState("canceled");
    B._StreamGroupState_dormant = new A._StreamGroupState("dormant");
    B._StreamGroupState_listening = new A._StreamGroupState("listening");
    B._StreamGroupState_paused = new A._StreamGroupState("paused");
    B._StringStackTrace_uwd = new A._StringStackTrace("");
    B._ZoneFunction_NIe = new A._ZoneFunction(B.C__RootZone, A.async___rootHandleUncaughtError$closure(), type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace);
    B._ZoneFunction_QOa = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterUnaryCallback$closure(), type$._ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B);
    B._ZoneFunction__RootZone__rootCreateTimer = new A._ZoneFunction(B.C__RootZone, A.async___rootCreateTimer$closure(), A.findType("_ZoneFunction<Timer(Zone,ZoneDelegate,Zone,Duration,~())>"));
    B._ZoneFunction__RootZone__rootErrorCallback = new A._ZoneFunction(B.C__RootZone, A.async___rootErrorCallback$closure(), type$._ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace);
    B._ZoneFunction__RootZone__rootFork = new A._ZoneFunction(B.C__RootZone, A.async___rootFork$closure(), A.findType("_ZoneFunction<Zone(Zone,ZoneDelegate,Zone,ZoneSpecification?,Map<Object?,Object?>?)>"));
    B._ZoneFunction__RootZone__rootPrint = new A._ZoneFunction(B.C__RootZone, A.async___rootPrint$closure(), type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_String);
    B._ZoneFunction__RootZone__rootRegisterCallback = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterCallback$closure(), type$._ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function);
    B._ZoneFunction__RootZone__rootRun = new A._ZoneFunction(B.C__RootZone, A.async___rootRun$closure(), A.findType("_ZoneFunction<0^(Zone,ZoneDelegate,Zone,0^())<Object?>>"));
    B._ZoneFunction__RootZone__rootRunBinary = new A._ZoneFunction(B.C__RootZone, A.async___rootRunBinary$closure(), A.findType("_ZoneFunction<0^(Zone,ZoneDelegate,Zone,0^(1^,2^),1^,2^)<Object?,Object?,Object?>>"));
    B._ZoneFunction__RootZone__rootRunUnary = new A._ZoneFunction(B.C__RootZone, A.async___rootRunUnary$closure(), A.findType("_ZoneFunction<0^(Zone,ZoneDelegate,Zone,0^(1^),1^)<Object?,Object?>>"));
    B._ZoneFunction__RootZone__rootScheduleMicrotask = new A._ZoneFunction(B.C__RootZone, A.async___rootScheduleMicrotask$closure(), A.findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,~())>"));
    B._ZoneFunction_kWM = new A._ZoneFunction(B.C__RootZone, A.async___rootCreatePeriodicTimer$closure(), A.findType("_ZoneFunction<Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))>"));
    B._ZoneFunction_qxw = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterBinaryCallback$closure(), type$._ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C);
    B._ZoneSpecification_48t = new A._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $.printToZone = null;
    $.Primitives__identityHashCodeProperty = null;
    $.Primitives_timerFrequency = 0;
    $.Primitives_timerTicks = A._js_helper_Primitives_dateNow$closure();
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._RootZone__rootDelegate = null;
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $.Uri__cachedBaseString = "";
    $.Uri__cachedBaseUri = null;
    $.Element__parseDocument = null;
    $.Element__parseRange = null;
    $.Element__defaultValidator = null;
    $.Element__defaultSanitizer = null;
    $._Html5NodeValidator__attributeValidators = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Function);
    $.Logger__logCallbacks = A.LinkedHashSet_LinkedHashSet$_empty(A.findType("~(LogEvent)"));
    $.Logger__outputCallbacks = A.LinkedHashSet_LinkedHashSet$_empty(A.findType("~(OutputEvent)"));
    $.PrettyPrinter__startTime = null;
    $._currentUriBase = null;
    $._current = null;
    $._globalDeclarer = null;
    $._macOSDirectories = A.LinkedHashSet_LinkedHashSet$_literal(["/Applications", "/Library", "/Network", "/System", "/Users"], type$.String);
    $.ReleasableTracker__releasables = A.LinkedHashSet_LinkedHashSet$_empty(A.findType("Releasable"));
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "nullFuture", "$get$nullFuture", () => B.C__RootZone.run$1$1(new A.nullFuture_closure(), type$.Future_Null));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", () => A.findType("_Future<Null>")._as($.$get$nullFuture()));
    _lazyFinal($, "Future__falseFuture", "$get$Future__falseFuture", () => A._Future$zoneValue(false, B.C__RootZone, type$.bool));
    _lazyFinal($, "_RootZone__rootMap", "$get$_RootZone__rootMap", () => {
      var t1 = type$.dynamic;
      return A.HashMap_HashMap(t1, t1);
    });
    _lazyFinal($, "_Utf8Decoder__reusableBuffer", "$get$_Utf8Decoder__reusableBuffer", () => A.NativeUint8List_NativeUint8List(4096));
    _lazyFinal($, "_Utf8Decoder__decoder", "$get$_Utf8Decoder__decoder", () => new A._Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "_Utf8Decoder__decoderNonfatal", "$get$_Utf8Decoder__decoderNonfatal", () => new A._Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List__create1(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl_two", "$get$_BigIntImpl_two", () => A._BigIntImpl__BigIntImpl$_fromInt(2));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => $.$get$_BigIntImpl_one().$negate(0));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazy($, "_BigIntImpl__parseRE", "$get$_BigIntImpl__parseRE", () => A.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false, false));
    _lazyFinal($, "_BigIntImpl__bitsForFromDouble", "$get$_BigIntImpl__bitsForFromDouble", () => A.NativeUint8List_NativeUint8List(8));
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", () => A.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true, false));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_QJv));
    _lazyFinal($, "Stopwatch__frequency", "$get$Stopwatch__frequency", () => {
      A.Primitives_initTicker();
      return $.Primitives_timerFrequency;
    });
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", () => A._createTables());
    _lazyFinal($, "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", () => A.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], type$.String));
    _lazyFinal($, "CancelableToken__canceledFuture", "$get$CancelableToken__canceledFuture", () => A.Future_Future$value(null, type$.dynamic));
    _lazyFinal($, "BaseRequest__tokenRE", "$get$BaseRequest__tokenRE", () => A.RegExp_RegExp("^[\\w!#%&'*+\\-.^`|~]+$", true, false));
    _lazyFinal($, "_digitRegex", "$get$_digitRegex", () => A.RegExp_RegExp("^\\d+$", true, false));
    _lazy($, "Logger_defaultFilter", "$get$Logger_defaultFilter", () => new A.Logger_defaultFilter_closure());
    _lazy($, "Logger_defaultPrinter", "$get$Logger_defaultPrinter", () => new A.Logger_defaultPrinter_closure());
    _lazy($, "Logger_defaultOutput", "$get$Logger_defaultOutput", () => new A.Logger_defaultOutput_closure());
    _lazyFinal($, "PrettyPrinter_defaultLevelColors", "$get$PrettyPrinter_defaultLevelColors", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Level_1000_trace, new A.AnsiColor(232 + B.JSNumber_methods.round$0(B.JSNumber_methods.clamp$2(0.5, 0, 1) * 23), true), B.Level_2000_debug, B.AnsiColor_null_false, B.Level_3000_info, B.AnsiColor_12_true, B.Level_4000_warning, B.AnsiColor_208_true, B.Level_5000_error, B.AnsiColor_196_true, B.Level_6000_fatal, B.AnsiColor_199_true], type$.Level, A.findType("AnsiColor")));
    _lazyFinal($, "PrettyPrinter_defaultLevelEmojis", "$get$PrettyPrinter_defaultLevelEmojis", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Level_1000_trace, "", B.Level_2000_debug, "\ud83d\udc1b", B.Level_3000_info, "\ud83d\udca1", B.Level_4000_warning, "\u26a0\ufe0f", B.Level_5000_error, "\u26d4", B.Level_6000_fatal, "\ud83d\udc7e"], type$.Level, type$.String));
    _lazyFinal($, "PrettyPrinter__deviceStackTraceRegex", "$get$PrettyPrinter__deviceStackTraceRegex", () => A.RegExp_RegExp("#[0-9]+\\s+(.+) \\((\\S+)\\)", true, false));
    _lazyFinal($, "PrettyPrinter__webStackTraceRegex", "$get$PrettyPrinter__webStackTraceRegex", () => A.RegExp_RegExp("^((packages|dart-sdk)/\\S+/)", true, false));
    _lazyFinal($, "PrettyPrinter__browserStackTraceRegex", "$get$PrettyPrinter__browserStackTraceRegex", () => A.RegExp_RegExp("^(?:package:)?(dart:\\S+|\\S+)", true, false));
    _lazyFinal($, "_dart2DynamicArgs", "$get$_dart2DynamicArgs", () => A.RegExp_RegExp("<dynamic(, dynamic)*>", true, false));
    _lazyFinal($, "_escapeRegExp", "$get$_escapeRegExp", () => A.RegExp_RegExp("[\\x00-\\x07\\x0E-\\x1F" + J.map$1$1$ax(B.Map_grgg4.get$keys(B.Map_grgg4), A.util___getHexLiteral$closure(), type$.String).join$0(0) + "]", true, false));
    _lazyFinal($, "windows", "$get$windows", () => A.Context_Context($.$get$Style_windows()));
    _lazyFinal($, "context", "$get$context", () => new A.Context($.$get$Style_platform(), null));
    _lazyFinal($, "Style_posix", "$get$Style_posix", () => new A.PosixStyle(A.RegExp_RegExp("/", true, false), A.RegExp_RegExp("[^/]$", true, false), A.RegExp_RegExp("^/", true, false)));
    _lazyFinal($, "Style_windows", "$get$Style_windows", () => new A.WindowsStyle(A.RegExp_RegExp("[/\\\\]", true, false), A.RegExp_RegExp("[^/\\\\]$", true, false), A.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true, false), A.RegExp_RegExp("^[/\\\\](?![/\\\\])", true, false)));
    _lazyFinal($, "Style_url", "$get$Style_url", () => new A.UrlStyle(A.RegExp_RegExp("/", true, false), A.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true, false), A.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true, false), A.RegExp_RegExp("^/", true, false)));
    _lazyFinal($, "Style_platform", "$get$Style_platform", () => A.Style__getPlatformStyle());
    _lazyFinal($, "_latestUPDEpoch", "$get$_latestUPDEpoch", () => new A.DateTime(A.checkInt(A.Primitives_valueFromDecomposedDate(2020, 2, 2, 0, 0, 0, 0, true)), true));
    _lazyFinal($, "TokenId__instance", "$get$TokenId__instance", () => new A.TokenId());
    _lazyFinal($, "TokenId__instanceId", "$get$TokenId__instanceId", () => A.HexExt_get_hex(A.Primitives_objectHashCode($.$get$TokenId__instance())));
    _lazyFinal($, "WorkerTask__ready", "$get$WorkerTask__ready", () => A.Future_Future$value(null, type$.void));
    _lazyFinal($, "CancelationTokenReference_noToken", "$get$CancelationTokenReference_noToken", () => {
      var t1 = new A.CancelationTokenReference("", A.Completer_Completer(type$.SquadronCanceledException), false);
      t1._refCount = 1;
      return t1;
    });
    _lazyFinal($, "WorkerService_noOperations", "$get$WorkerService_noOperations", () => A.ConstantMap_ConstantMap$from(B.Map_empty2, type$.int, type$.dynamic_Function_List_dynamic));
    _lazyFinal($, "_specKey", "$get$_specKey", () => new A.Object());
    _lazyFinal($, "_vmFrame", "$get$_vmFrame", () => A.RegExp_RegExp("^#\\d+\\s+(\\S.*) \\((.+?)((?::\\d+){0,2})\\)$", true, false));
    _lazyFinal($, "_v8Frame", "$get$_v8Frame", () => A.RegExp_RegExp("^\\s*at (?:(\\S.*?)(?: \\[as [^\\]]+\\])? \\((.*)\\)|(.*))$", true, false));
    _lazyFinal($, "_v8UrlLocation", "$get$_v8UrlLocation", () => A.RegExp_RegExp("^(.*?):(\\d+)(?::(\\d+))?$|native$", true, false));
    _lazyFinal($, "_v8EvalLocation", "$get$_v8EvalLocation", () => A.RegExp_RegExp("^eval at (?:\\S.*?) \\((.*)\\)(?:, .*?:\\d+:\\d+)?$", true, false));
    _lazyFinal($, "_firefoxEvalLocation", "$get$_firefoxEvalLocation", () => A.RegExp_RegExp("(\\S+)@(\\S+) line (\\d+) >.* (Function|eval):\\d+:\\d+", true, false));
    _lazyFinal($, "_firefoxSafariFrame", "$get$_firefoxSafariFrame", () => A.RegExp_RegExp("^(?:([^@(/]*)(?:\\(.*\\))?((?:/[^/]*)*)(?:\\(.*\\))?@)?(.*?):(\\d*)(?::(\\d*))?$", true, false));
    _lazyFinal($, "_friendlyFrame", "$get$_friendlyFrame", () => A.RegExp_RegExp("^(\\S+)(?: (\\d+)(?::(\\d+))?)?\\s+([^\\d].*)$", true, false));
    _lazyFinal($, "_asyncBody", "$get$_asyncBody", () => A.RegExp_RegExp("<(<anonymous closure>|[^>]+)_async_body>", true, false));
    _lazyFinal($, "_initialDot", "$get$_initialDot", () => A.RegExp_RegExp("^\\.", true, false));
    _lazyFinal($, "Frame__uriRegExp", "$get$Frame__uriRegExp", () => A.RegExp_RegExp("^[a-zA-Z][-+.a-zA-Z\\d]*://", true, false));
    _lazyFinal($, "Frame__windowsRegExp", "$get$Frame__windowsRegExp", () => A.RegExp_RegExp("^([a-zA-Z]:[\\\\/]|\\\\\\\\)", true, false));
    _lazyFinal($, "_v8Trace", "$get$_v8Trace", () => A.RegExp_RegExp("\\n    ?at ", true, false));
    _lazyFinal($, "_v8TraceLine", "$get$_v8TraceLine", () => A.RegExp_RegExp("    ?at ", true, false));
    _lazyFinal($, "_firefoxEvalTrace", "$get$_firefoxEvalTrace", () => A.RegExp_RegExp("@\\S+ line \\d+ >.* (Function|eval):\\d+:\\d+", true, false));
    _lazyFinal($, "_firefoxSafariTrace", "$get$_firefoxSafariTrace", () => A.RegExp_RegExp("^(([.0-9A-Za-z_$/<]|\\(.*\\))*@)?[^\\s]*:\\d*$", true, true));
    _lazyFinal($, "_friendlyTrace", "$get$_friendlyTrace", () => A.RegExp_RegExp("^[^\\s<][^\\s]*( \\d+(:\\d+)?)?[ \\t]+[^\\s]+$", true, true));
    _lazyFinal($, "vmChainGap", "$get$vmChainGap", () => A.RegExp_RegExp("^<asynchronous suspension>\\n?$", true, true));
    _lazyFinal($, "TestHandle__defaultFormatter", "$get$TestHandle__defaultFormatter", () => {
      var t1 = type$.String;
      return new A.StackTraceFormatter(A.LinkedHashSet_LinkedHashSet$_literal(["matcher", "stream_channel", "test", "test_api"], t1), A.LinkedHashSet_LinkedHashSet$_empty(t1));
    });
    _lazyFinal($, "Metadata_empty", "$get$Metadata_empty", () => {
      var _null = null;
      return A.Metadata$_(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    });
    _lazyFinal($, "_universalValidVariables", "$get$_universalValidVariables", () => {
      var _i,
        t1 = A.LinkedHashSet_LinkedHashSet$_literal(["posix", "dart-vm", "browser", "js", "blink", "google", "wasm"], type$.String);
      for (_i = 0; _i < 6; ++_i)
        t1.add$1(0, B.List_vjx[_i].identifier);
      for (_i = 0; _i < 5; ++_i)
        t1.add$1(0, B.List_Mqm[_i].identifier);
      for (_i = 0; _i < 5; ++_i)
        t1.add$1(0, B.List_K1A[_i].identifier);
      return t1;
    });
    _lazyFinal($, "_currentKey", "$get$_currentKey", () => new A.Object());
    _lazyFinal($, "anchoredHyphenatedIdentifier", "$get$anchoredHyphenatedIdentifier", () => A.RegExp_RegExp("^[a-zA-Z_-][a-zA-Z0-9_-]*$", true, false));
    _lazyFinal($, "SuiteConfiguration_empty", "$get$SuiteConfiguration_empty", () => {
      var t1, _null = null;
      A.createSentinel();
      A.SuiteConfiguration__list(_null, type$.String);
      A.SuiteConfiguration__list(_null, A.findType("RuntimeSelection"));
      A.SuiteConfiguration__list(_null, A.findType("CompilerSelection"));
      t1 = A.findType("SuiteConfiguration");
      A.SuiteConfiguration__map(_null, type$.BooleanSelector, t1);
      A.SuiteConfiguration__map(_null, type$.PlatformSelector, t1);
      $.$get$Metadata_empty();
      return new A.SuiteConfiguration(_null, _null, _null);
    });
    _lazyFinal($, "currentOSGuess", "$get$currentOSGuess", () => new A.currentOSGuess_closure().call$0());
    _lazyFinal($, "threadId", "$get$threadId0", () => A.HexExt_get_hex(A.Primitives_objectHashCode(new A.Object())));
    _lazy($, "platformName", "$get$platformName", () => {
      var t1 = A.window().navigator.userAgent;
      t1.toString;
      return t1 + " (js)";
    });
    _lazyFinal($, "ConsoleToHtml_cr", "$get$ConsoleToHtml_cr", () => A.SequenceReplacement$(A.CodeUnits$("\n"), "", null));
    _lazyFinal($, "ConsoleToHtml_lf", "$get$ConsoleToHtml_lf", () => A.SequenceReplacement$(A.CodeUnits$("\r"), "", null));
    _lazyFinal($, "ConsoleToHtml_amp", "$get$ConsoleToHtml_amp", () => A.SequenceReplacement$(A.CodeUnits$("&"), "&amp;", null));
    _lazyFinal($, "ConsoleToHtml_lt", "$get$ConsoleToHtml_lt", () => A.SequenceReplacement$(A.CodeUnits$("<"), "&lt;", null));
    _lazyFinal($, "ConsoleToHtml_gt", "$get$ConsoleToHtml_gt", () => A.SequenceReplacement$(A.CodeUnits$(">"), "&gt;", null));
    _lazyFinal($, "ConsoleToHtml_resetSeq", "$get$ConsoleToHtml_resetSeq", () => {
      var t1 = A._setArrayType([27], type$.JSArray_int);
      B.JSArray_methods.addAll$1(t1, A.CodeUnits$("[0m"));
      return A.SequenceReplacement$(t1, "", null);
    });
    _lazyFinal($, "ConsoleToHtml_boldSeq", "$get$ConsoleToHtml_boldSeq", () => {
      var t1 = A._setArrayType([27], type$.JSArray_int);
      B.JSArray_methods.addAll$1(t1, A.CodeUnits$("[1m"));
      return A.SequenceReplacement$(t1, "<b>", "</b>");
    });
    _lazyFinal($, "ConsoleToHtml_redSeq", "$get$ConsoleToHtml_redSeq", () => {
      var t1 = A._setArrayType([27], type$.JSArray_int);
      B.JSArray_methods.addAll$1(t1, A.CodeUnits$("[31m"));
      return A.SequenceReplacement$(t1, '<span class="red">', "</span>");
    });
    _lazyFinal($, "ConsoleToHtml_greenSeq", "$get$ConsoleToHtml_greenSeq", () => {
      var t1 = A._setArrayType([27], type$.JSArray_int);
      B.JSArray_methods.addAll$1(t1, A.CodeUnits$("[32m"));
      return A.SequenceReplacement$(t1, '<span class="green">', "</span>");
    });
    _lazyFinal($, "ConsoleToHtml_sequences", "$get$ConsoleToHtml_sequences", () => A._setArrayType([$.$get$ConsoleToHtml_cr(), $.$get$ConsoleToHtml_lf(), $.$get$ConsoleToHtml_amp(), $.$get$ConsoleToHtml_lt(), $.$get$ConsoleToHtml_gt(), $.$get$ConsoleToHtml_resetSeq(), $.$get$ConsoleToHtml_boldSeq(), $.$get$ConsoleToHtml_redSeq(), $.$get$ConsoleToHtml_greenSeq()], A.findType("JSArray<SequenceReplacement>")));
    _lazyFinal($, "HtmlLogger__formatter", "$get$HtmlLogger__formatter", () => new A.ConsoleToHtml());
    _lazyFinal($, "threadId0", "$get$threadId", () => $.$get$threadId0());
    _lazyFinal($, "TestContext__knownTests", "$get$TestContext__knownTests", () => A.LinkedHashSet_LinkedHashSet$_literal(["- WebWorker - classic Web Worker", "- WebWorker - native Web Worker", "- WebWorker - in-memory Web Worker", "- WebWorker - missing Web Worker (JavaScript)", "- WebWorker - missing Web Worker (WebAssembly)", "- Squadron Worker - start/stop - start & stop", "- Squadron Worker - start/stop - hook", "- Squadron Worker - start/stop - hook failure", "- Squadron Worker - start/stop - install - no error", "- Squadron Worker - start/stop - install - error on installation", "- Squadron Worker - start/stop - install - error on uninstallation", "- Squadron Worker - start/stop - cannot restart after stop", "- Squadron Worker - workloads - sequential", "- Squadron Worker - workloads - parallel", "- Squadron Worker - workloads - error handling - Exception", "- Squadron Worker - workloads - error handling - WorkerException", "- Squadron Worker - workloads - error handling - TaskTimeOutException", "- Squadron Worker - workloads - error handling - CanceledException", "- Squadron Worker - workloads - error handling - CustomException", "- Squadron Worker - workloads - error handling - invalid request", "- Squadron Worker - workloads - error handling - invalid response", "- Squadron Worker - workloads - error handling - missing operation", "- Squadron Worker - initialization error - not found", "- Squadron Worker - initialization error - failed init", "- Squadron Worker - initialization error - missing start request", "- Squadron Worker - initialization error - invalid command ID", "- Squadron Worker - streaming - cancelOnError: false", "- Squadron Worker - streaming - cancelOnError: true", "- Squadron Worker - streaming - await for", "- Squadron Worker - streaming - throwing in await for", "- Squadron Worker - streaming - pause/resume", "- Squadron Worker - streaming - immediate cancelation", "- Squadron Worker - streaming - subscription cancelation", "- Shared Channel - cache worker", "- Shared Channel - prime worker with cache", "- WorkerPool - prime worker pool with cache", "- WorkerPool - worker pool monitoring", "- WorkerPool - initialization error - failed init", "- WorkerPool - initialization error - missing command", "- WorkerPool - initialization error - invalid command ID", "- WorkerPool - error handling - Exception", "- WorkerPool - error handling - WorkerException", "- WorkerPool - error handling - TaskTimeOutException", "- WorkerPool - error handling - CanceledException", "- WorkerPool - error handling - CustomException", "- WorkerPool - error handling - CustomException - after deserializer deregistation", "- WorkerPool - value - performance", "- WorkerPool - streaming - performance", "- WorkerPool - stopped pool will not accept new requests", "- WorkerPool - restarted pool will serve new requests", "- WorkerPool - pool termination does not prevent processing of pending tasks", "- WorkerPool - Streaming - with multiple errors - cancelOnError: false", "- WorkerPool - Streaming - with multiple errors - cancelOnError: true", "- WorkerPool - Streaming - with multiple errors - await for", "- WorkerPool - Streaming - with multiple errors - throwing in await for", "- WorkerPool - Streaming - with multiple errors - pause/resume", "- WorkerPool - Streaming - with multiple errors - pause/resume/cancel - using a StreamTask", "- WorkerPool - Streaming - with multiple errors - immediate cancelation", "- Local Worker - Identity - Local", "- Local Worker - Identity - Squadron", "- Local Worker - Identity - Pool", "- Local Worker - Exception - Local", "- Local Worker - Exception - Squadron", "- Local Worker - Exception - Pool", "- Local Worker - Stream - Local", "- Local Worker - Stream - Squadron", "- Local Worker - Stream - Pool", "- Logging off", "- Logging >= fatal", "- Logging >= error", "- Logging >= warning", "- Logging >= info", "- Logging >= debug", "- Logging >= trace", "- Logging all", '- Marshaler - unmarshaled "non-native" types work in VM, fail on Web', '- Marshaler - unmarshaled "non-native" input types work in VM, fail on Web', '- Marshaler - unmarshaled "non-native" output types work in VM, fail on Web', '- Marshaler - marshaled "non-native" types always work', "- Cancelation - ValueTask - immediate with pool.cancel()", "- Cancelation - ValueTask - immediate with pool.cancel(task)", "- Cancelation - ValueTask - immediate with task.cancel()", "- Cancelation - ValueTask - with pool.cancel()", "- Cancelation - ValueTask - with pool.cancel(task)", "- Cancelation - ValueTask - with task.cancel()", "- Cancelation - StreamTask - immediate with pool.cancel()", "- Cancelation - StreamTask - immediate with pool.cancel(task)", "- Cancelation - StreamTask - immediate with task.cancel()", "- Cancelation - StreamTask - with pool.cancel()", "- Cancelation - StreamTask - with pool.cancel(task)", "- Cancelation - StreamTask - with task.cancel()", "- Cancelation - CancelationToken - finite() worker", "- Cancelation - CancelationToken - infinite() worker", "- Cancelation - CancelationToken - finite() pool", "- Cancelation - TimeoutToken - finite() worker", "- Cancelation - TimeoutToken - infinite() worker", "- Cancelation - TimeoutToken - finite() pool", "- Cancelation - CompositeToken - finite() worker", "- Cancelation - CompositeToken - infinite() worker", "- Cancelation - CompositeToken - finite() pool", "- GitHub Issues - #8 - Exceptions from Streams must come through onError - Squadron Worker", "- GitHub Issues - #8 - Exceptions from Streams must come through onError - Worker Pool", "- Not a worker"], type$.String));
    _lazyFinal($, "TestContext__knownGroups", "$get$TestContext__knownGroups", () => A.LinkedHashSet_LinkedHashSet$_literal(["- WebWorker", "- Squadron Worker", "- Squadron Worker - start/stop", "- Squadron Worker - start/stop - install", "- Squadron Worker - workloads", "- Squadron Worker - workloads - error handling", "- Squadron Worker - initialization error", "- Squadron Worker - streaming", "- Shared Channel", "- WorkerPool", "- WorkerPool - initialization error", "- WorkerPool - error handling", "- WorkerPool - Streaming", "- Local Worker", "- Local Worker - Identity", "- Local Worker - Exception", "- Local Worker - Stream", "- Logging", "- Marshaler", "- Cancelation", "- Cancelation - ValueTask", "- Cancelation - StreamTask", "- Cancelation - CancelationToken", "- Cancelation - TimeoutToken", "- Cancelation - CompositeToken", "- GitHub Issues", "- GitHub Issues - #8 - Exceptions from Streams must come through onError"], type$.String));
    _lazyFinal($, "executors", "$get$executors", () => A.LinkedHashMap_LinkedHashMap$_literal(["Classic Web Workers", new A._Record_2_runner_script(A.web_worker_js_test__execute$closure(), "web_worker_js_test.dart"), "Squadron Workers", new A._Record_2_runner_script(A.worker_test__execute$closure(), "worker_test.dart"), "Squadron Worker Pools", new A._Record_2_runner_script(A.worker_pool_test__execute$closure(), "worker_pool_test.dart"), "Shared Channel", new A._Record_2_runner_script(A.shared_channel_test__execute$closure(), "shared_channel_test.dart"), "Local Workers", new A._Record_2_runner_script(A.local_worker_test__execute$closure(), "local_worker_test.dart"), "Logging", new A._Record_2_runner_script(A.logging_test__execute$closure(), "logging_test.dart"), "Marshalers", new A._Record_2_runner_script(A.marshaler_test__execute$closure(), "marshaler_test.dart"), "Cancelation Tokens", new A._Record_2_runner_script(A.cancelation_test__execute$closure(), "cancelation_test.dart"), "GitHub Issues", new A._Record_2_runner_script(A.issues_test__execute$closure(), "issues_test.dart")], type$.String, A.findType("+runner,script(~(TestContext),String)")));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({WebGL: J.Interceptor, AnimationEffectReadOnly: J.JavaScriptObject, AnimationEffectTiming: J.JavaScriptObject, AnimationEffectTimingReadOnly: J.JavaScriptObject, AnimationTimeline: J.JavaScriptObject, AnimationWorkletGlobalScope: J.JavaScriptObject, AuthenticatorAssertionResponse: J.JavaScriptObject, AuthenticatorAttestationResponse: J.JavaScriptObject, AuthenticatorResponse: J.JavaScriptObject, BackgroundFetchFetch: J.JavaScriptObject, BackgroundFetchManager: J.JavaScriptObject, BackgroundFetchSettledFetch: J.JavaScriptObject, BarProp: J.JavaScriptObject, BarcodeDetector: J.JavaScriptObject, BluetoothRemoteGATTDescriptor: J.JavaScriptObject, Body: J.JavaScriptObject, BudgetState: J.JavaScriptObject, CacheStorage: J.JavaScriptObject, CanvasGradient: J.JavaScriptObject, CanvasPattern: J.JavaScriptObject, CanvasRenderingContext2D: J.JavaScriptObject, Client: J.JavaScriptObject, Clients: J.JavaScriptObject, CookieStore: J.JavaScriptObject, Coordinates: J.JavaScriptObject, Credential: J.JavaScriptObject, CredentialUserData: J.JavaScriptObject, CredentialsContainer: J.JavaScriptObject, Crypto: J.JavaScriptObject, CryptoKey: J.JavaScriptObject, CSS: J.JavaScriptObject, CSSVariableReferenceValue: J.JavaScriptObject, CustomElementRegistry: J.JavaScriptObject, DataTransfer: J.JavaScriptObject, DataTransferItem: J.JavaScriptObject, DeprecatedStorageInfo: J.JavaScriptObject, DeprecatedStorageQuota: J.JavaScriptObject, DeprecationReport: J.JavaScriptObject, DetectedBarcode: J.JavaScriptObject, DetectedFace: J.JavaScriptObject, DetectedText: J.JavaScriptObject, DeviceAcceleration: J.JavaScriptObject, DeviceRotationRate: J.JavaScriptObject, DirectoryEntry: J.JavaScriptObject, webkitFileSystemDirectoryEntry: J.JavaScriptObject, FileSystemDirectoryEntry: J.JavaScriptObject, DirectoryReader: J.JavaScriptObject, WebKitDirectoryReader: J.JavaScriptObject, webkitFileSystemDirectoryReader: J.JavaScriptObject, FileSystemDirectoryReader: J.JavaScriptObject, DocumentOrShadowRoot: J.JavaScriptObject, DocumentTimeline: J.JavaScriptObject, DOMError: J.JavaScriptObject, Iterator: J.JavaScriptObject, DOMMatrix: J.JavaScriptObject, DOMMatrixReadOnly: J.JavaScriptObject, DOMParser: J.JavaScriptObject, DOMPoint: J.JavaScriptObject, DOMPointReadOnly: J.JavaScriptObject, DOMQuad: J.JavaScriptObject, DOMStringMap: J.JavaScriptObject, Entry: J.JavaScriptObject, webkitFileSystemEntry: J.JavaScriptObject, FileSystemEntry: J.JavaScriptObject, External: J.JavaScriptObject, FaceDetector: J.JavaScriptObject, FederatedCredential: J.JavaScriptObject, FileEntry: J.JavaScriptObject, webkitFileSystemFileEntry: J.JavaScriptObject, FileSystemFileEntry: J.JavaScriptObject, DOMFileSystem: J.JavaScriptObject, WebKitFileSystem: J.JavaScriptObject, webkitFileSystem: J.JavaScriptObject, FileSystem: J.JavaScriptObject, FontFace: J.JavaScriptObject, FontFaceSource: J.JavaScriptObject, FormData: J.JavaScriptObject, GamepadButton: J.JavaScriptObject, GamepadPose: J.JavaScriptObject, Geolocation: J.JavaScriptObject, Position: J.JavaScriptObject, GeolocationPosition: J.JavaScriptObject, Headers: J.JavaScriptObject, HTMLHyperlinkElementUtils: J.JavaScriptObject, IdleDeadline: J.JavaScriptObject, ImageBitmap: J.JavaScriptObject, ImageBitmapRenderingContext: J.JavaScriptObject, ImageCapture: J.JavaScriptObject, InputDeviceCapabilities: J.JavaScriptObject, IntersectionObserver: J.JavaScriptObject, IntersectionObserverEntry: J.JavaScriptObject, InterventionReport: J.JavaScriptObject, KeyframeEffect: J.JavaScriptObject, KeyframeEffectReadOnly: J.JavaScriptObject, MediaCapabilities: J.JavaScriptObject, MediaCapabilitiesInfo: J.JavaScriptObject, MediaDeviceInfo: J.JavaScriptObject, MediaError: J.JavaScriptObject, MediaKeyStatusMap: J.JavaScriptObject, MediaKeySystemAccess: J.JavaScriptObject, MediaKeys: J.JavaScriptObject, MediaKeysPolicy: J.JavaScriptObject, MediaMetadata: J.JavaScriptObject, MediaSession: J.JavaScriptObject, MediaSettingsRange: J.JavaScriptObject, MemoryInfo: J.JavaScriptObject, MessageChannel: J.JavaScriptObject, Metadata: J.JavaScriptObject, MutationObserver: J.JavaScriptObject, WebKitMutationObserver: J.JavaScriptObject, MutationRecord: J.JavaScriptObject, NavigationPreloadManager: J.JavaScriptObject, Navigator: J.JavaScriptObject, NavigatorAutomationInformation: J.JavaScriptObject, NavigatorConcurrentHardware: J.JavaScriptObject, NavigatorCookies: J.JavaScriptObject, NavigatorUserMediaError: J.JavaScriptObject, NodeFilter: J.JavaScriptObject, NodeIterator: J.JavaScriptObject, NonDocumentTypeChildNode: J.JavaScriptObject, NonElementParentNode: J.JavaScriptObject, NoncedElement: J.JavaScriptObject, OffscreenCanvasRenderingContext2D: J.JavaScriptObject, OverconstrainedError: J.JavaScriptObject, PaintRenderingContext2D: J.JavaScriptObject, PaintSize: J.JavaScriptObject, PaintWorkletGlobalScope: J.JavaScriptObject, PasswordCredential: J.JavaScriptObject, Path2D: J.JavaScriptObject, PaymentAddress: J.JavaScriptObject, PaymentInstruments: J.JavaScriptObject, PaymentManager: J.JavaScriptObject, PaymentResponse: J.JavaScriptObject, PerformanceEntry: J.JavaScriptObject, PerformanceLongTaskTiming: J.JavaScriptObject, PerformanceMark: J.JavaScriptObject, PerformanceMeasure: J.JavaScriptObject, PerformanceNavigation: J.JavaScriptObject, PerformanceNavigationTiming: J.JavaScriptObject, PerformanceObserver: J.JavaScriptObject, PerformanceObserverEntryList: J.JavaScriptObject, PerformancePaintTiming: J.JavaScriptObject, PerformanceResourceTiming: J.JavaScriptObject, PerformanceServerTiming: J.JavaScriptObject, PerformanceTiming: J.JavaScriptObject, Permissions: J.JavaScriptObject, PhotoCapabilities: J.JavaScriptObject, PositionError: J.JavaScriptObject, GeolocationPositionError: J.JavaScriptObject, Presentation: J.JavaScriptObject, PresentationReceiver: J.JavaScriptObject, PublicKeyCredential: J.JavaScriptObject, PushManager: J.JavaScriptObject, PushMessageData: J.JavaScriptObject, PushSubscription: J.JavaScriptObject, PushSubscriptionOptions: J.JavaScriptObject, Range: J.JavaScriptObject, RelatedApplication: J.JavaScriptObject, ReportBody: J.JavaScriptObject, ReportingObserver: J.JavaScriptObject, ResizeObserver: J.JavaScriptObject, ResizeObserverEntry: J.JavaScriptObject, RTCCertificate: J.JavaScriptObject, RTCIceCandidate: J.JavaScriptObject, mozRTCIceCandidate: J.JavaScriptObject, RTCLegacyStatsReport: J.JavaScriptObject, RTCRtpContributingSource: J.JavaScriptObject, RTCRtpReceiver: J.JavaScriptObject, RTCRtpSender: J.JavaScriptObject, RTCSessionDescription: J.JavaScriptObject, mozRTCSessionDescription: J.JavaScriptObject, RTCStatsResponse: J.JavaScriptObject, Screen: J.JavaScriptObject, ScrollState: J.JavaScriptObject, ScrollTimeline: J.JavaScriptObject, Selection: J.JavaScriptObject, SpeechRecognitionAlternative: J.JavaScriptObject, SpeechSynthesisVoice: J.JavaScriptObject, StaticRange: J.JavaScriptObject, StorageManager: J.JavaScriptObject, StyleMedia: J.JavaScriptObject, StylePropertyMap: J.JavaScriptObject, StylePropertyMapReadonly: J.JavaScriptObject, SyncManager: J.JavaScriptObject, TaskAttributionTiming: J.JavaScriptObject, TextDetector: J.JavaScriptObject, TextMetrics: J.JavaScriptObject, TrackDefault: J.JavaScriptObject, TreeWalker: J.JavaScriptObject, TrustedHTML: J.JavaScriptObject, TrustedScriptURL: J.JavaScriptObject, TrustedURL: J.JavaScriptObject, UnderlyingSourceBase: J.JavaScriptObject, URLSearchParams: J.JavaScriptObject, VRCoordinateSystem: J.JavaScriptObject, VRDisplayCapabilities: J.JavaScriptObject, VREyeParameters: J.JavaScriptObject, VRFrameData: J.JavaScriptObject, VRFrameOfReference: J.JavaScriptObject, VRPose: J.JavaScriptObject, VRStageBounds: J.JavaScriptObject, VRStageBoundsPoint: J.JavaScriptObject, VRStageParameters: J.JavaScriptObject, ValidityState: J.JavaScriptObject, VideoPlaybackQuality: J.JavaScriptObject, VideoTrack: J.JavaScriptObject, VTTRegion: J.JavaScriptObject, WindowClient: J.JavaScriptObject, WorkletAnimation: J.JavaScriptObject, WorkletGlobalScope: J.JavaScriptObject, XPathEvaluator: J.JavaScriptObject, XPathExpression: J.JavaScriptObject, XPathNSResolver: J.JavaScriptObject, XPathResult: J.JavaScriptObject, XMLSerializer: J.JavaScriptObject, XSLTProcessor: J.JavaScriptObject, Bluetooth: J.JavaScriptObject, BluetoothCharacteristicProperties: J.JavaScriptObject, BluetoothRemoteGATTServer: J.JavaScriptObject, BluetoothRemoteGATTService: J.JavaScriptObject, BluetoothUUID: J.JavaScriptObject, BudgetService: J.JavaScriptObject, Cache: J.JavaScriptObject, DOMFileSystemSync: J.JavaScriptObject, DirectoryEntrySync: J.JavaScriptObject, DirectoryReaderSync: J.JavaScriptObject, EntrySync: J.JavaScriptObject, FileEntrySync: J.JavaScriptObject, FileReaderSync: J.JavaScriptObject, FileWriterSync: J.JavaScriptObject, HTMLAllCollection: J.JavaScriptObject, Mojo: J.JavaScriptObject, MojoHandle: J.JavaScriptObject, MojoWatcher: J.JavaScriptObject, NFC: J.JavaScriptObject, PagePopupController: J.JavaScriptObject, Report: J.JavaScriptObject, Request: J.JavaScriptObject, Response: J.JavaScriptObject, SubtleCrypto: J.JavaScriptObject, USBAlternateInterface: J.JavaScriptObject, USBConfiguration: J.JavaScriptObject, USBDevice: J.JavaScriptObject, USBEndpoint: J.JavaScriptObject, USBInTransferResult: J.JavaScriptObject, USBInterface: J.JavaScriptObject, USBIsochronousInTransferPacket: J.JavaScriptObject, USBIsochronousInTransferResult: J.JavaScriptObject, USBIsochronousOutTransferPacket: J.JavaScriptObject, USBIsochronousOutTransferResult: J.JavaScriptObject, USBOutTransferResult: J.JavaScriptObject, WorkerLocation: J.JavaScriptObject, WorkerNavigator: J.JavaScriptObject, Worklet: J.JavaScriptObject, IDBCursor: J.JavaScriptObject, IDBCursorWithValue: J.JavaScriptObject, IDBFactory: J.JavaScriptObject, IDBIndex: J.JavaScriptObject, IDBKeyRange: J.JavaScriptObject, IDBObjectStore: J.JavaScriptObject, IDBObservation: J.JavaScriptObject, IDBObserver: J.JavaScriptObject, IDBObserverChanges: J.JavaScriptObject, SVGAngle: J.JavaScriptObject, SVGAnimatedAngle: J.JavaScriptObject, SVGAnimatedBoolean: J.JavaScriptObject, SVGAnimatedEnumeration: J.JavaScriptObject, SVGAnimatedInteger: J.JavaScriptObject, SVGAnimatedLength: J.JavaScriptObject, SVGAnimatedLengthList: J.JavaScriptObject, SVGAnimatedNumber: J.JavaScriptObject, SVGAnimatedNumberList: J.JavaScriptObject, SVGAnimatedPreserveAspectRatio: J.JavaScriptObject, SVGAnimatedRect: J.JavaScriptObject, SVGAnimatedString: J.JavaScriptObject, SVGAnimatedTransformList: J.JavaScriptObject, SVGMatrix: J.JavaScriptObject, SVGPoint: J.JavaScriptObject, SVGPreserveAspectRatio: J.JavaScriptObject, SVGRect: J.JavaScriptObject, SVGUnitTypes: J.JavaScriptObject, AudioListener: J.JavaScriptObject, AudioParam: J.JavaScriptObject, AudioTrack: J.JavaScriptObject, AudioWorkletGlobalScope: J.JavaScriptObject, AudioWorkletProcessor: J.JavaScriptObject, PeriodicWave: J.JavaScriptObject, WebGLActiveInfo: J.JavaScriptObject, ANGLEInstancedArrays: J.JavaScriptObject, ANGLE_instanced_arrays: J.JavaScriptObject, WebGLBuffer: J.JavaScriptObject, WebGLCanvas: J.JavaScriptObject, WebGLColorBufferFloat: J.JavaScriptObject, WebGLCompressedTextureASTC: J.JavaScriptObject, WebGLCompressedTextureATC: J.JavaScriptObject, WEBGL_compressed_texture_atc: J.JavaScriptObject, WebGLCompressedTextureETC1: J.JavaScriptObject, WEBGL_compressed_texture_etc1: J.JavaScriptObject, WebGLCompressedTextureETC: J.JavaScriptObject, WebGLCompressedTexturePVRTC: J.JavaScriptObject, WEBGL_compressed_texture_pvrtc: J.JavaScriptObject, WebGLCompressedTextureS3TC: J.JavaScriptObject, WEBGL_compressed_texture_s3tc: J.JavaScriptObject, WebGLCompressedTextureS3TCsRGB: J.JavaScriptObject, WebGLDebugRendererInfo: J.JavaScriptObject, WEBGL_debug_renderer_info: J.JavaScriptObject, WebGLDebugShaders: J.JavaScriptObject, WEBGL_debug_shaders: J.JavaScriptObject, WebGLDepthTexture: J.JavaScriptObject, WEBGL_depth_texture: J.JavaScriptObject, WebGLDrawBuffers: J.JavaScriptObject, WEBGL_draw_buffers: J.JavaScriptObject, EXTsRGB: J.JavaScriptObject, EXT_sRGB: J.JavaScriptObject, EXTBlendMinMax: J.JavaScriptObject, EXT_blend_minmax: J.JavaScriptObject, EXTColorBufferFloat: J.JavaScriptObject, EXTColorBufferHalfFloat: J.JavaScriptObject, EXTDisjointTimerQuery: J.JavaScriptObject, EXTDisjointTimerQueryWebGL2: J.JavaScriptObject, EXTFragDepth: J.JavaScriptObject, EXT_frag_depth: J.JavaScriptObject, EXTShaderTextureLOD: J.JavaScriptObject, EXT_shader_texture_lod: J.JavaScriptObject, EXTTextureFilterAnisotropic: J.JavaScriptObject, EXT_texture_filter_anisotropic: J.JavaScriptObject, WebGLFramebuffer: J.JavaScriptObject, WebGLGetBufferSubDataAsync: J.JavaScriptObject, WebGLLoseContext: J.JavaScriptObject, WebGLExtensionLoseContext: J.JavaScriptObject, WEBGL_lose_context: J.JavaScriptObject, OESElementIndexUint: J.JavaScriptObject, OES_element_index_uint: J.JavaScriptObject, OESStandardDerivatives: J.JavaScriptObject, OES_standard_derivatives: J.JavaScriptObject, OESTextureFloat: J.JavaScriptObject, OES_texture_float: J.JavaScriptObject, OESTextureFloatLinear: J.JavaScriptObject, OES_texture_float_linear: J.JavaScriptObject, OESTextureHalfFloat: J.JavaScriptObject, OES_texture_half_float: J.JavaScriptObject, OESTextureHalfFloatLinear: J.JavaScriptObject, OES_texture_half_float_linear: J.JavaScriptObject, OESVertexArrayObject: J.JavaScriptObject, OES_vertex_array_object: J.JavaScriptObject, WebGLProgram: J.JavaScriptObject, WebGLQuery: J.JavaScriptObject, WebGLRenderbuffer: J.JavaScriptObject, WebGLRenderingContext: J.JavaScriptObject, WebGL2RenderingContext: J.JavaScriptObject, WebGLSampler: J.JavaScriptObject, WebGLShader: J.JavaScriptObject, WebGLShaderPrecisionFormat: J.JavaScriptObject, WebGLSync: J.JavaScriptObject, WebGLTexture: J.JavaScriptObject, WebGLTimerQueryEXT: J.JavaScriptObject, WebGLTransformFeedback: J.JavaScriptObject, WebGLUniformLocation: J.JavaScriptObject, WebGLVertexArrayObject: J.JavaScriptObject, WebGLVertexArrayObjectOES: J.JavaScriptObject, WebGL2RenderingContextBase: J.JavaScriptObject, ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List, HTMLAudioElement: A.HtmlElement, HTMLBRElement: A.HtmlElement, HTMLButtonElement: A.HtmlElement, HTMLCanvasElement: A.HtmlElement, HTMLContentElement: A.HtmlElement, HTMLDListElement: A.HtmlElement, HTMLDataElement: A.HtmlElement, HTMLDataListElement: A.HtmlElement, HTMLDetailsElement: A.HtmlElement, HTMLDialogElement: A.HtmlElement, HTMLEmbedElement: A.HtmlElement, HTMLFieldSetElement: A.HtmlElement, HTMLHRElement: A.HtmlElement, HTMLHeadElement: A.HtmlElement, HTMLHeadingElement: A.HtmlElement, HTMLHtmlElement: A.HtmlElement, HTMLIFrameElement: A.HtmlElement, HTMLImageElement: A.HtmlElement, HTMLInputElement: A.HtmlElement, HTMLLIElement: A.HtmlElement, HTMLLabelElement: A.HtmlElement, HTMLLegendElement: A.HtmlElement, HTMLLinkElement: A.HtmlElement, HTMLMapElement: A.HtmlElement, HTMLMediaElement: A.HtmlElement, HTMLMenuElement: A.HtmlElement, HTMLMetaElement: A.HtmlElement, HTMLMeterElement: A.HtmlElement, HTMLModElement: A.HtmlElement, HTMLOListElement: A.HtmlElement, HTMLObjectElement: A.HtmlElement, HTMLOptGroupElement: A.HtmlElement, HTMLOptionElement: A.HtmlElement, HTMLOutputElement: A.HtmlElement, HTMLParagraphElement: A.HtmlElement, HTMLParamElement: A.HtmlElement, HTMLPictureElement: A.HtmlElement, HTMLPreElement: A.HtmlElement, HTMLProgressElement: A.HtmlElement, HTMLQuoteElement: A.HtmlElement, HTMLScriptElement: A.HtmlElement, HTMLShadowElement: A.HtmlElement, HTMLSlotElement: A.HtmlElement, HTMLSourceElement: A.HtmlElement, HTMLSpanElement: A.HtmlElement, HTMLStyleElement: A.HtmlElement, HTMLTableCaptionElement: A.HtmlElement, HTMLTableCellElement: A.HtmlElement, HTMLTableDataCellElement: A.HtmlElement, HTMLTableHeaderCellElement: A.HtmlElement, HTMLTableColElement: A.HtmlElement, HTMLTextAreaElement: A.HtmlElement, HTMLTimeElement: A.HtmlElement, HTMLTitleElement: A.HtmlElement, HTMLTrackElement: A.HtmlElement, HTMLUListElement: A.HtmlElement, HTMLUnknownElement: A.HtmlElement, HTMLVideoElement: A.HtmlElement, HTMLDirectoryElement: A.HtmlElement, HTMLFontElement: A.HtmlElement, HTMLFrameElement: A.HtmlElement, HTMLFrameSetElement: A.HtmlElement, HTMLMarqueeElement: A.HtmlElement, HTMLElement: A.HtmlElement, AccessibleNodeList: A.AccessibleNodeList, HTMLAnchorElement: A.AnchorElement, HTMLAreaElement: A.AreaElement, HTMLBaseElement: A.BaseElement, Blob: A.Blob, HTMLBodyElement: A.BodyElement, CDATASection: A.CharacterData, CharacterData: A.CharacterData, Comment: A.CharacterData, ProcessingInstruction: A.CharacterData, Text: A.CharacterData, CSSPerspective: A.CssPerspective, CSSCharsetRule: A.CssRule, CSSConditionRule: A.CssRule, CSSFontFaceRule: A.CssRule, CSSGroupingRule: A.CssRule, CSSImportRule: A.CssRule, CSSKeyframeRule: A.CssRule, MozCSSKeyframeRule: A.CssRule, WebKitCSSKeyframeRule: A.CssRule, CSSKeyframesRule: A.CssRule, MozCSSKeyframesRule: A.CssRule, WebKitCSSKeyframesRule: A.CssRule, CSSMediaRule: A.CssRule, CSSNamespaceRule: A.CssRule, CSSPageRule: A.CssRule, CSSRule: A.CssRule, CSSStyleRule: A.CssRule, CSSSupportsRule: A.CssRule, CSSViewportRule: A.CssRule, CSSStyleDeclaration: A.CssStyleDeclaration, MSStyleCSSProperties: A.CssStyleDeclaration, CSS2Properties: A.CssStyleDeclaration, CSSImageValue: A.CssStyleValue, CSSKeywordValue: A.CssStyleValue, CSSNumericValue: A.CssStyleValue, CSSPositionValue: A.CssStyleValue, CSSResourceValue: A.CssStyleValue, CSSUnitValue: A.CssStyleValue, CSSURLImageValue: A.CssStyleValue, CSSStyleValue: A.CssStyleValue, CSSMatrixComponent: A.CssTransformComponent, CSSRotation: A.CssTransformComponent, CSSScale: A.CssTransformComponent, CSSSkew: A.CssTransformComponent, CSSTranslation: A.CssTransformComponent, CSSTransformComponent: A.CssTransformComponent, CSSTransformValue: A.CssTransformValue, CSSUnparsedValue: A.CssUnparsedValue, DataTransferItemList: A.DataTransferItemList, HTMLDivElement: A.DivElement, XMLDocument: A.Document, Document: A.Document, DOMException: A.DomException, DOMImplementation: A.DomImplementation, ClientRectList: A.DomRectList, DOMRectList: A.DomRectList, DOMRectReadOnly: A.DomRectReadOnly, DOMStringList: A.DomStringList, DOMTokenList: A.DomTokenList, MathMLElement: A.Element, Element: A.Element, ErrorEvent: A.ErrorEvent, AbortPaymentEvent: A.Event, AnimationEvent: A.Event, AnimationPlaybackEvent: A.Event, ApplicationCacheErrorEvent: A.Event, BackgroundFetchClickEvent: A.Event, BackgroundFetchEvent: A.Event, BackgroundFetchFailEvent: A.Event, BackgroundFetchedEvent: A.Event, BeforeInstallPromptEvent: A.Event, BeforeUnloadEvent: A.Event, BlobEvent: A.Event, CanMakePaymentEvent: A.Event, ClipboardEvent: A.Event, CloseEvent: A.Event, CompositionEvent: A.Event, CustomEvent: A.Event, DeviceMotionEvent: A.Event, DeviceOrientationEvent: A.Event, ExtendableEvent: A.Event, ExtendableMessageEvent: A.Event, FetchEvent: A.Event, FocusEvent: A.Event, FontFaceSetLoadEvent: A.Event, ForeignFetchEvent: A.Event, GamepadEvent: A.Event, HashChangeEvent: A.Event, InstallEvent: A.Event, KeyboardEvent: A.Event, MediaEncryptedEvent: A.Event, MediaKeyMessageEvent: A.Event, MediaQueryListEvent: A.Event, MediaStreamEvent: A.Event, MediaStreamTrackEvent: A.Event, MIDIConnectionEvent: A.Event, MIDIMessageEvent: A.Event, MouseEvent: A.Event, DragEvent: A.Event, MutationEvent: A.Event, NotificationEvent: A.Event, PageTransitionEvent: A.Event, PaymentRequestEvent: A.Event, PaymentRequestUpdateEvent: A.Event, PointerEvent: A.Event, PopStateEvent: A.Event, PresentationConnectionAvailableEvent: A.Event, PresentationConnectionCloseEvent: A.Event, ProgressEvent: A.Event, PromiseRejectionEvent: A.Event, PushEvent: A.Event, RTCDataChannelEvent: A.Event, RTCDTMFToneChangeEvent: A.Event, RTCPeerConnectionIceEvent: A.Event, RTCTrackEvent: A.Event, SecurityPolicyViolationEvent: A.Event, SensorErrorEvent: A.Event, SpeechRecognitionError: A.Event, SpeechRecognitionEvent: A.Event, SpeechSynthesisEvent: A.Event, StorageEvent: A.Event, SyncEvent: A.Event, TextEvent: A.Event, TouchEvent: A.Event, TrackEvent: A.Event, TransitionEvent: A.Event, WebKitTransitionEvent: A.Event, UIEvent: A.Event, VRDeviceEvent: A.Event, VRDisplayEvent: A.Event, VRSessionEvent: A.Event, WheelEvent: A.Event, MojoInterfaceRequestEvent: A.Event, ResourceProgressEvent: A.Event, USBConnectionEvent: A.Event, IDBVersionChangeEvent: A.Event, AudioProcessingEvent: A.Event, OfflineAudioCompletionEvent: A.Event, WebGLContextEvent: A.Event, Event: A.Event, InputEvent: A.Event, SubmitEvent: A.Event, AbsoluteOrientationSensor: A.EventTarget, Accelerometer: A.EventTarget, AccessibleNode: A.EventTarget, AmbientLightSensor: A.EventTarget, Animation: A.EventTarget, ApplicationCache: A.EventTarget, DOMApplicationCache: A.EventTarget, OfflineResourceList: A.EventTarget, BackgroundFetchRegistration: A.EventTarget, BatteryManager: A.EventTarget, BroadcastChannel: A.EventTarget, CanvasCaptureMediaStreamTrack: A.EventTarget, DedicatedWorkerGlobalScope: A.EventTarget, EventSource: A.EventTarget, FileReader: A.EventTarget, FontFaceSet: A.EventTarget, Gyroscope: A.EventTarget, XMLHttpRequest: A.EventTarget, XMLHttpRequestEventTarget: A.EventTarget, XMLHttpRequestUpload: A.EventTarget, LinearAccelerationSensor: A.EventTarget, Magnetometer: A.EventTarget, MediaDevices: A.EventTarget, MediaKeySession: A.EventTarget, MediaQueryList: A.EventTarget, MediaRecorder: A.EventTarget, MediaSource: A.EventTarget, MediaStream: A.EventTarget, MediaStreamTrack: A.EventTarget, MIDIAccess: A.EventTarget, MIDIInput: A.EventTarget, MIDIOutput: A.EventTarget, MIDIPort: A.EventTarget, NetworkInformation: A.EventTarget, Notification: A.EventTarget, OffscreenCanvas: A.EventTarget, OrientationSensor: A.EventTarget, PaymentRequest: A.EventTarget, Performance: A.EventTarget, PermissionStatus: A.EventTarget, PresentationAvailability: A.EventTarget, PresentationConnection: A.EventTarget, PresentationConnectionList: A.EventTarget, PresentationRequest: A.EventTarget, RelativeOrientationSensor: A.EventTarget, RemotePlayback: A.EventTarget, RTCDataChannel: A.EventTarget, DataChannel: A.EventTarget, RTCDTMFSender: A.EventTarget, RTCPeerConnection: A.EventTarget, webkitRTCPeerConnection: A.EventTarget, mozRTCPeerConnection: A.EventTarget, ScreenOrientation: A.EventTarget, Sensor: A.EventTarget, ServiceWorker: A.EventTarget, ServiceWorkerContainer: A.EventTarget, ServiceWorkerGlobalScope: A.EventTarget, ServiceWorkerRegistration: A.EventTarget, SharedWorker: A.EventTarget, SharedWorkerGlobalScope: A.EventTarget, SpeechRecognition: A.EventTarget, webkitSpeechRecognition: A.EventTarget, SpeechSynthesis: A.EventTarget, SpeechSynthesisUtterance: A.EventTarget, VR: A.EventTarget, VRDevice: A.EventTarget, VRDisplay: A.EventTarget, VRSession: A.EventTarget, VisualViewport: A.EventTarget, WebSocket: A.EventTarget, WorkerGlobalScope: A.EventTarget, WorkerPerformance: A.EventTarget, BluetoothDevice: A.EventTarget, BluetoothRemoteGATTCharacteristic: A.EventTarget, Clipboard: A.EventTarget, MojoInterfaceInterceptor: A.EventTarget, USB: A.EventTarget, IDBDatabase: A.EventTarget, IDBOpenDBRequest: A.EventTarget, IDBVersionChangeRequest: A.EventTarget, IDBRequest: A.EventTarget, IDBTransaction: A.EventTarget, AnalyserNode: A.EventTarget, RealtimeAnalyserNode: A.EventTarget, AudioBufferSourceNode: A.EventTarget, AudioDestinationNode: A.EventTarget, AudioNode: A.EventTarget, AudioScheduledSourceNode: A.EventTarget, AudioWorkletNode: A.EventTarget, BiquadFilterNode: A.EventTarget, ChannelMergerNode: A.EventTarget, AudioChannelMerger: A.EventTarget, ChannelSplitterNode: A.EventTarget, AudioChannelSplitter: A.EventTarget, ConstantSourceNode: A.EventTarget, ConvolverNode: A.EventTarget, DelayNode: A.EventTarget, DynamicsCompressorNode: A.EventTarget, GainNode: A.EventTarget, AudioGainNode: A.EventTarget, IIRFilterNode: A.EventTarget, MediaElementAudioSourceNode: A.EventTarget, MediaStreamAudioDestinationNode: A.EventTarget, MediaStreamAudioSourceNode: A.EventTarget, OscillatorNode: A.EventTarget, Oscillator: A.EventTarget, PannerNode: A.EventTarget, AudioPannerNode: A.EventTarget, webkitAudioPannerNode: A.EventTarget, ScriptProcessorNode: A.EventTarget, JavaScriptAudioNode: A.EventTarget, StereoPannerNode: A.EventTarget, WaveShaperNode: A.EventTarget, EventTarget: A.EventTarget, File: A.File, FileList: A.FileList, FileWriter: A.FileWriter, HTMLFormElement: A.FormElement, Gamepad: A.Gamepad, History: A.History, HTMLCollection: A.HtmlCollection, HTMLFormControlsCollection: A.HtmlCollection, HTMLOptionsCollection: A.HtmlCollection, HTMLDocument: A.HtmlDocument, ImageData: A.ImageData, Location: A.Location, MediaList: A.MediaList, MessageEvent: A.MessageEvent, MessagePort: A.MessagePort, MIDIInputMap: A.MidiInputMap, MIDIOutputMap: A.MidiOutputMap, MimeType: A.MimeType, MimeTypeArray: A.MimeTypeArray, DocumentFragment: A.Node, ShadowRoot: A.Node, DocumentType: A.Node, Node: A.Node, NodeList: A.NodeList, RadioNodeList: A.NodeList, Plugin: A.Plugin, PluginArray: A.PluginArray, RTCStatsReport: A.RtcStatsReport, HTMLSelectElement: A.SelectElement, SharedArrayBuffer: A.SharedArrayBuffer, SourceBuffer: A.SourceBuffer, SourceBufferList: A.SourceBufferList, SpeechGrammar: A.SpeechGrammar, SpeechGrammarList: A.SpeechGrammarList, SpeechRecognitionResult: A.SpeechRecognitionResult, Storage: A.Storage, CSSStyleSheet: A.StyleSheet, StyleSheet: A.StyleSheet, HTMLTableElement: A.TableElement, HTMLTableRowElement: A.TableRowElement, HTMLTableSectionElement: A.TableSectionElement, HTMLTemplateElement: A.TemplateElement, TextTrack: A.TextTrack, TextTrackCue: A.TextTrackCue, VTTCue: A.TextTrackCue, TextTrackCueList: A.TextTrackCueList, TextTrackList: A.TextTrackList, TimeRanges: A.TimeRanges, Touch: A.Touch, TouchList: A.TouchList, TrackDefaultList: A.TrackDefaultList, URL: A.Url, VideoTrackList: A.VideoTrackList, Window: A.Window, DOMWindow: A.Window, Worker: A.Worker, Attr: A._Attr, CSSRuleList: A._CssRuleList, ClientRect: A._DomRect, DOMRect: A._DomRect, GamepadList: A._GamepadList, NamedNodeMap: A._NamedNodeMap, MozNamedAttrMap: A._NamedNodeMap, SpeechRecognitionResultList: A._SpeechRecognitionResultList, StyleSheetList: A._StyleSheetList, SVGLength: A.Length, SVGLengthList: A.LengthList, SVGNumber: A.Number, SVGNumberList: A.NumberList, SVGPointList: A.PointList, SVGScriptElement: A.ScriptElement0, SVGStringList: A.StringList, SVGAElement: A.SvgElement, SVGAnimateElement: A.SvgElement, SVGAnimateMotionElement: A.SvgElement, SVGAnimateTransformElement: A.SvgElement, SVGAnimationElement: A.SvgElement, SVGCircleElement: A.SvgElement, SVGClipPathElement: A.SvgElement, SVGDefsElement: A.SvgElement, SVGDescElement: A.SvgElement, SVGDiscardElement: A.SvgElement, SVGEllipseElement: A.SvgElement, SVGFEBlendElement: A.SvgElement, SVGFEColorMatrixElement: A.SvgElement, SVGFEComponentTransferElement: A.SvgElement, SVGFECompositeElement: A.SvgElement, SVGFEConvolveMatrixElement: A.SvgElement, SVGFEDiffuseLightingElement: A.SvgElement, SVGFEDisplacementMapElement: A.SvgElement, SVGFEDistantLightElement: A.SvgElement, SVGFEFloodElement: A.SvgElement, SVGFEFuncAElement: A.SvgElement, SVGFEFuncBElement: A.SvgElement, SVGFEFuncGElement: A.SvgElement, SVGFEFuncRElement: A.SvgElement, SVGFEGaussianBlurElement: A.SvgElement, SVGFEImageElement: A.SvgElement, SVGFEMergeElement: A.SvgElement, SVGFEMergeNodeElement: A.SvgElement, SVGFEMorphologyElement: A.SvgElement, SVGFEOffsetElement: A.SvgElement, SVGFEPointLightElement: A.SvgElement, SVGFESpecularLightingElement: A.SvgElement, SVGFESpotLightElement: A.SvgElement, SVGFETileElement: A.SvgElement, SVGFETurbulenceElement: A.SvgElement, SVGFilterElement: A.SvgElement, SVGForeignObjectElement: A.SvgElement, SVGGElement: A.SvgElement, SVGGeometryElement: A.SvgElement, SVGGraphicsElement: A.SvgElement, SVGImageElement: A.SvgElement, SVGLineElement: A.SvgElement, SVGLinearGradientElement: A.SvgElement, SVGMarkerElement: A.SvgElement, SVGMaskElement: A.SvgElement, SVGMetadataElement: A.SvgElement, SVGPathElement: A.SvgElement, SVGPatternElement: A.SvgElement, SVGPolygonElement: A.SvgElement, SVGPolylineElement: A.SvgElement, SVGRadialGradientElement: A.SvgElement, SVGRectElement: A.SvgElement, SVGSetElement: A.SvgElement, SVGStopElement: A.SvgElement, SVGStyleElement: A.SvgElement, SVGSVGElement: A.SvgElement, SVGSwitchElement: A.SvgElement, SVGSymbolElement: A.SvgElement, SVGTSpanElement: A.SvgElement, SVGTextContentElement: A.SvgElement, SVGTextElement: A.SvgElement, SVGTextPathElement: A.SvgElement, SVGTextPositioningElement: A.SvgElement, SVGTitleElement: A.SvgElement, SVGUseElement: A.SvgElement, SVGViewElement: A.SvgElement, SVGGradientElement: A.SvgElement, SVGComponentTransferFunctionElement: A.SvgElement, SVGFEDropShadowElement: A.SvgElement, SVGMPathElement: A.SvgElement, SVGElement: A.SvgElement, SVGTransform: A.Transform, SVGTransformList: A.TransformList, AudioBuffer: A.AudioBuffer, AudioParamMap: A.AudioParamMap, AudioTrackList: A.AudioTrackList, AudioContext: A.BaseAudioContext, webkitAudioContext: A.BaseAudioContext, BaseAudioContext: A.BaseAudioContext, OfflineAudioContext: A.OfflineAudioContext});
    hunkHelpers.setOrUpdateLeafTags({WebGL: true, AnimationEffectReadOnly: true, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: true, AnimationTimeline: true, AnimationWorkletGlobalScope: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: true, BackgroundFetchFetch: true, BackgroundFetchManager: true, BackgroundFetchSettledFetch: true, BarProp: true, BarcodeDetector: true, BluetoothRemoteGATTDescriptor: true, Body: true, BudgetState: true, CacheStorage: true, CanvasGradient: true, CanvasPattern: true, CanvasRenderingContext2D: true, Client: true, Clients: true, CookieStore: true, Coordinates: true, Credential: true, CredentialUserData: true, CredentialsContainer: true, Crypto: true, CryptoKey: true, CSS: true, CSSVariableReferenceValue: true, CustomElementRegistry: true, DataTransfer: true, DataTransferItem: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DeprecationReport: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceRotationRate: true, DirectoryEntry: true, webkitFileSystemDirectoryEntry: true, FileSystemDirectoryEntry: true, DirectoryReader: true, WebKitDirectoryReader: true, webkitFileSystemDirectoryReader: true, FileSystemDirectoryReader: true, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMError: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: true, DOMParser: true, DOMPoint: true, DOMPointReadOnly: true, DOMQuad: true, DOMStringMap: true, Entry: true, webkitFileSystemEntry: true, FileSystemEntry: true, External: true, FaceDetector: true, FederatedCredential: true, FileEntry: true, webkitFileSystemFileEntry: true, FileSystemFileEntry: true, DOMFileSystem: true, WebKitFileSystem: true, webkitFileSystem: true, FileSystem: true, FontFace: true, FontFaceSource: true, FormData: true, GamepadButton: true, GamepadPose: true, Geolocation: true, Position: true, GeolocationPosition: true, Headers: true, HTMLHyperlinkElementUtils: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, InputDeviceCapabilities: true, IntersectionObserver: true, IntersectionObserverEntry: true, InterventionReport: true, KeyframeEffect: true, KeyframeEffectReadOnly: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaDeviceInfo: true, MediaError: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaMetadata: true, MediaSession: true, MediaSettingsRange: true, MemoryInfo: true, MessageChannel: true, Metadata: true, MutationObserver: true, WebKitMutationObserver: true, MutationRecord: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: true, NavigatorCookies: true, NavigatorUserMediaError: true, NodeFilter: true, NodeIterator: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, OffscreenCanvasRenderingContext2D: true, OverconstrainedError: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, PasswordCredential: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentResponse: true, PerformanceEntry: true, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformanceNavigation: true, PerformanceNavigationTiming: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformancePaintTiming: true, PerformanceResourceTiming: true, PerformanceServerTiming: true, PerformanceTiming: true, Permissions: true, PhotoCapabilities: true, PositionError: true, GeolocationPositionError: true, Presentation: true, PresentationReceiver: true, PublicKeyCredential: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, Range: true, RelatedApplication: true, ReportBody: true, ReportingObserver: true, ResizeObserver: true, ResizeObserverEntry: true, RTCCertificate: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCLegacyStatsReport: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsResponse: true, Screen: true, ScrollState: true, ScrollTimeline: true, Selection: true, SpeechRecognitionAlternative: true, SpeechSynthesisVoice: true, StaticRange: true, StorageManager: true, StyleMedia: true, StylePropertyMap: true, StylePropertyMapReadonly: true, SyncManager: true, TaskAttributionTiming: true, TextDetector: true, TextMetrics: true, TrackDefault: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, UnderlyingSourceBase: true, URLSearchParams: true, VRCoordinateSystem: true, VRDisplayCapabilities: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, VideoPlaybackQuality: true, VideoTrack: true, VTTRegion: true, WindowClient: true, WorkletAnimation: true, WorkletGlobalScope: true, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLSerializer: true, XSLTProcessor: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, EntrySync: true, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, HTMLAllCollection: true, Mojo: true, MojoHandle: true, MojoWatcher: true, NFC: true, PagePopupController: true, Report: true, Request: true, Response: true, SubtleCrypto: true, USBAlternateInterface: true, USBConfiguration: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBCursor: true, IDBCursorWithValue: true, IDBFactory: true, IDBIndex: true, IDBKeyRange: true, IDBObjectStore: true, IDBObservation: true, IDBObserver: true, IDBObserverChanges: true, SVGAngle: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedEnumeration: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedString: true, SVGAnimatedTransformList: true, SVGMatrix: true, SVGPoint: true, SVGPreserveAspectRatio: true, SVGRect: true, SVGUnitTypes: true, AudioListener: true, AudioParam: true, AudioTrack: true, AudioWorkletGlobalScope: true, AudioWorkletProcessor: true, PeriodicWave: true, WebGLActiveInfo: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLBuffer: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLFramebuffer: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLProgram: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, WebGLSampler: true, WebGLShader: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTexture: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, WebGLVertexArrayObjectOES: true, WebGL2RenderingContextBase: true, ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLButtonElement: true, HTMLCanvasElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLInputElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParagraphElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTextAreaElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, AccessibleNodeList: true, HTMLAnchorElement: true, HTMLAreaElement: true, HTMLBaseElement: true, Blob: false, HTMLBodyElement: true, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSPerspective: true, CSSCharsetRule: true, CSSConditionRule: true, CSSFontFaceRule: true, CSSGroupingRule: true, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSPageRule: true, CSSRule: true, CSSStyleRule: true, CSSSupportsRule: true, CSSViewportRule: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSImageValue: true, CSSKeywordValue: true, CSSNumericValue: true, CSSPositionValue: true, CSSResourceValue: true, CSSUnitValue: true, CSSURLImageValue: true, CSSStyleValue: false, CSSMatrixComponent: true, CSSRotation: true, CSSScale: true, CSSSkew: true, CSSTranslation: true, CSSTransformComponent: false, CSSTransformValue: true, CSSUnparsedValue: true, DataTransferItemList: true, HTMLDivElement: true, XMLDocument: true, Document: false, DOMException: true, DOMImplementation: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMTokenList: true, MathMLElement: true, Element: false, ErrorEvent: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CompositionEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FocusEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, KeyboardEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MouseEvent: true, DragEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PointerEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TextEvent: true, TouchEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, UIEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, WheelEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, AbsoluteOrientationSensor: true, Accelerometer: true, AccessibleNode: true, AmbientLightSensor: true, Animation: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, BackgroundFetchRegistration: true, BatteryManager: true, BroadcastChannel: true, CanvasCaptureMediaStreamTrack: true, DedicatedWorkerGlobalScope: true, EventSource: true, FileReader: true, FontFaceSet: true, Gyroscope: true, XMLHttpRequest: true, XMLHttpRequestEventTarget: true, XMLHttpRequestUpload: true, LinearAccelerationSensor: true, Magnetometer: true, MediaDevices: true, MediaKeySession: true, MediaQueryList: true, MediaRecorder: true, MediaSource: true, MediaStream: true, MediaStreamTrack: true, MIDIAccess: true, MIDIInput: true, MIDIOutput: true, MIDIPort: true, NetworkInformation: true, Notification: true, OffscreenCanvas: true, OrientationSensor: true, PaymentRequest: true, Performance: true, PermissionStatus: true, PresentationAvailability: true, PresentationConnection: true, PresentationConnectionList: true, PresentationRequest: true, RelativeOrientationSensor: true, RemotePlayback: true, RTCDataChannel: true, DataChannel: true, RTCDTMFSender: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, ScreenOrientation: true, Sensor: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerGlobalScope: true, ServiceWorkerRegistration: true, SharedWorker: true, SharedWorkerGlobalScope: true, SpeechRecognition: true, webkitSpeechRecognition: true, SpeechSynthesis: true, SpeechSynthesisUtterance: true, VR: true, VRDevice: true, VRDisplay: true, VRSession: true, VisualViewport: true, WebSocket: true, WorkerGlobalScope: true, WorkerPerformance: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, Clipboard: true, MojoInterfaceInterceptor: true, USB: true, IDBDatabase: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: true, IDBTransaction: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioBufferSourceNode: true, AudioDestinationNode: true, AudioNode: true, AudioScheduledSourceNode: true, AudioWorkletNode: true, BiquadFilterNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConstantSourceNode: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, OscillatorNode: true, Oscillator: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, EventTarget: false, File: true, FileList: true, FileWriter: true, HTMLFormElement: true, Gamepad: true, History: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, HTMLDocument: true, ImageData: true, Location: true, MediaList: true, MessageEvent: true, MessagePort: true, MIDIInputMap: true, MIDIOutputMap: true, MimeType: true, MimeTypeArray: true, DocumentFragment: true, ShadowRoot: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, Plugin: true, PluginArray: true, RTCStatsReport: true, HTMLSelectElement: true, SharedArrayBuffer: true, SourceBuffer: true, SourceBufferList: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognitionResult: true, Storage: true, CSSStyleSheet: true, StyleSheet: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, TextTrack: true, TextTrackCue: true, VTTCue: true, TextTrackCueList: true, TextTrackList: true, TimeRanges: true, Touch: true, TouchList: true, TrackDefaultList: true, URL: true, VideoTrackList: true, Window: true, DOMWindow: true, Worker: true, Attr: true, CSSRuleList: true, ClientRect: true, DOMRect: true, GamepadList: true, NamedNodeMap: true, MozNamedAttrMap: true, SpeechRecognitionResultList: true, StyleSheetList: true, SVGLength: true, SVGLengthList: true, SVGNumber: true, SVGNumberList: true, SVGPointList: true, SVGScriptElement: true, SVGStringList: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGElement: false, SVGTransform: true, SVGTransformList: true, AudioBuffer: true, AudioParamMap: true, AudioTrackList: true, AudioContext: true, webkitAudioContext: true, BaseAudioContext: false, OfflineAudioContext: true});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    A._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    A._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    A._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    A._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$3$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$3$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$2$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  Function.prototype.call$2$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$2$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();

//# sourceMappingURL=test_runner_js2wasm.dart.js.map
