<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-11-13" filename="channel.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="4" lines-valid="4" package="src" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'dart:async';</code>
        </line>
        <line number="2">
            <code/>
        </line>
        <line number="3">
            <code>import 'package:logger/web.dart';</code>
        </line>
        <line number="4">
            <code/>
        </line>
        <line number="5">
            <code>import '_impl/xplat/_channel.dart'</code>
        </line>
        <line number="6">
            <code>    if (dart.library.io) '_impl/native/_channel.dart'</code>
        </line>
        <line number="7">
            <code>    if (dart.library.html) '_impl/web/_channel.dart'</code>
        </line>
        <line number="8">
            <code>    if (dart.library.js_interop) '_impl/web/_channel.dart' as impl;</code>
        </line>
        <line number="9">
            <code>import 'exceptions/exception_manager.dart';</code>
        </line>
        <line number="10">
            <code>import 'tokens/_squadron_cancelation_token.dart';</code>
        </line>
        <line number="11">
            <code>import 'typedefs.dart';</code>
        </line>
        <line number="12">
            <code>import 'worker/worker_request.dart';</code>
        </line>
        <line number="13">
            <code>import 'worker/worker_response.dart';</code>
        </line>
        <line number="14">
            <code/>
        </line>
        <line number="15">
            <code>/// A [Channel] supports communication from a client to a platform worker. It</code>
        </line>
        <line number="16">
            <code>/// is used to send a [WorkerRequest] to a platform worker.</code>
        </line>
        <line number="17">
            <code>abstract interface class Channel {</code>
        </line>
        <line number="18">
            <code>  /// The [ExceptionManager] attached to this channel.</code>
        </line>
        <line number="19">
            <code>  ExceptionManager get exceptionManager;</code>
        </line>
        <line number="20">
            <code/>
        </line>
        <line number="21">
            <code>  /// The [Logger] attached to this channel.</code>
        </line>
        <line number="22">
            <code>  Logger? get logger;</code>
        </line>
        <line number="23">
            <code/>
        </line>
        <line number="24">
            <code>  /// [Channel] serialization. Returns an opaque object that can be transfered</code>
        </line>
        <line number="25">
            <code>  /// from the client to the worker.</code>
        </line>
        <line number="26">
            <code>  PlatformChannel serialize();</code>
        </line>
        <line number="27">
            <code/>
        </line>
        <line number="28">
            <code>  /// [Channel] sharing. Returns a [Channel] object that can be provided to</code>
        </line>
        <line number="29">
            <code>  /// enable another worker to call the channel's worker.</code>
        </line>
        <line number="30">
            <code>  Channel share();</code>
        </line>
        <line number="31">
            <code/>
        </line>
        <line number="32">
            <code>  /// Sends a termination [WorkerRequest] to the worker. The [Channel] should</code>
        </line>
        <line number="33">
            <code>  /// release any resource related to the worker and should not be used after</code>
        </line>
        <line number="34">
            <code>  /// this method has been called.</code>
        </line>
        <line number="35">
            <code>  FutureOr&lt;void&gt; close();</code>
        </line>
        <line number="36">
            <code/>
        </line>
        <line number="37">
            <code>  /// Sends a close stream [WorkerRequest] to the worker.</code>
        </line>
        <line number="38">
            <code>  FutureOr&lt;void&gt; cancelStream(int streamId);</code>
        </line>
        <line number="39">
            <code/>
        </line>
        <line number="40">
            <code>  /// Sends a cancel token [WorkerRequest] to the worker.</code>
        </line>
        <line number="41">
            <code>  FutureOr&lt;void&gt; cancelToken(SquadronCancelationToken? token);</code>
        </line>
        <line number="42">
            <code/>
        </line>
        <line number="43">
            <code>  /// Creates a [WorkerRequest] and sends it to the worker. This method expects</code>
        </line>
        <line number="44">
            <code>  /// a single value from the worker.</code>
        </line>
        <line number="45">
            <code>  Future&lt;dynamic&gt; sendRequest(int command, List args,</code>
        </line>
        <line number="46">
            <code>      {SquadronCancelationToken? token,</code>
        </line>
        <line number="47">
            <code>      bool inspectRequest = false,</code>
        </line>
        <line number="48">
            <code>      bool inspectResponse = false});</code>
        </line>
        <line number="49">
            <code/>
        </line>
        <line number="50">
            <code>  /// Creates a [WorkerRequest] and sends it to the worker. This method expects</code>
        </line>
        <line number="51">
            <code>  /// a stream of values from the worker. The worker must send a</code>
        </line>
        <line number="52">
            <code>  /// [WorkerResponse.closeStream] message to close the [Stream].</code>
        </line>
        <line number="53">
            <code>  Stream&lt;dynamic&gt; sendStreamingRequest(int command, List args,</code>
        </line>
        <line number="54">
            <code>      {SquadronCancelationToken? token,</code>
        </line>
        <line number="55">
            <code>      bool inspectRequest = false,</code>
        </line>
        <line number="56">
            <code>      bool inspectResponse = false});</code>
        </line>
        <line number="57">
            <code/>
        </line>
        <line number="58">
            <code>  /// Starts a worker using the [entryPoint] and sends a start [WorkerRequest]</code>
        </line>
        <line number="59">
            <code>  /// with [startArguments]. The future must not complete before the worker is</code>
        </line>
        <line number="60">
            <code>  /// ready to serve requests.</code>
        </line>
        <line hits="10" number="61">
            <code>  static Future&lt;Channel&gt; open(ExceptionManager exceptionManager, Logger? logger,</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="62">
            <code>          EntryPoint entryPoint, List startArguments,</code>
        </line>
        <line number="63">
            <code>          [PlatformThreadHook? hook]) =&gt;</code>
        </line>
        <line hits="20" number="64">
            <code>      impl.openChannel(</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="65">
            <code>          entryPoint, exceptionManager, logger, startArguments, hook);</code>
        </line>
        <line number="66">
            <code/>
        </line>
        <line number="67">
            <code>  /// Deserializes a [Channel] from an opaque [channelInfo].</code>
        </line>
        <line hits="3" number="68">
            <code>  static Channel? deserialize(PlatformChannel? channelInfo,</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="69">
            <code>          [Logger? logger, ExceptionManager? exceptionManager]) =&gt;</code>
        </line>
        <line hits="3" number="70">
            <code>      impl.deserialize(channelInfo, logger, exceptionManager);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="71">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
