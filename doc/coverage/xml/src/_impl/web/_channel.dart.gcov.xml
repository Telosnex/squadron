<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-09-21" filename="_channel.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.85714287" lines-covered="66" lines-valid="77" package="src/_impl/web" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'dart:async';</code>
        </line>
        <line number="2">
            <code>import 'dart:js_interop';</code>
        </line>
        <line number="3">
            <code/>
        </line>
        <line number="4">
            <code>import 'package:logger/logger.dart';</code>
        </line>
        <line number="5">
            <code>import 'package:web/web.dart' as web;</code>
        </line>
        <line number="6">
            <code/>
        </line>
        <line number="7">
            <code>import '../../channel.dart';</code>
        </line>
        <line number="8">
            <code>import '../../exceptions/exception_manager.dart';</code>
        </line>
        <line number="9">
            <code>import '../../exceptions/squadron_error.dart';</code>
        </line>
        <line number="10">
            <code>import '../../exceptions/squadron_exception.dart';</code>
        </line>
        <line number="11">
            <code>import '../../exceptions/worker_exception.dart';</code>
        </line>
        <line number="12">
            <code>import '../../tokens/_squadron_cancelation_token.dart';</code>
        </line>
        <line number="13">
            <code>import '../../typedefs.dart';</code>
        </line>
        <line number="14">
            <code>import '../../worker/worker_channel.dart';</code>
        </line>
        <line number="15">
            <code>import '../../worker/worker_request.dart';</code>
        </line>
        <line number="16">
            <code>import '../../worker/worker_response.dart';</code>
        </line>
        <line number="17">
            <code>import '../xplat/_disconnected_channel.dart';</code>
        </line>
        <line number="18">
            <code>import '../xplat/_result_stream.dart';</code>
        </line>
        <line number="19">
            <code>import '../xplat/_transferables.dart';</code>
        </line>
        <line number="20">
            <code>import '_entry_point_uri.dart';</code>
        </line>
        <line number="21">
            <code>import '_event_buffer.dart';</code>
        </line>
        <line number="22">
            <code>import '_patch.dart';</code>
        </line>
        <line number="23">
            <code>import '_uri_checker.dart';</code>
        </line>
        <line number="24">
            <code/>
        </line>
        <line number="25">
            <code>part '_channel_impl.dart';</code>
        </line>
        <line number="26">
            <code/>
        </line>
        <line number="27">
            <code>/// Stub implementations</code>
        </line>
        <line number="28">
            <code/>
        </line>
        <line number="29">
            <code>/// Starts a [web.Worker] using the [entryPoint] and sends a start</code>
        </line>
        <line number="30">
            <code>/// [WorkerRequest] with [startArguments]. The future completes after the</code>
        </line>
        <line number="31">
            <code>/// [web.Worker]'s main program has provided the [web.MessagePort] via</code>
        </line>
        <line number="32">
            <code>/// [WorkerChannel.connect].</code>
        </line>
        <line hits="10" number="33">
            <code>Future&lt;Channel&gt; openChannel(</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="34">
            <code>  EntryPoint entryPoint,</code>
        </line>
        <line number="35">
            <code>  ExceptionManager exceptionManager,</code>
        </line>
        <line number="36">
            <code>  Logger? logger,</code>
        </line>
        <line number="37">
            <code>  List startArguments, [</code>
        </line>
        <line number="38">
            <code>  PlatformThreadHook? hook,</code>
        </line>
        <line number="39">
            <code>]) async {</code>
        </line>
        <line hits="10" number="40">
            <code>  final completer = Completer&lt;Channel&gt;();</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="41">
            <code>  final ready = Completer&lt;bool&gt;();</code>
        </line>
        <line number="42">
            <code/>
        </line>
        <line number="43">
            <code>  final com = web.MessageChannel();</code>
        </line>
        <line hits="10" number="44">
            <code>  final webEntryPoint = EntryPointUri.from(entryPoint);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="45">
            <code>  late web.Worker worker;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="46">
            <code/>
        </line>
        <line hits="3" number="47">
            <code>  void fail(SquadronException ex) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="48">
            <code>    if (!ready.isCompleted) ready.completeError(ex);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="49">
            <code>    if (!completer.isCompleted) completer.completeError(ex);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="50">
            <code>  }</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="51">
            <code/>
        </line>
        <line hits="9" number="52">
            <code>  void success(Channel channel) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="53">
            <code>    if (!ready.isCompleted) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="54">
            <code>      throw SquadronErrorExt.create('Invalid state: worker is not ready');</code>
        </line>
        <line number="55">
            <code>    }</code>
        </line>
        <line hits="9" number="56">
            <code>    if (!completer.isCompleted) completer.complete(channel);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="57">
            <code>  }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="58">
            <code/>
        </line>
        <line hits="3" number="59">
            <code>  try {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="60">
            <code>    worker = web.Worker(webEntryPoint.uri.toJS);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="61">
            <code/>
        </line>
        <line hits="2" number="62">
            <code>    void $errorHandler(web.ErrorEvent? e) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="63">
            <code>      final err = getError(e), error = SquadronErrorExt.create(err.toString());</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="64">
            <code>      logger?.e(() =&gt; 'Connection to Web Worker failed: $error');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="65">
            <code>      fail(error);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="66">
            <code/>
        </line>
        <line hits="2" number="67">
            <code>      UriChecker.exists(entryPoint).then((found) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="68">
            <code>        try {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="69">
            <code>          final msg = (e != null)</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="70">
            <code>              ? '$entryPoint =&gt; ${err.runtimeType} $err [${e.filename}(${e.lineno})]'</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="71">
            <code>              : '$entryPoint =&gt; ${err.runtimeType} $err';</code>
        </line>
        <line hits="1" number="72">
            <code>          logger?.e(() =&gt; 'Unhandled error from Web Worker: $msg.');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="73">
            <code>          if (!found) {</code>
        </line>
        <line hits="2" number="74">
            <code>            logger?.e(() =&gt; 'It seems no Web Worker lives at $entryPoint.');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="75">
            <code>          }</code>
        </line>
        <line number="76">
            <code>        } catch (_) {</code>
        </line>
        <line number="77">
            <code>          // ignore</code>
        </line>
        <line number="78">
            <code>        }</code>
        </line>
        <line hits="2" number="79">
            <code>      });</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="80">
            <code>    }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="81">
            <code/>
        </line>
        <line hits="10" number="82">
            <code>    worker.onerror = $errorHandler.toJS;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="83">
            <code>    worker.onmessageerror = $errorHandler.toJS;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="84">
            <code/>
        </line>
        <line number="85">
            <code>    final disconnected = DisconnectedChannel(exceptionManager, logger);</code>
        </line>
        <line number="86">
            <code/>
        </line>
        <line hits="10" number="87">
            <code>    worker.onmessage = (web.MessageEvent? e) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="88">
            <code>      try {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="89">
            <code>        final response = WorkerResponseExt.from(getMessageEventData(e) as List);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="90">
            <code>        if (!response.unwrapInPlace(disconnected)) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="91">
            <code>          return;</code>
        </line>
        <line number="92">
            <code>        }</code>
        </line>
        <line number="93">
            <code/>
        </line>
        <line number="94">
            <code>        final error = response.error;</code>
        </line>
        <line hits="10" number="95">
            <code>        if (error != null) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="96">
            <code>          logger?.e(() =&gt; 'Connection to Web Worker failed: $error');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="97">
            <code>          fail(error);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="98">
            <code>        } else if (!ready.isCompleted) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="99">
            <code>          logger?.t('Web Worker is ready');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="100">
            <code>          ready.complete(response.result);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="101">
            <code>        }</code>
        </line>
        <line hits="0" number="102">
            <code>      } catch (ex, st) {</code>
        </line>
        <line hits="0" number="103">
            <code>        return fail(SquadronException.from(ex, st));</code>
        </line>
        <line number="104">
            <code>      }</code>
        </line>
        <line hits="10" number="105">
            <code>    }.toJS;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="106">
            <code/>
        </line>
        <line hits="10" number="107">
            <code>    final res = await ready.future;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="108">
            <code>    if (!res) {</code>
        </line>
        <line hits="0" number="109">
            <code>      throw SquadronErrorExt.create('Web Worker is not ready');</code>
        </line>
        <line number="110">
            <code>    }</code>
        </line>
        <line number="111">
            <code/>
        </line>
        <line number="112">
            <code>    final startRequest = WorkerRequest.start(com.port2, startArguments);</code>
        </line>
        <line number="113">
            <code/>
        </line>
        <line hits="9" number="114">
            <code>    com.port1.onmessage = (web.MessageEvent e) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="115">
            <code>      final response = WorkerResponseExt.from(getMessageEventData(e) as List);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="116">
            <code>      if (!response.unwrapInPlace(disconnected)) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="117">
            <code>        return;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="118">
            <code>      }</code>
        </line>
        <line number="119">
            <code/>
        </line>
        <line number="120">
            <code>      final error = response.error;</code>
        </line>
        <line hits="9" number="121">
            <code>      if (error != null) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="122">
            <code>        logger?.e(() =&gt; 'Connection to Web Worker failed: $error');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="123">
            <code>        fail(error);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="124">
            <code>      } else if (!completer.isCompleted) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="125">
            <code>        logger?.t('Connected to Web Worker');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="126">
            <code>        success(_WebChannel._(response.result, logger, exceptionManager));</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="127">
            <code>      } else {</code>
        </line>
        <line hits="2" number="128">
            <code>        logger?.d(() =&gt; 'Unexpected response: $response');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="129">
            <code>      }</code>
        </line>
        <line hits="9" number="130">
            <code>    }.toJS;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="131">
            <code/>
        </line>
        <line hits="0" number="132">
            <code>    try {</code>
        </line>
        <line hits="9" number="133">
            <code>      final data = startRequest.wrapInPlace();</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="134">
            <code>      final msg = data.jsify();</code>
        </line>
        <line hits="9" number="135">
            <code>      final transfer = Transferables.get(data);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="136">
            <code>      if (transfer == null || transfer.isEmpty) {</code>
        </line>
        <line number="137">
            <code>        worker.postMessage(msg);</code>
        </line>
        <line number="138">
            <code>      } else {</code>
        </line>
        <line hits="9" number="139">
            <code>        final jsTransfer = transfer.jsify() as JSArray;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="140">
            <code>        worker.postMessage(msg, jsTransfer);</code>
        </line>
        <line number="141">
            <code>      }</code>
        </line>
        <line hits="0" number="142">
            <code>    } catch (ex, st) {</code>
        </line>
        <line hits="2" number="143">
            <code>      logger?.e(() =&gt; 'Failed to post connection request $startRequest: $ex');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="144">
            <code>      throw SquadronErrorExt.create(</code>
        </line>
        <line hits="0" number="145">
            <code>          'Failed to post connection request: $ex', st);</code>
        </line>
        <line number="146">
            <code>    }</code>
        </line>
        <line number="147">
            <code/>
        </line>
        <line hits="9" number="148">
            <code>    final channel = await completer.future;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="149">
            <code>    await hook?.call(worker);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="150">
            <code/>
        </line>
        <line hits="2" number="151">
            <code>    logger?.t('Created Web Worker for $entryPoint');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="152">
            <code>    return channel;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="153">
            <code>  } catch (ex, st) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="154">
            <code>    ready.future.ignore();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="155">
            <code>    completer.future.ignore();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="156">
            <code>    logger?.t('Failed to create Web Worker for $entryPoint');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="157">
            <code>    com.port1.close();</code>
        </line>
        <line number="158">
            <code>    com.port2.close();</code>
        </line>
        <line number="159">
            <code>    worker.terminate();</code>
        </line>
        <line hits="3" number="160">
            <code>    throw SquadronException.from(ex, st);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="161">
            <code>  } finally {</code>
        </line>
        <line number="162">
            <code>    webEntryPoint.release();</code>
        </line>
        <line number="163">
            <code>  }</code>
        </line>
        <line hits="10" number="164">
            <code>}</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="165">
            <code/>
        </line>
        <line number="166">
            <code>/// Creates a [_WebChannel] from a [web.MessagePort].</code>
        </line>
        <line number="167">
            <code>Channel? deserialize(PlatformChannel? channelInfo,</code>
        </line>
        <line number="168">
            <code>        [Logger? logger, ExceptionManager? exceptionManager]) =&gt;</code>
        </line>
        <line number="169">
            <code>    (channelInfo == null)</code>
        </line>
        <line number="170">
            <code>        ? null</code>
        </line>
        <line number="171">
            <code>        : _WebChannel._(</code>
        </line>
        <line number="172">
            <code>            channelInfo,</code>
        </line>
        <line number="173">
            <code>            logger,</code>
        </line>
        <line number="174">
            <code>            exceptionManager ?? ExceptionManager(),</code>
        </line>
        <line number="175">
            <code>          );</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../../"/>
    <base href="../../../"/>
</coverage>
