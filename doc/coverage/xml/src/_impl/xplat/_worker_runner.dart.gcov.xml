<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-12-05" filename="_worker_runner.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.83536583" lines-covered="137" lines-valid="164" package="src/_impl/xplat" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'dart:async';</code>
        </line>
        <line number="2">
            <code/>
        </line>
        <line number="3">
            <code>import 'package:logger/web.dart';</code>
        </line>
        <line number="4">
            <code/>
        </line>
        <line number="5">
            <code>import '../../exceptions/squadron_error.dart';</code>
        </line>
        <line number="6">
            <code>import '../../exceptions/squadron_exception.dart';</code>
        </line>
        <line number="7">
            <code>import '../../local_worker/local_worker.dart';</code>
        </line>
        <line number="8">
            <code>import '../../tokens/_cancelation_token_ref.dart';</code>
        </line>
        <line number="9">
            <code>import '../../tokens/_squadron_cancelation_token.dart';</code>
        </line>
        <line number="10">
            <code>import '../../typedefs.dart';</code>
        </line>
        <line number="11">
            <code>import '../../worker/worker_channel.dart';</code>
        </line>
        <line number="12">
            <code>import '../../worker/worker_request.dart';</code>
        </line>
        <line number="13">
            <code>import '../../worker_service.dart';</code>
        </line>
        <line number="14">
            <code>import '_internal_logger.dart';</code>
        </line>
        <line number="15">
            <code/>
        </line>
        <line number="16">
            <code>class WorkerRunner {</code>
        </line>
        <line number="17">
            <code>  /// Constructs a new worker runner.</code>
        </line>
        <line hits="10" number="18">
            <code>  WorkerRunner(this._terminate);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="19">
            <code/>
        </line>
        <line number="20">
            <code>  void Function(WorkerRunner) _terminate;</code>
        </line>
        <line number="21">
            <code/>
        </line>
        <line number="22">
            <code>  final internalLogger = InternalLogger();</code>
        </line>
        <line number="23">
            <code/>
        </line>
        <line number="24">
            <code>  WorkerService? _service;</code>
        </line>
        <line number="25">
            <code/>
        </line>
        <line hits="1" number="26">
            <code>  final _cancelTokens = &lt;String, CancelationTokenReference&gt;{};</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="27">
            <code/>
        </line>
        <line number="28">
            <code>  bool _terminationRequested = false;</code>
        </line>
        <line number="29">
            <code>  int _executing = 0;</code>
        </line>
        <line number="30">
            <code/>
        </line>
        <line hits="1" number="31">
            <code>  final _streamCancelers = &lt;int, SquadronCallback&gt;{};</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="32">
            <code>  int _streamId = 0;</code>
        </line>
        <line number="33">
            <code/>
        </line>
        <line number="34">
            <code>  void Function(OutputEvent)? _logForwarder;</code>
        </line>
        <line number="35">
            <code/>
        </line>
        <line number="36">
            <code>  /// Constructs a new worker runner for a [localWorker].</code>
        </line>
        <line hits="2" number="37">
            <code>  factory WorkerRunner.use(LocalWorker localWorker) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="38">
            <code>    final runner = WorkerRunner((r) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="39">
            <code>      r.internalLogger.t('Terminating local Worker');</code>
        </line>
        <line hits="0" number="40">
            <code>      r._service = null;</code>
        </line>
        <line hits="0" number="41">
            <code>    });</code>
        </line>
        <line hits="2" number="42">
            <code>    runner._service = localWorker;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="43">
            <code>    return runner;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="44">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="45">
            <code/>
        </line>
        <line number="46">
            <code>  /// Called by the platform worker upon startup, in response to a start</code>
        </line>
        <line number="47">
            <code>  /// [WorkerRequest]. [channelInfo] is an opaque object sent back from the</code>
        </line>
        <line number="48">
            <code>  /// platform worker to the Squadron [Worker] and used to communicate with the</code>
        </line>
        <line number="49">
            <code>  /// platform worker. Typically, [channelInfo] would be a [SendPort] (native)</code>
        </line>
        <line number="50">
            <code>  /// or a [MessagePort] (browser). [initializer] is called to build the</code>
        </line>
        <line number="51">
            <code>  /// [WorkerService] associated to the worker. The runner's [_service] map</code>
        </line>
        <line number="52">
            <code>  /// will be set with operations from the service.</code>
        </line>
        <line hits="9" number="53">
            <code>  Future&lt;void&gt; connect(WorkerRequest? startRequest, PlatformChannel channelInfo,</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="54">
            <code>      WorkerInitializer initializer) async {</code>
        </line>
        <line number="55">
            <code>    WorkerChannel? channel;</code>
        </line>
        <line number="56">
            <code>    try {</code>
        </line>
        <line hits="18" number="57">
            <code>      startRequest?.unwrapInPlace(internalLogger);</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="58">
            <code>      channel = startRequest?.channel;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="59">
            <code/>
        </line>
        <line number="60">
            <code>      if (startRequest == null) {</code>
        </line>
        <line hits="2" number="61">
            <code>        throw SquadronErrorExt.create('Missing connection request');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="62">
            <code>      } else if (channel == null) {</code>
        </line>
        <line hits="0" number="63">
            <code>        throw SquadronErrorExt.create('Missing client for connection request');</code>
        </line>
        <line number="64">
            <code>      }</code>
        </line>
        <line number="65">
            <code/>
        </line>
        <line hits="9" number="66">
            <code>      if (_logForwarder == null) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="67">
            <code>        final logger = channel.log;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="36" number="68">
            <code>        _logForwarder = (event) =&gt; logger(event.origin);</code>
            <hit count="36" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18" number="69">
            <code>        Logger.addOutputListener(_logForwarder!);</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line number="70">
            <code>      }</code>
        </line>
        <line number="71">
            <code/>
        </line>
        <line hits="9" number="72">
            <code>      if (!startRequest.isConnection) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="73">
            <code>        throw SquadronErrorExt.create('Connection request expected');</code>
        </line>
        <line hits="9" number="74">
            <code>      } else if (_service != null) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="75">
            <code>        throw SquadronErrorExt.create('Already connected');</code>
        </line>
        <line number="76">
            <code>      }</code>
        </line>
        <line number="77">
            <code/>
        </line>
        <line hits="18" number="78">
            <code>      _service = await initializer(startRequest);</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line number="79">
            <code/>
        </line>
        <line hits="63" number="80">
            <code>      if (_service!.operations.keys.where((k) =&gt; k &lt;= 0).isNotEmpty) {</code>
            <hit count="63" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="81">
            <code>        throw SquadronErrorExt.create(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="82">
            <code>          'Invalid command identifier in service operations map; command ids must be &gt; 0',</code>
        </line>
        <line number="83">
            <code>        );</code>
        </line>
        <line number="84">
            <code>      }</code>
        </line>
        <line number="85">
            <code/>
        </line>
        <line hits="9" number="86">
            <code>      channel.connect(channelInfo);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="87">
            <code/>
        </line>
        <line hits="18" number="88">
            <code>      if (_service is ServiceInstaller) {</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="89">
            <code>        _installCompleter = Completer()</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="90">
            <code>          ..complete((() async {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="91">
            <code>            try {</code>
        </line>
        <line hits="2" number="92">
            <code>              await (_service as ServiceInstaller).install();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="93">
            <code>            } catch (ex, st) {</code>
        </line>
        <line hits="4" number="94">
            <code>              internalLogger.e(() =&gt; 'Service installation failed: $ex');</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="95">
            <code>              channel?.error(ex, st);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="96">
            <code>              channel?.closeStream();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="97">
            <code>              _installResult = SquadronException.from(ex, st);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="98">
            <code>            }</code>
        </line>
        <line hits="1" number="99">
            <code>          })());</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="100">
            <code>      }</code>
        </line>
        <line number="101">
            <code>    } catch (ex, st) {</code>
        </line>
        <line hits="8" number="102">
            <code>      internalLogger.e(() =&gt; 'Connection failed: $ex');</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="103">
            <code>      channel?.error(ex, st);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="104">
            <code>      _exit();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="105">
            <code>    }</code>
        </line>
        <line number="106">
            <code>  }</code>
        </line>
        <line number="107">
            <code/>
        </line>
        <line number="108">
            <code>  Completer&lt;void&gt;? _installCompleter;</code>
        </line>
        <line number="109">
            <code>  SquadronException? _installResult;</code>
        </line>
        <line number="110">
            <code/>
        </line>
        <line number="111">
            <code>  /// [WorkerRequest] handler dispatching commands according to the</code>
        </line>
        <line number="112">
            <code>  /// [_service] map. Make sure this method doesn't throw.</code>
        </line>
        <line hits="10" number="113">
            <code>  void processRequest(WorkerRequest request) async {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="114">
            <code>    WorkerChannel? channel;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="115">
            <code>    try {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="19" number="116">
            <code>      request.unwrapInPlace(internalLogger);</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="117">
            <code>      channel = request.channel;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="118">
            <code/>
        </line>
        <line hits="9" number="119">
            <code>      if (request.isTermination) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="120">
            <code>        // terminate the worker</code>
        </line>
        <line hits="9" number="121">
            <code>        return _shutdown();</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="122">
            <code>      }</code>
        </line>
        <line number="123">
            <code/>
        </line>
        <line number="124">
            <code>      // check installation result if necessary</code>
        </line>
        <line hits="10" number="125">
            <code>      final pendingInstallation = _installCompleter?.future;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="126">
            <code>      if (pendingInstallation != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="127">
            <code>        await pendingInstallation;</code>
        </line>
        <line hits="1" number="128">
            <code>        _installCompleter = null;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="129">
            <code>      }</code>
        </line>
        <line number="130">
            <code/>
        </line>
        <line hits="10" number="131">
            <code>      if (_installResult != null) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="132">
            <code>        // service installation failed</code>
        </line>
        <line hits="1" number="133">
            <code>        throw _installResult!;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="134">
            <code>      }</code>
        </line>
        <line number="135">
            <code/>
        </line>
        <line number="136">
            <code>      // ==== these requests do not send a response ====</code>
        </line>
        <line number="137">
            <code/>
        </line>
        <line hits="9" number="138">
            <code>      if (request.isTokenCancelation) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="139">
            <code>        // cancel a token</code>
        </line>
        <line hits="2" number="140">
            <code>        final token = request.cancelToken!;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="141">
            <code>        return _getTokenRef(token).update(token);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="142">
            <code>      } else if (request.isStreamCancelation) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="143">
            <code>        // cancel a stream</code>
        </line>
        <line hits="9" number="144">
            <code>        final canceler = _streamCancelers[request.streamId];</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="145">
            <code>        return canceler?.call();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="146">
            <code>      }</code>
        </line>
        <line number="147">
            <code/>
        </line>
        <line number="148">
            <code>      // make sure the worker is connected</code>
        </line>
        <line number="149">
            <code/>
        </line>
        <line hits="9" number="150">
            <code>      if (request.isConnection) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="151">
            <code>        // connection requests are handled by connect().</code>
        </line>
        <line hits="0" number="152">
            <code>        throw SquadronErrorExt.create(</code>
        </line>
        <line hits="0" number="153">
            <code>            'Unexpected connection request: $request');</code>
        </line>
        <line hits="10" number="154">
            <code>      } else if (_service == null) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="155">
            <code>        // commands are not available yet (maybe connect() wasn't called or awaited)</code>
        </line>
        <line hits="0" number="156">
            <code>        throw SquadronErrorExt.create('Worker service is not ready');</code>
        </line>
        <line number="157">
            <code>      }</code>
        </line>
        <line number="158">
            <code/>
        </line>
        <line number="159">
            <code>      // ==== other requests require a client to send the response ====</code>
        </line>
        <line number="160">
            <code/>
        </line>
        <line number="161">
            <code>      if (channel == null) {</code>
        </line>
        <line hits="0" number="162">
            <code>        throw SquadronErrorExt.create('Missing client for request: $request');</code>
        </line>
        <line number="163">
            <code>      }</code>
        </line>
        <line number="164">
            <code/>
        </line>
        <line hits="9" number="165">
            <code>      final token = request.cancelToken;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="166">
            <code>      token?.throwIfCanceled();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="167">
            <code/>
        </line>
        <line number="168">
            <code>      // start monitoring execution</code>
        </line>
        <line hits="9" number="169">
            <code>      final tokenRef = _begin(request);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="170">
            <code>      try {</code>
        </line>
        <line number="171">
            <code>        // find the operation matching the request command</code>
        </line>
        <line hits="37" number="172">
            <code>        final cmd = request.command, op = _service?.operations[cmd];</code>
            <hit count="37" name="&lt;unnamed&gt;"/>
        </line>
        <line number="173">
            <code>        if (op == null) {</code>
        </line>
        <line hits="2" number="174">
            <code>          throw SquadronErrorExt.create('Unknown command: $cmd');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="175">
            <code>        }</code>
        </line>
        <line number="176">
            <code/>
        </line>
        <line number="177">
            <code>        // process</code>
        </line>
        <line hits="10" number="178">
            <code>        var result = op(request);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="179">
            <code>        if (result is Future) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="180">
            <code>          result = await result;</code>
        </line>
        <line number="181">
            <code>        }</code>
        </line>
        <line number="182">
            <code/>
        </line>
        <line hits="10" number="183">
            <code>        final reply = request.reply!;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="16" number="184">
            <code>        if (result is Stream &amp;&amp; channel.canStream(result)) {</code>
            <hit count="16" name="&lt;unnamed&gt;"/>
        </line>
        <line number="185">
            <code>          // result is a stream: forward data to the client</code>
        </line>
        <line hits="6" number="186">
            <code>          final replyWithError = channel.error;</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="187">
            <code>          void postError(Object exception, [StackTrace? stackTrace]) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="188">
            <code>            replyWithError(exception, stackTrace, cmd);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="189">
            <code>          }</code>
        </line>
        <line number="190">
            <code/>
        </line>
        <line hits="6" number="191">
            <code>          void post(data) {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="192">
            <code>            try {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="193">
            <code>              reply(data);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="194">
            <code>            } catch (ex, st) {</code>
        </line>
        <line hits="0" number="195">
            <code>              postError(ex, st);</code>
        </line>
        <line number="196">
            <code>            }</code>
        </line>
        <line hits="1" number="197">
            <code>          }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="198">
            <code/>
        </line>
        <line hits="6" number="199">
            <code>          await _pipe(result, channel, post, postError, token);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="200">
            <code>        } else {</code>
        </line>
        <line number="201">
            <code>          // result is a value: send to the client</code>
        </line>
        <line hits="10" number="202">
            <code>          reply(result);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="203">
            <code>        }</code>
        </line>
        <line number="204">
            <code>      } finally {</code>
        </line>
        <line number="205">
            <code>        // stop monitoring execution</code>
        </line>
        <line hits="9" number="206">
            <code>        _done(tokenRef);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="207">
            <code>      }</code>
        </line>
        <line hits="1" number="208">
            <code>    } catch (ex, st) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="209">
            <code>      if (channel != null) {</code>
        </line>
        <line hits="6" number="210">
            <code>        channel.error(ex, st, request.command);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="211">
            <code>      } else {</code>
        </line>
        <line hits="3" number="212">
            <code>        internalLogger.e('Unhandled error: $ex');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="213">
            <code>      }</code>
        </line>
        <line number="214">
            <code>    }</code>
        </line>
        <line hits="1" number="215">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="216">
            <code/>
        </line>
        <line hits="10" number="217">
            <code>  CancelationTokenReference _getTokenRef(SquadronCancelationToken? token) =&gt;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="218">
            <code>      (token == null)</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="219">
            <code>          ? CancelationTokenReference.noToken</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="220">
            <code>          : _cancelTokens.putIfAbsent(</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="221">
            <code>              token.id, () =&gt; CancelationTokenReference(token.id));</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="222">
            <code/>
        </line>
        <line number="223">
            <code>  /// Starts monitoring execution of this [request]. If the request contains a</code>
        </line>
        <line number="224">
            <code>  /// cancelation token, it is overridden with a [CancelationTokenReference]</code>
        </line>
        <line number="225">
            <code>  /// and this reference is returned to the sender. Otherwise, returns</code>
        </line>
        <line number="226">
            <code>  /// [CancelationTokenReference.noToken].</code>
        </line>
        <line hits="9" number="227">
            <code>  CancelationTokenReference _begin(WorkerRequest request) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18" number="228">
            <code>    _executing++;</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="19" number="229">
            <code>    final token = _getTokenRef(request.cancelToken);</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="230">
            <code>    token.usedBy(request);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="231">
            <code>    return token;</code>
        </line>
        <line number="232">
            <code>  }</code>
        </line>
        <line number="233">
            <code/>
        </line>
        <line number="234">
            <code>  /// Stops monitoring execution and releases the [tokenRef].</code>
        </line>
        <line hits="9" number="235">
            <code>  void _done(CancelationTokenReference tokenRef) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="236">
            <code>    tokenRef.release();</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18" number="237">
            <code>    if (tokenRef.refCount == 0) {</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="238">
            <code>      _cancelTokens.remove(tokenRef.id);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="239">
            <code>    }</code>
        </line>
        <line hits="18" number="240">
            <code>    _executing--;</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="14" number="241">
            <code>    if (_terminationRequested &amp;&amp; _executing == 0) {</code>
            <hit count="14" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="242">
            <code>      _unmount();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="243">
            <code>    }</code>
        </line>
        <line number="244">
            <code>  }</code>
        </line>
        <line number="245">
            <code/>
        </line>
        <line number="246">
            <code>  /// Forwards stream events to client.</code>
        </line>
        <line hits="6" number="247">
            <code>  Future&lt;void&gt; _pipe(</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="248">
            <code>    Stream&lt;dynamic&gt; stream,</code>
        </line>
        <line number="249">
            <code>    WorkerChannel channel,</code>
        </line>
        <line number="250">
            <code>    void Function(dynamic) post,</code>
        </line>
        <line number="251">
            <code>    void Function(Object exception, [StackTrace? stackTrace]) postError,</code>
        </line>
        <line number="252">
            <code>    SquadronCancelationToken? token,</code>
        </line>
        <line number="253">
            <code>  ) {</code>
        </line>
        <line hits="1" number="254">
            <code>    late final StreamSubscription subscription;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5" number="255">
            <code>    final done = Completer();</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line number="256">
            <code/>
        </line>
        <line hits="1" number="257">
            <code>    late final int streamId;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="258">
            <code/>
        </line>
        <line number="259">
            <code>    // send endOfStream to client</code>
        </line>
        <line hits="6" number="260">
            <code>    Future&lt;void&gt; onDone() async {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="261">
            <code>      _unregisterStreamCanceler(streamId);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="262">
            <code>      channel.closeStream();</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="263">
            <code>      await subscription.cancel();</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="264">
            <code>      done.complete();</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="265">
            <code>    }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="266">
            <code/>
        </line>
        <line number="267">
            <code>    final bool Function() checkToken;</code>
        </line>
        <line number="268">
            <code>    if (token == null) {</code>
        </line>
        <line hits="6" number="269">
            <code>      checkToken = () =&gt; true;</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="270">
            <code>    } else {</code>
        </line>
        <line hits="2" number="271">
            <code>      checkToken = () {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="272">
            <code>        final ex = token.exception;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="273">
            <code>        if (ex != null) {</code>
        </line>
        <line hits="0" number="274">
            <code>          postError(ex);</code>
        </line>
        <line hits="0" number="275">
            <code>          onDone();</code>
        </line>
        <line number="276">
            <code>        }</code>
        </line>
        <line hits="0" number="277">
            <code>        return (ex == null);</code>
        </line>
        <line hits="0" number="278">
            <code>      };</code>
        </line>
        <line number="279">
            <code>    }</code>
        </line>
        <line number="280">
            <code/>
        </line>
        <line number="281">
            <code>    // register stream canceler callback and connect stream with client</code>
        </line>
        <line hits="6" number="282">
            <code>    streamId = _registerStreamCanceler(onDone);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="283">
            <code>    post(streamId);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="284">
            <code>    if (checkToken()) {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="285">
            <code>      // start forwarding messages to the client</code>
        </line>
        <line hits="6" number="286">
            <code>      subscription = stream.listen(</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="287">
            <code>        (data) {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="288">
            <code>          if (checkToken()) post(data);</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="289">
            <code>        },</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="290">
            <code>        onError: (ex, st) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="291">
            <code>          if (checkToken()) postError(ex, st);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="292">
            <code>        },</code>
        </line>
        <line number="293">
            <code>        onDone: onDone,</code>
        </line>
        <line number="294">
            <code>        cancelOnError: false,</code>
        </line>
        <line number="295">
            <code>      );</code>
        </line>
        <line number="296">
            <code>    }</code>
        </line>
        <line number="297">
            <code/>
        </line>
        <line hits="6" number="298">
            <code>    return done.future;</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="299">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="300">
            <code/>
        </line>
        <line number="301">
            <code>  /// Assigns a stream ID to the stream canceler callback and registers the</code>
        </line>
        <line number="302">
            <code>  /// callback.</code>
        </line>
        <line hits="5" number="303">
            <code>  int _registerStreamCanceler(SquadronCallback canceler) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="304">
            <code>    final streamId = ++_streamId;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="305">
            <code>    _streamCancelers[streamId] = canceler;</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="306">
            <code>    return streamId;</code>
        </line>
        <line number="307">
            <code>  }</code>
        </line>
        <line number="308">
            <code/>
        </line>
        <line number="309">
            <code>  /// Unregisters the stream canceled callback associated to the [streamId].</code>
        </line>
        <line hits="5" number="310">
            <code>  void _unregisterStreamCanceler(int streamId) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="311">
            <code>    _streamCancelers.remove(streamId);</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="312">
            <code>  }</code>
        </line>
        <line number="313">
            <code/>
        </line>
        <line number="314">
            <code>  /// Terminates the worker if there is no pending execution. Otherwise, marks</code>
        </line>
        <line number="315">
            <code>  /// the worker as terminating and termination will be effective when all</code>
        </line>
        <line number="316">
            <code>  /// pending executions have completed.</code>
        </line>
        <line hits="9" number="317">
            <code>  void _shutdown() {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9" number="318">
            <code>    _terminationRequested = true;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18" number="319">
            <code>    if (_executing == 0) {</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8" number="320">
            <code>      _unmount();</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line number="321">
            <code>    }</code>
        </line>
        <line number="322">
            <code>  }</code>
        </line>
        <line number="323">
            <code/>
        </line>
        <line number="324">
            <code>  // should not throw</code>
        </line>
        <line hits="9" number="325">
            <code>  void _unmount() async {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="326">
            <code>    try {</code>
        </line>
        <line number="327">
            <code>      // uninstall the service if necessary</code>
        </line>
        <line hits="18" number="328">
            <code>      if (_service is ServiceInstaller) {</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line number="329">
            <code>        // check installation result</code>
        </line>
        <line hits="1" number="330">
            <code>        final pendingInstallation = _installCompleter?.future;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="331">
            <code>        if (pendingInstallation != null) {</code>
        </line>
        <line number="332">
            <code>          await pendingInstallation;</code>
        </line>
        <line hits="0" number="333">
            <code>          _installCompleter = null;</code>
        </line>
        <line number="334">
            <code>        }</code>
        </line>
        <line hits="1" number="335">
            <code>        if (_installResult == null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="336">
            <code>          // uninstall iif the service installed succesfuly</code>
        </line>
        <line hits="2" number="337">
            <code>          await (_service as ServiceInstaller).uninstall();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="338">
            <code>        }</code>
        </line>
        <line number="339">
            <code>      }</code>
        </line>
        <line number="340">
            <code>    } catch (ex) {</code>
        </line>
        <line hits="3" number="341">
            <code>      internalLogger.e('Service uninstallation failed with error: $ex');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="342">
            <code>    } finally {</code>
        </line>
        <line hits="9" number="343">
            <code>      _exit();</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line number="344">
            <code>    }</code>
        </line>
        <line hits="0" number="345">
            <code>  }</code>
        </line>
        <line number="346">
            <code/>
        </line>
        <line number="347">
            <code>  // should not throw</code>
        </line>
        <line hits="9" number="348">
            <code>  void _exit() {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="349">
            <code>    try {</code>
        </line>
        <line hits="18" number="350">
            <code>      _terminate(this);</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line number="351">
            <code>    } catch (ex) {</code>
        </line>
        <line hits="0" number="352">
            <code>      internalLogger.e('Worker termination failed with error: $ex');</code>
        </line>
        <line number="353">
            <code>    }</code>
        </line>
        <line hits="9" number="354">
            <code>    if (_logForwarder != null) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18" number="355">
            <code>      Logger.removeOutputListener(_logForwarder!);</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line number="356">
            <code>    }</code>
        </line>
        <line hits="0" number="357">
            <code>  }</code>
        </line>
        <line number="358">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../../"/>
    <base href="../../../"/>
</coverage>
