<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-01-26" filename="converter.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9677419" lines-covered="30" lines-valid="31" package="src/converters" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import '../exceptions/worker_exception.dart';</code>
        </line>
        <line number="2">
            <code/>
        </line>
        <line number="3">
            <code>typedef Cast&lt;T&gt; = T Function(dynamic);</code>
        </line>
        <line number="4">
            <code/>
        </line>
        <line number="5">
            <code>abstract base class Converter {</code>
        </line>
        <line hits="25" number="6">
            <code>  const Converter();</code>
            <hit count="25" name="&lt;unnamed&gt;"/>
        </line>
        <line number="7">
            <code/>
        </line>
        <line hits="10" number="8">
            <code>  static bool isIdentity&lt;T&gt;(Cast&lt;T&gt; cast) =&gt; (cast == identity&lt;T&gt;);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="9">
            <code/>
        </line>
        <line hits="10" number="10">
            <code>  static T identity&lt;T&gt;(dynamic x) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="11">
            <code>    if (x is T) return x;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="12">
            <code>    throw WorkerException('TypeError: ${x.runtimeType} is not a subtype of $T');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="13">
            <code>  }</code>
        </line>
        <line number="14">
            <code/>
        </line>
        <line hits="4" number="15">
            <code>  static List&lt;dynamic&gt; toList(dynamic x) =&gt;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="16">
            <code>      (x is List) ? x : (x as Iterable).toList();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="17">
            <code/>
        </line>
        <line number="18">
            <code>  // non-nullable value</code>
        </line>
        <line number="19">
            <code>  Cast&lt;T&gt; value&lt;T&gt;();</code>
        </line>
        <line number="20">
            <code/>
        </line>
        <line number="21">
            <code>  // nullable value</code>
        </line>
        <line hits="2" number="22">
            <code>  Cast&lt;T?&gt; nullable&lt;T&gt;([Cast&lt;T&gt;? cast]) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="23">
            <code>    final op = cast ?? value&lt;T&gt;();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="24">
            <code>    return Converter.isIdentity&lt;T&gt;(op)</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="25">
            <code>        ? value&lt;T?&gt;()</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="26">
            <code>        : (($) =&gt; ($ == null) ? null : op($));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="27">
            <code>  }</code>
        </line>
        <line number="28">
            <code/>
        </line>
        <line number="29">
            <code>  // list</code>
        </line>
        <line hits="4" number="30">
            <code>  Cast&lt;List&lt;T&gt;&gt; list&lt;T&gt;([Cast&lt;T&gt;? cast]) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="31">
            <code>    final op = cast ?? value&lt;T&gt;();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="32">
            <code>    return Converter.isIdentity&lt;T&gt;(op)</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12" number="33">
            <code>        ? ((x) =&gt; Converter.toList(x).cast&lt;T&gt;())</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="34">
            <code>        : ((x) =&gt; Converter.toList(x).map&lt;T&gt;(op).toList());</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="35">
            <code>  }</code>
        </line>
        <line number="36">
            <code/>
        </line>
        <line number="37">
            <code>  // set</code>
        </line>
        <line hits="2" number="38">
            <code>  Cast&lt;Set&lt;T&gt;&gt; set&lt;T&gt;([Cast&lt;T&gt;? cast]) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="39">
            <code>    final op = cast ?? value&lt;T&gt;();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="40">
            <code>    final toIterable = Converter.isIdentity&lt;T&gt;(op)</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="41">
            <code>        ? ((x) =&gt; (x as Iterable).cast&lt;T&gt;())</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="42">
            <code>        : ((x) =&gt; (x as Iterable).map(op));</code>
        </line>
        <line hits="2" number="43">
            <code>    final toSet = Converter.isIdentity&lt;T&gt;(op)</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="44">
            <code>        ? ((Set x) =&gt; x.cast&lt;T&gt;())</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="45">
            <code>        : ((Set x) =&gt; x.map(op).toSet());</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8" number="46">
            <code>    return (x) =&gt; (x is Set) ? toSet(x) : toIterable(x).toSet();</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line number="47">
            <code>  }</code>
        </line>
        <line number="48">
            <code/>
        </line>
        <line number="49">
            <code>  // map</code>
        </line>
        <line hits="4" number="50">
            <code>  Cast&lt;Map&lt;K, V&gt;&gt; map&lt;K, V&gt;({Cast&lt;K&gt;? kcast, Cast&lt;V&gt;? vcast}) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8" number="51">
            <code>    final kop = kcast ?? value&lt;K&gt;(), vop = vcast ?? value&lt;V&gt;();</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8" number="52">
            <code>    if (Converter.isIdentity&lt;K&gt;(kop) &amp;&amp; Converter.isIdentity&lt;V&gt;(vop)) {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8" number="53">
            <code>      return ((x) =&gt; (x as Map).cast&lt;K, V&gt;());</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line number="54">
            <code>    } else {</code>
        </line>
        <line hits="6" number="55">
            <code>      return ((x) =&gt; (x as Map).map((k, v) =&gt; MapEntry(kop(k), vop(v))));</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="56">
            <code>    }</code>
        </line>
        <line number="57">
            <code>  }</code>
        </line>
        <line number="58">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
