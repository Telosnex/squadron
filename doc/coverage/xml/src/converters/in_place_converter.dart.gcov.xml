<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-12-05" filename="in_place_converter.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="34" lines-valid="34" package="src/converters" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'converter.dart';</code>
        </line>
        <line number="2">
            <code/>
        </line>
        <line number="3">
            <code>/// This converter converts items in lists and maps **in place**. It avoids</code>
        </line>
        <line number="4">
            <code>/// creating a copy of the data to hold the conversion result. All items in</code>
        </line>
        <line number="5">
            <code>/// the list/map are converted at the time the list/map is processed.</code>
        </line>
        <line number="6">
            <code>final class InPlaceConverter extends Converter {</code>
        </line>
        <line hits="3" number="7">
            <code>  const InPlaceConverter(this.converter) : super();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="8">
            <code/>
        </line>
        <line number="9">
            <code>  final Converter converter;</code>
        </line>
        <line number="10">
            <code/>
        </line>
        <line hits="1" number="11">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="12">
            <code>  Cast&lt;T&gt; value&lt;T&gt;() =&gt; converter.value&lt;T&gt;();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="13">
            <code/>
        </line>
        <line hits="1" number="14">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="15">
            <code>  Cast&lt;List&lt;T&gt;&gt; list&lt;T&gt;([Cast&lt;T&gt;? cast]) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="16">
            <code>    final op = cast ?? value&lt;T&gt;();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5" number="17">
            <code>    return Converter.isIdentity&lt;T&gt;(op) ? converter.list&lt;T&gt;(op) : _toList(op);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="18">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="19">
            <code/>
        </line>
        <line hits="1" number="20">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="21">
            <code>  Cast&lt;Map&lt;K, V&gt;&gt; map&lt;K, V&gt;({Cast&lt;K&gt;? kcast, Cast&lt;V&gt;? vcast}) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="22">
            <code>    final kop = kcast ?? value&lt;K&gt;(), vop = vcast ?? value&lt;V&gt;();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="23">
            <code>    return (!Converter.isIdentity&lt;K&gt;(kop) || Converter.isIdentity&lt;V&gt;(vop))</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="24">
            <code>        ? converter.map&lt;K, V&gt;(kcast: kop, vcast: vop)</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="25">
            <code>        : _toMap(vop);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="26">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="27">
            <code/>
        </line>
        <line hits="2" number="28">
            <code>  static Cast&lt;List&lt;T&gt;&gt; _toList&lt;T&gt;(Cast&lt;T&gt; cast) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="29">
            <code>    return (x) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="30">
            <code>      final y = Converter.toList(x);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5" number="31">
            <code>      for (var i = y.length - 1; i &gt;= 0; i--) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="32">
            <code>        final v = y[i];</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="33">
            <code>        y[i] = (v == null) ? v : cast(v);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="34">
            <code>      }</code>
        </line>
        <line hits="2" number="35">
            <code>      return y.cast&lt;T&gt;();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="36">
            <code>    };</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="37">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="38">
            <code/>
        </line>
        <line hits="2" number="39">
            <code>  Cast&lt;Map&lt;K, V&gt;&gt; _toMap&lt;K, V&gt;(Cast&lt;V&gt; vcast) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="40">
            <code>    return (x) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="41">
            <code>      x as Map;</code>
        </line>
        <line hits="2" number="42">
            <code>      final keys = x.keys.toList();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5" number="43">
            <code>      for (var i = keys.length - 1; i &gt;= 0; i--) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="44">
            <code>        final k = keys[i], v = x[k];</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="45">
            <code>        if (v != null) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="46">
            <code>          x[k] = vcast(v);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="47">
            <code>        }</code>
        </line>
        <line number="48">
            <code>      }</code>
        </line>
        <line hits="2" number="49">
            <code>      return x.cast&lt;K, V&gt;();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="50">
            <code>    };</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="51">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="52">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
