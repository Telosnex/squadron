<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-09-22" filename="local_worker_client.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.5" lines-covered="5" lines-valid="10" package="src/local_worker" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'dart:async';</code>
        </line>
        <line number="2">
            <code/>
        </line>
        <line number="3">
            <code>import 'package:cancelation_token/cancelation_token.dart';</code>
        </line>
        <line number="4">
            <code>import 'package:using/using.dart';</code>
        </line>
        <line number="5">
            <code/>
        </line>
        <line number="6">
            <code>import '../channel.dart';</code>
        </line>
        <line number="7">
            <code>import '../tokens/_squadron_cancelation_token.dart';</code>
        </line>
        <line number="8">
            <code>import '../worker/worker_request.dart';</code>
        </line>
        <line number="9">
            <code>import '../worker_service.dart';</code>
        </line>
        <line number="10">
            <code>import 'local_worker.dart';</code>
        </line>
        <line number="11">
            <code/>
        </line>
        <line number="12">
            <code>/// Base class used to communicate with a [LocalWorker].</code>
        </line>
        <line number="13">
            <code>///</code>
        </line>
        <line number="14">
            <code>/// Typically, derived classes should add proxy methods sending [WorkerRequest]s to the worker.</code>
        </line>
        <line number="15">
            <code>class LocalWorkerClient with Releasable implements WorkerService {</code>
        </line>
        <line number="16">
            <code>  /// Create a client for a [LocalWorker]. The [channel] passed to this client must have been obtained by</code>
        </line>
        <line number="17">
            <code>  /// calling [Channel.share] on the [LocalWorker.channel].</code>
        </line>
        <line hits="1" number="18">
            <code>  LocalWorkerClient(this.channel);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="19">
            <code/>
        </line>
        <line number="20">
            <code>  /// The [Channel] to communicate with the [LocalWorker].</code>
        </line>
        <line number="21">
            <code>  final Channel channel;</code>
        </line>
        <line number="22">
            <code/>
        </line>
        <line hits="0" number="23">
            <code>  @override</code>
        </line>
        <line number="24">
            <code>  void release() {</code>
        </line>
        <line hits="0" number="25">
            <code>    channel.close();</code>
        </line>
        <line hits="0" number="26">
            <code>    super.release();</code>
        </line>
        <line number="27">
            <code>  }</code>
        </line>
        <line number="28">
            <code/>
        </line>
        <line number="29">
            <code>  /// Sends a command to the [LocalWorker].</code>
        </line>
        <line hits="1" number="30">
            <code>  Future&lt;dynamic&gt; send(int command,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="31">
            <code>          {List args = const [],</code>
        </line>
        <line number="32">
            <code>          SquadronCancelationToken? token,</code>
        </line>
        <line number="33">
            <code>          bool inspectRequest = false,</code>
        </line>
        <line number="34">
            <code>          bool inspectResponse = false}) =&gt;</code>
        </line>
        <line hits="2" number="35">
            <code>      channel.sendRequest(command, args,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="36">
            <code>          token: token?.wrap(),</code>
        </line>
        <line number="37">
            <code>          inspectRequest: inspectRequest,</code>
        </line>
        <line number="38">
            <code>          inspectResponse: inspectResponse);</code>
        </line>
        <line number="39">
            <code/>
        </line>
        <line number="40">
            <code>  /// Sends a streaming command to the [LocalWorker].</code>
        </line>
        <line hits="1" number="41">
            <code>  Stream&lt;dynamic&gt; stream(int command,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="42">
            <code>          {List args = const [],</code>
        </line>
        <line number="43">
            <code>          CancelationToken? token,</code>
        </line>
        <line number="44">
            <code>          bool inspectRequest = false,</code>
        </line>
        <line number="45">
            <code>          bool inspectResponse = false}) =&gt;</code>
        </line>
        <line hits="2" number="46">
            <code>      channel.sendStreamingRequest(command, args,</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="47">
            <code>          token: token?.wrap(),</code>
        </line>
        <line number="48">
            <code>          inspectRequest: inspectRequest,</code>
        </line>
        <line number="49">
            <code>          inspectResponse: inspectResponse);</code>
        </line>
        <line number="50">
            <code/>
        </line>
        <line number="51">
            <code>  /// Local worker clients do not need an [operations] map.</code>
        </line>
        <line number="52">
            <code>  @override</code>
        </line>
        <line number="53">
            <code>  final Map&lt;int, CommandHandler&gt; operations = WorkerService.noOperations;</code>
        </line>
        <line number="54">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
