<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-09-14" filename="lazy_in_place_converter.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.2" lines-covered="54" lines-valid="270" package="/converters" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:math';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'converter.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// This converter converts items in lists and maps **in place**. It avoids</code>
        </line>
        <line>
            <code>/// creating a copy of the data to hold the conversion result. Additionally,</code>
        </line>
        <line>
            <code>/// items in the list/map are lazily converted, i.e. only upon accessing them.</code>
        </line>
        <line>
            <code>class LazyInPlaceConverter extends Converter {</code>
        </line>
        <line hits="3">
            <code>  const LazyInPlaceConverter(this.converter) : super();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final Converter converter;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  Cast&lt;T&gt; value&lt;T&gt;() =&gt; converter.value&lt;T&gt;();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  Cast&lt;List&lt;T&gt;&gt; list&lt;T&gt;([Cast&lt;T&gt;? cast]) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    final op = cast ?? value&lt;T&gt;();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    return Converter.isIdentity&lt;T&gt;(op) ? converter.list&lt;T&gt;(op) : _toList(op);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  Cast&lt;Map&lt;K, V&gt;&gt; map&lt;K, V&gt;({Cast&lt;K&gt;? kcast, Cast&lt;V&gt;? vcast}) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    final kop = kcast ?? value&lt;K&gt;(), vop = vcast ?? value&lt;V&gt;();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    return (!Converter.isIdentity&lt;K&gt;(kop) || Converter.isIdentity&lt;V&gt;(vop))</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>        ? converter.map&lt;K, V&gt;(kcast: kop, vcast: vop)</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>        : _toMap(vop);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  static Cast&lt;List&lt;T&gt;&gt; _toList&lt;T&gt;(Cast&lt;T&gt; cast) =&gt;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      (x) =&gt; _LazyInPlaceList(x, cast);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  static Cast&lt;Map&lt;K, V&gt;&gt; _toMap&lt;K, V&gt;(Cast&lt;V&gt; vcast) =&gt;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      (x) =&gt; _LazyInPlaceMap(x, vcast);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class _LazyInPlaceList&lt;T&gt; implements List&lt;T&gt; {</code>
        </line>
        <line hits="2">
            <code>  _LazyInPlaceList(this._data, this._cast);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final List&lt;dynamic&gt; _data;</code>
        </line>
        <line>
            <code>  final Cast&lt;T&gt; _cast;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  T _get(int idx) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    dynamic v = _data[idx];</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (v != null &amp;&amp; v is! T) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      v = _cast(v);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _data[idx] = v;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>    return v;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  Iterable&lt;T&gt; _iterate() sync* {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    for (var i = 0; i &lt; length; i++) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      yield _get(i);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  List&lt;dynamic&gt; _forceCast() {</code>
        </line>
        <line hits="0">
            <code>    for (var i = length - 1; i &gt;= 0; i--) {</code>
        </line>
        <line hits="0">
            <code>      _get(i);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    return _data;</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  T get first =&gt; _get(0);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  set first(T value) =&gt; _data[0] = value;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  T get last =&gt; _get(length - 1);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  set last(T value) =&gt; _data[length - 1] = value;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  int get length =&gt; _data.length;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  set length(int value) {</code>
        </line>
        <line hits="0">
            <code>    if (value &gt; length) {</code>
        </line>
        <line>
            <code>      // make sure the list can be extended</code>
        </line>
        <line>
            <code>      // setting _data.length might succeed because the definition of _data</code>
        </line>
        <line>
            <code>      // allows nulls even if T is non-nullable</code>
        </line>
        <line hits="0">
            <code>      final test = &lt;T&gt;[];</code>
        </line>
        <line hits="0">
            <code>      test.length = 1;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    _data.length = value;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  List&lt;T&gt; operator +(List&lt;T&gt; other) {</code>
        </line>
        <line hits="0">
            <code>    final l = length, tl = l + other.length;</code>
        </line>
        <line hits="0">
            <code>    if (tl == l) return _iterate().toList();</code>
        </line>
        <line hits="0">
            <code>    final r = List&lt;T&gt;.filled(tl, other[0]);</code>
        </line>
        <line hits="0">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
        </line>
        <line hits="0">
            <code>      r[i] = _get(i);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    r.setRange(l, tl, other);</code>
        </line>
        <line>
            <code>    return r;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  T operator [](int index) =&gt; _get(index);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void operator []=(int index, T value) =&gt; _data[index] = value;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void add(T value) =&gt; _data.add(value);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void addAll(Iterable&lt;T&gt; iterable) =&gt; _data.addAll(iterable);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  bool any(bool Function(T element) test) =&gt; _iterate().any(test);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  Map&lt;int, T&gt; asMap() {</code>
        </line>
        <line hits="0">
            <code>    final r = &lt;int, T&gt;{};</code>
        </line>
        <line hits="0">
            <code>    for (var i = length; i &gt;= 0; i--) {</code>
        </line>
        <line hits="0">
            <code>      r[i] = _get(i);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>    return r;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  List&lt;R&gt; cast&lt;R&gt;() =&gt; _forceCast().cast&lt;R&gt;();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void clear() =&gt; _data.clear();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="1">
            <code>  bool contains(Object? element) =&gt; _iterate().any((v) =&gt; element == v);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  T elementAt(int index) =&gt; _get(index);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  bool every(bool Function(T element) test) =&gt; _iterate().every(test);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  Iterable&lt;U&gt; expand&lt;U&gt;(Iterable&lt;U&gt; Function(T element) toElements) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _iterate().expand(toElements);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void fillRange(int start, int end, [T? fillValue]) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _data.fillRange(start, end, fillValue);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  T firstWhere(bool Function(T element) test, {T Function()? orElse}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _iterate().firstWhere(test, orElse: orElse);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  U fold&lt;U&gt;(U initialValue, U Function(U previousValue, T element) combine) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _iterate().fold(initialValue, combine);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Iterable&lt;T&gt; followedBy(Iterable&lt;T&gt; other) =&gt; _iterate().followedBy(other);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void forEach(void Function(T element) action) =&gt; _iterate().forEach(action);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  Iterable&lt;T&gt; getRange(int start, int end) sync* {</code>
        </line>
        <line hits="0">
            <code>    for (var i = start; i &lt; end; i++) {</code>
        </line>
        <line hits="0">
            <code>      yield _get(i);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  int indexOf(T element, [int start = 0]) {</code>
        </line>
        <line hits="0">
            <code>    for (var i = start; i &lt; length; i++) {</code>
        </line>
        <line hits="0">
            <code>      if (element == _get(i)) return i;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    return -1;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  int indexWhere(bool Function(T element) test, [int start = 0]) {</code>
        </line>
        <line hits="0">
            <code>    for (var i = start; i &lt; length; i++) {</code>
        </line>
        <line hits="0">
            <code>      if (test(_get(i))) return i;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    return -1;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void insert(int index, T element) =&gt; _data.insert(index, element);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void insertAll(int index, Iterable&lt;T&gt; iterable) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _data.insertAll(index, iterable);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  bool get isEmpty =&gt; _data.isEmpty;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  bool get isNotEmpty =&gt; _data.isNotEmpty;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  Iterator&lt;T&gt; get iterator =&gt; _iterate().iterator;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  String join([String separator = ""]) =&gt; _iterate().join(separator);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  int lastIndexOf(T element, [int? start]) {</code>
        </line>
        <line hits="0">
            <code>    for (var i = start ?? (length - 1); i &gt;= 0; i--) {</code>
        </line>
        <line hits="0">
            <code>      if (element == _get(i)) return i;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    return -1;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  int lastIndexWhere(bool Function(T element) test, [int? start]) {</code>
        </line>
        <line hits="0">
            <code>    for (var i = start ?? (length - 1); i &gt;= 0; i--) {</code>
        </line>
        <line hits="0">
            <code>      if (test(_get(i))) return i;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    return -1;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  T lastWhere(bool Function(T element) test, {T Function()? orElse}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _iterate().lastWhere(test, orElse: orElse);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Iterable&lt;U&gt; map&lt;U&gt;(U Function(T e) toElement) =&gt; _iterate().map(toElement);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  T reduce(T Function(T value, T element) combine) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _iterate().reduce(combine);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  bool remove(Object? value) =&gt; _data.remove(value);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  T removeAt(int index) {</code>
        </line>
        <line hits="0">
            <code>    final v = _get(index);</code>
        </line>
        <line hits="0">
            <code>    _data.removeAt(index);</code>
        </line>
        <line>
            <code>    return v;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  T removeLast() {</code>
        </line>
        <line hits="0">
            <code>    final v = _get(length - 1);</code>
        </line>
        <line hits="0">
            <code>    _data.removeLast();</code>
        </line>
        <line>
            <code>    return v;</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void removeRange(int start, int end) =&gt; _data.removeRange(start, end);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void removeWhere(bool Function(T element) test) {</code>
        </line>
        <line hits="0">
            <code>    var i = length;</code>
        </line>
        <line hits="0">
            <code>    while (i &gt;= 0) {</code>
        </line>
        <line hits="0">
            <code>      if (test(_get(i))) {</code>
        </line>
        <line hits="0">
            <code>        final e = i + 1;</code>
        </line>
        <line hits="0">
            <code>        i--;</code>
        </line>
        <line hits="0">
            <code>        while (i &gt;= 0 &amp;&amp; test(_get(i))) {</code>
        </line>
        <line hits="0">
            <code>          i--;</code>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line hits="0">
            <code>        _data.removeRange(i + 1, e);</code>
        </line>
        <line>
            <code>      } else {</code>
        </line>
        <line hits="0">
            <code>        i--;</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void replaceRange(int start, int end, Iterable&lt;T&gt; replacements) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _data.replaceRange(start, end, replacements);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void retainWhere(bool Function(T element) test) =&gt;</code>
        </line>
        <line hits="0">
            <code>      removeWhere((e) =&gt; !test(e));</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  Iterable&lt;T&gt; get reversed sync* {</code>
        </line>
        <line hits="0">
            <code>    for (var i = length - 1; i &gt;= 0; i--) {</code>
        </line>
        <line hits="0">
            <code>      yield _get(i);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void setAll(int index, Iterable&lt;T&gt; iterable) =&gt; _data.setAll(index, iterable);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void setRange(int start, int end, Iterable&lt;T&gt; iterable,</code>
        </line>
        <line>
            <code>          [int skipCount = 0]) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _data.setRange(start, end, iterable, skipCount);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void shuffle([Random? random]) =&gt; _data.shuffle(random);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  T get single =&gt; _iterate().single;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  T singleWhere(bool Function(T element) test, {T Function()? orElse}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _iterate().singleWhere(test, orElse: orElse);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Iterable&lt;T&gt; skip(int count) sync* {</code>
        </line>
        <line hits="0">
            <code>    for (var i = count; i &lt; length; i++) {</code>
        </line>
        <line hits="0">
            <code>      yield _get(i);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  Iterable&lt;T&gt; skipWhile(bool Function(T value) test) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _iterate().skipWhile(test);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void sort([int Function(T a, T b)? compare]) {</code>
        </line>
        <line hits="0">
            <code>    _forceCast();</code>
        </line>
        <line hits="0">
            <code>    if (compare == null) {</code>
        </line>
        <line hits="0">
            <code>      final d = _data.cast&lt;T&gt;();</code>
        </line>
        <line hits="0">
            <code>      d.sort();</code>
        </line>
        <line hits="0">
            <code>      _data.setRange(0, length, d);</code>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="0">
            <code>      _data.sort((a, b) =&gt; compare(a as T, b as T));</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  List&lt;T&gt; sublist(int start, [int? end]) =&gt;</code>
        </line>
        <line hits="0">
            <code>      getRange(start, end ?? length).toList();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Iterable&lt;T&gt; take(int count) =&gt; _iterate().take(count);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  Iterable&lt;T&gt; takeWhile(bool Function(T value) test) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _iterate().takeWhile(test);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  List&lt;T&gt; toList({bool growable = true}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _iterate().toList(growable: growable);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Set&lt;T&gt; toSet() =&gt; _iterate().toSet();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Iterable&lt;T&gt; where(bool Function(T element) test) =&gt; _iterate().where(test);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Iterable&lt;U&gt; whereType&lt;U&gt;() =&gt; _iterate().whereType&lt;U&gt;();</code>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>class _LazyInPlaceMap&lt;K, V&gt; implements Map&lt;K, V&gt; {</code>
        </line>
        <line hits="2">
            <code>  _LazyInPlaceMap(this._data, this._vcast);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final Map&lt;dynamic, dynamic&gt; _data;</code>
        </line>
        <line>
            <code>  final Cast&lt;V&gt; _vcast;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  V? _get(Object? key) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    dynamic v = _data[key];</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>    if (v != null &amp;&amp; v is! V) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      v = _vcast(v);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      _data[key] = v;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="1">
            <code>    return v;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  Map&lt;dynamic, dynamic&gt; _forceCast() {</code>
        </line>
        <line hits="0">
            <code>    var keys = _data.keys.toList();</code>
        </line>
        <line hits="0">
            <code>    for (var i = keys.length - 1; i &gt;= 0; i--) {</code>
        </line>
        <line hits="0">
            <code>      _get(keys[i]);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    return _data;</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  V? operator [](Object? key) =&gt; _get(key);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void operator []=(K key, V value) =&gt; _data[key] = value;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void addAll(Map&lt;K, V&gt; other) =&gt; _data.addAll(other);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; newEntries) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _data.addEntries(newEntries);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Map&lt;RK, RV&gt; cast&lt;RK, RV&gt;() =&gt; _forceCast().cast&lt;RK, RV&gt;();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  void clear() =&gt; _data.clear();</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  bool containsKey(Object? key) =&gt; _data.containsKey(key);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  bool containsValue(Object? value) =&gt; _data.keys.any((k) =&gt; value == _get(k));</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  Iterable&lt;MapEntry&lt;K, V&gt;&gt; get entries =&gt;</code>
        </line>
        <line hits="0">
            <code>      keys.map((k) =&gt; MapEntry(k, _get(k) as V));</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void forEach(void Function(K key, V value) action) {</code>
        </line>
        <line hits="0">
            <code>    for (var k in _data.keys) {</code>
        </line>
        <line hits="0">
            <code>      action(k as K, _get(k) as V);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  bool get isEmpty =&gt; _data.isEmpty;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  bool get isNotEmpty =&gt; _data.isNotEmpty;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>  Iterable&lt;K&gt; get keys =&gt; _data.keys.cast&lt;K&gt;();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  int get length =&gt; _data.length;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  Map&lt;K2, V2&gt; map&lt;K2, V2&gt;(MapEntry&lt;K2, V2&gt; Function(K key, V value) convert) {</code>
        </line>
        <line hits="0">
            <code>    final r = &lt;K2, V2&gt;{}, keys = _data.keys.toList();</code>
        </line>
        <line hits="0">
            <code>    for (var i = keys.length - 1; i &gt;= 0; i--) {</code>
        </line>
        <line hits="0">
            <code>      final k = keys[i], e = convert(k as K, _get(k) as V);</code>
        </line>
        <line hits="0">
            <code>      r[e.key] = e.value;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="0">
            <code>    return r;</code>
        </line>
        <line hits="0">
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  V putIfAbsent(K key, V Function() ifAbsent) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _data.putIfAbsent(key, ifAbsent);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line hits="0">
            <code>  V? remove(Object? key) =&gt; _data.remove(key);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void removeWhere(bool Function(K key, V value) test) {</code>
        </line>
        <line hits="0">
            <code>    final keys = _data.keys.toList();</code>
        </line>
        <line hits="0">
            <code>    for (var i = keys.length - 1; i &gt;= 0; i--) {</code>
        </line>
        <line hits="0">
            <code>      final k = keys[i], v = _get(k);</code>
        </line>
        <line hits="0">
            <code>      if (test(k as K, v as V)) {</code>
        </line>
        <line hits="0">
            <code>        _data.remove(k);</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  V update(K key, V Function(V value) update, {V Function()? ifAbsent}) =&gt;</code>
        </line>
        <line hits="0">
            <code>      _data.update(key, (v) =&gt; (v != null &amp;&amp; v is! V) ? _vcast(v) : v,</code>
        </line>
        <line>
            <code>          ifAbsent: ifAbsent);</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  void updateAll(V Function(K key, V value) update) {</code>
        </line>
        <line hits="0">
            <code>    final keys = _data.keys.toList();</code>
        </line>
        <line hits="0">
            <code>    for (var i = keys.length - 1; i &gt;= 0; i--) {</code>
        </line>
        <line hits="0">
            <code>      final k = keys[i], v = _get(k);</code>
        </line>
        <line hits="0">
            <code>      _data[k] = update(k as K, v as V);</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>  @override</code>
        </line>
        <line>
            <code>  Iterable&lt;V&gt; get values sync* {</code>
        </line>
        <line hits="0">
            <code>    final keys = _data.keys.toList();</code>
        </line>
        <line hits="0">
            <code>    for (var i = 0; i &lt; keys.length; i++) {</code>
        </line>
        <line hits="0">
            <code>      yield _get(keys[i]) as V;</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
