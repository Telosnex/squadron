<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-09-14" filename="squadron_exception.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.875" lines-covered="21" lines-valid="24" package="/exceptions" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code>import 'dart:convert';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'package:cancelation_token/cancelation_token.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '_well_known_exceptions.dart';</code>
        </line>
        <line>
            <code>import 'worker_exception.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Base abstract class for exceptions in Squadron.</code>
        </line>
        <line>
            <code>abstract class SquadronException implements Exception {</code>
        </line>
        <line hits="20">
            <code>  SquadronException.init(this.message, [this._stackTrace]) {</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20">
            <code>    if (_stackTrace == null) {</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      try {</code>
        </line>
        <line hits="26">
            <code>        _stackTrace = StackTrace.current;</code>
            <hit count="26" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      } catch (_, st) {</code>
        </line>
        <line>
            <code>        // failed, take the opportunity to get the stack trace from this exception!</code>
        </line>
        <line hits="0">
            <code>        _stackTrace = st;</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="10">
            <code>  }</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// This method returns [error] if it is a [SquadronException] (enriching it</code>
        </line>
        <line>
            <code>  /// with [command] if it is a [WorkerException]). Otherwise, it returns a new</code>
        </line>
        <line>
            <code>  /// [WorkerException] wrapping [error] and [stackTrace].</code>
        </line>
        <line hits="16">
            <code>  static SquadronException from(Object error,</code>
            <hit count="16" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      [StackTrace? stackTrace, int? command]) {</code>
        </line>
        <line hits="16">
            <code>    if (error is WorkerException) {</code>
            <hit count="16" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      if (command != null) error.setCommand(command);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      return error;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>    } else if (error is SquadronException) {</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      return error;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    } else if (error is CanceledException) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      return error.toSquadronException();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    } else if (error is TimeoutException) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      return error.toSquadronException();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="9">
            <code>      return WorkerException(error.toString(), stackTrace, command);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="9">
            <code>  }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  final String message;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The exception's [StackTrace].</code>
        </line>
        <line hits="16">
            <code>  StackTrace? get stackTrace =&gt; _stackTrace;</code>
            <hit count="16" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>  StackTrace? _stackTrace;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>  String toString() =&gt; jsonEncode(serialize());</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Serializes the exception, i.e. returns a list of items that can cross thread boundaries.</code>
        </line>
        <line>
            <code>  List serialize();</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Deserializes a [stackTrace] if any. Returns null if no [StackTrace] is provided.</code>
        </line>
        <line hits="9">
            <code>  static StackTrace? loadStackTrace(String? stackTrace) =&gt;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>      (stackTrace == null) ? null : StackTrace.fromString(stackTrace);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
