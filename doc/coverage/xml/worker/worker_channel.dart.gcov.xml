<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-09-14" filename="worker_channel.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="2" lines-valid="2" package="/worker" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'package:logger/logger.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../_impl/xplat/_worker_channel.dart'</code>
        </line>
        <line>
            <code>    if (dart.library.io) '../_impl/native/_worker_channel.dart'</code>
        </line>
        <line>
            <code>    if (dart.library.html) '../_impl/web/_worker_channel.dart'</code>
        </line>
        <line>
            <code>    if (dart.library.js_interop) '../_impl/web/_worker_channel.dart' as impl;</code>
        </line>
        <line>
            <code>import '../channel.dart';</code>
        </line>
        <line>
            <code>import '../typedefs.dart';</code>
        </line>
        <line>
            <code>import 'worker.dart';</code>
        </line>
        <line>
            <code>import 'worker_request.dart';</code>
        </line>
        <line>
            <code>import 'worker_response.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>typedef PostRequest = void Function(WorkerRequest req);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// A [WorkerChannel] supports communication from a platform worker to the</code>
        </line>
        <line>
            <code>/// client that posted the [WorkerRequest]. It is used to send [WorkerResponse]</code>
        </line>
        <line>
            <code>/// back to the client.</code>
        </line>
        <line>
            <code>abstract class WorkerChannel {</code>
        </line>
        <line>
            <code>  /// Connects the [Channel] with the Squadron [Worker]. [channelInfo] is an</code>
        </line>
        <line>
            <code>  /// opaque object than can be deserialized as a [Channel]. This method must</code>
        </line>
        <line>
            <code>  /// be called by the worker upon startup.</code>
        </line>
        <line>
            <code>  void connect(PlatformChannel channelInfo);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse] with the specified data to the worker client.</code>
        </line>
        <line>
            <code>  /// This method must be called from the worker only. On Web patforms, this</code>
        </line>
        <line>
            <code>  /// version does not check arguments for transferable objects.</code>
        </line>
        <line>
            <code>  void reply(dynamic data);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse] with the specified data to the worker client.</code>
        </line>
        <line>
            <code>  /// This method must be called from the worker only. On Web patforms, this</code>
        </line>
        <line>
            <code>  /// version checks arguments for transferable objects.</code>
        </line>
        <line>
            <code>  void inspectAndReply(dynamic data);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse.log] with the specified data to the worker</code>
        </line>
        <line>
            <code>  /// client.</code>
        </line>
        <line>
            <code>  void log(LogEvent message);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Checks if [stream] can be streamed back to the worker client.</code>
        </line>
        <line>
            <code>  bool canStream(Stream&lt;dynamic&gt; stream);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse.closeStream] to the worker client.</code>
        </line>
        <line>
            <code>  void closeStream();</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a [WorkerResponse] with the specified error to the worker client.</code>
        </line>
        <line>
            <code>  void error(Object err, [StackTrace? stacktrace, int? command]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Deserializes a [Channel] from an opaque [channelInfo].</code>
        </line>
        <line hits="9">
            <code>  static WorkerChannel? deserialize(PlatformChannel? channelInfo,</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          [Logger? logger]) =&gt;</code>
        </line>
        <line hits="9">
            <code>      impl.deserialize(channelInfo, logger);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
