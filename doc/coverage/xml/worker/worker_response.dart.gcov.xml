<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-09-14" filename="worker_response.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9076923" lines-covered="59" lines-valid="65" package="/worker" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'dart:async';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import 'package:logger/logger.dart';</code>
        </line>
        <line>
            <code>import 'package:meta/meta.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>import '../_impl/xplat/_time_stamp.dart';</code>
        </line>
        <line>
            <code>import '../channel.dart';</code>
        </line>
        <line>
            <code>import '../exceptions/squadron_error.dart';</code>
        </line>
        <line>
            <code>import '../exceptions/squadron_exception.dart';</code>
        </line>
        <line>
            <code>import 'worker_message.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [WorkerResponse]s are used to communicate from [Worker]s to clients and</code>
        </line>
        <line>
            <code>/// carry a single piece of data. [Future]-based services simply return a</code>
        </line>
        <line>
            <code>/// single [WorkerResponse] with the result. [Stream]ing services will return</code>
        </line>
        <line>
            <code>/// one [WorkerResponse]s for each stream item and mmust send a</code>
        </line>
        <line>
            <code>/// [WorkerResponse.closeStream] message to indicate completion.</code>
        </line>
        <line>
            <code>/// [WorkerResponse]s can also send error messages and log events.</code>
        </line>
        <line>
            <code>extension type WorkerResponse._(List data) implements WorkerMessage {</code>
        </line>
        <line>
            <code>  /// [WorkerResponse] with a valid [result]. If [result] is an [Iterable] but</code>
        </line>
        <line>
            <code>  /// not a [List], it will be converted to a [List] by [wrapInPlace].</code>
        </line>
        <line hits="0">
            <code>  static WorkerResponse ready([bool status = true]) =&gt; WorkerResponse._([</code>
        </line>
        <line hits="0">
            <code>        microsecTimeStamp(), // 0 - travel time</code>
        </line>
        <line>
            <code>        status, // 1 - ready</code>
        </line>
        <line>
            <code>        null, // 2 - error</code>
        </line>
        <line>
            <code>        null, // 3 - end of stream</code>
        </line>
        <line>
            <code>        null, // 4 - log message</code>
        </line>
        <line>
            <code>      ]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [WorkerResponse] with a valid [result]. If [result] is an [Iterable] but</code>
        </line>
        <line>
            <code>  /// not a [List], it will be converted to a [List] by [wrapInPlace].</code>
        </line>
        <line hits="27">
            <code>  static WorkerResponse withResult(dynamic result) =&gt; WorkerResponse._([</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>        microsecTimeStamp(), // 0 - travel time</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        result, // 1 - result</code>
        </line>
        <line>
            <code>        null, // 2 - error</code>
        </line>
        <line>
            <code>        null, // 3 - end of stream</code>
        </line>
        <line>
            <code>        null, // 4 - log message</code>
        </line>
        <line>
            <code>      ]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [WorkerResponse] with an error message and an optional (string) [StackTrace].</code>
        </line>
        <line hits="5">
            <code>  static WorkerResponse withError(SquadronException exception,</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>          [StackTrace? stackTrace]) =&gt;</code>
        </line>
        <line hits="10">
            <code>      WorkerResponse._([</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>        microsecTimeStamp(), // 0 - travel time</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 1 - result</code>
        </line>
        <line>
            <code>        exception, // 2 - error</code>
        </line>
        <line>
            <code>        null, // 3 - end of stream</code>
        </line>
        <line>
            <code>        null, // 4 - log message</code>
        </line>
        <line>
            <code>      ]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [WorkerResponse] with log event information.</code>
        </line>
        <line hits="27">
            <code>  static WorkerResponse log(LogEvent message) =&gt; WorkerResponse._([</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        microsecTimeStamp(), // 0 - travel time</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 1 - result</code>
        </line>
        <line>
            <code>        null, // 2 - error</code>
        </line>
        <line>
            <code>        null, // 3 - end of stream</code>
        </line>
        <line hits="9">
            <code>        message.serialize(), // 4 - log message</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      ]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Special [WorkerResponse] message to indicate the end of a stream.</code>
        </line>
        <line hits="15">
            <code>  static WorkerResponse closeStream() =&gt; WorkerResponse._([</code>
            <hit count="15" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>        microsecTimeStamp(), // 0 - travel time</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        null, // 1 - result</code>
        </line>
        <line>
            <code>        null, // 2 - error</code>
        </line>
        <line>
            <code>        true, // 3 - end of stream</code>
        </line>
        <line>
            <code>        null, // 4 - log message</code>
        </line>
        <line>
            <code>      ]);</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Flag indicating the end of the [Stream]ing operation.</code>
        </line>
        <line hits="16">
            <code>  bool get endOfStream =&gt; data[_$endOfStream];</code>
            <hit count="16" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// The [WorkerResponse] exception, if any.</code>
        </line>
        <line hits="29">
            <code>  SquadronException? get error =&gt; data[_$error];</code>
            <hit count="29" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Retrieves the result associated to this [WorkerResponse]. If the</code>
        </line>
        <line>
            <code>  /// [WorkerResponse] contains an error, an the [error] exception is thrown.</code>
        </line>
        <line hits="19">
            <code>  dynamic get result {</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    final err = error;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    if (err != null) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw err;</code>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="19">
            <code>      return data[_$result];</code>
            <hit count="19" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="10">
            <code>  }</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>// 0 is reserved for travel time</code>
        </line>
        <line>
            <code>const _$result = 1;</code>
        </line>
        <line>
            <code>const _$error = 2;</code>
        </line>
        <line>
            <code>const _$endOfStream = 3;</code>
        </line>
        <line>
            <code>const _$log = 4;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>@internal</code>
        </line>
        <line>
            <code>extension WorkerResponseExt on WorkerResponse {</code>
        </line>
        <line>
            <code>  /// In-place deserialization of a [WorkerResponse] sent by the worker.</code>
        </line>
        <line>
            <code>  /// Returns `false` if the message requires no further processing (currently</code>
        </line>
        <line>
            <code>  /// used for log messages only).</code>
        </line>
        <line hits="20">
            <code>  bool unwrapInPlace(Channel channel) {</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    unwrapTravelTime();</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="29">
            <code>    final log = LogEventSerialization.deserialize(data[_$log]);</code>
            <hit count="29" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11">
            <code>    if (log != null) {</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="24">
            <code>      channel.logger?.log(log.level, log.message,</code>
            <hit count="24" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>          time: log.time, error: log.error, stackTrace: log.stackTrace);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      return false;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="47">
            <code>      data[_$error] = channel.exceptionManager.deserialize(data[_$error]);</code>
            <hit count="47" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20">
            <code>      data[_$endOfStream] ??= false;</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11">
            <code>      return true;</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="11">
            <code>  }</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// In-place serialization of a [WorkerResponse].</code>
        </line>
        <line hits="10">
            <code>  List wrapInPlace() {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    final result = data[_$result];</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12">
            <code>    if (result is Iterable &amp;&amp; result is! List) {</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      data[_$result] = result.toList();</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="24">
            <code>    data[_$error] = (data[_$error] as SquadronException?)?.serialize();</code>
            <hit count="24" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>    return data;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>  }</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="20">
            <code>  static WorkerResponse from(List data) {</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="29">
            <code>    if (data.length != 5) {</code>
            <hit count="29" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create('Invalid worker response');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="20">
            <code>    return WorkerResponse._(data);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11">
            <code>  }</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>extension LogEventSerialization on LogEvent {</code>
        </line>
        <line hits="18">
            <code>  List serialize() =&gt; [</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>        level.value,</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>        _stringify(message),</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>        microsecTimeStamp(time),</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        error?.toString(),</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>        stackTrace?.toString(),</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      ];</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>  static LogEvent? deserialize(List? props) =&gt; (props == null)</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      ? null</code>
        </line>
        <line hits="9">
            <code>      : LogEvent(</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="36">
            <code>          _getLevel((props[0] as num?)?.toInt()),</code>
            <hit count="36" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>          props[1],</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="36">
            <code>          time: fromMicrosecTimeStamp((props[2] as num?)?.toInt()),</code>
            <hit count="36" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>          error: props[3],</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="27">
            <code>          stackTrace: SquadronException.loadStackTrace(props[4]),</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        );</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="18">
            <code>  static Level _getLevel(int? value) {</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    if (value == null) return Level.debug;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="56">
            <code>    return Level.values.where((l) =&gt; l.value == value).first;</code>
            <hit count="56" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>  }</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>  static String? _stringify(dynamic message) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    if (message is Function) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      try {</code>
        </line>
        <line hits="4">
            <code>        return _stringify(message());</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      } catch (ex) {</code>
        </line>
        <line hits="0">
            <code>        return 'Deferred message failed with error: $ex';</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    } else {</code>
        </line>
        <line hits="9">
            <code>      return message.toString();</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
