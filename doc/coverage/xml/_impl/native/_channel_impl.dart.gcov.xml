<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2024-09-08" filename="_channel_impl.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.91803277" lines-covered="56" lines-valid="61" package="/_impl/native" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>part of '_channel.dart';</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// [Channel] implementation for the Native world.</code>
        </line>
        <line>
            <code>class _VmChannel implements Channel {</code>
        </line>
        <line hits="9">
            <code>  _VmChannel._(this._sendPort, this.logger, this.exceptionManager);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [SendPort] to communicate with the [Isolate] if the channel is owned by</code>
        </line>
        <line>
            <code>  /// the worker owner. Otherwise, [SendPort] to return values to the client.</code>
        </line>
        <line>
            <code>  final vm.SendPort _sendPort;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  final ExceptionManager exceptionManager;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  @override</code>
        </line>
        <line>
            <code>  final Logger? logger;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  bool _closed = false;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] serialization in Native world returns the [SendPort].</code>
        </line>
        <line hits="3">
            <code>  @override</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  PlatformChannel serialize() =&gt; _sendPort;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// [Channel] sharing in Native world returns the same instance.</code>
        </line>
        <line hits="3">
            <code>  @override</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  Channel share() =&gt; this;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>  void _postRequest(WorkerRequest req) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>    if (_closed) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0">
            <code>      throw SquadronErrorExt.create('Channel is closed');</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>    try {</code>
        </line>
        <line hits="11">
            <code>      req.cancelToken?.ensureStarted();</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="27">
            <code>      _sendPort.send(req.wrapInPlace());</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    } catch (ex, st) {</code>
        </line>
        <line hits="1">
            <code>      logger?.e(() =&gt; 'Failed to post request $req: $ex');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>      throw SquadronErrorExt.create('Failed to post request: $ex', st);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a termination [WorkerRequest] to the [vm.Isolate].</code>
        </line>
        <line hits="9">
            <code>  @override</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  FutureOr close() {</code>
        </line>
        <line hits="9">
            <code>    if (!_closed) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>      _postRequest(WorkerRequest.stop());</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="9">
            <code>      _closed = true;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a close stream [WorkerRequest] to the [vm.Isolate].</code>
        </line>
        <line hits="3">
            <code>  @override</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  FutureOr cancelStream(int streamId) {</code>
        </line>
        <line hits="3">
            <code>    if (!_closed) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>      _postRequest(WorkerRequest.cancelStream(streamId));</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Sends a cancel token [WorkerRequest] to the [vm.Isolate].</code>
        </line>
        <line hits="2">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  FutureOr cancelToken(SquadronCancelationToken? token) {</code>
        </line>
        <line hits="2">
            <code>    if (token != null &amp;&amp; !_closed) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>      _postRequest(WorkerRequest.cancel(token));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>  Stream&lt;dynamic&gt; _getResponseStream(</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    vm.ReceivePort port,</code>
        </line>
        <line>
            <code>    WorkerRequest req,</code>
        </line>
        <line>
            <code>    void Function(WorkerRequest) post, {</code>
        </line>
        <line>
            <code>    required bool streaming,</code>
        </line>
        <line>
            <code>  }) {</code>
        </line>
        <line hits="9">
            <code>    final command = req.command;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>    // send the request, return a stream of responses</code>
        </line>
        <line hits="9">
            <code>    Stream&lt;WorkerResponse&gt; $sendRequest() {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      late final ForwardStreamController&lt;WorkerResponse&gt; controller;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="9">
            <code>      void $forwardMessage(WorkerResponse msg) {</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="18">
            <code>        if (!controller.isClosed) controller.add(msg);</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>      void $forwardError(Object error, StackTrace? st) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>        if (!controller.isClosed) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>          controller.addError(SquadronException.from(error, st, command));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="18">
            <code>      controller = ForwardStreamController(onListen: () {</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        // do nothing if the controller is closed already</code>
        </line>
        <line hits="9">
            <code>        if (controller.isClosed) return;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>        // bind the controller</code>
        </line>
        <line hits="27">
            <code>        controller.attachSubscription(port.cast&lt;WorkerResponse&gt;().listen(</code>
            <hit count="27" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>              $forwardMessage,</code>
        </line>
        <line>
            <code>              onError: $forwardError,</code>
        </line>
        <line hits="9">
            <code>              onDone: controller.close,</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>              cancelOnError: false,</code>
        </line>
        <line>
            <code>            ));</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>        // send the request</code>
        </line>
        <line>
            <code>        try {</code>
        </line>
        <line hits="9">
            <code>          post(req);</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        } catch (ex, st) {</code>
        </line>
        <line hits="1">
            <code>          $forwardError(ex, st);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1">
            <code>          controller.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>        }</code>
        </line>
        <line>
            <code>      });</code>
        </line>
        <line hits="9">
            <code>      return controller.stream;</code>
            <hit count="9" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>    // return a stream of decoded responses</code>
        </line>
        <line hits="18">
            <code>    return ResultStream(this, req, $sendRequest, streaming).stream;</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// creates a [ReceivePort] and a [WorkerRequest] and sends it to the</code>
        </line>
        <line>
            <code>  /// [Isolate]. This method expects a single value from the [Isolate]</code>
        </line>
        <line hits="8">
            <code>  @override</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  Future&lt;dynamic&gt; sendRequest(</code>
        </line>
        <line>
            <code>    int command,</code>
        </line>
        <line>
            <code>    List args, {</code>
        </line>
        <line>
            <code>    SquadronCancelationToken? token,</code>
        </line>
        <line>
            <code>    bool inspectRequest = false,</code>
        </line>
        <line>
            <code>    bool inspectResponse = false,</code>
        </line>
        <line>
            <code>  }) {</code>
        </line>
        <line hits="8">
            <code>    final completer = Completer();</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    late final StreamSubscription sub;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="8">
            <code>    void $success(dynamic data) async {</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>      await sub.cancel();</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="16">
            <code>      if (!completer.isCompleted) completer.complete(data);</code>
            <hit count="16" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="3">
            <code>    void $fail(Object ex, [StackTrace? st]) async {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>      await sub.cancel();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>      if (!completer.isCompleted) completer.completeError(ex, st);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="0">
            <code>    void $done() async {</code>
        </line>
        <line hits="0">
            <code>      await sub.cancel();</code>
        </line>
        <line hits="0">
            <code>      if (!completer.isCompleted) {</code>
        </line>
        <line hits="0">
            <code>        $fail(WorkerException('No response from worker', null, command));</code>
        </line>
        <line>
            <code>      }</code>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="8">
            <code>    final receiver = vm.ReceivePort();</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>    final req = WorkerRequest.userCommand(</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>        receiver.sendPort, command, args, token, inspectResponse);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="16">
            <code>    sub = _getResponseStream(receiver, req, _postRequest, streaming: false)</code>
            <hit count="16" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>        .listen($success, onError: $fail, onDone: $done);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>    return completer.future;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>  /// Creates a [ReceivePort] and a [WorkerRequest] and sends it to the</code>
        </line>
        <line>
            <code>  /// [Isolate]. This method expects a stream of values from the [Isolate].</code>
        </line>
        <line>
            <code>  /// The [Isolate] must send a [WorkerResponse.endOfStream] to close the</code>
        </line>
        <line>
            <code>  /// [Stream].</code>
        </line>
        <line hits="5">
            <code>  @override</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  Stream&lt;dynamic&gt; sendStreamingRequest(</code>
        </line>
        <line>
            <code>    int command,</code>
        </line>
        <line>
            <code>    List args, {</code>
        </line>
        <line>
            <code>    SquadronCancelationToken? token,</code>
        </line>
        <line>
            <code>    bool inspectRequest = false,</code>
        </line>
        <line>
            <code>    bool inspectResponse = false,</code>
        </line>
        <line>
            <code>  }) {</code>
        </line>
        <line hits="5">
            <code>    final receiver = vm.ReceivePort();</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    final req = WorkerRequest.userCommand(</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>        receiver.sendPort, command, args, token, inspectResponse);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>    return _getResponseStream(receiver, req, _postRequest, streaming: true);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  }</code>
        </line>
        <line>
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
